- en: Chapter 4. Data Grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we built a data collection, and started to clean it
    by proper naming. We had already introduced, in [Chapter 1](ch02.html "Chapter 1. Introducing
    MySQL Design"), the notion of a table, which logically regroups information about
    a certain subject. Some of the columns we gathered were grouped into tables during
    the naming process. While doing so, we noticed that the process of name checking
    was sometimes leading us to decompose data into more tables, like we did for the
    `car_event` and `event` tables. The goal of the present chapter is to provide
    finishing touches to our structure, by examining the technique of grouping column
    names into tables. Our data elements won't be living "in the air"; they will have
    to be organized into tables. Exactly which columns must be placed into which table
    will be considered here.
  prefs: []
  type: TYPE_NORMAL
- en: Initial List of Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When building the structure, we can start by finding general, natural subjects
    which look promising for grouping data. These subjects will provide our initial
    list of tables—here is an abridged example of what this list might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: vehicle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vehicle sale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: customer satisfaction survey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll begin our columns grouping work by considering the `vehicle` table.
  prefs: []
  type: TYPE_NORMAL
- en: Rules for Table Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There can be more than one correct solution, but any correct solution will
    tend to respect the following principles:'
  prefs: []
  type: TYPE_NORMAL
- en: each table has a primary key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no redundant data is present when considering all tables as a whole
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all columns in a table depend directly upon all segments of the primary key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These principles will be studied in details in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Primary Keys and Table Names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by defining the concept of a **unique key**. A column on which a
    unique key is defined cannot hold the same value more than once for this table.
    The **primary key** is composed of one or more columns, it is a value that can
    be used to identify a unique row in a table. Why do we need a primary key? MySQL
    itself does not force us to have a primary key, neither a unique key nor any other
    kind of key, for a specific table. Thus MySQL puts us under no obligation to follow
    Codd's rules. However, in practice it's important to have a primary key; experience
    acquired while building web interfaces and other applications shows that it's
    very useful to be able to refer to a key identifying a row in a unique way. In
    MySQL, a primary key is a unique key where all columns have to be defined as `NOT
    NULL`; the name of this key is `PRIMARY`. Choosing the primary key is done almost
    at the same time as choosing the table's name.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the name of our tables is a delicate process. We have to be general
    enough to provide for future expansion—like the `vehicle` table instead of `car`
    and `truck`. At the same time, we try to avoid having holes—empty columns in our
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: To decide if we should have a `vehicle` table or two separate tables, we look
    at the possible attributes for each kind of vehicle. Are they common enough? Both
    vehicle types have a color, a model, a year, a serial number, and an internal
    id number. Theoretically, the list of columns must be identical for us to decide
    that a group of columns will belong to a single table; but we can cheat a bit,
    if there are only a few attributes that are different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we decide to have a `vehicle` table. For reasons explained earlier,
    we want to track a vehicle since the moment we order it—we''ll use its internal
    id number as the primary key. When designing this table, we ask ourselves whether
    this table can be used to store information about the vehicles we receive in exchange
    from the customer. The answer is *yes*, since describing a vehicle has nothing
    to do with the transactions that happen to it (new vehicle sold, used vehicle
    bought from the customer). The section *Validating the Structure* gives further
    examples that can help catching problems in the structure. Here is version 1 of
    the `vehicle` table, with column names and sample values—we mark the columns comprising
    the primary key with an asterisk:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: vehicle | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *internal_id | 123 |'
  prefs: []
  type: TYPE_TB
- en: '|   | serial_number | D8894JF |'
  prefs: []
  type: TYPE_TB
- en: '|   | brand | Licorne |'
  prefs: []
  type: TYPE_TB
- en: '|   | model | Gazelle |'
  prefs: []
  type: TYPE_TB
- en: '|   | year | 2007 |'
  prefs: []
  type: TYPE_TB
- en: '|   | color | ocean blue |'
  prefs: []
  type: TYPE_TB
- en: '|   | condition | new |'
  prefs: []
  type: TYPE_TB
- en: 'Should we include the sales info, for example, pricing and date of sale, in
    this table? We determine that the answer is *no* since a number of things can
    happen:'
  prefs: []
  type: TYPE_NORMAL
- en: the vehicle can be resold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the table might be used to hold information about a vehicle received in exchange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now have to examine our work and verify that we have respected the principles.
    We have a primary key, but what about redundancy and dependency?
  prefs: []
  type: TYPE_NORMAL
- en: Data Redundancy and Dependency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whenever possible, we should evacuate redundant data into lookup tables—also
    called reference tables and store only the value of the codes into our main tables.
    We don''t want to repeat "Licorne" into our vehicle table for each Licorne sold.
    Redundant data wastes disk space and increases processing time when doing database
    maintenance: if a modification need arises, all instances of the same data must
    be updated. Regarding the `vehicle` table, it would be redundant to store a full
    descriptive value in the `brand, model` and `color` columns—storing three codes
    will suffice.'
  prefs: []
  type: TYPE_NORMAL
- en: We have to be careful about evacuating redundant data. For example, we won't
    be coding the year; this would be too much coding for no saving—using A for 2006,
    B for 2007 makes no practical saving of space after a few thousand years! Even
    for a small number of years, the space saving would not be significant; beside,
    we would lose the ability to do computations on the year.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we verify dependency. Each column must be dependent on the primary key.
    Is the condition new/used directly dependent on the vehicle? No, if we consider
    it over the time dimension. In theory, the dealer can sell a car, and then accept
    it later in exchange. The condition is related more to the transaction itself,
    for a specific date, so it really belongs to the `sale` table—shown here in a
    non-final state. We now have version 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: vehicle | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *internal_id | 123 |'
  prefs: []
  type: TYPE_TB
- en: '|   | serial_number | D8894JF |'
  prefs: []
  type: TYPE_TB
- en: '|   | brand_code | L |'
  prefs: []
  type: TYPE_TB
- en: '|   | model_code | G |'
  prefs: []
  type: TYPE_TB
- en: '|   | year | 2007 |'
  prefs: []
  type: TYPE_TB
- en: '|   | color_code | 1A6 |'
  prefs: []
  type: TYPE_TB
- en: '| table: brand | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | L |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Licorne |'
  prefs: []
  type: TYPE_TB
- en: '| table: model | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | G |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Gazelle |'
  prefs: []
  type: TYPE_TB
- en: '| table: color | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | 1A6 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | ocean blue |'
  prefs: []
  type: TYPE_TB
- en: '| table: sale | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *date | 2006-03-17 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *internal_id | 123 |'
  prefs: []
  type: TYPE_TB
- en: '|   | condition_code | N |'
  prefs: []
  type: TYPE_TB
- en: Composite Keys
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **composite key**, also called as compound key, is a key that consists of
    more than one column.
  prefs: []
  type: TYPE_NORMAL
- en: 'When laying out our code tables, we must verify that the data grouping principles
    are also respected on those tables. Using sample data, and also our imagination
    to supplement incomplete sample data, can help to uncover problems in this area.
    In our version 2, we overlooked one possibility. What if the companies marketing
    two different brands chose an identical color code 1A6 to represent different
    colors? The same could happen for model codes so we should refine the structure
    to include the brand code—which represents Fontax, Licorne or a future brand name—into
    the `model` and `color` tables. Thus version 3 displays the two tables that have
    changed from version 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: model | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *brand_code | L |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | G |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Gazelle |'
  prefs: []
  type: TYPE_TB
- en: '| table: color | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *brand_code | L |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | 1A6 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | ocean blue |'
  prefs: []
  type: TYPE_TB
- en: 'Both the `model` and `color` tables result in having a composite key. Another
    example of a composite key was seen in [Chapter 3](ch04.html "Chapter 3. Data
    Naming"): the `car_event` table—see the *Data as a Column''s or Table''s name*
    section. In these kinds of tables, the primary key is composed of more than one
    element. This happens when we have to describe data that relates to more than
    one table. Usually, the newly formed table for `car_event` containing the car
    internal number and the event code has further attributes like the date when a
    specific event occurs for a specific car.'
  prefs: []
  type: TYPE_NORMAL
- en: Another possibility for a composite key arises when we encounter subsets like
    a department of a company. Associating an employee id to just the company code
    or just the department code would not describe the situation correctly. An employee
    id is unique only when considering both the department and the company.
  prefs: []
  type: TYPE_NORMAL
- en: We have to verify that all the non-key data elements of this table depend directly
    upon the key taken in its entirety. Here is a problematic case where the `company_name`
    column is misplaced because it's not related to `dept_code:`
  prefs: []
  type: TYPE_NORMAL
- en: '| table: company_dept | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *company_code | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *dept_code | 16 |'
  prefs: []
  type: TYPE_TB
- en: '|   | dept_name | Marketing |'
  prefs: []
  type: TYPE_TB
- en: '|   | company_name | Fontax |'
  prefs: []
  type: TYPE_TB
- en: 'The previous example is non-optimal because the company name would be present
    in every row of a table intended to describe each department. The correct structure
    for the previous example implies the use of two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: dept | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *company_code | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | 16 |'
  prefs: []
  type: TYPE_TB
- en: '|   | name | Marketing |'
  prefs: []
  type: TYPE_TB
- en: '| table: company | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | name | Fontax |'
  prefs: []
  type: TYPE_TB
- en: Improving the Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even when our table layout respects the rules, we can still refine it by looking
    at the following additional issues.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability over Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 3](ch04.html "Chapter 3. Data Naming") (section *Data that are
    Results*), we saw that we could avoid reserving a column for the tax amount, provided
    we have the exact tax rate in a reference table. However this rate could change
    so we need a more complete table that contains date ranges and the corresponding
    rate. This way, projecting the system over the time dimension, we can ensure that
    it will accommodate rate fluctuations. Note that the following `sale` table is
    not complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: sale | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *date | 2006-03-17 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *internal_id | 123 |'
  prefs: []
  type: TYPE_TB
- en: '|   | condition_code | N |'
  prefs: []
  type: TYPE_TB
- en: '| table: condition | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | N |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | New |'
  prefs: []
  type: TYPE_TB
- en: 'Comparing the `date` column from the `sale` table with the `start_date` and
    `end_date` from the following `tax_rate` table, we can find the exact tax rate
    for the date of sale:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: tax_rate | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *start_date | 2006-01-01 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *end_date | 2006-04-01 |'
  prefs: []
  type: TYPE_TB
- en: '|   | rate | .075 |'
  prefs: []
  type: TYPE_TB
- en: In fact, all tables should be analysed to find whether the time factor has been
    considered. Another example would be the `color` table. Assuming we are using
    the color codes designed by each car manufacturer, does a manufacturer reuse color
    codes in a subsequent year for a different color? If this is the case, we would
    add a `year` column to the `color` table.
  prefs: []
  type: TYPE_NORMAL
- en: Empty Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although empty columns are not necessarily problematic, having some rows where
    one or many columns are empty can reveal a structural problem: two tables folded
    into one. Let''s consider the car movements. We built a structure having a car''s
    internal number, the code of the event, and the moment. But what if some events
    need more data to be described?'
  prefs: []
  type: TYPE_NORMAL
- en: In the paper forms, we discover that when a car is washed, the initials of the
    store assistant who did the washing appear on the form, and during the interviews,
    we learned that these initials are an important data element.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we can add employee information, the employee code, to the `car_event`
    table. This would have the benefit of enabling the system to identify which store
    assistant participated to any event occurring to a car, leading to better quality
    control.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another issue that might arise is that for a specific event (say washing) we
    require more data more data like the quantity of cleaning product, and the amount
    of time used to wash. Of those two elements, one can be beneficial to improve
    our structure: storing the start and end time of the event. But adding a column
    like **quantity_cleaning_product** to the `car_event` table has to be analyzed
    carefully. For all events except washing, this column would remain empty, leading
    to exception treatment in the applications. The structure would only worsen if
    we added another column related to another special event.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Empty Columns](img/1302_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, it''s better to create another table with the same keys and the
    additional columns. We cannot avoid having some data elements in this new table
    name: `car_washing_event`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: car_washing_event | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *internal_number | 412 |'
  prefs: []
  type: TYPE_TB
- en: '|   | quantity_cleaning_product | 12 |'
  prefs: []
  type: TYPE_TB
- en: Avoiding ENUM and SET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MySQL and SQL in general offer what looks like convenient data types: `ENUM`
    and `SET` types. Both types permit us to specify a list of possible values for
    a column, along with a default value; the difference being that a `SET` column
    can hold multiple values, whereas an `ENUM` can contain only one of the potential
    values.'
  prefs: []
  type: TYPE_NORMAL
- en: We see here a very small `sale` table with the `credit_rate` column being an
    `ENUM:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When a field is defined as ENUM or SET and we are using phpMyAdmin's insertion
    or data edit panels, a dropdown list of the values is displayed so it might be
    tempting to use those data types.
  prefs: []
  type: TYPE_NORMAL
- en: '![Avoiding ENUM and SET](img/1302_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s examine the benefits of such types:'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of storing the complete value, MySQL stores only an integer index, which
    uses one or two bytes, depending on the number of values in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL itself refuses any value that is not comprised in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Even after considering these benefits, it is recommended not to use `ENUM`
    and `SET` types for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the list of possible values needs a developer action, such as a structure
    modification intervention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are limits for those types: 65535 possible values in the list; also a
    `SET` can have 64 active members, which are the chosen values in the set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's better to keep the system more simple, because if in some cases we use
    lookup tables and in other cases `ENUM` or `SET` types, the program code is more
    complex to build and maintain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It could be argued that problem number one can be solved by including in the
    application some `ALTER TABLE` statements to change the list of values, but this
    does not seem the normal way to deal with this matter. `ALTER TABLE` is a data
    definition statement that should be used during system development, not at the
    application level.
  prefs: []
  type: TYPE_NORMAL
- en: So, an `ENUM` or `SET` column should become a separate table whose primary key
    is a code. Then, the table which refers to this code simply includes it as a foreign
    key. In the case of `SET` column, a distinct table would contain the key of the
    master table plus the key of the table which contains those `SET` values.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: sale | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *internal_number | 122 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *date | 2006-05-27 |'
  prefs: []
  type: TYPE_TB
- en: '|   | credit_rate_code | F |'
  prefs: []
  type: TYPE_TB
- en: '| table: credit_rate | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *code | F |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | fixed |'
  prefs: []
  type: TYPE_TB
- en: Proper validation in the application ensures that the inserted codes belong
    to the lookup tables.
  prefs: []
  type: TYPE_NORMAL
- en: Multilingual Planning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is another benefit of using a code table: if we store the car condition
    new/used, it''s more complex to do a multi-lingual application. On the other hand,
    if we code the car''s condition, then we can have a `condition` table and a `language`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: condition | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | language_code | E |'
  prefs: []
  type: TYPE_TB
- en: '|   | condition_code | N |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | new |'
  prefs: []
  type: TYPE_TB
- en: '| table: language | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | language_code | E |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | English |'
  prefs: []
  type: TYPE_TB
- en: Validating the Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validation is done by using precise examples, asking ourselves if we have a
    column to place all information, covering all cases. Maybe there will be exceptions—what
    to do with those? Should our structure handle them? We can assess the risk factor
    associated with those exceptions, versus the cost of handling them and the possible
    loss in performance for the queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of an exception: a customer buys two cars the same day—this could
    influence the choice of primary key, if a date is part of this key, it will be
    conducive to add a column to this key: the time of day for the sale.'
  prefs: []
  type: TYPE_NORMAL
- en: The phpMyAdmin utility can prove useful here. Tables are easily built with this
    software, while its index management feature permits us to craft our primary keys.
    Then we can use the multi-table query generator to simulate various reports and
    what-ifs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that our list of columns needs to be placed into appropriate tables,
    each having a primary key and respecting some rules for increased efficiency and
    clarity. We can also improve the model by looking at the scalability and multilingual
    issues; then we learned a way to validate this model.
  prefs: []
  type: TYPE_NORMAL
