- en: Chapter 6. Supplemental Case Study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to apply our newly learned principles to a completely different
    theme. We upgrade from cars to planes, covering a simple airline system.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter's case study does not pretend to encompass the full collection
    of data from real airline—it's only a sample. Nonetheless, we'll see that the
    principles we learned previously can be applied to build and refine a correct
    and coherent data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, each airline has its own information system. We assume here that we
    have got the mandate to build an information system that encompasses many airlines.
  prefs: []
  type: TYPE_NORMAL
- en: Results from the Document Gathering Phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reviewing the airline system's current website, a booking agent's website,
    some electronic tickets, and boarding passes, we gather a large amount of information.
    We'll first express this information with sentences which present the system and
    data exchange on a rather high level. Each sentence is followed by a list of the
    data elements which we can deduce from it. An element can be present in more than
    one sentence. Refer to the *Tables and Sample Values* section for more details
    about each data element. There are also some notes that will help us in the naming
    and grouping phase.
  prefs: []
  type: TYPE_NORMAL
- en: Flight 456 of Air Quebec leaves Montreal-Trudeau airport at 22:45 on October
    2nd, 2007 heading for Paris's Charles de Gaulle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the data elements that can be obtained from the above sentence:'
  prefs: []
  type: TYPE_NORMAL
- en: flight_number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: airline_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: airport_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: flight_departure_moment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to indicate whether the airport is for departure or arrival.
  prefs: []
  type: TYPE_NORMAL
- en: The airport code for Montreal-Trudeau is YUL and the one for Charles de Gaulle
    is CDG.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data element obtained from the above sentence is:'
  prefs: []
  type: TYPE_NORMAL
- en: airport_code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Should we use the airport_code as a primary key? Maybe not, due to space considerations.
  prefs: []
  type: TYPE_NORMAL
- en: This flight is scheduled to land at 11:30 the day after (local time).
  prefs: []
  type: TYPE_NORMAL
- en: 'The data element obtained is:'
  prefs: []
  type: TYPE_NORMAL
- en: flight_arrival_moment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do we need to split the date and time into two fields? Probably not, to benefit
    from date and time calculations functions (how many hours and minutes takes a
    flight, taking the date into account).
  prefs: []
  type: TYPE_NORMAL
- en: An aircraft model APM-300 from Fontax services this flight.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: plane_model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_brand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do we need to associate the plane model to a flight, but also to which specific
    plane. (There can be more than one APM-300.)
  prefs: []
  type: TYPE_NORMAL
- en: The pilot on this flight is Dan Murray and the flight attendant is Melanie Waters.
    Other crew members are to be confirmed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: pilot_first_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pilot_last_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: flight_attendant_first_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: flight_attendant_last_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We should generalize using the notion of a crew category.
  prefs: []
  type: TYPE_NORMAL
- en: Peter Smith buys a ticket for this flight from Fantastic Tour, Inc., a booking
    agency. The ticket number is 014 88417654\. This is a one-way ticket.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: passenger_first_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: passenger_last_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: booking_agency_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ticket_number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ticket_type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll also need a primary key for the passenger and probably for the booking
    agency if we don't use its code. Should the ticket itself be represented in a
    table, or will the ticket number be part of something more general like a reservation?
  prefs: []
  type: TYPE_NORMAL
- en: For this flight, Mr. Smith is seated at 19A, located in the economy section
    of the plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: passenger_last_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: seat_id
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sections available on a plane depend not only on the plane model but also
    on the airline.
  prefs: []
  type: TYPE_NORMAL
- en: This ticket is non-refundable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data element obtained from the above sentence is:'
  prefs: []
  type: TYPE_NORMAL
- en: ticket_refundability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flight 456 can be boarded at gate number 74, 35 minutes before takeoff.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: flight_number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gate_id
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boarding_time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In economy class, passengers are entitled to one bag inside the cabin and two
    registered bags—total weight 50 kg max. Mr Smith has one registered bag, bearing
    the tag AQ636-84763.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: plane_section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: max_number_in_cabin_bags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: max_number_registered_bags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: max_weight_registered_bags_kg
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tag_id
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have detected that "class" is a synonym for "section".
  prefs: []
  type: TYPE_NORMAL
- en: 'There are information screens in the airport that indicate the state of each
    flight: on time, boarding, delayed, or cancelled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data element obtained from the above sentence is:'
  prefs: []
  type: TYPE_NORMAL
- en: flight_status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Will need to be coded (id and description).
  prefs: []
  type: TYPE_NORMAL
- en: Two meals are served on this flight. Air Quebec has arrangements with Montreal
    Chef Service for the preparation and delivery of food.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: number_meals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: airline_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: meal_supplier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Air Quebec owns four Fontax APM-300 aircraft but aircraft #302 (code-named
    Charlie) is scheduled for repairs in October 2007.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: airline_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_brand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_id
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_event_start_moment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plane_event_end_moment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each plane is affectionately nicknamed, the element for this will be "description".
    About the repairs, we generalize them with the concept of events, having a starting
    and ending moment.
  prefs: []
  type: TYPE_NORMAL
- en: Passenger Smith can use the quick reference code A6BCUD and his last name to
    access his flight information on the airline web site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data elements obtained from the above sentence are:'
  prefs: []
  type: TYPE_NORMAL
- en: passenger_last_name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web_site_quick_reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preliminary List of Data Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We list here the data elements as they can be deduced from the document gathering
    phase. In many cases, they are not in a format already suitable for the final
    model because they are prefixed with a table name. For example, a data element
    identified as `pilot_last_name` will become the column `last_name` in the `pilot`
    table. Sample values and more detailed information about each data element appear
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '| Data elements |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| flight_departure_moment | seat_id |'
  prefs: []
  type: TYPE_TB
- en: '| flight_arrival_moment | plane_section |'
  prefs: []
  type: TYPE_TB
- en: '| departure_airport_code | ticket_refundability |'
  prefs: []
  type: TYPE_TB
- en: '| arrival_airport_code | gate_id |'
  prefs: []
  type: TYPE_TB
- en: '| airline_code | boarding_time |'
  prefs: []
  type: TYPE_TB
- en: '| airline_name | max_number_in_cabin_bags |'
  prefs: []
  type: TYPE_TB
- en: '| airport_name | max_number_registered_bags |'
  prefs: []
  type: TYPE_TB
- en: '| plane_brand | max_weight_registered_bags_kg |'
  prefs: []
  type: TYPE_TB
- en: '| plane_model | tag_id |'
  prefs: []
  type: TYPE_TB
- en: '| pilot_last_name | ticket_issued_on |'
  prefs: []
  type: TYPE_TB
- en: '| pilot_first_name | number_meals |'
  prefs: []
  type: TYPE_TB
- en: '| flight_attendant_last_name | web_site_quick_reference |'
  prefs: []
  type: TYPE_TB
- en: '| flight_attendant_first_name | meal_supplier |'
  prefs: []
  type: TYPE_TB
- en: '| passenger_last_name | plane_id |'
  prefs: []
  type: TYPE_TB
- en: '| passenger_first_name | plane_event |'
  prefs: []
  type: TYPE_TB
- en: '| passenger_id | plane_event_start_moment |'
  prefs: []
  type: TYPE_TB
- en: '| booking_agency_name | plane_event_end_moment |'
  prefs: []
  type: TYPE_TB
- en: '| ticket_number | flight_status |'
  prefs: []
  type: TYPE_TB
- en: Tables and Sample Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prepare the list of tables, we start with the physical objects or persons
    we can observe in the sentences built from the documents gathering phase. Then
    we have a look at all the elements and build new tables to accommodate them.
  prefs: []
  type: TYPE_NORMAL
- en: In the following table descriptions, the table layout is followed by design
    comments when appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: Code Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually the following tables are designed first because they are easier to model
    and they are needed for establishing the relations from more complex tables.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: airport | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | international_code | YUL |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Montreal-Trudeau |'
  prefs: []
  type: TYPE_TB
- en: The airport table could contain other columns like the address, phone, and website.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: airline | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Air-Quebec |'
  prefs: []
  type: TYPE_TB
- en: '| table: plane_brand | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Fontax |'
  prefs: []
  type: TYPE_TB
- en: We avoid naming this table as `brand` because it's a too generic name.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: meal_supplier | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 9 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Montreal Chef Service |'
  prefs: []
  type: TYPE_TB
- en: Again, this table could have more details about the agency, like phone and address.
    We could also merge this table with `meal_supplier` table by adding a code identifying
    the type of company, but it's not done in the present model.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: ticket_type | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | one-way |'
  prefs: []
  type: TYPE_TB
- en: '| table: crew_category | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Pilot |'
  prefs: []
  type: TYPE_TB
- en: To avoid columns like `pilot_last_name, copilot_first_name`, we form a `crew_category`
    table. See also the related `flight_crew` table later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: ticket_refundability | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | non-refundable |'
  prefs: []
  type: TYPE_TB
- en: '| table: flight_status | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | boarding |'
  prefs: []
  type: TYPE_TB
- en: If we need to include other types of events in the model, this `event` table
    will have to be renamed as something more precise like `plane_event`, and a new
    name will be needed for our current `plane_event` table that is used to associate
    an event with a plane.
  prefs: []
  type: TYPE_NORMAL
- en: Themed Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These tables are more comprehensive than the code tables. Each one refers to
    a specific theme that needs more columns than a simple code table.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: plane | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 302 |'
  prefs: []
  type: TYPE_TB
- en: '|   | airline_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | brand_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | model_id | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | Charlie |'
  prefs: []
  type: TYPE_TB
- en: This table identifies which aircraft belongs to which airline, with the description
    being an internal means of describing this particular aircraft within the airline.
    Other fields like an aircraft serial number can be added here.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: crew | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 9 |'
  prefs: []
  type: TYPE_TB
- en: '|   | category_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | last_name | Murray |'
  prefs: []
  type: TYPE_TB
- en: '|   | first_name | Dan |'
  prefs: []
  type: TYPE_TB
- en: Passengers and crew members cannot be physically merged into one table even
    if they belong to the same flight because the set of columns used to describe
    a passenger diverges from the one associated to a crew member. We'll cover in
    the *Sample Queries* section how to produce a combined list of all persons on
    a plane.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: flight | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 34 |'
  prefs: []
  type: TYPE_TB
- en: '|   | airline_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | number | 456 |'
  prefs: []
  type: TYPE_TB
- en: '|   | departure_moment | 2007-10-02 22:45 |'
  prefs: []
  type: TYPE_TB
- en: '|   | arrival_moment | 2007-10-03 11:30 |'
  prefs: []
  type: TYPE_TB
- en: '|   | departure_airport_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | arrival_airport_id | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | plane_id | 302 |'
  prefs: []
  type: TYPE_TB
- en: '|   | meal_supplier_id | 9 |'
  prefs: []
  type: TYPE_TB
- en: '|   | number_meals | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | departure_gate | 74 |'
  prefs: []
  type: TYPE_TB
- en: '|   | arrival_gate | B65 |'
  prefs: []
  type: TYPE_TB
- en: '|   | boarding_moment | 2007-10-02 22:10 |'
  prefs: []
  type: TYPE_TB
- en: '|   | status_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: The notion of flight is central to this system, thus we'll have a `flight` table.
    This means that we have to determine a primary key and, at first sight, the flight
    number would be a good candidate—but it's not and the reason for this is that
    the flight number is not painted on an aircraft; it's only a logical way of expressing
    the movement of a plane between two airports, and also the persons or companies
    related to this movement. We note that the flight number is kept short—three or
    four digits for improved reference on all printed matter and on airport information
    screens; thus, this flight number is only meaningful when accompanied by supplemental
    information, like the airline code (AQ) or company name, and a date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping in mind that there will be other tables associated with this flight
    table, we have two choices here for the primary key:'
  prefs: []
  type: TYPE_NORMAL
- en: create a **surrogate key** (an artificial primary key whose value is not derived
    from other table's data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use a combination of columns—airline_id, flight_number, departure_moment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is better to create a surrogate key, `id`. This `id` will be propagated to
    the related tables in just one column, which could help to speed up retrieval
    times because there is just one field to compare between tables. Using the flight's
    `id` will also simplify the writing of queries. Of course we include the flight
    `number`—the information known to the public in the `flight` table but not as
    a primary key.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: reservation | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *flight_id | 34 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *passenger_id | 1302 |'
  prefs: []
  type: TYPE_TB
- en: '|   | web_site_quick_reference | KARTYU |'
  prefs: []
  type: TYPE_TB
- en: '|   | ticket_number | 014 88417654 |'
  prefs: []
  type: TYPE_TB
- en: '|   | ticket_issued_moment | 2007-01-01 12:00 |'
  prefs: []
  type: TYPE_TB
- en: '|   | booking_agency_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | ticket_refundability_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | ticket_type_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | seat | 19A |'
  prefs: []
  type: TYPE_TB
- en: '|   | section_id | 2 |'
  prefs: []
  type: TYPE_TB
- en: It would be a mistake to include columns such as `passenger1, passenger2` or
    `seat_1a, seat_1b` in the flights table. This is why we use the `reservation`
    table to hold passenger information related to a specific flight. This table could
    also be named `flight_passenger`.
  prefs: []
  type: TYPE_NORMAL
- en: Normally we would not need the `section_id` in the `reservation` table, since
    we can refer to it via the `seat_id` but the `seat_id` may be unknown at the time
    of reservation, so seat assignment can be delayed until the boarding pass is issued.
  prefs: []
  type: TYPE_NORMAL
- en: Composite-Key Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These tables have more than one key because some key segments refer to a code
    or themed table.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: plane_brand_model | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *brand_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | APM-300 |'
  prefs: []
  type: TYPE_TB
- en: Here, the `brand_id` and a unique `id` form the primary keys for the plane model.
    We want to know to which brand this model refers, and still keep integers for
    the keys instead of using APM-300 as a key value.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: plane_section | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *airline_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | description | economy |'
  prefs: []
  type: TYPE_TB
- en: Each airline can potentially describe the sections of their planes the way they
    want—some are using *hospitality* instead of *economy*.
  prefs: []
  type: TYPE_NORMAL
- en: '| table: airline_brand_model_restriction | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *airline_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *brand_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *model_id | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | max_number_in_cabin_bags | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | max_number_registered_bags | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | max_weight_registered_bags_kg | 50 |'
  prefs: []
  type: TYPE_TB
- en: '| table: plane_section_seat | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *airline_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *brand_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *model_id | 2 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *section_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *seat | 19A |'
  prefs: []
  type: TYPE_TB
- en: The `plane_section_seat` table describes which seats are located in a specific
    section of the aircraft. This is per airline, brand, model, and section, because
    different airlines could possess the same kind of aircraft but use different seat
    numbers or have a larger business section than others airlines. Also, in some
    cases, seats 1A and 1C may exist but 1B may not. Thus, we need this table to hold
    the complete list of existing seats.
  prefs: []
  type: TYPE_NORMAL
- en: '| table:flight_crew | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *flight_id | 34 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *crew_id | 9 |'
  prefs: []
  type: TYPE_TB
- en: 'With these sample values, we can deduce that Dan Murray is the pilot for flight
    456 of Air-Quebec. Another possible column in this table would be the status of
    this crew member for this flight: arrived on time, cancelled, or replaced.'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: plane_event | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *plane_id | 302 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *event_id | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *start_moment | 2008-10-01 |'
  prefs: []
  type: TYPE_TB
- en: '|   | end_moment | 2008-10-31 |'
  prefs: []
  type: TYPE_TB
- en: '| table: reservation_registered_bags | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *flight_id | 34 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *passenger_id | 1302 |'
  prefs: []
  type: TYPE_TB
- en: '|   | *tag | AQ636-84763 |'
  prefs: []
  type: TYPE_TB
- en: Other columns for tag tracking could be added here.
  prefs: []
  type: TYPE_NORMAL
- en: Airline System Data Schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here again we use phpMyAdmin's PDF schema feature to display the relations between
    tables and the keys involved.
  prefs: []
  type: TYPE_NORMAL
- en: '![Airline System Data Schema](img/1302_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sample Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a complement to the list of tables and the database schema, let's see our
    tables in action! We will enter sample values into the tables, and then build
    some SQL queries in order to pull the needed data.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting Sample Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the sample values described in the above list of tables. Please refer
    to this book's support site ([http://www.packtpub.com/support](http://www.packtpub.com/support))
    for the code download which contains the tables' definition and sample values.
  prefs: []
  type: TYPE_NORMAL
- en: Boarding Pass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A passenger can print his or her boarding pass while at home by using the website''s
    quick reference for his or her reservation, which is `KARTYU` in our example.
    Here is the generated query to retrieve the boarding pass information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing this query retrieves these results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Boarding Pass](img/1302_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Passenger List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, the airline wants a list of passengers for a specific flight; we use `flight_id`,
    which is the primary key of the `flight` table, and not the flight number because
    flight numbers are not unique.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Currently, this flight is not very popular, and it looks like Peter and Annie
    will be able to chat together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Passenger List](img/1302_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All Persons on a Flight
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the unlikely event of a plane crash, we might need to extract quickly the
    list of all persons on a flight. The following query does just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The results are sorted by last name and first name; note the "type" column that
    indicates whether this person is a passenger or a crew member.
  prefs: []
  type: TYPE_NORMAL
- en: '![All Persons on a Flight](img/1302_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the study of a few documents about an airline system, we listed the possible
    data elements that become columns grouped into tables. We carefully chose the
    primary key or keys for each table and built relations between these tables, verifying
    that all potential data elements were included in at least one table.
  prefs: []
  type: TYPE_NORMAL
