- en: Chapter 2. Getting Started with Redis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。开始使用Redis
- en: Redis is a key-value-based NoSQL datastore developed by Salvatore Sanfilippo,
    launched in 2009\. The name Redis comes from **REmote DIctionary Server**. Redis
    is a high-performing single thread server in C.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是由Salvatore Sanfilippo开发的基于键值的NoSQL数据存储，于2009年推出。Redis的名称来自于**REmote DIctionary
    Server**。Redis是用C语言编写的高性能单线程服务器。
- en: Redis can be installed on all POSIX-compliant Unix systems. Though there is
    no production grade release of a Windows system, it can still be installed in
    a Windows environment for development purposes. In this chapter, we will install
    Redis in Windows and Mac OS environments, write programs in Java, and play with
    the in-built client that comes along with the distribution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Redis可以安装在所有符合POSIX标准的Unix系统上。尽管没有Windows系统的生产级发布，但仍然可以在Windows环境中进行开发目的的安装。在本章中，我们将在Windows和Mac
    OS环境中安装Redis，用Java编写程序，并使用分发包中附带的内置客户端进行操作。
- en: Installing Redis on Windows
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Redis
- en: 'Microsoft Open Tech group has ported Redis and maintains it for win32/win64
    machines. There are two ways in which we can get started with installing Redis
    on Windows, and these are listed as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 微软开放技术组已经将Redis移植并在win32/win64机器上进行维护。有两种方法可以在Windows上安装Redis，如下所示：
- en: Working with prebuilt binaries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预构建的二进制文件
- en: Getting the code and compiling it in the Microsoft environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft环境中获取代码并编译它
- en: 'For the impatient, downloading the binaries of Redis 2.8 is an easier option.
    First things first, we need to do the following in order to get started:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于急切的人来说，下载Redis 2.8的二进制文件是一个更简单的选择。首先，我们需要按照以下步骤开始：
- en: Go to [https://github.com/MSOpenTech/redis](https://github.com/MSOpenTech/redis)
    and download the ZIP file under the **Clone in Desktop** button. For this book,
    we are going to download the latest version of Redis, that is, the `redis-2.8.zip`
    file.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/MSOpenTech/redis](https://github.com/MSOpenTech/redis)并下载**Clone
    in Desktop**按钮下的ZIP文件。在本书中，我们将下载最新版本的Redis，即`redis-2.8.zip`文件。
- en: Right-click on the link and save it in a suitable location on your Windows machine.
    I have saved it at `F:\sw2\redis\redis-2.8.zip`.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击链接并将其保存在Windows机器上的适当位置。我已经将其保存在`F:\sw2\redis\redis-2.8.zip`。
- en: Right-click and unzip the compressed file to a suitable folder. I have named
    the folder as `redis-2.8`, and the folder structure after unzipping looks similar
    to what is shown in the following screenshot:![Installing Redis on Windows](img/1794_02_01.jpg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并解压缩压缩文件到适当的文件夹。我将文件夹命名为`redis-2.8`，解压缩后的文件夹结构看起来与以下屏幕截图相似：![在Windows上安装Redis](img/1794_02_01.jpg)
- en: Folder structure after unzipping the compressed file
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 解压缩压缩文件后的文件夹结构
- en: Get inside the `bin` folder. You will find the `release` folder; when you click
    on it, you will have a list of the files inside this folder, as shown in the following
    screenshot:![Installing Redis on Windows](img/1794_02_02.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`bin`文件夹。您将找到`release`文件夹；单击它，您将看到该文件夹内的文件列表，如下面的屏幕截图所示：![在Windows上安装Redis](img/1794_02_02.jpg)
- en: Folder structure inside the bin/release folder
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: bin/release文件夹内的文件夹结构
- en: Open Command Prompt and run `redis-server.exe`. Provide the `redis-server.exe
    --maxheap 1024mb` heap size and you should see a console window popping up, similar
    to the following screenshot. In the case of Windows 7, the user might be asked
    to trust the software to proceed further.![Installing Redis on Windows](img/1794_02_03.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符并运行`redis-server.exe`。提供`redis-server.exe --maxheap 1024mb`堆大小，您应该会看到一个控制台窗口弹出，类似于以下屏幕截图。在Windows
    7的情况下，用户可能会被要求信任软件以进一步进行。![在Windows上安装Redis](img/1794_02_03.jpg)
- en: Redis server's default startup
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Redis服务器的默认启动
- en: 'Note the last line showing on the Command Prompt: **The servers now ready to
    accept connections on port 6379**.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意命令提示符上显示的最后一行：**服务器现在准备好在端口6379上接受连接**。
- en: Now, let's start a prebuilt client, which is shipped with the distribution,
    and connect to the server. The client that we will execute is a command-line interpreter,
    and when we click on it, the client program will be launched:![Installing Redis
    on Windows](img/1794_02_04.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们启动一个预构建的客户端，该客户端随分发包一起提供，并连接到服务器。我们将执行的客户端是一个命令行解释器，当我们点击它时，客户端程序将被启动：![在Windows上安装Redis](img/1794_02_04.jpg)
- en: The Redis client is started with the Redis server running
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Redis客户端在Redis服务器运行时启动
- en: Your simple installation is complete (clustered setup and other management topics
    will be taken up in later chapters).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的简单安装已完成（集群设置和其他管理主题将在后续章节中进行）。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载示例代码文件，以获取您购买的所有Packt
    Publishing图书。如果您在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: Installing Redis on Mac OS
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac OS上安装Redis
- en: 'Installing Redis is really simple on a Mac OS. Follow these steps and you are
    good to go:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS上安装Redis真的很简单。按照这些步骤，您就可以开始了：
- en: 'Download the package from Internet. For this, you can use the following command:
    `wget http://download.redis.io/releases/redis-2.8.3.tar.gz`'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从互联网下载包。为此，您可以使用以下命令：`wget http://download.redis.io/releases/redis-2.8.3.tar.gz`
- en: Untar the compressed `tar xzf redis-2.8.3.tar.gz` file.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压缩`tar xzf redis-2.8.3.tar.gz`文件。
- en: This will create a folder; go to the folder by issuing the `cd redis-2.8.3`
    command.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个文件夹；通过发出`cd redis-2.8.3`命令进入文件夹。
- en: Compile the file by issuing the `make` command. This will compile the binaries
    and create a folder structure, as shown in the following screenshot:![Installing
    Redis on Mac OS](img/1794_02_05.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出`make`命令来编译文件。这将编译二进制文件并创建文件夹结构，如下面的屏幕截图所示：![在Mac OS上安装Redis](img/1794_02_05.jpg)
- en: Folder structure for a Mac distribution
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Mac分发的文件夹结构
- en: Type the `src/redis-server` command; this will start the server, as shown in
    the following screenshot:![Installing Redis on Mac OS](img/1794_02_06.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`src/redis-server`命令；这将启动服务器，如下截图所示：![在Mac OS上安装Redis](img/1794_02_06.jpg)
- en: Starting the Redis server in the Apple environment
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在苹果环境中启动Redis服务器
- en: Your Redis server is running and it is ready to accept the requests in port
    6379\. Open another terminal and go the same folder form where you installed Redis.
    Type the command `src/redis-client`; this will start the client shell, as shown
    in the following screenshot:![Installing Redis on Mac OS](img/1794_02_07.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Redis服务器正在运行，并且准备接受端口6379上的请求。打开另一个终端并转到安装Redis的同一文件夹。输入命令`src/redis-client`；这将启动客户端shell，如下截图所示：![在Mac
    OS上安装Redis](img/1794_02_07.jpg)
- en: Redis client started in Apple environment
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在苹果环境中启动Redis客户端
- en: Your client is ready and you are ready for the Hello World program, but before
    you continue, it's better to understand a bit more about the configuration file
    called `redis.conf`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的客户端已准备就绪，您已准备好进行Hello World程序，但在继续之前，最好先了解一下名为`redis.conf`的配置文件。
- en: Introduction to redis.conf
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: redis.conf简介
- en: Redis ships with the `redis.windows.conf` file, which is located in the parent
    folder that was created when the distribution's ZIP/tarfile was uncompressed.
    Any customization needed by the server on startup can be done through this configuration
    file. If you need to include the `redis.conf` file, then provide the path to the
    file while the server starts up as an argument.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Redis附带`redis.windows.conf`文件，位于解压分发的ZIP/tar文件时创建的父文件夹中。可以通过此配置文件对服务器在启动时需要的任何自定义进行设置。如果需要包含`redis.conf`文件，则在服务器启动时提供文件路径作为参数。
- en: 'The following message will be displayed on the Command Prompt when you provide
    the configuration file at startup:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在启动时提供配置文件时，命令提示符将显示以下消息：
- en: '![Introduction to redis.conf](img/1794_02_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![redis.conf简介](img/1794_02_08.jpg)'
- en: Redis server startup with config path during the startup
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Redis服务器在启动时使用配置路径进行启动
- en: 'Redis, as mentioned, is a Unix-based software, which is ported to the Windows
    environment. A lot of configuration parameters are meant for the Unix environment;
    nevertheless, it is always good to know about the parameters that will be beneficial
    to you when moving to a Unix-based environment. These parameters are explained
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Redis是基于Unix的软件，已移植到Windows环境。许多配置参数是为Unix环境而设的；然而，了解在转移到基于Unix的环境时对您有益的参数总是好的。这些参数如下所述：
- en: '**Port 6379**: This number indicates that the server will listen to messages
    coming on port 6379\. This port number can be changed to suit your project setup,
    and the server will listen for messages on that port. This will require a server
    restart.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Port 6379**：这个数字表示服务器将监听在端口6379上的消息。此端口号可以根据您的项目设置进行更改，并且服务器将在该端口上监听消息。这将需要重新启动服务器。'
- en: '**# bind 127.0.0.1**: This is the IP address that you want your server to bind
    to. By default, this parameter is commented, which means that the server will
    listen to all the interfaces for messages.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**# bind 127.0.0.1**：这是您希望服务器绑定的IP地址。默认情况下，此参数已被注释，这意味着服务器将监听所有接口的消息。'
- en: '**Timeout 0**: This means that the server will not close the connection if
    the client is in an idle state.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Timeout 0**：这意味着如果客户端处于空闲状态，服务器将不会关闭连接。'
- en: '**tcp-keepalive 0**: This is a command to the server in order to keep the connection
    with the client open. You can make it `SO_KEEPALIVE`, which will indicate the
    server to send an `ACK` message to the client.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tcp-keepalive 0**：这是向服务器发送的命令，以保持与客户端的连接开放。您可以将其设置为`SO_KEEPALIVE`，这将指示服务器向客户端发送`ACK`消息。'
- en: '**loglevel notice**: This is the log level that you want your server to have.
    The levels of logs that you can have are debug, verbose, notice, and warning.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loglevel notice**：这是您希望服务器具有的日志级别。您可以拥有的日志级别包括debug、verbose、notice和warning。'
- en: '**logfile stdout** : This is the channel to which you want to send your log
    messages, to the command line in Windows or the terminal in the case of Unix-based
    systems.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**logfile stdout**：这是您希望将日志消息发送到的通道，在Windows中为命令行，Unix-based系统中为终端。'
- en: '**syslog-enabled no**: If this is changed to *yes*, this will send the message
    to the system log.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**syslog-enabled no**：如果更改为*yes*，则会将消息发送到系统日志。'
- en: '**dir**: This should be set to the working directory where the user wants to
    run the Redis server. This in turn will tell the Redis server to create files,
    such as server files appropriately.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dir**：这应设置为用户希望运行Redis服务器的工作目录。这将告诉Redis服务器适当地创建文件，如服务器文件。'
- en: Rest of the configuration parameters can be treated as advanced parameters,
    and we shall be using most of them in subsequent chapters when the need arises.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的配置参数可以视为高级参数，在后续章节中需要时我们将使用大部分。
- en: Hello World in Redis
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redis中的Hello World
- en: This section will excite programmers the most. Let's get our hands dirty and
    punch in some code. But, before that, we have to understand that Redis works on
    a client-server model and uses the Redis protocol to communicate with the server.
    For the client to connect to the server, the client has to know the location of
    the server. For this section, I am going to show samples using the redis-cli and
    Java clients.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分将最激发程序员的兴趣。让我们动手写一些代码。但在此之前，我们必须了解Redis是基于客户端-服务器模型工作的，并使用Redis协议与服务器通信。为了客户端连接到服务器，客户端必须知道服务器的位置。在本节中，我将展示使用redis-cli和Java客户端的示例。
- en: Hello World using redis-cli
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用redis-cli进行Hello World
- en: 'Start the Redis client Command Prompt (make sure that the server is running).
    Type in the following commands, as shown in the following screenshot, and see
    the outcome:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Redis客户端命令提示符（确保服务器正在运行）。输入以下命令，如下截图所示，并查看结果：
- en: '![Hello World using redis-cli](img/1794_02_09.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用redis-cli进行Hello World](img/1794_02_09.jpg)'
- en: Trying simple Set and Get commands using the Redis client
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用Redis客户端进行简单的Set和Get命令
- en: 'There are three parts to the command we wrote. They are explained as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们写的命令有三个部分。它们的解释如下：
- en: '`Set`: This command is used to set a value in the Redis server'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set`：此命令用于在Redis服务器中设置值'
- en: '`MSG`: This is the key for the message to be stored in the Redis server'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MSG`：这是要存储在Redis服务器中的消息的键'
- en: '`Hello World`: This is the value stored in the server for the `MSG` key'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hello World`：这是存储在服务器上`MSG`键的值'
- en: So, this clears a pattern that we have to keep in mind when working with Redis.
    Remember, Redis is a key-value NoSQL datastore. The syntax for this is `COMMAND
    <space> KEY <space> VALUE`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这清除了我们在使用Redis时必须记住的一个模式。请记住，Redis是一个键值NoSQL数据存储。其语法为`COMMAND <space> KEY
    <space> VALUE`。
- en: 'Continuing with the `Hello world` program, we will do something more. Let''s
    type in `set MSG Learning Redis` we get an error message, and when we type set
    MSG "Hello World", the value that the server is going to return is `OK`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行`Hello world`程序，我们将做更多的事情。让我们输入`set MSG Learning Redis`，我们会收到一个错误消息，当我们输入`set
    MSG "Hello World"`时，服务器将返回的值是`OK`：
- en: '![Hello World using redis-cli](img/1794_02_10.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用redis-cli的Hello World](img/1794_02_10.jpg)'
- en: Overwriting the key with a new value
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 用新值覆盖键
- en: 'The old value is overwritten with the new value for the given key. Let''s add
    another dimension to this sample, that is, open another client to the already
    existing client Command Prompt we have opened. In the second Command Prompt, let''s
    type the command and key as `get MSG`. The value it''s going to return is again
    `"Hello World"`. This is shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 给定键的旧值被新值覆盖。让我们为这个示例添加另一个维度，即打开另一个客户端以打开我们已经打开的客户端命令提示符。在第二个命令提示符中，让我们将命令和键输入为`get
    MSG`。它将返回的值再次是`"Hello World"`。如下截图所示：
- en: '![Hello World using redis-cli](img/1794_02_11.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用redis-cli的Hello World](img/1794_02_11.jpg)'
- en: Writing in one client and reading it in another client
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个客户端中写入并在另一个客户端中读取
- en: At this point, one will wonder what happens if we write a number as a value,
    maybe to store some timestamp, instead of a string.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，人们会想知道如果我们将一个数字作为值写入，也许是为了存储一些时间戳，而不是一个字符串，会发生什么。
- en: 'Let''s have the new command''s key value as `set new_msg 1234`, and when we
    write the command key to retrieve the value as `get new_msg`, we get the result
    `"1234"`. Notice the double quotes around the value; this tells us something more
    about Redis and the way it stores the data, that is, every value stored in Redis
    is of the type string:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将新命令的键值设为`set new_msg 1234`，当我们写入命令键以检索值为`get new_msg`时，我们得到结果`"1234"`。注意值周围的双引号；这告诉我们有关Redis以及它存储数据的方式的更多信息，即Redis中存储的每个值都是字符串类型：
- en: '![Hello World using redis-cli](img/1794_02_12.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用redis-cli的Hello World](img/1794_02_12.jpg)'
- en: Getting an integer value as a string
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将整数值作为字符串获取
- en: The redis-cli tool comes in handy for debugging the solution and executing commands
    to check the system and solution.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: redis-cli工具非常适用于调试解决方案并执行命令以检查系统和解决方案。
- en: The next question that needs to be answered is how to access Redis programmatically.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 需要回答的下一个问题是如何以编程方式访问Redis。
- en: Hello World using Java
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Java的Hello World
- en: In the previous section, you learned how to work with the `redis-cli.exe` application
    in order to connect to the Redis server. In this section, we will introduce a
    Java client API to connect to the Redis server and fire some commands. In all
    reality, for Redis to be used in a solution, it needs an API to connect to the
    server. There are some other attributes that an API needs rather than just connecting
    to the server, passing on commands and command parameters, and returning the result,
    but we will cover this in later chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您学习了如何使用`redis-cli.exe`应用程序来连接到Redis服务器。在本节中，我们将介绍一个Java客户端API来连接到Redis服务器并执行一些命令。实际上，要在解决方案中使用Redis，需要一个API来连接服务器。除了连接到服务器、传递命令和命令参数以及返回结果之外，API还需要一些其他属性，但我们将在后面的章节中进行介绍。
- en: The Java client API chosen to demonstrate the examples in this book is Jedis.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中选择的用于演示示例的Java客户端API是Jedis。
- en: There are three steps to run the `"Hello World"` example in Java. They are explained
    in the sections that follow.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中运行`Hello World`示例有三个步骤。它们将在接下来的章节中进行解释。
- en: Installing Jedis and creating an environment
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Jedis并创建环境
- en: '**Jedis** is *Apache License 2.0* Java client for Redis. This client will be
    used for the samples demonstrated in this book. So, the most important thing to
    get for this client is that you need to make sure that you have a development
    environment. For this book, we have chosen Eclipse as the development environment
    ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)). If you
    don''t have Eclipse, you can grab a copy and install it (it''s free and licensed).
    The examples of this book will work equally well with other integrated development
    environments. Now, perform the following steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jedis**是Redis的*Apache许可2.0* Java客户端。本书中演示示例将使用此客户端。因此，最重要的是确保您拥有开发环境。对于本书，我们选择了Eclipse作为开发环境（[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)）。如果您没有Eclipse，可以获取并安装它（它是免费的和有许可的）。本书的示例同样适用于其他集成开发环境。现在，执行以下步骤：'
- en: Open Eclipse and create a project called `learning redis`, as shown in the following
    screenshot:![Installing Jedis and creating an environment](img/1794_02_13.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Eclipse并创建一个名为`learning redis`的项目，如下截图所示：![安装Jedis并创建环境](img/1794_02_13.jpg)
- en: Creating a project in Eclipse
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个项目
- en: If you are using Maven, then add the following dependencies for Jedis:![Installing
    Jedis and creating an environment](img/1794_02_14.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Maven，则为Jedis添加以下依赖项：![安装Jedis并创建环境](img/1794_02_14.jpg)
- en: Maven dependencies for Jedis
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Jedis的Maven依赖项
- en: If you are using any other build tools, follow the instructions to add the dependency
    for Jedis accordingly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用其他构建工具，请按照说明相应地添加Jedis的依赖项。
- en: Writing the program
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写程序
- en: 'The following program in Java is written with Redis as a datastore:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Java程序是使用Redis作为数据存储的：
- en: '[PRE0]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure that your Redis server is up and running. In this sample, the port
    used here is the default port 6379.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的Redis服务器正在运行。在此示例中，使用的端口是默认端口6379。
- en: 'Let''s understand, step by step, what we are doing in the program:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解程序中正在进行的操作：
- en: We are setting up a pool of connections to connect to the Redis server. The
    pool is configured to the default IP address to which the server will bind.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在设置一个连接池，以连接到Redis服务器。池配置为服务器将绑定到的默认IP地址。
- en: We take a resource from the pool (the client stub that wraps the connection).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从池中获取资源（包装连接的客户端存根）。
- en: We set the key-value into it. This will push the value to be inserted into the
    Redis datastore.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将键值设置到其中。这将推送要插入到Redis数据存储中的值。
- en: We ask/get the value based on the key. In this case, the value inserted against
    the key in the previous step.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们根据键获取值。在这种情况下，是根据前一步中插入的键的值。
- en: We return the resource into the pool for reuse and close the pool.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将资源返回到池中以便重用，并关闭池。
- en: Shutting down the server
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭服务器
- en: 'As with any server, shutting down the server gracefully is very important.
    There are a couple of things that need to be kept in mind before you shut down
    any Redis server, which are explained here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何服务器一样，优雅地关闭服务器非常重要。在关闭任何Redis服务器之前，需要牢记几件事，这里进行了解释：
- en: Close all the client connections. For our Java program, we indicate the client
    to close all the connections by writing `"pool.destoy();"`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭所有客户端连接。对于我们的Java程序，我们通过编写`"pool.destoy();"`来指示客户端关闭所有连接。
- en: The next thing that we need to do is to go to the client prompt and order a
    server shutdown.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是转到客户端提示符并命令服务器关闭。
- en: If you intend to use Redis as a cache server, then the data it holds need not
    be saved. In this case, just type `shutdown nosave`. This will flush out all the
    data in the memory and free it.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打算将Redis用作缓存服务器，则无需保存其持有的数据。在这种情况下，只需键入`shutdown nosave`。这将清除内存中的所有数据并释放它。
- en: If you intend to save the data so that you can use it later, then you have to
    pass the `shutdown save` command. This will persist the data in the `RDB` file
    even if no save points are configured, which we will cover in later chapters.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打算保存数据以便以后使用，那么您必须传递`shutdown save`命令。即使没有配置保存点，这将使数据持久化在`RDB`文件中，我们将在后面的章节中介绍。
- en: 'The following figure shows what happens in the example from the resource life
    cycle perspective:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了从资源生命周期的角度来看示例中发生的情况：
- en: '![Shutting down the server](img/1794_02_15.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![关闭服务器](img/1794_02_15.jpg)'
- en: Managing a resource for the Jedis client
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为Jedis客户端管理资源
- en: 'We have three resources that we have to consider during the life cycle. They
    are explained as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在生命周期中，我们必须考虑三种资源。它们的解释如下：
- en: '**Jedis connection pool**: This is the pool that should get created when the
    system/application starts up. This allocates the resources for the pool. The application
    server life cycle should manage the life cycle of the pool.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jedis连接池**：这是系统/应用程序启动时应该创建的池。这为池分配资源。应用程序服务器生命周期应该管理池的生命周期。'
- en: '**Connection**: In Jedis, the client stub created wraps the connection and
    acts as a client for Redis. In the program listed earlier, the client stub is
    referenced as *Jedis* which is obtained in the `pool.getResource()`statement.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接**：在Jedis中，创建的客户端存根包装了连接并充当Redis的客户端。在前面列出的程序中，客户端存根被引用为*Jedis*，它是在`pool.getResource()`语句中获取的。'
- en: '**Request life cycle**: This is where the command is getting executed. So,
    what is basically happening here is that using the Redis protocol, the command
    and the payload is being sent to the server. The payload consists of either the
    key, if it''s a "getter," or the key and the value, if it''s a "setter". The life
    cycle is managed with a positive acknowledgement from the server. It can be a
    success or an exception if it''s a failure. In a way, we don''t need explicit
    life cycle management for this statement.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求生命周期**：这是命令正在执行的地方。因此，基本上在这里发生的是使用Redis协议，将命令和有效负载发送到服务器。有效负载包括键（如果是“getter”）或键和值（如果是“setter”）。生命周期由服务器的积极确认来管理。如果失败，它可能是成功或异常。在某种程度上，我们不需要为此语句进行显式的生命周期管理。'
- en: How do we manage connections in Jedis, and what will happen if we don't manage
    them?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在Jedis中管理连接，如果我们不管理它们会发生什么？
- en: The answer to the question *what will happen if we don't manage it* is simple.
    The pool will run out of connections and the client application will suffer. We
    have seen connection-related problems in areas such as JDBC, where the application
    suffers when there are no connections for the client to connect to server. It's
    always the server that reserves the memory for a connection, and closing the connection
    is an indication for the server to release the memory.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于问题“如果我们不管理它会发生什么”，答案很简单。池将耗尽连接，客户端应用程序将受到影响。我们在诸如JDBC之类的领域中遇到了与连接相关的问题，当客户端没有连接可连接到服务器时，应用程序会受到影响。总是服务器为连接保留内存，并关闭连接是服务器释放内存的指示。
- en: The answer to the question *how do we manage connections in Jedis* is a bit
    more interesting and requires some code changes. We will take the previous code
    example and make changes to it, where we will handle connection resource management.
    For the following example, I am adding a wrapper, but in your applications, you
    can have more exotic recipes to address the concern mentioned. That is, you can
    use Spring to inject a connection or use `cglib` to dynamically create a proxy,
    which will set the connection before the command and return the connection after
    the command.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于问题“我们如何在Jedis中管理连接”的答案有点有趣，并且需要一些代码更改。我们将采用先前的代码示例并对其进行更改，其中我们将处理连接资源管理。对于以下示例，我正在添加一个包装器，但在您的应用程序中，您可以使用更奇特的方法来解决提到的问题。也就是说，您可以使用Spring来注入连接，或者使用`cglib`动态创建代理，在命令之前设置连接并在命令之后返回连接。
- en: 'The following code is for the new Hello World program, which is now called
    `HelloWorld2`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是新的Hello World程序，现在称为`HelloWorld2`：
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is the wrapper code that handles the connection:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是处理连接的包装器代码：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Two things becomes clear in this case, which are explained here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有两件事变得清楚，这里进行了解释：
- en: We don't have to manage the connection/resources, since this will be taken care
    of by the `wrapper` class
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不必管理连接/资源，因为这将由“包装器”类来处理
- en: The number of lines of code gets reduced, since we don't have to repeat the
    code for resource management
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行数减少了，因为我们不必重复资源管理的代码
- en: Loading a test Hello World program in Redis
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Redis中加载一个测试Hello World程序
- en: Well, you have seen an example of a `Hello world` program in Java and the command
    line. But it's always good to add a load test dimension to your `Hello World`
    program. Redis comes with a tool called `redis-benchmark`, which can be found
    in the release folder.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，您已经看到了Java和命令行中的`Hello world`程序的示例。但是为您的`Hello World`程序添加一个负载测试维度总是很好的。Redis附带了一个名为`redis-benchmark`的工具，可以在发布文件夹中找到。
- en: 'The following command is going to make 100,000 calls to the Redis server:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将对Redis服务器进行10万次调用：
- en: '![Loading a test Hello World program in Redis](img/1794_02_17.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![在Redis中加载一个测试Hello World程序](img/1794_02_17.jpg)'
- en: Load testing of Hello World
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Hello World的负载测试
- en: 'The result is the total number of requests handled in a second for your machine.
    This tool comes in very handy for load testing your target environment. This is
    the snapshot of the result I got when I executed it in my Windows machine, and
    this will vary depending on the configuration of your machine and OS:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是您的机器每秒处理的请求总数。这个工具对于负载测试您的目标环境非常有用。这是我在Windows机器上执行时得到的结果的快照，这将根据您的机器和操作系统的配置而有所不同：
- en: '![Loading a test Hello World program in Redis](img/1794_02_18.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![在Redis中加载一个测试Hello World程序](img/1794_02_18.jpg)'
- en: Tool performing the load test
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 工具执行负载测试
- en: What happened over here is that `redis-benchmark` opened up 50 parallel connections
    to the Redis server and fired 10,000 requests. The requests contain Redis commands
    and a 3-byte payload. The approximate results get printed for analysis; in my
    case, the 10,000 `Set` commands took an overall of 0.30 seconds, that is, 33,670
    requests were catered to per second.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是`redis-benchmark`打开了50个并行连接到Redis服务器并发送了1万个请求。请求包含Redis命令和3字节的有效负载。近似结果被打印出来进行分析；在我的情况下，1万个`Set`命令总共花费了0.30秒，也就是说，每秒处理了33,670个请求。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Redis is a simple key-value oriented NoSQL, which can be used as a cache server
    and as a persistence server. This chapter showcased how simple it is to install
    Redis in multiple environments, including Windows (Redis can also be used in cloud
    environments, such as Amazon EC2). The installation for Windows should be used
    for development and sampling purposes only.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'Redis是一个简单的面向键值的NoSQL，可以用作缓存服务器和持久化服务器。本章展示了在多个环境中安装Redis是多么简单，包括Windows（Redis也可以在云环境中使用，如Amazon
    EC2）。Windows的安装仅用于开发和抽样目的。 '
- en: Redis has an interesting set of data structures, and it is sometimes called
    the data structure server. The next chapter will cover data structure in detail.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Redis具有一组有趣的数据结构，有时被称为数据结构服务器。下一章将详细介绍数据结构。
