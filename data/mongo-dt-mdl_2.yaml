- en: Chapter 2. Data Modeling with MongoDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用MongoDB进行数据建模
- en: Data modeling is a very important process during the conception of an application
    since this step will help you to define the necessary requirements for the database's
    construction. This definition is precisely the result of the data understanding
    acquired during the data modeling process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据建模是应用程序构思过程中非常重要的一步，因为这一步将帮助您定义数据库构建所需的必要要求。这个定义正是在数据建模过程中获得的数据理解的结果。
- en: 'As previously described, this process, regardless of the chosen data model,
    is commonly divided into two phases: one that is very close to the user''s view
    and the other that is a translation of this view to a conceptual schema. In the
    scenario of relational database modeling, the main challenge is to build a robust
    database from these two phases, with the aim of guaranteeing updates to it with
    any impact during the application''s lifecycle.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，无论选择的数据模型如何，这个过程通常分为两个阶段：一个非常接近用户视图，另一个是将这个视图转换为概念模式的阶段。在关系数据库建模的场景中，主要挑战是从这两个阶段构建一个强大的数据库，以确保在应用程序生命周期中对其进行任何影响的更新。
- en: A big advantage of NoSQL compared to relational databases is that NoSQL databases
    are more flexible at this point, due to the possibility of a schemaless model
    that, in theory, can cause less impact on the user's view if a modification in
    the data model is needed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与关系数据库相比，NoSQL数据库在这一点上更灵活，因为它可以使用无模式模型，理论上可以在数据模型需要修改时对用户视图造成较小的影响。
- en: Despite the flexibility NoSQL offers, it is important to previously know how
    we will use the data in order to model a NoSQL database. It is a good idea not
    to plan the data format to be persisted, even in a NoSQL database. Moreover, at
    first sight, this is the point where database administrators, quite used to the
    relational world, become more uncomfortable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管NoSQL提供了灵活性，但在建模NoSQL数据库时，事先了解如何使用数据是很重要的。即使在NoSQL数据库中，也最好不要计划要持久化的数据格式。此外，乍一看，这是数据库管理员，对关系世界非常熟悉的人，变得更加不舒服的地方。
- en: Relational database standards, such as SQL, brought us a sense of security and
    stability by setting up rules, norms, and criteria. On the other hand, we will
    dare to state that this security turned database designers distant of the domain
    from which the data to be stored is drawn.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库标准，如SQL，通过制定规则、规范和标准，为我们带来了安全感和稳定性。另一方面，我们敢说，这种安全感使数据库设计人员远离了要存储的数据所在的领域。
- en: The same thing happened with application developers. There is a notable divergence
    of interests among them and database administrators, especially regarding data
    models.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发人员也遇到了同样的问题。他们与数据库管理员之间存在明显的利益分歧，特别是在数据模型方面。
- en: The NoSQL databases practically bring the need for an approximation between
    database professionals and the applications, and also the need for an approximation
    between developers and databases.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库实际上带来了数据库专业人员和应用程序之间的一种接近的需求，也需要开发人员和数据库之间的一种接近。
- en: For that reason, even though you may be a data modeler/designer or a database
    administrator, don't be scared if from now on we address subjects that are out
    of your comfort zone. Be prepared to start using words common from the application
    developer's point of view, and add them to your vocabulary. This chapter will
    present the MongoDB data model along with the main concepts and structures available
    for the development and maintenance of this model.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使您可能是数据建模师/设计师或数据库管理员，如果我们从现在开始讨论超出您舒适区域的主题，也不要害怕。准备好开始使用应用程序开发人员的观点常见的词汇，并将其添加到您的词汇表中。本章将介绍MongoDB数据模型以及用于开发和维护该模型的主要概念和结构。
- en: 'This chapter will cover the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Introducing your documents and collections
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍您的文档和集合
- en: The document's characteristics and structure
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档的特征和结构
- en: Showing the document's design and patterns
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示文档的设计和模式
- en: Introducing documents and collections
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍文档和集合
- en: MongoDB has the document as a basic unity of data. The documents in MongoDB
    are represented in **JavaScript Object Notation** (**JSON**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB将文档作为数据的基本单元。MongoDB中的文档以**JavaScript对象表示法**（**JSON**）表示。
- en: Collections are groups of documents. Making an analogy, a collection is similar
    to a table in a relational model and a document is a record in this table. And
    finally, collections belong to a database in MongoDB.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是文档的组合。打个比方，集合类似于关系模型中的表，文档是该表中的记录。最后，集合属于MongoDB中的数据库。
- en: The documents are serialized on disk in a format known as **Binary JSON** (**BSON**),
    a binary representation of a JSON document.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文档以一种称为**二进制JSON**（**BSON**）的格式序列化在磁盘上，这是JSON文档的二进制表示。
- en: 'An example of a document is:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的示例是：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unlike the relational model, where you must declare a table structure, a collection
    doesn't enforce a certain structure for a document. It is possible that a collection
    contains documents with completely different structures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与关系模型不同，您必须声明表结构，集合不会强制执行文档的特定结构。一个集合可能包含完全不同结构的文档。
- en: 'We can have, for instance, on the same `users` collection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在同一个`users`集合中，我们可以有：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also have:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以有：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In addition to this, another interesting feature of MongoDB is that not just
    data is represented by documents. Basically, all user interactions with MongoDB
    are made through documents. Besides data recording, documents are a means to:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，MongoDB的另一个有趣特性是不仅数据由文档表示。基本上，所有用户与MongoDB的交互都是通过文档进行的。除了数据记录，文档还是一种：
- en: Define what data can be read, written, and/or updated in queries
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义可以在查询中读取、写入和/或更新的数据
- en: Define which fields will be updated
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义将要更新的字段
- en: Create indexes
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建索引
- en: Configure replication
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置复制
- en: Query the information from the database
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中查询信息
- en: Before we go deep into the technical details of documents, let's explore their
    structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论文档的技术细节之前，让我们探索它们的结构。
- en: JSON
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON
- en: '**JSON** is a text format for the open-standard representation of data and
    that is ideal for data traffic. To explore the JSON format deeper, you can check
    *ECMA-404 The JSON Data Interchange Standard* where the JSON format is fully described.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON**是一种用于数据的开放标准表示的文本格式，非常适合数据传输。要深入探索JSON格式，您可以查看*ECMA-404 JSON数据交换标准*，其中对JSON格式进行了全面描述。'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'JSON is described by two standards: ECMA-404 and RFC 7159\. The first one puts
    more focus on the JSON grammar and syntax, while the second provides semantic
    and security considerations.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JSON由两个标准描述：ECMA-404和RFC 7159。第一个更注重JSON语法和语法，而第二个提供了语义和安全性考虑。
- en: As the name suggests, JSON arises from the JavaScript language. It came about
    as a solution for object state transfers between the web server and the browser.
    Despite being part of JavaScript, it is possible to find generators and readers
    for JSON in almost all the most popular programming languages such as C, Java,
    and Python.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，JSON源自JavaScript语言。它作为解决方案出现，用于在Web服务器和浏览器之间传输对象状态。尽管它是JavaScript的一部分，但几乎所有最流行的编程语言（如C、Java和Python）都可以找到JSON的生成器和读取器。
- en: 'The JSON format is also considered highly friendly and human-readable. JSON
    does not depend on the platform chosen, and its specification are based on two
    data structures:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JSON格式也被认为非常友好和易读。JSON不依赖于所选择的平台，其规范基于两种数据结构：
- en: A set or group of key/value pairs
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组或一组键/值对
- en: A value ordered list
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个值有序列表
- en: 'So, in order to clarify any doubts, let''s talk about objects. Objects are
    a non-ordered collection of key/value pairs that are represented by the following
    pattern:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了澄清任何疑问，让我们谈谈对象。对象是一组非有序的键/值对，由以下模式表示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In relation to the value ordered list, a collection is represented as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于值有序列表，集合表示如下：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the JSON specification, a value can be:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在JSON规范中，值可以是：
- en: A string delimited with `" "`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`" "`括起来的字符串
- en: A number, with or without a sign, on a decimal base (base 10). This number can
    have a fractional part, delimited by a period (`.`), or an exponential part followed
    by `e` or `E`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带或不带符号的数字，以十进制（基数10）为基础。这个数字可以有一个由句点（`.`）分隔的小数部分，或者是一个指数部分，后面跟着`e`或`E`
- en: Boolean values (`true` or `false`)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值（`true`或`false`）
- en: A `null` value
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`null`值
- en: Another object
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个对象
- en: Another value ordered array
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个值有序数组
- en: 'The following diagram shows us the JSON value structure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了JSON值结构：
- en: '![JSON](img/B04075_02_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![JSON](img/B04075_02_01.jpg)'
- en: 'Here is an example of JSON code that describes a person:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是描述一个人的JSON代码示例：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: BSON
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BSON
- en: '**BSON** means **Binary JSON**, which, in other words, means binary-encoded
    serialization for JSON documents.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**BSON**意味着**Binary JSON**，换句话说，是JSON文档的二进制编码序列化。'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are seeking more knowledge on BSON, I suggest you take a look at the
    BSON specification on [http://bsonspec.org/](http://bsonspec.org/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于BSON的知识，我建议您查看[http://bsonspec.org/](http://bsonspec.org/)上的BSON规范。
- en: If we compare BSON to the other binary formats, BSON has the advantage of being
    a model that allows you more flexibility. Also, one of its characteristics is
    that it's lightweight—a feature that is very important for data transport on the
    Web.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将BSON与其他二进制格式进行比较，BSON具有更灵活的模型优势。此外，其特点之一是它的轻量级-这是Web上数据传输非常重要的特性。
- en: The BSON format was designed to be easily navigable and both encoded and decoded
    in a very efficient way for most of the programming languages that are based on
    C. This is the reason why BSON was chosen as the data format for MongoDB disk
    persistence.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: BSON格式被设计为在大多数基于C的编程语言中易于导航，并且以非常高效的方式进行编码和解码。这就是为什么BSON被选择为MongoDB磁盘持久化的数据格式的原因。
- en: 'The types of data representation in BSON are:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: BSON中的数据表示类型有：
- en: String UTF-8 (`string`)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串UTF-8（`string`）
- en: Integer 32-bit (`int32`)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数32位（`int32`）
- en: Integer 64-bit (`int64`)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数64位（`int64`）
- en: Floating point (`double`)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数（`double`）
- en: Document (`document`)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档（`document`）
- en: Array (`document`)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组（`document`）
- en: Binary data (`binary`)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制数据（`binary`）
- en: Boolean false (`\x00` or byte 0000 0000)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值false（`\x00`或字节0000 0000）
- en: Boolean true (`\x01` or byte 0000 0001)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值true（`\x01`或字节0000 0001）
- en: UTC datetime (`int64`)—the int64 is UTC milliseconds since the Unix epoch
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UTC日期时间（`int64`）- int64是自Unix纪元以来的UTC毫秒数
- en: Timestamp (`int64`)—this is the special internal type used by MongoDB replication
    and sharding; the first 4 bytes are an increment, and the last 4 are a timestamp
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间戳（`int64`）-这是MongoDB复制和分片中使用的特殊内部类型；前4个字节是增量，最后4个字节是时间戳
- en: Null value ()
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空值（）
- en: Regular expression (`cstring`)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式（`cstring`）
- en: JavaScript code (`string`)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript代码（`string`）
- en: JavaScript code w/scope (`code_w_s`)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript代码w/范围（`code_w_s`）
- en: Min key()—the special type that compares a lower value than all other possible
    BSON element values
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Min key() - 比所有其他可能的BSON元素值都要低的特殊类型
- en: Max key()—the special type that compares a higher value than all other possible
    BSON element values
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Max key() - 比所有其他可能的BSON元素值都要高的特殊类型
- en: ObjectId (`byte`*12)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象ID（`byte`*12）
- en: Characteristics of documents
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档的特征
- en: Before we go into detail about how we must model documents, we need a better
    understanding of some of its characteristics. These characteristics can determine
    your decision about how the document must be modeled.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们详细讨论如何对文档进行建模之前，我们需要更好地了解一些其特征。这些特征可以决定您对文档建模的决定。
- en: The document size
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档大小
- en: We must keep in mind that the maximum length for a BSON document is 16 MB. According
    to BSON specifications, this length is ideal for data transfers through the Web
    and to avoid the excessive use of RAM. But this is only a recommendation. Nowadays,
    a document can exceed the 16 MB length by using GridFS.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须记住，BSON文档的最大长度为16 MB。根据BSON规范，这个长度非常适合通过Web进行数据传输，并且可以避免过度使用RAM。但这只是一个建议。如今，通过使用GridFS，文档可以超过16
    MB的长度。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: GridFS allows us to store documents in MongoDB that are larger than the BSON
    maximum size, by dividing it into parts, or chunks. Each chunk is a new document
    with 255 K of size.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: GridFS允许我们将大于BSON最大大小的文档存储在MongoDB中，方法是将其分成部分或块。每个块都是一个新的文档，大小为255K。
- en: Names and values for a field in a document
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档中字段的名称和值
- en: 'There are a few things that you must know about names and values for fields
    in a document. First of all, any field''s name in a document is a string. As usual,
    we have some restrictions on field names. They are:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些关于文档中字段的名称和值的事情你必须知道。首先，文档中任何字段的名称都是一个字符串。通常情况下，我们对字段名称有一些限制。它们是：
- en: The `_id` field is reserved for a primary key
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_id`字段保留用于主键'
- en: You cannot start the name using the character `$`
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能以字符`$`开头
- en: The name cannot have a null character, or (`.`)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称不能有空字符，或（`.`）
- en: Additionally, documents that have indexed fields must respect the size limit
    for an indexed field. The values cannot exceed the maximum size of 1,024 bytes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，具有索引字段的文档必须遵守索引字段的大小限制。值不能超过1,024字节的最大大小。
- en: The document primary key
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档的主键
- en: As seen in the preceding section, the `_id` field is reserved for the primary
    key. By default, this field must be the first one in the document, even when,
    during an insertion, it is not the first field to be inserted. In these cases,
    MongoDB moves it to the first position. Also, by definition, it is in this field
    that a unique index will be created.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，`_id`字段保留用于主键。默认情况下，这个字段必须是文档中的第一个字段，即使在插入时它不是第一个要插入的字段。在这种情况下，MongoDB会将其移动到第一个位置。此外，根据定义，唯一索引将在此字段中创建。
- en: The `_id` field can have any value that is a BSON type, except the array. Moreover,
    if a document is created without an indication of the `_id` field, MongoDB will
    automatically create an `_id` field of the ObjectId type. However, this is not
    the only option. You can use any value you want to identify your document as long
    as it is unique. There is another option, that is, generating an auto-incremental
    value based on a support collection or on an optimistic loop.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`_id`字段可以有任何BSON类型的值，除了数组。此外，如果创建文档时没有指定`_id`字段，MongoDB将自动创建一个ObjectId类型的`_id`字段。但这不是唯一的选择。只要是唯一的，你可以使用任何值来标识你的文档。还有另一种选择，即基于支持集合或乐观循环生成自增值。'
- en: Support collections
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持集合
- en: In this method, we use a separate collection that will keep the last used value
    in the sequence. To increment the sequence, first we should query the last used
    value. After this, we can use the operator `$inc` to increment the value.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，我们使用一个单独的集合来保存序列中最后使用的值。要增加序列，首先我们应该查询最后使用的值。之后，我们可以使用`$inc`操作符来增加值。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a collection called `system.js` that can keep the JavaScript code in
    order to reuse it. Be careful not to include application logic in this collection.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`system.js`的集合，可以保存JavaScript代码以便重用。请注意不要在这个集合中包含应用程序逻辑。
- en: 'Let''s see an example for this method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The optimistic loop
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乐观循环
- en: 'The generation of the `_id` field by an optimistic loop is done by incrementing
    each iteration and, after that, attempting to insert it in a new document:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过乐观循环生成`_id`字段是通过递增每次迭代，然后尝试将其插入新文档：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this function, the iteration does the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，迭代执行以下操作：
- en: Searches in `targetCollection` for the maximum value for `_id`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`targetCollection`中搜索`_id`的最大值。
- en: Settles the next value for `_id`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`_id`设置下一个值。
- en: Sets the value on the document to be inserted.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置要插入的文档的值。
- en: Inserts the document.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入文档。
- en: In the case of errors due to duplicated `_id` fields, the loop repeats itself,
    or else the iteration ends.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在由于重复的`_id`字段而导致的错误情况下，循环会重复自身，否则迭代结束。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The points demonstrated here are the basics to understanding all the possibilities
    and approaches that this tool can offer. But, although we can use auto-incrementing
    fields for MongoDB, we must avoid using them because this tool does not scale
    for a huge data mass.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示的要点是理解这个工具可以提供的所有可能性和方法的基础。但是，尽管我们可以为MongoDB使用自增字段，但我们必须避免使用它们，因为这个工具不适用于大数据量的情况。
- en: Designing a document
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计文档
- en: 'At this point, I believe you must be asking yourself: if the basic structure
    of the document is JSON (something so simple and textual), what can be so complex
    about the creation of a NoSQL database?'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我相信你一定会问自己：如果文档的基本结构是JSON（一种如此简单和文本化的东西），那么创建NoSQL数据库会有什么复杂之处呢？
- en: Let's see! First of all, yes! You are right. NoSQL databases can be very simple.
    But, this does not mean that their structure will be less complex than that of
    a relational database. It will be different, though!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看！首先，是的！你是对的。NoSQL数据库可以非常简单。但是，这并不意味着它们的结构会比关系数据库更简单。它会有所不同！
- en: As previously mentioned, collections do not force you to define the document's
    structure beforehand. But this is certainly a decision that you must make at some
    point. This decision will affect important aspects, especially in matters regarding
    a query's performance.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，集合不会强制你预先定义文档的结构。但这肯定是你必须在某个时候做出的决定。这个决定将影响重要的方面，特别是与查询性能有关的方面。
- en: By now, you are likely to have also asked yourself how the applications represent
    a relationship between documents. If you did not think about this until now, it
    is not your fault. We are used to thinking about the relational world, such as
    wondering what the relationship is between a student and their classes or between
    a product and its orders.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能也问过自己应用程序如何表示文档之间的关系。如果你直到现在才想到这个问题，那不是你的错。我们习惯于思考关系世界，比如想知道学生和他们的课程之间的关系，或者产品和订单之间的关系。
- en: 'MongoDB also has its own way of representing this kind of relationship. In
    fact, there are two ways:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB也有自己表示这种关系的方式。事实上，有两种方式：
- en: Embedded documents
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式文档
- en: References
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用
- en: Working with embedded documents
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用嵌入式文档
- en: Through the use of subdocuments, we can build more complex and optimized data
    structures. Thus, when we are modeling a document, we can choose to embed related
    data in one document.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用子文档，我们可以构建更复杂和优化的数据结构。因此，当我们建模一个文档时，我们可以选择在一个文档中嵌入相关数据。
- en: The decision to embed data in one document is often related to the intention
    to get a better read performance, since with one query we can completely retrieve
    the information we need.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 决定在一个文档中嵌入数据往往与意图获得更好的读取性能有关，因为只需一个查询，我们就可以完全检索所需的信息。
- en: 'See the following example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看下面的例子：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As we can deduce, this document represents a blog post. The advantage of this
    kind of document is that, with a single query, we have all the data we need to
    present to the user. The same applies to updates: with just one query, we can
    modify the content of this document. Nevertheless, when we decide to embed data,
    we must ensure that the document does not exceed the BSON size limit of 16 MB.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以推断的，这个文档代表了一篇博客文章。这种文档的优势在于，只需一个查询，我们就可以获得向用户展示所需的所有数据。更新也是一样：只需一个查询，我们就可以修改这个文档的内容。然而，当我们决定嵌入数据时，我们必须确保文档不超过16MB的BSON大小限制。
- en: 'There is no rule when embedding data in MongoDB, but overall, we should observe:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中嵌入数据没有规则，但总体上，我们应该观察：
- en: Whether we have a one-to-one relationship between documents.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否在文档之间有一对一的关系。
- en: Whether we have a one-to-many relationship between documents, and whether the
    "many" part of the relationship is very dependent of the "one" part. This means,
    for instance, that every time we present the "one" part, we will also present
    the "many" part of the relationship.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否在文档之间有一对多的关系，以及“多”部分与“一”部分的关系非常依赖于“一”部分。这意味着，例如，每次我们展示“一”部分时，我们也会展示关系的“多”部分。
- en: If our model fits in one of the preceding scenarios, we should consider using
    embedded documents.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的模型符合前述情况之一，我们应该考虑使用嵌入式文档。
- en: Working with references
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用引用
- en: Normalization is a fundamental process to help build relational data models.
    In order to minimize redundancy, in this process we divide larger tables into
    smaller ones and define relationships among them. We can say that creating a reference
    in MongoDB is the way we have to "normalize" our model. This reference will describe
    the relationship between documents.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化是帮助构建关系数据模型的基本过程。为了最小化冗余，在这个过程中我们将较大的表分成较小的表，并在它们之间定义关系。我们可以说，在MongoDB中创建引用是我们“规范化”模型的方式。这个引用将描述文档之间的关系。
- en: You may be confused about why we are considering relationships in a non-relational
    universe, even though this does not mean that relationships are not present in
    NoSQL databases. We will very often use the concepts of relational modeling to
    solve common problems. As stated before, to eliminate redundancy, documents can
    refer to each other.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会困惑为什么我们在非关系型的世界中考虑关系，尽管这并不意味着在NoSQL数据库中不存在关系。我们经常会使用关系建模的概念来解决常见问题。正如前面所述，为了消除冗余，文档可以相互引用。
- en: 'But wait! There is something very important you should know from now on: MongoDB
    does not support joins. This means that, even with the reference to another document,
    you must perform at least two queries to get the complete information you need.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等！现在有一件非常重要的事情你应该知道：MongoDB不支持连接。这意味着，即使有对另一个文档的引用，你仍然需要至少执行两次查询才能获取完整的所需信息。
- en: 'See the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 看下面的例子：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding example, we have documents from the `products` collection.
    We can see that, in the three products'' instances, we have the same value for
    the supplier key. Instead of this repetition of data, we could have two collections:
    `products` and `suppliers`, as we can see in the following example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们有来自“products”集合的文档。我们可以看到，在这三个产品实例中，供应商键的值是相同的。除了这些重复的数据，我们可以有两个集合：“products”和“suppliers”，就像下面的例子中所示：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this particular case, with a few products by the supplier, the choice to
    reference products based on the supplier is good. However, if the scenario were
    the opposite, a better approach would be:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，对于供应商的少量产品，基于供应商引用产品是一个不错的选择。然而，如果情况相反，更好的方法是：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There is no rule for references using MongoDB, but overall, we should observe:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中使用引用没有规则，但总体上，我们应该观察：
- en: Whether we are duplicating the same information many times while embedding data
    (this shows poor reading performance)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否在嵌入数据时重复相同的信息多次（这会影响读取性能）
- en: Whether we need to represent many-to-many relationships
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否需要表示多对多的关系
- en: Whether our model is a hierarchy
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的模型是否是一个层次结构
- en: If our model fits in one of the preceding scenarios, we should consider the
    use of references.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的模型符合前述情况之一，我们应该考虑使用引用。
- en: Atomicity
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子性
- en: Another important concept that will affect our decisions when designing a document
    is atomicity. In MongoDB, operations are atomic at the document level. This means
    that we can modify one document at a time. Even if we have an operation that works
    in more than one document in a collection, this operation will happen in one document
    at a time.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计文档时，会影响我们决策的另一个重要概念是原子性。在MongoDB中，操作在文档级别是原子的。这意味着我们可以一次修改一个文档。即使我们的操作在集合中的多个文档中进行，这个操作也会一次在一个文档中进行。
- en: Hence, when we decide to model a document with embedded data, we simply write
    operations, since all the data we need is in the same document. This is opposed
    to what happens when we choose to reference data, where we require many write
    operations that are not atomic.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们决定使用嵌入数据来建模文档时，我们只需编写操作，因为我们需要的所有数据都在同一个文档中。这与选择引用数据时的情况相反，那时我们需要许多不是原子的写操作。
- en: Common document patterns
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的文档模式
- en: Now that we understood the way we can design our documents, let's take some
    examples of real-life problems, such as how to write a data model that better
    describes the relationship between entities.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何设计我们的文档，让我们来看一些现实生活中的问题示例，比如如何编写更好地描述实体之间关系的数据模型。
- en: 'This section will present you with patterns that illustrate when to embed or
    when to reference documents. Until now, we have considered as a deciding factor:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示一些模式，说明何时嵌入或引用文档。到目前为止，我们已经考虑了一个决定性因素：
- en: Whether consistency is the priority
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否一致性是优先级
- en: Whether read is the priority
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否读取是优先级
- en: Whether write is the priority
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否写入是优先级
- en: What update queries we will make
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将进行哪些更新查询
- en: Document growth
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档增长
- en: One-to-one
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一对一
- en: One-to-one relationships are simpler than the others. Most of the time, we will
    map this relationship with embedded documents, especially if it is a "contains"
    relationship.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一对一关系比其他关系更简单。大多数情况下，我们将使用嵌入文档来映射这种关系，特别是如果它是一个“包含”关系的话。
- en: 'The following example shows a customer''s document. In the first case, there
    is a reference in a `customerDetails` document; in the second, we see a reference
    with embedded data:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一个客户的文档。在第一种情况下，在`customerDetails`文档中有一个引用；在第二种情况下，我们看到了一个带有嵌入数据的引用：
- en: 'Referenced data:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用数据：
- en: '[PRE12]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With embedded data:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用嵌入数据：
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The advantage of representing the relationship with an embedded document is
    that the customer detail data is always available when we query a customer. Thus,
    we can say that a customer's details do not make sense by themselves, only alongside
    the customer data.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌入文档表示关系的优势在于，当我们查询客户时，客户详细数据始终可用。因此，我们可以说客户的详细信息本身并没有意义，只有与客户数据一起才有意义。
- en: One-to-many
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一对多
- en: One-to-many relationships are more complex than one-to-one relationships. In
    order to decide when to embed or to make references, we must consider the "many"
    side of the relationship. If the many side should be displayed with its parents,
    then we should choose to embed the data; otherwise, we can use references on the
    parents.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一对多关系比一对一关系更复杂。为了决定何时嵌入或引用，我们必须考虑关系的“多”方。如果多方应该与其父级一起显示，那么我们应该选择嵌入数据；否则，我们可以在父级上使用引用。
- en: 'Let''s see an example of `customer` and the customer''s address:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个`customer`和客户的地址的例子：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If, every time you want to display a customer''s address, you also need to
    display the customer''s name, then embedded documents are recommended:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每次您想要显示客户的地址时，还需要显示客户的姓名，那么建议使用嵌入文档：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Many-to-many
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多对多
- en: A many-to-many relationship is not something trivial, even in a relational universe.
    In the relational world, this kind of relationship is often represented as a join
    table while, in the non-relational one, it can be represented in many different
    ways.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一对多关系并不是一件微不足道的事情，即使在关系型宇宙中也是如此。在关系世界中，这种关系通常被表示为连接表，而在非关系世界中，它可以以许多不同的方式表示。
- en: 'In the following code, we will see a classic example of a `user` and `group`
    relation:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将看到一个`user`和`group`关系的经典示例：
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now let''s store the relationship in the `User` document:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在`User`文档中存储关系：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Or we can store the relationship in the `group` document:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以在`group`文档中存储关系：
- en: '[PRE18]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And, finally, let''s store the relationship in both documents:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在两个文档中存储关系：
- en: '[PRE19]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw how to build documents in MongoDB, examined their characteristics,
    and saw how they are organized into collections.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了如何在MongoDB中构建文档，检查了它们的特性，并了解了它们是如何组织成集合的。
- en: You now understand how important it is to already know the domain of the application
    in order to design the best models possible, and you saw some of the patterns
    that can help you to decide how to design your documents.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在了解了已经知道应用程序领域对于设计最佳模型有多么重要，您也看到了一些可以帮助您决定如何设计文档的模式。
- en: In the next chapter, we will see how to query these collections and modify the
    data that stored in them.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何查询这些集合并修改其中存储的数据。
