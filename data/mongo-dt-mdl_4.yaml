- en: Chapter 4. Indexing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。索引
- en: As you have seen with the subject of relational databases, indexes are important
    structures when we think of a performance boost. In fact, indexes are so important
    that for most database administrators, they are a critical tool in their search
    for the continuous improvement of database performance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在关系数据库的主题中所看到的，索引是在考虑性能提升时重要的结构。实际上，索引非常重要，以至于对于大多数数据库管理员来说，它们是搜索持续改进数据库性能的关键工具。
- en: In NoSQL databases such as MongoDB, indexing is part of a bigger strategy that
    will allow us to achieve many gains in performance and assign important behaviors
    to our database, which will be essential to the data model's maintenance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB等NoSQL数据库中，索引是更大策略的一部分，这将使我们能够在性能上获得许多收益，并为我们的数据库分配重要的行为，这对数据模型的维护至关重要。
- en: This happens because we can have indexes with very special properties in MongoDB.
    For example, we can define an index of a date typed field that will control when
    a document should be removed from the collection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在MongoDB中，我们可以有具有非常特殊属性的索引。例如，我们可以定义一个日期类型字段的索引，该索引将控制何时从集合中删除文档。
- en: 'So, in this chapter we will see:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中我们将看到：
- en: Indexing documents
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引文档
- en: Index types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引类型
- en: Special index properties
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊索引属性
- en: Indexing documents
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引文档
- en: Out of all the subjects we have been discussing in this book so far, this is
    where we will be the most at ease. The index concept is present in almost every
    relational database, so if you have any previous basic knowledge on the matter,
    you will most likely have no difficulty in this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书迄今为止讨论的所有主题中，这是我们最熟悉的地方。索引概念几乎存在于每个关系数据库中，因此如果您对此有任何基本的先前知识，您在本章中很可能不会有困难。
- en: 'But in case you feel that you are not familiar enough with the concept of indexes,
    an easy way to understand them is to draw a parallel with books. Suppose that
    we have a book with an index like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您觉得自己对索引的概念不够熟悉，理解它们的简单方法是与书籍进行类比。假设我们有一本书，其索引如下：
- en: '![Indexing documents](img/B04075_04_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![索引文档](img/B04075_04_01.jpg)'
- en: 'With this in hand, if we decide to read about the Internet, we know that on
    page **4**, we will find information on the subject. On the other hand, how would
    we be able to find information we are looking for without the page number? The
    answer is quite simple: by going through the entire book, page by page, until
    we find the word "Internet."'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，如果我们决定阅读有关互联网的信息，我们知道在第**4**页上会找到有关这个主题的信息。另一方面，如果没有页码，我们如何能找到我们正在寻找的信息呢？答案很简单：逐页浏览整本书，直到找到“互联网”这个词。
- en: As you might already know, indexes are data structures that hold part of the
    data from our main data source. In relational databases, indexes hold parts of
    a table, while in MongoDB, since indexes are on a collection level, these will
    hold part of a document. Similar to relational databases, indexes use a B-Tree
    data structure at implementation level.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经知道的那样，索引是保存来自我们主要数据源的数据部分的数据结构。在关系数据库中，索引保存表的部分，而在MongoDB中，由于索引是在集合级别上的，这些将保存文档的部分。与关系数据库类似，索引在实现级别使用B-Tree数据结构。
- en: Depending on our application's requirements, we can create indexes of fields
    or fields of embedded documents. When we create an index, it will hold a sorted
    set of values of the fields we choose.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们应用程序的要求，我们可以创建字段的索引或嵌入文档的字段。当我们创建索引时，它将保存我们选择的字段的排序值集。
- en: Thus, when we execute a query, if there is an index that covers the query criteria,
    MongoDB will use the index to limit the number of documents to be scanned.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们执行查询时，如果有一个覆盖查询条件的索引，MongoDB将使用该索引来限制要扫描的文档数量。
- en: 'We have the `customers` collection that we used in [Chapter 3](ch03.html "Chapter 3. Querying
    Documents"), *Querying Documents*, which contains these documents:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`customers`集合，我们在[第3章](ch03.html "第3章。查询文档")中使用过，*查询文档*，其中包含这些文档：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can create an index in the mongo shell on the `username` field, by using
    the `createIndex` method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在mongo shell上使用`createIndex`方法在`username`字段上创建索引：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following query will use the previously created index:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询将使用先前创建的索引：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since Version 3.0.0, the `ensureIndex` method is deprecated and is an alias
    for the `createIndex` method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 自3.0.0版本以来，`ensureIndex`方法已被弃用，并且是`createIndex`方法的别名。
- en: We could state that this is the simplest way to create and use an index in MongoDB.
    In addition to this, we can create indexes on multikey fields or in embedded documents'
    fields, for instance.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说这是在MongoDB中创建和使用索引的最简单方法。除此之外，我们还可以在多键字段或嵌入文档的字段上创建索引，例如。
- en: In the next section, we will go through all these index types.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍所有这些索引类型。
- en: Indexing a single field
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对单个字段进行索引
- en: As we already stated in the last section, the simplest way to create an index
    on MongoDB is to do so in a single field. The index could be created on a field
    of any type in the collection of documents.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中所述，在MongoDB上创建索引的最简单方法是在单个字段上这样做。索引可以在文档集合中的任何类型的字段上创建。
- en: 'Consider the `customers` collection we used before, with some modification
    to work in this section:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们之前使用过的`customers`集合，对其进行了一些修改以适应本节的工作：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following command creates an ascending index in the `username` field:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令在`username`字段中创建一个升序索引：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order to create an index in MongoDB, we use the `createIndex` method. In
    the preceding code, we just passed a single document as a parameter to the `createIndex`
    method. The document `{username: 1}` contains a reference to the field that the
    index should be creating and the order: 1 for ascending or -1 for descending.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '为了在MongoDB中创建索引，我们使用`createIndex`方法。在前面的代码中，我们只是将单个文档作为参数传递给`createIndex`方法。文档`{username:
    1}`包含对应于应该创建索引的字段和顺序的引用：1表示升序，-1表示降序。'
- en: 'Another way to create the same index, but in descending order, is:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建相同的索引的另一种方法，但按降序顺序进行：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the following query, MongoDB will use the index created in the `username`
    field to reduce the number of documents in the `customers` collection that it
    should inspect:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的查询中，MongoDB将使用在`username`字段中创建的索引来减少应该检查的`customers`集合中文档的数量：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Besides the creation of indexes on a string or the number fields in the collection
    document, we could create an index of a field in an embedded document. Therefore,
    queries such as this will use the created index:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在集合文档中的字符串或数字字段上创建索引，我们还可以在嵌入式文档的字段上创建索引。因此，这样的查询将使用创建的索引：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following code creates an index of the `state` field of the embedded address
    document:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了嵌入地址文档的`state`字段的索引：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'While a bit more complex, we can also create an index of the entire embedded
    document:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有点复杂，但我们也可以创建整个嵌入式文档的索引：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following query will use the index:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询将使用索引：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But none of these queries will do this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这些查询都不会这样做：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This happens because in order to match an embedded document, we have to match
    exactly the entire document, including the field order. The following query will
    not use the index either:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为为了匹配嵌入式文档，我们必须精确匹配整个文档，包括字段顺序。以下查询也不会使用索引：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Although the document contains all the fields, these are in a different order.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管文档包含所有字段，但这些字段的顺序不同。
- en: Before moving on to the next type of index, let's review a concept that you
    learned in [Chapter 3](ch03.html "Chapter 3. Querying Documents"), *Querying Documents*,
    the `_id` field. For every new document created in a collection, we should specify
    the `_id` field. If we do not specify it, MongoDB automatically creates one `ObjectId`
    typed for us. Furthermore, every collection automatically creates a unique ascending
    index of the `_id` field. That being said, we can state that the `_id` field is
    the document's primary key.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一种索引类型之前，让我们回顾一下您在[第3章](ch03.html "第3章。查询文档")中学到的一个概念，即`_id`字段。对于集合中创建的每个新文档，我们应该指定`_id`字段。如果我们不指定，MongoDB会自动为我们创建一个`ObjectId`类型的`_id`。此外，每个集合都会自动创建`_id`字段的唯一升序索引。也就是说，我们可以说`_id`字段是文档的主键。
- en: Indexing more than one field
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引多个字段
- en: 'In MongoDB, we can create an index that holds values for more than one field.
    We should call this kind of index a compound index. There is no big difference
    between a single field index and a compound index. The biggest difference is in
    the sort order. Before we move on to the particularities of compound indexes,
    let''s use the `customers` collection to create our first compound index:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中，我们可以创建一个保存多个字段值的索引。我们应该称这种索引为复合索引。单字段索引和复合索引之间没有太大的区别。最大的区别在于排序顺序。在我们继续讨论复合索引的特点之前，让我们使用`customers`集合来创建我们的第一个复合索引：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can imagine that an application that wants to authenticate a customer uses
    the `username` and `password` fields together in a query like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以想象一个应用程序，它想要使用`username`和`password`字段一起在查询中对客户进行身份验证。
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To enable better performance when executing this query, we can create an index
    of both the `username` and `password` fields:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在执行此查询时获得更好的性能，我们可以创建`username`和`password`字段的索引：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Nevertheless, for the following queries, does MongoDB use the compound index?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，对于以下查询，MongoDB是否使用复合索引？
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The answer is yes for `Query 1` and `Query 3`. As mentioned before, the order
    is very important in the creation of a compound index. The index created will
    have references to the documents sorted by the `username` field, and within each
    username entry, sorted by password entries. Thus, a query with only the `password`
    field as the criteria will not use the index.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Query 1`和`Query 3`的答案是肯定的。如前所述，顺序在创建复合索引时非常重要。创建的索引将引用按`username`字段排序的文档，并在每个用户名条目内，按密码条目排序。因此，只有`password`字段作为条件的查询将不使用索引。
- en: 'Let''s assume for a moment that we have the following index in the `customers`
    collection:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在`customers`集合中有以下索引：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You might be asking which queries will use our new compound index? Before answering
    that question, we need to understand a compound index concept in MongoDB: the
    **prefix**. The prefix in a compound index is a subset of the indexed fields.
    As its name suggests, it is the fields that take precedence over other fields
    in the index. In our example, both `{"address.state":1}` and `{"address.state":1,
    "address.zipcode": 1}` are index prefixes.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '您可能会问哪些查询将使用我们的新复合索引？在回答这个问题之前，我们需要了解MongoDB中的复合索引概念：**前缀**。复合索引中的前缀是索引字段的子集。顾名思义，它是索引中优先于其他字段的字段。在我们的例子中，`{"address.state":1}`和`{"address.state":1,
    "address.zipcode": 1}`都是索引前缀。'
- en: 'A query that has any index prefix will use the compound index. Therefore, we
    can deduce that:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 具有任何索引前缀的查询都将使用复合索引。因此，我们可以推断出：
- en: Queries that include the `address.state` field will use the compound index
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`address.state`字段的查询将使用复合索引
- en: Queries that include both the `address.state` and `address.zipcode` fields will
    also use the compound index
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`address.state`和`address.zipcode`字段的查询也将使用复合索引
- en: Queries with `address.state`, `address.zipcode` and `address.street` will also
    use the compound index
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有`address.state`、`address.zipcode`和`address.street`的查询也将使用复合索引
- en: Queries with both `address.state` and `address.street` will also use the compound
    index
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时具有`address.state`和`address.street`的查询也将使用复合索引
- en: 'The compound index will not be used on queries that:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 复合索引不会在以下查询中使用：
- en: Have only the `address.zipcode` field
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有`address.zipcode`字段
- en: Have only the `address.street` field
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有`address.street`字段
- en: Have both the `address.zipcode` and `address.street` fields
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时具有`address.zipcode`和`address.street`字段
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We should notice that, despite a query that has both `address.state` and `address.street`
    fields using the index, we could achieve a better performance in this query if
    we have single indexes for each field. This is explained by the fact that the
    compound index will be first sorted by `address.state`, followed by a sort on
    the `address.zipcode` field, and finally a sort on the `address.street` field.
    Thus, it is much more expensive for MongoDB to inspect this index than to inspect
    the other two indexes individually.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意，尽管查询同时使用`address.state`和`address.street`字段使用索引，如果我们为每个字段单独创建单个索引，我们可以在此查询中获得更好的性能。这是因为复合索引首先按`address.state`排序，然后按`address.zipcode`字段排序，最后按`address.street`字段排序。因此，MongoDB检查此索引要比检查其他两个索引要昂贵得多。
- en: 'So, for this query:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于此查询：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It would be more efficient if we have this index:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有这个索引将更有效：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Indexing multikey fields
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多键字段的索引
- en: Another way to create indexes in MongoDB is to create an index of an array field.
    These indexes can hold arrays of primitive values, such as strings and numbers,
    or even arrays of documents.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中创建索引的另一种方法是创建数组字段的索引。这些索引可以包含原始值的数组，例如字符串和数字，甚至包含文档的数组。
- en: We must be particularly attentive while creating multikey indexes. Especially
    when we want to create a compound multikey index. It is not possible to create
    a compound index of two array fields.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建多键索引时，我们必须特别注意。特别是当我们想要创建复合多键索引时。无法创建两个数组字段的复合索引。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The main reason why we could not create an index of parallel arrays is because
    they will require the index to include an entry in the Cartesian product of the
    compound keys, which will result in a large index.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法创建并行数组的索引的主要原因是因为它们将要求索引包括复合键的笛卡尔积中的条目，这将导致一个大型索引。
- en: 'Consider the `customers` collection with documents like this one:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑具有以下文档的`customers`集合：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can create the following indexes for this collection:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为此集合创建以下索引：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'But the following index cannot be created:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 但是无法创建以下索引：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Indexing for text search
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于文本搜索的索引
- en: Since its 2.4 version, MongoDB gives us the chance to create indexes that will
    help us in a text search. Although there are a wide variety of specialized tools
    for this, such Apache Solr, Sphinx, and ElasticSearch, most of the relational
    and NoSQL databases have full text searching natively.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.4版本以来，MongoDB为我们提供了创建索引以帮助我们进行文本搜索的机会。尽管有许多专门的工具，例如Apache Solr、Sphinx和ElasticSearch，用于此目的，但大多数关系型和NoSQL数据库都具有本地全文搜索功能。
- en: 'It is possible to create a text index of a string or an array of string fields
    in a collection. For the following examples, we will use the `products` collection
    that we also used in [Chapter 3](ch03.html "Chapter 3. Querying Documents"), *Querying
    Documents*, but with some modification:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在集合中创建字符串或字符串字段数组的文本索引。对于以下示例，我们将使用我们在[第3章](ch03.html "第3章。查询文档")中也使用的`products`集合，*查询文档*，但进行了一些修改：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can create a text index just by specifying the `text` parameter in the `createIndex`
    method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`createIndex`方法中指定`text`参数来创建文本索引：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: All the preceding commands could create a text index of the `products` collection.
    But, MongoDB has a limitation, in that we can only have one text index per collection.
    Thus, only one of the previous commands could be executed for the `products` collection.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述命令都可以创建`products`集合的文本索引。但是，MongoDB有一个限制，即每个集合只能有一个文本索引。因此，只能为`products`集合执行先前的命令中的一个。
- en: 'Despite the limitation to create only one text index per collection, it is
    possible to create a compound text index:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每个集合只能创建一个文本索引的限制，但可以创建复合文本索引：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding command creates a `text` index field for the `name` and `description`
    fields.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令为`name`和`description`字段创建了一个`text`索引字段。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A common and useful way of creating a text index of a collection is to create
    an index for all text fields of the collection. There is a special syntax for
    creating this index, which you can see as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建集合的文本索引的一种常见且有用的方法是为集合的所有文本字段创建索引。有一个特殊的语法用于创建此索引，您可以如下所示：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: For a query to use a text index, we should use the `$text` operator in it. And,
    to better understand how to create an effective query, it is good to know how
    the indexes are created. As a matter of fact, the same process is used to execute
    the query using the `$text` operator.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用文本索引进行查询，我们应该在其中使用`$text`运算符。为了更好地理解如何创建有效的查询，了解索引的创建方式是很好的。事实上，使用`$text`运算符执行查询时使用相同的过程。
- en: 'To sum up the process, we can split it into three phases:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 总结该过程，我们可以将其分为三个阶段：
- en: Tokenization
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记化
- en: Removal of suffix and/or prefix, or stemming
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除后缀和/或前缀，或词干处理
- en: Removal of stop words
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除停用词
- en: In order to optimize our queries, we can specify the language we are using in
    our text fields, and consequently in our text index, so that MongoDB will use
    a list of words in all three phases of the indexing process.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化我们的查询，我们可以指定我们在文本字段中使用的语言，因此在我们的文本索引中使用的语言，以便MongoDB将在索引过程的所有三个阶段中使用单词列表。
- en: 'Since its 2.6 version, MongoDB supports the following languages:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.6版本以来，MongoDB支持以下语言：
- en: '`da` or `danish`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`da`或`danish`'
- en: '`nl` or `dutch`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nl`或`dutch`'
- en: '`en` or `english`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en`或`english`'
- en: '`fi` or `finnish`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fi`或`finnish`'
- en: '`fr` or `french`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fr`或`french`'
- en: '`de` or `german`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`de`或`german`'
- en: '`hu` or `hungarian`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hu`或`hungarian`'
- en: '`it` or `italian`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`it`或`italian`'
- en: '`nb` or `norwegian`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nb`或`norwegian`'
- en: '`pt` or `portuguese`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pt`或`portuguese`'
- en: '`ro` or `romanian`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ro`或`romanian`'
- en: '`ru` or `russian`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ru`或`russian`'
- en: '`es` or `spanish`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`es`或`spanish`'
- en: '`sv` or `swedish`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sv`或`swedish`'
- en: '`tr` or `turkish`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tr`或`turkish`'
- en: 'An example of an index creation with language could be:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 具有语言的索引创建示例可能是：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can also opt to not use any language, by just creating the index with a
    `none` value:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择不使用任何语言，只需使用`none`值创建索引：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By using the `none` value option, MongoDB will simply perform tokenization and
    stemming; it will not load any stop words list.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`none`值选项，MongoDB将仅执行标记化和词干处理；它不会加载任何停用词列表。
- en: When we decide to use a text index, we should always double our attention. Every
    single detail will have a side effect on the way we design our documents. In previous
    versions of MongoDB, before creating a text index, we should change the allocation
    method for all collections to **usePowerOf2Sizes**. This is because text indexes
    are considered larger indexes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们决定使用文本索引时，我们应该始终加倍注意。每一个细节都会对我们设计文档的方式产生副作用。在MongoDB的早期版本中，在创建文本索引之前，我们应该将所有集合的分配方法更改为**usePowerOf2Sizes**。这是因为文本索引被认为是较大的索引。
- en: Another major concern occurs at the moment we create the index. Depending on
    the size of the existing collection, the index could be very large, and to create
    a very large index we will need a lot of time. Thus, it is better to schedule
    this process to take place at a more timely opportunity.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个主要关注点发生在创建索引的时刻。根据现有集合的大小，索引可能非常大，要创建一个非常大的索引，我们需要很多时间。因此，最好安排这个过程在更及时的机会发生。
- en: Finally, we have to predict the impact that the text indexes will have on our
    write operations. This happens because, for each new record created in our collection,
    there will also be an entry created in the index referencing all the indexed value
    fields.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须预测文本索引对我们的写操作的影响。这是因为，对于我们集合中创建的每条新记录，还将创建一个引用所有索引值字段的索引条目。
- en: Creating special indexes
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建特殊索引
- en: 'In addition to all the indexes types we''ve created until now, whether in ascending
    or descending order, or text typed, we have three more special indexes: time to
    live, unique, and sparse.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们到目前为止创建的所有索引类型，无论是升序还是降序，还是文本类型，我们还有三种特殊的索引：生存时间、唯一和稀疏。
- en: Time to live indexes
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生存时间索引
- en: The **time to live** (**TTL**) index is an index based on lifetime. This index
    is created only in fields that are from the Date type. They cannot be compound
    and they will be automatically removed from the document after a given period
    of time.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**生存时间**（**TTL**）索引是基于生存时间的索引。该索引仅在日期类型的字段中创建。它们不能是复合索引，并且它们将在一定时间后自动从文档中删除。'
- en: 'This type of index can be created from a date vector. The document will expire
    at the moment when the lower array value is reached. MongoDB is responsible for
    controlling the documents'' expiration through a background task at intervals
    of 60 seconds. For an example, let''s use the `customers` collection we have been
    using in this chapter:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的索引可以从日期向量创建。文档将在达到较低数组值时过期。MongoDB负责通过后台任务在60秒的间隔内控制文档的过期。例如，让我们使用本章中一直在使用的`customers`集合：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The creation command that is based on the time to live index for the `accountConfirmationExpireAt`
    field will be the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`accountConfirmationExpireAt`字段的生存时间索引的创建命令将如下所示：
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This command indicates that every document that is older than the value in seconds
    requested in the `expireAfterSeconds` field will be deleted.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令指示超过`expireAfterSeconds`字段中请求的秒值的每个文档将被删除。
- en: 'There is also another way to create indexes based on lifetime, which is the
    scheduled way. The following example shows us this method of implementation:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种基于生存时间创建索引的方法，即定时方式。以下示例向我们展示了这种实现方法：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will make sure that the document you saw in the previous example expires
    on January 11 2015, 20:27:02.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保您在上一个示例中看到的文档在2015年1月11日20:27:02过期。
- en: This type of index is very useful for applications that use machine-generated
    events, logs and session information, which need to be persistent only during
    a given period of time, as you will see once again in [Chapter 8](ch08.html "Chapter 8. Logging
    and Real-time Analytics with MongoDB"), *Logging and Real-time Analytics with
    MongoDB*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的索引对于使用机器生成的事件、日志和会话信息的应用程序非常有用，这些信息只需要在特定时间内持久存在，正如您将在[第8章](ch08.html "第8章。使用MongoDB进行日志记录和实时分析")中再次看到的那样，“使用MongoDB进行日志记录和实时分析”。
- en: Unique indexes
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 唯一索引
- en: As with the vast majority of relational databases, MongoDB has a unique index.
    The unique index is responsible for rejecting duplicated values in the indexed
    field. The unique index can be created from a single or from a multikey field
    and as a compound index. When creating a unique compound index, there must be
    uniqueness in the values' combinations.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 与绝大多数关系数据库一样，MongoDB具有唯一索引。唯一索引负责拒绝索引字段中的重复值。唯一索引可以从单个字段或多键字段以及复合索引创建。创建唯一复合索引时，值的组合必须是唯一的。
- en: 'The default value for a unique field will always be null if we don''t set any
    value during the `insert` operation. As you have seen before, the index created
    for the `_id` field of a collection is unique. Considering the last example of
    the `customers` collection, it''s possible to create a unique index by executing
    the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`insert`操作期间没有设置任何值，唯一字段的默认值将始终为null。正如您之前所见，对于集合的`_id`字段创建的索引是唯一的。考虑`customers`集合的最后一个示例，可以通过执行以下操作创建唯一索引：
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This command will create an index of the `username` field that will not allow
    duplicated values.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将创建一个`username`字段的索引，不允许重复的值。
- en: Sparse indexes
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏索引
- en: Sparse indexes are indexes that will be created only when the document has a
    value for the field that will be indexed. We can create sparse indexes using only
    one field from the document or using more fields. This last use is called a **compound
    index**. When we create compound indexes, it is mandatory that at least one of
    the fields has a not-null-value.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏索引是仅在文档具有将被索引的字段值时才创建的索引。我们可以仅使用文档中的一个字段或使用更多字段来创建稀疏索引。这种情况被称为**复合索引**。当我们创建复合索引时，至少一个字段必须具有非空值。
- en: 'Take as an example the following documents in the `customers` collection:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以`customers`集合中的以下文档为例：
- en: '[PRE33]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Using the following example command, we can create a `sparse` index in the
    `customers` collection:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下示例命令，我们可以在`customers`集合中创建一个`sparse`索引：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following example query uses the created index:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例查询使用了创建的索引：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'On the other hand, the following example query, which requests the descending
    order by the indexed field, will not use the index:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，下面的示例查询，请求按索引字段的降序排列，将不使用索引：
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how indexes are a very important tool in the maintenance
    of a data model. By including index creation during the query planning stage,
    this will bring lot of benefits—most of all in what is referred to as performance
    during query documents.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到索引是数据模型维护中非常重要的工具。通过在查询规划阶段包括索引创建，这将带来许多好处，尤其是在所谓的查询文档性能方面。
- en: Thus, you learned how to create a single, compound, and multikey indexes. Next,
    we covered how and when to use indexes for text searching on MongoDB. We then
    met special index types such as the TTL, unique, and sparse index.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您学会了如何创建单个、复合和多键索引。接下来，我们讨论了在MongoDB上如何以及何时使用索引进行文本搜索。然后我们介绍了特殊的索引类型，如TTL、唯一和稀疏索引。
- en: In the next chapter, you will see how to analyze queries and consequently create
    them in a more efficient way.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将看到如何分析查询，从而以更高效的方式创建它们。
