- en: Chapter 5. Optimizing Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。优化查询
- en: Now that we have taken a great step forward in comprehending how to improve
    read and write performance using indexes, let's see how we can analyze them if
    these indexes are behaving as expected, and also how indexes can influence a database's
    lifecycle. In addition to this, through this analysis, we will be able to evaluate
    and optimize the created queries and indexes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在理解如何使用索引来提高读写性能方面迈出了重要的一步，让我们看看如果这些索引表现如预期，我们如何分析它们，以及索引如何影响数据库的生命周期。除此之外，通过这种分析，我们将能够评估和优化创建的查询和索引。
- en: So, in this chapter, we will study the concept of query plans and how MongoDB
    handles it. This includes understanding query covering and query selectivity,
    and how these plans behave when used in sharded environments and through replica
    sets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将学习查询计划的概念以及MongoDB如何处理它。这包括理解查询覆盖和查询选择性，以及在分片环境和副本集中使用这些计划时的行为。
- en: Understanding the query plan
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解查询计划
- en: When we run a query, MongoDB will internally figure out the best way to do it
    by choosing from a set of possibilities extracted after query analysis (performed
    by the MongoDB query optimizer). These possibilities are called **query plans**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行查询时，MongoDB将通过从MongoDB查询优化器执行的查询分析中提取的一组可能性中选择最佳方式来执行查询。这些可能性称为**查询计划**。
- en: 'To get a better understanding of a query plan, we must go back to the cursor
    concept and one of the cursor methods: `explain()`. The `explain()` method is
    one of the big changes in the MongoDB 3.0 release. It has been significantly enhanced
    due to the new query introspection system.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解查询计划，我们必须回到游标概念和游标方法之一：`explain()`。`explain()`方法是MongoDB 3.0版本中的重大变化之一。由于新的查询内省系统的出现，它得到了显着增强。
- en: Not only has the output changed, as we saw earlier, but also the way we use
    it. We now can pass to the `explain()` method an option parameter that specifies
    the verbosity of the `explain` output. The possible modes are `"queryPlanner"`,
    `"executionStats"`, and `"allPlansExecution"`. The default mode is `"queryPlanner"`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 输出不仅发生了变化，正如我们之前看到的那样，使用方式也发生了变化。现在，我们可以向`explain()`方法传递一个选项参数，该参数指定`explain`输出的详细程度。可能的模式是`"queryPlanner"`、`"executionStats"`和`"allPlansExecution"`。默认模式是`"queryPlanner"`。
- en: In the `"queryPlanner"` mode, MongoDB runs the query optimizer to choose the
    winning plan under evaluation, and returns the information to the evaluated method.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`"queryPlanner"`模式下，MongoDB运行查询优化器选择评估中的获胜计划，并将信息返回给评估方法。
- en: In the `"executionStats"` mode, MongoDB runs the query optimizer to choose the
    winning plan, executes it, and returns the information to the evaluated method.
    If we are executing the `explain()` method for a write operation, it returns the
    information about the operation that would be performed but does not actually
    execute it.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`"executionStats"`模式下，MongoDB运行查询优化器选择获胜计划，执行它，并将信息返回给评估方法。如果我们对写操作执行`explain()`方法，则返回有关将执行的操作的信息，但实际上不执行它。
- en: Finally, in the `"allPlansExecution"` mode, MongoDB runs the query optimizer
    to choose the winning plan, executes it, and returns the information to the evaluated
    method as well as information for the other candidate plans.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在`"allPlansExecution"`模式下，MongoDB运行查询优化器选择获胜计划，执行它，并将信息返回给评估方法，以及其他候选计划的信息。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can find more about the `explain()` method in the MongoDB 3.0 reference
    guide at [http://docs.mongodb.org/manual/reference/method/db.collection.explain/#db.collection.explain](http://docs.mongodb.org/manual/reference/method/db.collection.explain/#db.collection.explain).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MongoDB 3.0参考指南的[http://docs.mongodb.org/manual/reference/method/db.collection.explain/#db.collection.explain](http://docs.mongodb.org/manual/reference/method/db.collection.explain/#db.collection.explain)中找到有关`explain()`方法的更多信息。
- en: The output of an `explain` execution shows us the query plans as a tree of stages.
    From the leaf to the root, each stage passes its results to the parent node. The
    first stage, which happens on the leaf node, accesses the collection or indices
    and passes the results to internal nodes. These internal nodes manipulate the
    results from which the final stage or the root node derives the result set.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`explain`执行的输出将查询计划显示为阶段树。从叶子到根，每个阶段将其结果传递给父节点。第一个阶段发生在叶节点上，访问集合或索引并将结果传递给内部节点。这些内部节点操作结果，最终阶段或根节点从中派生结果集。'
- en: 'There are four stages:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个阶段：
- en: '`COLLSCAN`: This means that a full collection scan happened during this stage'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COLLSCAN`：这意味着在此阶段发生了完整的集合扫描'
- en: '`IXSCAN`: This indicates that an index key scan happened during this stage'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IXSCAN`：这表示在此阶段发生了索引键扫描'
- en: '`FETCH`: This is the stage when we are retrieving documents'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FETCH`：这是当我们检索文档时的阶段'
- en: '`SHARD_MERGE`: This is the stage where results that came from each shard are
    merged and passed to the parent stage'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHARD_MERGE`：这是来自每个分片的结果被合并并传递给父阶段的阶段'
- en: Detailed information about the winning plan stages can be found in the `explain.queryPlanner.winningPlan`
    key of the `explain()` execution output. The `explain.queryPlanner.winningPlan.stage`
    key shows us the name of the root stage. If there are one or more child stages,
    the stage will have an `inputStage` or `inputStages` key depending on how many
    stages we have. The child stages will be represented by the keys `explain.queryPlanner.winningPlan.inputStage`
    and `explain.queryPlanner.winningPlan.inputStages` of the `explain()` execution
    output.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 获胜计划阶段的详细信息可以在`explain()`执行输出的`explain.queryPlanner.winningPlan`键中找到。`explain.queryPlanner.winningPlan.stage`键向我们展示了根阶段的名称。如果有一个或多个子阶段，该阶段将具有一个`inputStage`或`inputStages`键，取决于我们有多少阶段。子阶段将由`explain()`执行输出的`explain.queryPlanner.winningPlan.inputStage`和`explain.queryPlanner.winningPlan.inputStages`键表示。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the `explain()` method, visit the MongoDB 3.0 manual page
    at [http://docs.mongodb.org/manual/reference/explain-results/](http://docs.mongodb.org/manual/reference/explain-results/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`explain()`方法的信息，请访问MongoDB 3.0手册页面[http://docs.mongodb.org/manual/reference/explain-results/](http://docs.mongodb.org/manual/reference/explain-results/)。
- en: All these changes in the execution and the output of the `explain()` method
    were made mainly to improve the DBAs' productivity. One of the biggest advantages
    compared to the previous MongoDB versions is that `explain()` does not need to
    execute the query to calculate the query plan. It also exposes query introspection
    to a wider range of operations including find, count, update, remove, group, and
    aggregate, giving DBAs the power to optimize queries of each type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`explain()`方法的执行和输出的所有这些变化主要是为了提高DBA的生产力。与以前的MongoDB版本相比，最大的优势之一是`explain()`不需要执行查询来计算查询计划。它还将查询内省暴露给了更广泛的操作，包括find、count、update、remove、group和aggregate，使DBA有能力优化每种类型的查询。'
- en: Evaluating queries
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估查询
- en: Getting straight to the point, the `explain` method will give us statistics
    from the query execution. For instance, we will see in these statistics whether
    a cursor is used or an index.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 直截了当地说，`explain`方法将为我们提供查询执行的统计信息。例如，我们将在这些统计信息中看到是否使用了游标或索引。
- en: 'Let''s use the following `products` collection as an example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以以下`products`集合为例：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we have already seen, when the collection is created, an index in the `_id`
    field is added automatically. To get all the documents in the collection, we will
    execute the following query in the mongod shell:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的，当集合被创建时，`_id`字段上会自动添加一个索引。为了获取集合中的所有文档，我们将在mongod shell中执行以下查询：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result of the query will be the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的结果将是以下内容：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To help you understand how MongoDB reaches this result, let''s use the `explain`
    method on the cursor that was returned by the command `find`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您理解MongoDB是如何得出这个结果的，让我们在通过`find`命令返回的游标上使用`explain`方法：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result of this operation is a document with information about the selected
    query plan:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作的结果是一个包含有关所选查询计划信息的文档：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Initially, let''s check only four fields in this document: `queryPlanner.winningPlan.stage`,
    `queryPlanner.executionStats.nReturned`, `queryPlanner.executionStats.totalKeysExamined`,
    and `queryPlanner.executionStats.totalDocsExamined`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，让我们只检查这个文档中的四个字段：`queryPlanner.winningPlan.stage`、`queryPlanner.executionStats.nReturned`、`queryPlanner.executionStats.totalKeysExamined`和`queryPlanner.executionStats.totalDocsExamined`：
- en: The `queryPlanner.winningPlan.stage` field is showing us that a full collection
    scan will be performed.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryPlanner.winningPlan.stage`字段显示了将执行完整的集合扫描。'
- en: The `queryPlanner.executionStats.nReturned` field shows how many documents match
    the query criteria. In other words, it shows us how many documents will be returned
    from the query execution. In this case, the result will be three documents.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryPlanner.executionStats.nReturned`字段显示了有多少文档符合查询条件。换句话说，它显示了有多少文档将从查询执行中返回。在这种情况下，结果将是三个文档。'
- en: The `queryPlanner.executionStats.totalDocsExamined` field is the number of documents
    from the collection that will be scanned. In the example, all the documents were
    scanned.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryPlanner.executionStats.totalDocsExamined`字段是将要扫描的集合中的文档数。在这个例子中，所有的文档都被扫描了。'
- en: The `queryPlanner.executionStats.totalKeysExamined` field shows the number of
    index entries that were scanned.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queryPlanner.executionStats.totalKeysExamined`字段显示了扫描的索引条目数。'
- en: When executing a collection scan, as in the preceding example, `nscanned` also
    represents the number of documents scanned in the collection.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行集合扫描时，就像前面的例子中一样，`nscanned`也代表了在集合中扫描的文档数。
- en: 'What happens if we create an index of the `price` field of our collection?
    Let''s see:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为我们的集合的`price`字段创建一个索引会发生什么？让我们看看：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Obviously, the query result will be the same three documents that were returned
    in the previous execution. However, the result for the `explain` command will
    be the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，查询结果将是在先前执行中返回的相同的三个文档。然而，`explain`命令的结果将是以下内容：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The returned document is fairly different from the previous one. Once again,
    let''s focus on these four fields: `queryPlanner.winningPlan.stage`, `queryPlanner.executionStats.nReturned`,
    `queryPlanner.executionStats.totalKeysExamined`, and `queryPlanner.executionStats.totalDocsExamined`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的文档与之前的文档有很大的不同。再次，让我们专注于这四个字段：`queryPlanner.winningPlan.stage`、`queryPlanner.executionStats.nReturned`、`queryPlanner.executionStats.totalKeysExamined`和`queryPlanner.executionStats.totalDocsExamined`。
- en: This time, we can see that we did not have a full collection scan. Instead of
    this, we had a `FETCH` stage with a child `IXSCAN` stage, as we can see in the
    `queryPlanner.winningPlan.inputStage.stage` field. This means that the query used
    an index. The name of the index can be found in the field `queryPlanner.winningPlan.inputStage.indexName`,
    in the example, `price_1`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们可以看到我们没有进行完整的集合扫描。而是有一个带有子`IXSCAN`阶段的`FETCH`阶段，正如我们在`queryPlanner.winningPlan.inputStage.stage`字段中所看到的。这意味着查询使用了索引。索引的名称可以在字段`queryPlanner.winningPlan.inputStage.indexName`中找到，在这个例子中是`price_1`。
- en: Furthermore, the mean difference in this result is that both `queryPlanner.executionStats.totalDocsExamined`
    and `queryPlanner.executionStats.totalKeysExamined`, returned the value `3`, showing
    us that three documents were scanned. It is quite different from the 10 documents
    that we saw when executing the query without an index.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个结果的平均差异是，`queryPlanner.executionStats.totalDocsExamined`和`queryPlanner.executionStats.totalKeysExamined`都返回了值`3`，显示了扫描了三个文档。这与在没有索引的情况下执行查询时看到的10个文档非常不同。
- en: One point we should make is that the number of documents and keys scanned is
    the same as we can see in `queryPlanner.executionStats.totalDocsExamined` and
    `queryPlanner.executionStats.totalKeysExamined`. This means that our query was
    not covered by the index. In the next section, we will see how to cover a query
    using an index and what its benefits are.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该指出的一点是，扫描的文档和键的数量与`queryPlanner.executionStats.totalDocsExamined`和`queryPlanner.executionStats.totalKeysExamined`中所示的相同。这意味着我们的查询未被索引覆盖。在下一节中，我们将看到如何使用索引覆盖查询以及其好处。
- en: Covering a query
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖查询
- en: Sometimes we can choose to create indexes with one or more fields, considering
    the frequency that they appear in our queries. We can also choose to create indexes
    in order to improve query performance, using them not only to match the criteria
    but also to extract results from the index itself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可以选择根据它们在查询中出现的频率创建一个或多个字段的索引。我们还可以选择创建索引以提高查询性能，不仅用于匹配条件，还用于从索引本身提取结果。
- en: We may say that, when we have a query, all the fields in the criteria are part
    of an index and when all the fields in the query are part of the same index, this
    query is covered by the index.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，当查询中的所有字段都是索引的一部分，且查询中的所有字段都是同一个索引的一部分时，此查询将被索引覆盖。
- en: 'In the example shown in the previous section, we had an index created of the
    `price` field of the `products` collection:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中所示的示例中，我们创建了`products`集合的`price`字段的索引：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When we execute the following query, which retrieves the documents where the
    `price` field has a value greater than `65` but with a projection where we excluded
    the `_id` field from the result and included only the `price` field, we will have
    a different result from the one previously shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行以下查询时，该查询检索`price`字段的值大于`65`的文档，但投影中排除了结果中的`_id`字段，只包括`price`字段，我们将得到与之前显示的结果不同的结果：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result will be:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then we analyze the query using the `explain` command, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`explain`命令分析查询，如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By doing this, we also have a different result from the previous example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们还得到了与之前示例不同的结果：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first thing we notice is that the value of `queryPlanner.executionStats.totalDocsExamined`
    is `0`. This can be explained because our query is covered by the index. This
    means that we do not need to scan the documents from the collection. We will use
    the index to return the results, as we can observe in the value `3` for the `queryPlanner.executionStats.totalKeysExamined`
    field.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到的第一件事是`queryPlanner.executionStats.totalDocsExamined`的值为`0`。这可以解释为我们的查询被索引覆盖。这意味着我们不需要扫描集合中的文档。我们将使用索引返回结果，正如我们在`queryPlanner.executionStats.totalKeysExamined`字段的值`3`中观察到的那样。
- en: Another difference is that the `IXSCAN` stage is not a child of the `FETCH`
    stage. Every time that an index covers a query, `IXSCAN` will not be a descendent
    of the `FETCH` stage.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不同之处是`IXSCAN`阶段不是`FETCH`阶段的子级。每当索引覆盖查询时，`IXSCAN`都不会是`FETCH`阶段的后代。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Queries that are covered by the index can be extremely fast. This happens because
    the index keys are usually much smaller than the document itself and also because
    the index is in volatile memory or in disk sequential write mode.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 被索引覆盖的查询可能非常快。这是因为索引键通常比文档本身要小得多，而且索引通常位于易失性内存或磁盘顺序写入模式中。
- en: Unfortunately, it's not always the case that we will have a query covered, even
    though we had the same conditions that were described previously.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们并不总是能够覆盖查询，即使我们有相同的条件。
- en: 'Considering the following `customers` collection:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下`customers`集合：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And an index created of the `followedSellers` field, executing the following
    command on mongod shell:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并且创建了`followedSellers`字段的索引，执行以下命令在mongod shell上：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we execute the following query on mongod shell, which was supposed to be
    covered by the index, since we are using `followedSellers` on the query criteria:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在mongod shell上执行以下查询，该查询应该被索引覆盖，因为我们在查询条件中使用了`followedSellers`：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we analyze this query using the `explain` command on the mongod shell,
    to see if the query is covered by the index, we can observe:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用mongod shell上的`explain`命令分析此查询以查看查询是否被索引覆盖时，我们可以观察到：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We have the following document as a result. We can see that, despite using
    a field that is in the index in the criteria and restricting the result to this
    field, the returned output has the `FETCH` stage as a parent of the `IXSCAN` stage.
    In addition, the values for `totalDocsExamined` and `totalKeysExamined` are different:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有以下文档作为结果。我们可以看到，尽管在条件中使用了索引中的字段并将结果限制为此字段，但返回的输出将`FETCH`阶段作为`IXSCAN`阶段的父级。此外，`totalDocsExamined`和`totalKeysExamined`的值是不同的：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `totalDocsExamined` field returned `2`, which means that it was necessary
    to scan two of the five documents from the collection. Meanwhile, the `totalKeysExamined`
    field returned `4`, showing that it was necessary to scan four index entries for
    the returned result.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`totalDocsExamined`字段返回`2`，这意味着需要扫描集合中的五个文档中的两个。与此同时，`totalKeysExamined`字段返回`4`，表明需要扫描四个索引条目以获取返回结果。'
- en: Another situation in which we do not have the query covered by an index is when
    the query execution is used in an index of a field that is part of an embedded
    document.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种情况是，当查询执行使用嵌入文档的字段的索引时，我们无法通过索引覆盖查询。
- en: 'Let''s check the example using the `products` collection that was already used
    in [Chapter 4](ch04.html "Chapter 4. Indexing"), *Indexing*, with an index of
    the `supplier.name` field:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`supplier.name`字段的索引检查已经在[第4章](ch04.html "第4章.索引")中使用的`products`集合的示例：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following query will not be covered by the index:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询将不被索引覆盖：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that, though this query is not covered by the index, it will use the
    index in its plan.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，尽管此查询未被索引覆盖，但它将在计划中使用索引。
- en: Finally, when we are executing a query in a sharded collection, through **mongos**,
    this query will never be covered by an index.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们在分片集合中通过**mongos**执行查询时，此查询永远不会被索引覆盖。
- en: The query optimizer
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询优化器
- en: Now that you understand both evaluating query performance using the `explain()`
    method and how to take advantage of an index by covering a query, we will proceed
    to meet the huge responsibility of selecting and maintaining the query plan in
    MongoDB, the query optimizer.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了使用`explain()`方法评估查询性能以及如何利用索引覆盖查询，我们将继续介绍在MongoDB中选择和维护查询计划的重大责任，即查询优化器。
- en: The query optimizer is responsible for processing and selecting the best and
    most efficient query plan for a query. For this purpose, it takes into account
    all the collection indexes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化器负责处理和选择查询的最佳和最有效的查询计划。为此，它考虑了所有集合索引。
- en: The process performed by the query optimizer is not an exact science, meaning
    that it is a little bit empirical—in other words, based on trial and error.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化器执行的过程并不是一门精确的科学，这意味着它有点经验主义，换句话说，是基于试错的。
- en: When we execute a query for the very first time, the query optimizer will run
    the query against all available indexes of the collection and choose the most
    efficient one. Thereafter, every time we run the same query or queries with the
    same pattern, the selected index will be used for the query plan.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次执行查询时，查询优化器将针对集合的所有可用索引运行查询并选择最有效的索引。此后，每当我们运行相同的查询或具有相同模式的查询时，所选的索引将用于查询计划。
- en: 'Using the same `products` collection we used previously in this chapter, the
    following queries will run through the same query plan because they have the same
    pattern:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面使用的相同的`products`集合中，以下查询将通过相同的查询计划运行，因为它们具有相同的模式：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As the collection's data changes, the query optimizer re-evaluates it. Moreover,
    as the collection grows (more precisely for each 1,000 write operations, during
    each index creation, when the `mongod` process restarts, or when we call the `explain()`
    method), the optimizer re-evaluates itself.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 随着集合数据的变化，查询优化器会重新评估。此外，随着集合的增长（更准确地说，每进行1,000次写操作，每次索引创建，`mongod`进程重新启动，或者我们调用`explain()`方法），优化器会重新评估自身。
- en: Even with this marvelous automatic process known as the query optimizer, we
    may want to choose which index we want to use. For this, we use the `hint` method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有了这个被称为查询优化器的神奇自动过程，我们可能还想选择我们想要使用的索引。为此，我们使用`hint`方法。
- en: 'Suppose that we have these indexes in our previous `products` collection:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的先前的`products`集合中有这些索引：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we want to retrieve all the products where the `price` field has a value
    greater than 10, sorted by the `name` field in descending order, use the following
    command to do this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想检索所有`price`字段值大于10的产品，并按`name`字段降序排序，可以使用以下命令来执行：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The index chosen by the query optimizer will be the one created on the `name`
    and `price` fields, as we could see running the `explain()` method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化器选择的索引将是在`name`和`price`字段上创建的索引，我们可以通过运行`explain()`方法来查看：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result is:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, we can force the use of the index only of the `price` field, in this
    manner:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们只能强制使用`price`字段的索引，如下所示：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To be certain, we use the `explain` method:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定，我们使用`explain`方法：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This produces the following document:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下文档：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Reading from many MongoDB instances
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从多个MongoDB实例中读取
- en: So far, we have spoken a lot about reading from one MongoDB instance. Nevertheless,
    it is important that we speak briefly about reading from a sharded environment
    or from a replica set.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经大谈特谈了从一个MongoDB实例中读取。然而，重要的是我们简要谈一下从分片环境或副本集中读取。
- en: '![Reading from many MongoDB instances](img/B04075_05_01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![从多个MongoDB实例中读取](img/B04075_05_01.jpg)'
- en: When we are reading from a shard, it is important to have the shard key as part
    of the query criteria. This is because, when we have the shard key, we will target
    the execution on one specific shard, whereas if we do not have the shard key,
    we will force the execution on all the shards in the cluster. Thus, the performance
    of a query in a sharded environment is linked to the shard key to a great extent.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从分片中读取时，重要的是将分片键作为查询条件的一部分。这是因为当我们有分片键时，我们将针对一个特定的分片执行，而如果我们没有分片键，我们将强制在集群中的所有分片上执行。因此，在分片环境中查询的性能在很大程度上取决于分片键。
- en: By default, when we have a replica set in MongoDB, we will always read from
    the primary. We can modify this behavior to force a read operation execution on
    to a secondary node by modifying the read preferences.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在MongoDB中有一个副本集时，我们总是从主节点读取。我们可以修改此行为，通过修改读取偏好来强制在辅助节点上执行读取操作。
- en: 'Suppose that we have a replica set with three nodes: `rs1s1`, `rs1s2`, and
    `rs1s3` and that `rs1s1` is the primary node, and `rs1s2` and `rs1s3` are the
    secondary nodes. To execute a read operation forcing the read on a secondary node,
    we could do:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含三个节点的副本集：`rs1s1`、`rs1s2`和`rs1s3`，`rs1s1`是主节点，`rs1s2`和`rs1s3`是辅助节点。要执行一个读操作并强制在辅助节点上进行读取，我们可以这样做：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In addition, we have the following read preference options:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有以下读取偏好选项：
- en: '`primary`, which is the default option and will force the user to read from
    the primary.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primary`，这是默认选项，将强制用户从主节点读取。'
- en: '`primaryPreferred`, which will read preferably from the primary but, in the
    case of unavailability, will read from a secondary.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`primaryPreferred`，它将优先从主节点读取，但在不可用的情况下将从辅助节点读取。'
- en: '`secondaryPreferred`, which will read from a secondary but, in the case of
    unavailability, will read from the primary.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secondaryPreferred`，它将从辅助节点读取，但在不可用的情况下将从主节点读取。'
- en: '`nearest`, which will read from the lowest network latency node in the cluster.
    In other words, with the shortest network distance, regardless of whether it is
    the primary or a secondary node.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nearest`，它将从集群中网络延迟最低的节点读取。换句话说，就是从网络距离最短的节点读取，无论它是主节点还是辅助节点。'
- en: In short, if our application wants to maximize consistency, then we should prioritize
    the read on the primary; when we are looking for availability, we should use `primaryPreferred`
    because we can guarantee consistency on most of the reads. When something goes
    wrong in the primary node, we can count on any secondary node. Finally, if we
    are looking for the lowest latency, we may use `nearest`, reminding ourselves
    that we do not have a guarantee of data consistency because we are prioritizing
    the lowest latency network node.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，如果我们的应用程序希望最大化一致性，那么我们应该优先考虑在主节点上进行读取；当我们寻求可用性时，我们应该使用`primaryPreferred`，因为我们可以保证大多数读取的一致性。当主节点出现问题时，我们可以依靠任何辅助节点。最后，如果我们寻求最低的延迟，我们可以使用`nearest`，提醒自己我们没有数据一致性的保证，因为我们优先考虑最低延迟的网络节点。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned to analyze query performance using MongoDB's native
    tools and to optimize our queries with this.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了使用MongoDB的原生工具分析查询性能，并优化我们的查询。
- en: In the next chapter, we will talk about how to manage our database and its collections
    better by doing a functional or geographic segregation. You will also see how
    to maintain collections that should support a high read and write throughput.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何通过功能或地理分离更好地管理我们的数据库和其集合。您还将了解如何维护应支持高读写吞吐量的集合。
