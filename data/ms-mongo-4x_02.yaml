- en: MongoDB – A Database for Modern Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB - 为现代网络设计的数据库
- en: 'In this chapter, we will lay the foundations for understanding MongoDB, and
    how it claims to be a database that''s designed for the modern web. Learning in
    the first place is as important as knowing how to learn. We will go through the
    references that have the most up-to-date information about MongoDB, for both new
    and experienced users. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将奠定理解MongoDB的基础，以及它声称自己是为现代网络设计的数据库。首先学习和知道如何学习同样重要。我们将介绍有关MongoDB的最新信息的参考资料，适用于新用户和有经验的用户。我们将涵盖以下主题：
- en: SQL and  MongoDB's history and evolution
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL和MongoDB的历史和演变
- en: MongoDB from the perspective of SQL and other NoSQL technology users
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从SQL和其他NoSQL技术用户的角度看MongoDB
- en: MongoDB's common use cases and why they matter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB的常见用例及其重要性
- en: MongoDB's configuration and best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB的配置和最佳实践
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will require MongoDB version 4+, Apache Kafka, Apache Spark and Apache Hadoop
    installed to smoothly sail through the chapter. The codes that have been used
    for all the chapters can be found at:[ https://github.com/PacktPublishing/Mastering-MongoDB-4.x-Second-Edition](https://github.com/PacktPublishing/Mastering-MongoDB-4.x-Second-Edition).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装MongoDB版本4+、Apache Kafka、Apache Spark和Apache Hadoop才能顺利完成本章内容。所有章节中使用的代码可以在以下链接找到：[https://github.com/PacktPublishing/Mastering-MongoDB-4.x-Second-Edition](https://github.com/PacktPublishing/Mastering-MongoDB-4.x-Second-Edition)。
- en: The evolution of SQL and NoSQL
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL和NoSQL的演变
- en: '**Structured Query Language** (**SQL**) existed even before the WWW. Dr. E.
    F. Codd originally published the paper, *A Relational Model of Data for Large
    Shared Data Banks*, in June, 1970, in the **Association of Computer Machinery**
    (**ACM**) journal, **Communications of the ACM**. SQL was initially developed
    at IBM by Chamberlin and Boyce, in 1974\. Relational Software (now Oracle Corporation)
    was the first to develop a commercially available implementation of SQL, targeted
    at United States governmental agencies.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构化查询语言**（**SQL**）甚至早于万维网出现。E. F. Codd博士最初在1970年6月在**计算机协会**（**ACM**）期刊**ACM通讯**上发表了题为《用于大型共享数据库的关系数据模型》的论文。SQL最初是由IBM的Chamberlin和Boyce于1974年开发的。关系软件（现在是Oracle公司）是第一个开发出商业可用的SQL实现的公司，目标是美国政府机构。'
- en: The first **American National Standards Institute** (**ANSI**) SQL standard
    came out in 1986\. Since then, there have been eight revisions, with the most
    recent being published in 2016 (SQL:2016).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个**美国国家标准学会**（**ANSI**）SQL标准于1986年发布。自那时起，已经进行了八次修订，最近一次是在2016年发布的（SQL:2016）。
- en: SQL was not particularly popular at the start of the WWW. Static content could
    just be hardcoded into the HTML page without much fuss. However, as the functionality
    of websites grew, webmasters wanted to generate web page content driven by offline
    data sources, in order to generate content that could change over time without
    redeploying code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SQL在万维网刚开始时并不特别受欢迎。静态内容可以直接硬编码到HTML页面中而不费吹灰之力。然而，随着网站功能的增长，网站管理员希望生成由离线数据源驱动的网页内容，以便生成随时间变化而变化的内容，而无需重新部署代码。
- en: '**Common Gateway Interface** (**CGI**) scripts, developing Perl or Unix shells,
    were driving early database-driven websites in Web 1.0\. With Web 2.0, the web
    evolved from directly injecting SQL results into the browser to using two-tier
    and three-tier architectures that separated views from the business and model
    logic, allowing for SQL queries to be modular and isolated from the rest of the
    web application.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用网关接口**（**CGI**）脚本，开发Perl或Unix shell，驱动着Web 1.0时期的数据库驱动网站。随着Web 2.0的出现，网络从直接将SQL结果注入浏览器发展到使用两层和三层架构，将视图与业务和模型逻辑分离，使得SQL查询可以模块化并与网络应用的其余部分隔离开来。'
- en: On the other hand, **Not only SQL** (**NoSQL**) is much more modern and supervened
    web evolution, rising at the same time as Web 2.0 technologies. The term was first
    coined by Carlo Strozzi in 1998, for his open source database that did not follow
    the SQL standard, but was still relational.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**Not only SQL**（**NoSQL**）是更现代的，是在Web 2.0技术兴起的同时出现的。该术语最早由Carlo Strozzi于1998年创造，用于描述他的开源数据库，该数据库不遵循SQL标准，但仍然是关系型的。
- en: This is not what we currently expect from a NoSQL database. Johan Oskarsson,
    a developer at Last.fm at the time, reintroduced the term in early 2009, in order
    to group a set of distributed, non-relational data stores that were being developed.
    Many of them were based on Google's **Bigtable** and **MapReduce** papers, or
    Amazon's **DynamoDB**, a highly available key-value based storage system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是我们当前对NoSQL数据库的期望。Johan Oskarsson在当时是Last.fm的开发人员，于2009年初重新引入了这个术语，以便对一组正在开发的分布式、非关系型数据存储进行分组。其中许多是基于Google的**Bigtable**和**MapReduce**论文，或者是亚马逊的**DynamoDB**，这是一个高度可用的基于键值的存储系统。
- en: 'NoSQL''s foundations grew upon relaxed **atomicity, consistency,** **isolation****,
    and** **durability** (**ACID**) properties, which guarantee the performance, scalability,
    flexibility, and reduced complexity. Most NoSQL databases have gone one way or
    another in providing as many of the previously mentioned qualities as possible,
    even offering adjustable guarantees to the developer. The following diagram describes
    the evolution of SQL and NoSQL:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL的基础建立在放松的**原子性、一致性、隔离性**和**持久性**（**ACID**）属性上，这些属性保证了性能、可伸缩性、灵活性和降低了复杂性。大多数NoSQL数据库在提供尽可能多的上述特性方面都有所作为，甚至为开发人员提供可调整的保证。以下图表描述了SQL和NoSQL的演变：
- en: '![](img/c24fbbf9-fe23-43c7-adf2-e5793351149b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c24fbbf9-fe23-43c7-adf2-e5793351149b.png)'
- en: The evolution of MongoDB
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB的演变
- en: 10gen started to develop a cloud computing stack in 2007 and soon realized that
    the most important innovation was centered around the document-oriented database
    that they built to power it, which was MongoDB. MongoDB was initially released
    on August 27, 2009.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 10gen于2007年开始开发云计算堆栈，并很快意识到最重要的创新是围绕他们构建的面向文档的数据库，即MongoDB。MongoDB最初于2009年8月27日发布。
- en: Version 1 of MongoDB was pretty basic in terms of features, authorization, and
    ACID guarantees but it made up for these shortcomings with performance and flexibility.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的第1版在功能、授权和ACID保证方面非常基础，但通过性能和灵活性弥补了这些缺点。
- en: In the following sections, we will highlight the major features of MongoDB,
    along with the version numbers with which they were introduced.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将突出MongoDB的主要功能，以及它们引入的版本号。
- en: Major feature set for versions 1.0 and 1.2
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本1.0和1.2的主要功能集
- en: 'The different features of versions 1.0 and 1.2 are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.0和1.2的不同特性如下：
- en: Document-based model
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于文档的模型
- en: Global lock (process level)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局锁（进程级）
- en: Indexes on collections
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合索引
- en: CRUD operations on documents
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档的CRUD操作
- en: No authentication (authentication was handled at the server level)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需认证（认证在服务器级别处理）
- en: Master and slave replication
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主从复制
- en: '`MapReduce` (introduced in v1.2)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapReduce`（自v1.2引入）'
- en: Stored JavaScript functions (introduced in v1.2)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储JavaScript函数（自v1.2引入）
- en: Version 2
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2版
- en: 'The different features of version 2.0 are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第2.0版的不同特性如下：
- en: Background index creation (since v1.4)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后台索引创建（自v1.4以来）
- en: Sharding (since v1.6)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分片（自v1.6以来）
- en: More query operators (since v1.6)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多的查询操作符（自v1.6以来）
- en: Journaling (since v1.8)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录（自v1.8以来）
- en: Sparse and covered indexes (since v1.8)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稀疏和覆盖索引（自v1.8以来）
- en: Compact commands to reduce disk usage
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 紧凑命令以减少磁盘使用
- en: Memory usage more efficient
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用更高效
- en: Concurrency improvements
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发改进
- en: Index performance enhancements
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引性能增强
- en: Replica sets are now more configurable and data center aware
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 副本集现在更可配置，并且数据中心感知
- en: '`MapReduce` improvements'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapReduce`改进'
- en: Authentication (since 2.0, for sharding and most database commands)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证（自2.0版，用于分片和大多数数据库命令）
- en: Geospatial features introduced
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入地理空间功能
- en: Aggregation framework (since v2.2) and enhancements (since v2.6)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合框架（自v2.2以来）和增强（自v2.6以来）
- en: TTL collections (since v2.2)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TTL集合（自v2.2以来）
- en: Concurrency improvements, among which is DB-level locking (since v2.2)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发改进，其中包括DB级别锁定（自v2.2以来）
- en: Text searching (since v2.4) and integration (since v2.6)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本搜索（自v2.4以来）和集成（自v2.6以来）
- en: Hashed indexes (since v2.4)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希索引（自v2.4以来）
- en: Security enhancements and role-based access (since v2.4)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全增强和基于角色的访问（自v2.4以来）
- en: V8 JavaScript engine instead of SpiderMonkey (since v2.4)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: V8 JavaScript引擎取代SpiderMonkey（自v2.4以来）
- en: Query engine improvements (since v2.6)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询引擎改进（自v2.6以来）
- en: Pluggable storage engine API
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可插拔存储引擎API
- en: WiredTiger storage engine introduced, with document-level locking, while previous
    storage engine (now called **MMAPv1**) supports collection-level locking
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入WiredTiger存储引擎，具有文档级锁定，而以前的存储引擎（现在称为MMAPv1）支持集合级锁定
- en: Version 3
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3版
- en: 'The different features of version 3.0 are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 3.0版本的不同特性如下：
- en: Replication and sharding enhancements (since v3.2)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制和分片增强（自v3.2以来）
- en: Document validation (since v3.2)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档验证（自v3.2以来）
- en: Aggregation framework enhanced operations (since v3.2)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合框架增强操作（自v3.2以来）
- en: Multiple storage engines (since v3.2, only in Enterprise Edition)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个存储引擎（自v3.2以来，仅适用于企业版）
- en: Query language and indexes collation (since v3.4)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询语言和索引排序（自v3.4以来）
- en: Read-only database views (since v3.4)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只读数据库视图（自v3.4以来）
- en: Linearizable read concern (since v3.4)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性读关注（自v3.4以来）
- en: Version 4
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4版
- en: 'The different features of version 4.0 are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 4.0版本的不同特性如下：
- en: Multi-document ACID transactions
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多文档ACID事务
- en: Change streams
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更流
- en: MongoDB tools (Stitch, Mobile, Sync, and Kubernetes Operator)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB工具（Stitch、Mobile、Sync和Kubernetes Operator）
- en: 'The following diagram shows MongoDB''s evolution:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了MongoDB的演变：
- en: '![](img/1bd46ef6-31be-4038-a331-ec09cedea659.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bd46ef6-31be-4038-a331-ec09cedea659.png)'
- en: As we can observe, version 1 was pretty basic, whereas version 2 introduced
    most of the features present in the current version, such as sharding, usable
    and special indexes, geospatial features, and memory and concurrency improvements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，第1版非常基础，而第2版引入了当前版本中的大多数功能，如分片、可用和特殊索引、地理空间功能以及内存和并发改进。
- en: On the way from version 2 to version 3, the aggregation framework was introduced,
    mainly as a supplement to the ageing (and never up to par with dedicated frameworks,
    such as Hadoop) MapReduce framework. Then, text search was added, and slowly but
    surely, the framework was improving performance, stability, and security, to adapt
    to the increasing enterprise load of customers using MongoDB.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从第2版到第3版的过程中，聚合框架被引入，主要作为老化的（并且从未达到专用框架（如Hadoop）的水平）MapReduce框架的补充。然后，添加了文本搜索，并且慢慢但确定地，该框架正在改进性能、稳定性和安全性，以适应使用MongoDB的客户的不断增加的企业负载。
- en: With WiredTiger's introduction in version 3, locking became much less of an
    issue for MongoDB, as it was brought down from the process (global lock) to the
    document level, almost the most granular level possible.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随着WiredTiger在第3版中的引入，对于MongoDB来说，锁定不再是一个问题，因为它从进程（全局锁）降至文档级别，几乎是可能的最粒度级别。
- en: Version 4 marked a major transition, bridging the SQL and NoSQL world with the
    introduction of multi-document ACID transactions. This allowed for a wider range
    of applications to use MongoDB, especially applications that require a strong
    real-time consistency guarantee. Further, the introduction of change streams allowed
    for a faster time to market for real-time applications using MongoDB. A series
    of tools have also been introduced, to facilitate serverless, mobile, and **Internet
    of Things** (**IoT**) development.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第4版标志着一个重大转变，通过引入多文档ACID事务，将SQL和NoSQL世界联系起来。这使得更广泛范围的应用程序可以使用MongoDB，特别是需要强大的实时一致性保证的应用程序。此外，引入变更流允许使用MongoDB的实时应用程序更快地上市。还引入了一系列工具，以便于无服务器、移动和物联网开发。
- en: In its current state, MongoDB is a database that can handle loads ranging from
    start up MVPs and POCs to enterprise applications with hundreds of servers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前状态下，MongoDB是一个可以处理从初始MVP和POC到拥有数百台服务器的企业应用程序的数据库。
- en: MongoDB for SQL developers
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL开发人员的MongoDB
- en: MongoDB was developed in the Web 2.0 era. By then, most developers had been
    using SQL or **object-relational mapping** (**ORM**) tools from their language
    of choice to access RDBMS data. As such, these developers needed an easy way to
    get acquainted with MongoDB from their relational background.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是在Web 2.0时代开发的。那时，大多数开发人员一直在使用SQL或他们选择的语言中的**对象关系映射**（**ORM**）工具来访问关系型数据库的数据。因此，这些开发人员需要一种从他们的关系背景中轻松了解MongoDB的方法。
- en: Thankfully, there have been several attempts at making SQL to MongoDB cheat
    sheets that explain the MongoDB terminology in SQL terms.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 值得庆幸的是，已经有几次尝试制作SQL到MongoDB的速查表，解释了SQL术语中的MongoDB术语。
- en: 'On a higher level, we have the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高的层次上，我们有以下内容：
- en: Databases and indexes (SQL databases)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库和索引（SQL数据库）
- en: Collections (SQL tables)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合（SQL表）
- en: Documents (SQL rows)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档（SQL行）
- en: Fields (SQL columns)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段（SQL列）
- en: Embedded and linked documents (SQL joins)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入和链接文档（SQL连接）
- en: 'Some more examples of common operations are shown in the following table:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见操作的更多示例：
- en: '| **SQL** | **MongoDB** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **SQL** | **MongoDB** |'
- en: '| Database | Database |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 数据库 | 数据库 |'
- en: '| Table | Collection |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 集合 |'
- en: '| Index | Index |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 索引 |'
- en: '| Row | Document |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 行 | 文档 |'
- en: '| Column | Field |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 字段 |'
- en: '| Joins | Embed in document or link via `DBRef` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | 嵌入文档或通过`DBRef`链接 |'
- en: '| `CREATE TABLE employee (name VARCHAR(100))` | `db.createCollection("employee")`
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `CREATE TABLE employee (name VARCHAR(100))` | `db.createCollection("employee")`
    |'
- en: '| `INSERT INTO employees VALUES (Alex, 36)` | `db.employees.insert({name: "Alex",
    age: 36})` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `INSERT INTO employees VALUES (Alex, 36)` | `db.employees.insert({name: "Alex",
    age: 36})` |'
- en: '| `SELECT * FROM employees` | `db.employees.find()` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT * FROM employees` | `db.employees.find()` |'
- en: '| `SELECT * FROM employees LIMIT 1` | `db.employees.findOne()` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT * FROM employees LIMIT 1` | `db.employees.findOne()` |'
- en: '| `SELECT DISTINCT name FROM employees` | `db.employees.distinct("name")` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `SELECT DISTINCT name FROM employees` | `db.employees.distinct("name")` |'
- en: '| `UPDATE employees SET age = 37 WHERE name = ''Alex''` | `db.employees.update({name:
    "Alex"}, {$set: {age: 37}}, {multi: true})` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `UPDATE employees SET age = 37 WHERE name = ''Alex''` | `db.employees.update({name:
    "Alex"}, {$set: {age: 37}}, {multi: true})` |'
- en: '| `DELETE FROM employees WHERE name = ''Alex''` | `db.employees.remove({name:
    "Alex"})` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE FROM employees WHERE name = ''Alex''` | `db.employees.remove({name:
    "Alex"})` |'
- en: '| `CREATE INDEX ON employees (name ASC)` | `db.employees.ensureIndex({name:
    1})`  |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `CREATE INDEX ON employees (name ASC)` | `db.employees.ensureIndex({name:
    1})` |'
- en: Further examples of common operations can be seen at [http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pd](http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf)[f](http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf)[.](http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更多常见操作的示例可在[http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pd](http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf)[f](http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf)[.](http://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf)中查看。
- en: MongoDB for NoSQL developers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoSQL开发人员的MongoDB
- en: As MongoDB has grown from being a niche database solution to the Swiss Army
    knife of NoSQL technologies, more developers are coming to it from a NoSQL background,
    as well.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着MongoDB从一种小众数据库解决方案发展为NoSQL技术的瑞士军刀，越来越多的开发人员从NoSQL背景转向它。
- en: 'Putting the SQL to NoSQL differences aside, it is users from columnar-type
    databases that face the most challenges. With Cassandra and HBase being the most
    popular column-oriented database management systems, we will examine the differences
    and how a developer can migrate a system to MongoDB. The different features of
    MongoDB for NoSQL developers are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将SQL转换为NoSQL的差异放在一边，面对最大挑战的是列式数据库的用户。随着Cassandra和HBase成为最受欢迎的列式数据库管理系统，我们将研究它们之间的差异以及开发人员如何将系统迁移到MongoDB。MongoDB针对NoSQL开发人员的不同特性如下：
- en: '**Flexibility**: MongoDB''s notion of documents that can contain sub-documents
    nested in complex hierarchies is really expressive and flexible. This is similar
    to the comparison between MongoDB and SQL, with the added benefit that MongoDB
    can more easily map to plain old objects from any programming language, allowing
    for easy deployment and maintenance.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：MongoDB的文档概念可以包含在复杂层次结构中嵌套的子文档，这真的很表达和灵活。这类似于MongoDB和SQL之间的比较，但MongoDB更容易地映射到任何编程语言的普通对象，从而实现轻松的部署和维护。 '
- en: '**Flexible query model**: A user can selectively index some parts of each document;
    query based on attribute values, regular expressions, or ranges; and have as many
    properties per object as needed by the application layer. Primary and secondary
    indexes, as well as special types of indexes (such as sparse ones), can help greatly
    with query efficiency. Using a JavaScript shell with MapReduce makes it really
    easy for most developers (and many data analysts) to quickly take a look at data
    and get valuable insights.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的查询模型**：用户可以选择性地索引每个文档的某些部分；基于属性值、正则表达式或范围进行查询；并且应用层可以拥有所需的任意多的对象属性。主索引和辅助索引，以及特殊类型的索引（如稀疏索引），可以极大地提高查询效率。使用JavaScript
    shell和MapReduce使大多数开发人员（以及许多数据分析师）能够快速查看数据并获得有价值的见解。'
- en: '**Native aggregation**: The aggregation framework provides an **extract, transform,
    load** (**ETL**) pipeline for users to extract and transform data from MongoDB,
    and either load it in a new format or export it from MongoDB to other data sources.
    This can also help data analysts and scientists to get the slice of data they
    need in performing data wrangling along the way.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地聚合**：聚合框架为用户提供了一个**提取、转换、加载**（**ETL**）管道，用户可以从MongoDB中提取和转换数据，然后将其加载到新格式中，或者将其从MongoDB导出到其他数据源。这也可以帮助数据分析师和科学家在执行数据整理时获得他们需要的数据片段。'
- en: '**Schema-less model**: This is a result of MongoDB''s design philosophy to
    give applications the power and responsibility to interpret the different properties
    found in a collection''s documents. In contrast to Cassandra''s or HBase''s schema-based
    approach, in MongoDB, a developer can store and process dynamically generated
    attributes.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无模式模型**：这是MongoDB设计理念的结果，它赋予应用程序解释集合文档中不同属性的权力和责任。与Cassandra或HBase的基于模式的方法相比，在MongoDB中，开发人员可以存储和处理动态生成的属性。'
- en: MongoDB's key characteristics and use cases
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB的关键特点和用例
- en: In this section, we will analyze MongoDB's characteristics as a database. Understanding
    the features that MongoDB provides can help developers and architects to evaluate
    the requirements at hand and how MongoDB can help to fulfill them. Also, we will
    go over some common use cases from the experience of  MongoDB, Inc. that have
    delivered the best results for its users.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将分析MongoDB作为数据库的特点。了解MongoDB提供的功能可以帮助开发人员和架构师评估手头的需求以及MongoDB如何帮助实现它们。此外，我们将从MongoDB，Inc.的经验中介绍一些常见的用例，这些用例为其用户带来了最佳结果。
- en: Key characteristics
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键特点
- en: 'MongoDB has grown to become a general purpose NoSQL database, offering the
    best of both the RDBMS and NoSQL worlds. Some of the key characteristics are as
    follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB已经发展成为一个通用的NoSQL数据库，提供了关系型数据库管理系统和NoSQL世界的最佳特性。一些关键特点如下：
- en: '**It is a general purpose database**: In contrast to other NoSQL databases
    that are built for specific purposes (for example, graph databases), MongoDB can
    serve heterogeneous loads and multiple purposes within an application. This became
    even more true after version 4.0 introduced multi-document ACID transactions,
    further expanding the use cases in which it can be effectively used.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它是一个通用数据库**：与为特定目的（例如图形数据库）构建的其他NoSQL数据库相比，MongoDB可以为应用程序中的异构负载和多个目的提供服务。在4.0版本引入多文档ACID事务后，这一点变得更加真实，进一步扩展了它可以有效使用的用例。'
- en: '**Flexible schema design**: Document-oriented approaches with non-defined attributes
    that can be modified on the fly is a key contrast between MongoDB and relational
    databases.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的模式设计**：文档导向的方法具有非定义属性，可以在运行时修改，这是MongoDB与关系数据库之间的关键对比。'
- en: '**It is built with high availability, from the ground up**: In our era of five
    nines in availability, this has to be a given. Coupled with automatic failover
    upon detection of a server failure, this can help to achieve high uptime.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从头开始构建高可用性**：在我们这个五个九的可用性时代，这是必须的。配合服务器故障检测后的自动故障转移，这可以帮助实现高可用性。'
- en: '**Feature rich**: Offering the full range of SQL equivalent operators, along
    with features such as MapReduce, aggregation framework, Time to Live and capped
    collections, and secondary indexing, MongoDB can fit many use cases, no matter
    how diverse the requirements are.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能丰富**：提供全面的SQL等效操作符，以及诸如MapReduce、聚合框架、生存时间和封闭集合、次要索引等功能，MongoDB可以适应许多用例，无论需求多么多样化。'
- en: '**Scalability and load balancing**: It is built to scale, both vertically and
    (mainly) horizontally. Using sharding, an architect can share a load between different
    instances and achieve both read and write scalability. Data balancing happens
    automatically (and transparently to the user) via the shard balancer.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和负载平衡**：它被设计为垂直和（主要）水平扩展。使用分片，架构师可以在不同实例之间共享负载，并实现读写可扩展性。数据平衡通过分片平衡器自动发生（对用户透明）。'
- en: '**Aggregation framework**: Having an ETL framework built in the database means
    that a developer can perform most of the ETL logic before the data leaves the
    database, eliminating, in many cases, the need for complex data pipelines.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合框架**：在数据库中内置ETL框架意味着开发人员可以在数据离开数据库之前执行大部分ETL逻辑，从而在许多情况下消除了复杂数据管道的需求。'
- en: '**Native replication**: Data will get replicated across a replica set without
    complicated setup.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地复制**：数据将在不复杂的设置情况下在副本集之间复制。'
- en: '**Security features**: Both authentication and authorization are taken into
    account, so that an architect can secure their MongoDB instances.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全功能**：考虑到了身份验证和授权，因此架构师可以保护他们的MongoDB实例。'
- en: '**JSON (BSON and Binary JSON) objects for storing and transmitting documents**:
    JSON is widely used across the web for frontend and API communication, and, as
    such, it is easier when the database is using the same protocol.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于存储和传输文档的JSON（BSON和二进制JSON）对象**：JSON在网页前端和API通信中被广泛使用，因此当数据库使用相同的协议时会更容易。'
- en: '**MapReduce**: Even though the MapReduce engine is not as advanced as it is
    in dedicated frameworks, it is nonetheless a great tool for building data pipelines.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MapReduce**：尽管MapReduce引擎不像专用框架中那样先进，但它仍然是构建数据管道的好工具。'
- en: '**Querying and geospatial information in 2D and 3D**: This may not be critical
    for many applications, but if it is for your use case, then it is really convenient
    to be able to use the same database for geospatial calculations and data storage.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在2D和3D中查询和地理空间信息**：对于许多应用程序来说可能并不重要，但如果对于您的用例而言，能够在同一个数据库中进行地理空间计算和数据存储是非常方便的。'
- en: '**Multi-document ACID transactions**: Starting from version 4.0, MongoDB supports
    ACID transactions across multiple documents.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多文档ACID事务**：从4.0版本开始，MongoDB支持跨多个文档的ACID事务。'
- en: '**Mature tooling**: The tooling for MongoDB has evolved to support from DBaaS
    to Sync, Mobile, and serverless (Stitch).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成熟的工具**：MongoDB的工具已经发展，支持从DBaaS到Sync、Mobile和无服务器（Stitch）。'
- en: Use cases for MongoDB
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB的用例
- en: Since MongoDB is a highly popular NoSQL database, there have been several use
    cases where it has succeeded in supporting quality applications, with a great
    delivery time to the market.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MongoDB是一种非常流行的NoSQL数据库，因此已经有几个成功的用例，它成功支持了高质量的应用程序，并且交付时间很短。
- en: 'Many of its most successful use cases center around the following areas:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 许多最成功的用例都集中在以下领域：
- en: Integration of siloed data, providing a single view of them
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合孤立的数据，提供它们的单一视图
- en: IoT
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网
- en: Mobile applications
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用
- en: Real-time analytics
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时分析
- en: Personalization
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个性化
- en: Catalog management
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录管理
- en: Content management
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容管理
- en: 'All of these success stories share some common characteristics. We will try
    to break them down in order of relative importance:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些成功案例都有一些共同特点。我们将尝试按相对重要性的顺序来分解它们。
- en: Schema flexibility is probably the most important one. Being able to store documents
    inside of a collection that can have different properties can help during both
    the development phase and in ingesting data from heterogeneous sources that may
    or may not have the same properties. This is in contrast with an RDBMS, where
    columns need to be predefined and having sparse data can be penalized. In MongoDB,
    this is the norm, and it is a feature that most use cases share. Having the ability
    to deeply nest attributes into documents and add arrays of values into attributes
    while also being able to search and index these fields helps application developers
    to exploit the schema-less nature of MongoDB.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式灵活性可能是最重要的特性。能够在集合中存储具有不同属性的文档可以帮助在开发阶段和从可能具有不同属性的异构来源摄取数据时。这与关系型数据库形成对比，在关系型数据库中，列需要预定义，而稀疏数据可能会受到惩罚。在MongoDB中，这是正常的，也是大多数用例共享的特性。能够深度嵌套属性到文档中，并将值数组添加到属性中，同时能够搜索和索引这些字段，有助于应用程序开发人员利用MongoDB的无模式特性。
- en: Scaling and sharding are the most common patterns for MongoDB use cases. Easily
    scaling using built-in sharding and using replica sets for data replication and
    offloading primary servers from read load can help developers store data effectively.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展和分片是MongoDB用例中最常见的模式。使用内置分片轻松扩展，并使用副本集进行数据复制和卸载主服务器的读取负载，可以帮助开发人员有效地存储数据。
- en: Many use cases also use MongoDB as a way of archiving data. Used as a pure data
    store (and not having the need to define schemas), it is fairly easy to dump data
    into MongoDB to be analyzed at a later date by business analysts, using either
    the shell or some of the numerous BI tools that can easily integrate with MongoDB.
    Breaking data down further, based on time caps or document counts, can help serve
    these datasets from RAM, the use case in which MongoDB is most effective.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多用例还使用MongoDB作为存档数据的一种方式。作为纯数据存储（而不需要定义模式），将数据倾倒到MongoDB中以供以后由业务分析人员分析，可以很容易地使用shell或一些可以轻松集成MongoDB的众多BI工具。根据时间限制或文档计数进一步分解数据，可以帮助从RAM中提供这些数据集，这是MongoDB最有效的用例。
- en: Keeping datasets in RAM helps performance, and that's why it is commonly used
    in practice. MongoDB uses MMAP storage (called **MMAPv1**) in most versions, up
    to the most recent, which delegates data mapping to the underlying operating system.
    This means that most GNU/Linux-based systems, working with collections that can
    be stored in RAM, will dramatically increase performance. This is less of an issue
    with the introduction of pluggable storage engines, such as WiredTiger (there
    will be more on that in [Chapter 8](a16331a3-8736-4ad4-a14a-a48cd3c545a8.xhtml),
    *Monitoring, Backup, and Security*).
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据集保留在RAM中有助于性能，这也是实践中常用的方法。MongoDB在大多数版本中使用MMAP存储（称为MMAPv1），直到最近的版本，它将数据映射委托给底层操作系统。这意味着大多数基于GNU/Linux的系统，与可以存储在RAM中的集合一起工作，将大大提高性能。随着可插拔存储引擎的引入，如WiredTiger（在[第8章](a16331a3-8736-4ad4-a14a-a48cd3c545a8.xhtml)中将有更多介绍，*监控、备份和安全*），这个问题就不那么严重了。
- en: Capped collections are also a feature used in many use cases. Capped collections
    can restrict documents in a collection by count or by the overall size of the
    collection. In the latter case, we need to have an estimate of the size per document,
    in order to calculate how many documents will fit into our target size. Capped
    collections are a quick and dirty solution to answering requests such as g*ive
    me the last hour's overview of the logs* without the need for maintenance and
    running async background jobs to clean our collection. Oftentimes, these may be
    used to quickly build and operate a queuing system. Instead of deploying and maintaining
    a dedicated queuing system, such as ActiveMQ, a developer can use a collection
    to store messages, and then use the native tailable cursors provided by MongoDB
    to iterate through the results as they pile up and feed an external system.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封顶集合也是许多用例中使用的一个特性。封顶集合可以通过文档数量或集合的整体大小来限制集合中的文档。在后一种情况下，我们需要估计每个文档的大小，以便计算有多少文档可以适应我们的目标大小。封顶集合是快速而简单的解决方案，可以回答诸如“给我上一个小时的日志概览”之类的请求，而无需进行维护和运行异步后台作业来清理我们的集合。通常情况下，这些可能被用来快速构建和操作一个排队系统。开发人员可以使用集合来存储消息，然后使用MongoDB提供的本地可追加游标来迭代结果，以便在结果堆积并向外部系统提供数据时使用。
- en: Low operational overhead is also a common pattern in many use cases. Developers
    working in agile teams can operate and maintain clusters of MongoDB servers without
    the need for a dedicated DBA. **MongoDB Management Service** (**MMS**) can greatly
    help in reducing administrative overhead, whereas MongoDB Atlas, the hosted solution
    by MongoDB, Inc., means that developers do not need to deal with operational headaches.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低运营开销也是许多用例中的常见模式。在敏捷团队中工作的开发人员可以操作和维护MongoDB服务器集群，而无需专门的数据库管理员。MongoDB管理服务（MMS）可以极大地帮助减少管理开销，而MongoDB
    Atlas，MongoDB公司提供的托管解决方案，意味着开发人员不需要处理运营方面的问题。
- en: In terms of business sectors using MongoDB, there is a huge variety coming from
    almost all industries. Where there seems to be a greater penetration, however,
    is in cases that have to deal with lots of data with a relatively low business
    value in each single data point. Fields such as IoT can benefit the most by exploiting
    the availability over consistency design, storing lots of data from sensors in
    a cost-efficient way. Financial services, on the other hand, have absolutely stringent
    consistency requirements, aligned with proper ACID characteristics that make MongoDB
    more of a challenge to adapt. A financial transaction may be small in size but
    big in impact, which means that we cannot afford to leave a single message without
    proper processing.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用MongoDB的业务领域中，几乎所有行业都有各种各样的应用。然而，似乎更多的是在需要处理大量数据，但每个数据点的商业价值相对较低的情况下。例如，物联网等领域可以通过利用可用性而非一致性设计来获益，以成本效益的方式存储来自传感器的大量数据。另一方面，金融服务则绝对需要严格的一致性要求，符合适当的ACID特性，这使得MongoDB更具挑战性。金融交易可能规模较小，但影响巨大，这意味着我们不能不经过适当处理就放任一个消息。
- en: Location-based data is also a field where MongoDB has thrived, with Foursquare
    being one of the most prominent early clients. MongoDB offers quite a rich set
    of features around two-dimensional and three-dimensional geolocation data, offering
    features such as searching by distance, geofencing, and intersections between
    geographical areas.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于位置的数据也是MongoDB蓬勃发展的领域之一，Foursquare是最著名的早期客户之一。MongoDB提供了丰富的二维和三维地理位置数据功能，包括按距离搜索、地理围栏和地理区域之间的交集等功能。
- en: Overall, the rich feature set is the common pattern across different use cases.
    By providing features that can be used in many different industries and applications,
    MongoDB can be a unified solution for all business needs, offering users the ability
    to minimize operational overhead and, at the same time, iterate quickly in product
    development.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总的来说，丰富的功能集是不同用例中的共同模式。通过提供可以在许多不同行业和应用中使用的功能，MongoDB可以成为所有业务需求的统一解决方案，为用户提供最小化运营开销的能力，同时在产品开发中快速迭代。
- en: MongoDB criticism
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB的批评
- en: 'MongoDB''s criticism is associated with the following points:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB的批评与以下几点有关：
- en: MongoDB has had its fair share of criticism throughout the years. The web-scale proposition
    has been met with skepticism by many developers. The counter argument is that
    scale is not needed most of the time, and the focus should be on other design
    considerations. While this may occasionally be true, it is a false dichotomy,
    and in an ideal world, we would have both. MongoDB is as close as it can get to
    combining scalability with features, ease of use, and time to market.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多年来，MongoDB一直备受批评。许多开发人员对其Web规模的主张持怀疑态度。反驳的观点是大多数情况下并不需要规模化，重点应该放在其他设计考虑上。虽然这有时可能是真的，但这是一个虚假的二分法，在理想的世界中，我们应该兼而有之。MongoDB尽可能地将可伸缩性与功能、易用性和上市时间结合在一起。
- en: MongoDB's schema-less nature is also a big point of debate and argument. Schema-less
    can be really beneficial in many use cases, as it allows for heterogeneous data
    to be dumped into the database without complex cleansing and without ending up
    with lots of empty columns or blocks of text stuffed into a single column. On
    the other hand, this is a double-edged sword, as a developer may end up with many
    documents in a collection that have loose semantics in their fields, and it can
    become really hard to extract these semantics at the code level. If our schema
    design is not optimal, we may end up with a data store, rather than a database.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB的无模式特性也是一个很大的争论点。在许多用例中，无模式可以带来很多好处，因为它允许将异构数据倾入数据库，而无需复杂的清洗，也不会导致大量空列或文本块堆积在单个列中。另一方面，这是一把双刃剑，因为开发人员可能会在集合中拥有许多文档，这些文档在字段上具有松散的语义，而在代码级别提取这些语义可能会变得非常困难。如果我们的模式设计不够理想，我们可能最终得到的是一个数据存储，而不是一个数据库。
- en: A lack of proper ACID guarantees is a recurring complaint from the relational
    world. Indeed, if a developer needs access to more than one document at a time,
    it is not easy to guarantee RDBMS properties, as there are no transactions. Having
    no transactions, in the RDBMS sense, also means that complex writes will need
    to have application-level logic to roll back. If you need to update three documents
    in two collections to mark an application-level transaction complete, and the
    third document does not get updated for whatever reason, the application will
    need to undo the previous two writes, something that may not exactly be trivial.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自关系型数据库世界的一个经常的抱怨是缺乏适当的ACID保证。事实上，如果开发人员需要同时访问多个文档，要保证关系型数据库的特性并不容易，因为没有事务。没有事务，也意味着复杂的写操作需要应用级逻辑来回滚。如果需要更新两个集合中的三个文档以标记一个应用级事务完成，但第三个文档由于某种原因没有被更新，应用程序将需要撤销前两次写操作，这可能并不是一件简单的事情。
- en: With the introduction of multi-document transactions in version 4.0, MongoDB
    can cope with ACID transactions at the expense of speed. While this is not ideal,
    and transactions are not meant to be used for every CRUD operation in MongoDB,
    it does address the main source of criticism.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着在4.0版本中引入多文档事务，MongoDB可以应对ACID事务，但速度会受到影响。虽然这并不理想，事务并不适用于MongoDB中的每个CRUD操作，但它解决了主要的批评来源。
- en: Defaults that favored setting up MongoDB but not operating it in a production
    environment are disapproved. For years, the default write behavior was **write
    and forget**; sending a write wouldn't wait for an acknowledgement before attempting
    the next write, resulting in insane write speeds with poor behaviors in cases
    of failure. Authentication is also an afterthought, leaving thousands of MongoDB
    databases on the public internet prey to whoever wants to read the stored data.
    Even though these were conscious design decisions, they are decisions that have
    affected developers' perceptions of MongoDB.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不赞成设置MongoDB的默认写入行为，但不在生产环境中进行操作。多年来，默认的写入行为是**写入并忘记**；发送写入操作不会在尝试下一个写入操作之前等待确认，导致写入速度极快，在发生故障时行为不佳。认证也是事后考虑，导致成千上万的MongoDB数据库在公共互联网上成为任何想要读取存储数据的人的猎物。尽管这些是有意识的设计决策，但它们影响了开发人员对MongoDB的看法。
- en: MongoDB configuration and best practices
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB配置和最佳实践
- en: In this section, we will present some of the best practice around operations,
    schema design, durability, replication, sharding, and security. Further information
    on when to implement these best practices will be presented in later chapters.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些关于操作、模式设计、耐久性、复制、分片和安全性的最佳实践。关于何时实施这些最佳实践的进一步信息将在后面的章节中介绍。
- en: Operational best practices
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运营最佳实践
- en: As a database, MongoDB is built with developers in mind, and it was developed
    during the web era, so it does not require as much operational overhead as traditional
    RDBMS. That being said, there are some best practices that need to be followed
    to be proactive and achieve high availability goals.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据库，MongoDB是为开发人员而构建的，并且是在Web时代开发的，因此不需要像传统的关系型数据库管理系统那样多的运营开销。尽管如此，仍然需要遵循一些最佳实践，以积极主动并实现高可用性目标。
- en: 'In order of importance, the best practices are as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 按重要性顺序，最佳实践如下：
- en: '**Turn journaling on by default**: Journaling uses a write-ahead log to be
    able to recover if a MongoDB server gets shut down abruptly. With the MMAPv1 storage
    engine, journaling should always be on. With the WiredTiger storage engine, journaling
    and checkpointing are used together, to ensure data durability. In any case, it
    is a good practice to use journaling and fine-tune the size of journals and the
    frequency of checkpoints, to avoid the risk of data loss. In MMAPv1, the journal
    is flushed to the disk every 100 ms, by default. If MongoDB is waiting for the
    journal before acknowledging the write operation, the journal is flushed to the
    disk every 30 ms.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认情况下打开日志记录**：日志记录使用预写式日志，以便在MongoDB服务器突然关闭时能够恢复。对于MMAPv1存储引擎，日志记录应始终打开。对于WiredTiger存储引擎，日志记录和检查点一起使用，以确保数据的耐久性。无论如何，使用日志记录并调整日志和检查点的大小和频率，以避免数据丢失，是一个好习惯。在MMAPv1中，默认情况下，日志每100毫秒刷新到磁盘一次。如果MongoDB在确认写操作之前等待日志记录，那么日志将在30毫秒内刷新到磁盘。'
- en: '**Your working set should fit in the memory**: Again, especially when using
    MMAPv1, the working set is best being less than the RAM of the underlying machine
    or VM. MMAPv1 uses memory mapped files from the underlying operating system, which
    can be a great benefit if there isn''t much swap happening between the RAM and
    disk. WiredTiger, on the other hand, is much more efficient at using the memory,
    but still benefits greatly from the same principles. The working set is maximum
    the datasize and plus the index size as reported by `db.stats()`.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您的工作集应该适合内存**：再次强调，特别是在使用MMAPv1时，工作集最好小于底层机器或虚拟机的RAM。MMAPv1使用来自底层操作系统的内存映射文件，如果RAM和磁盘之间没有太多的交换发生，这可能是一个很大的好处。另一方面，WiredTiger在使用内存方面效率更高，但仍然极大地受益于相同的原则。工作集最大是由`db.stats()`报告的数据大小加上索引大小。'
- en: '**Mind the location of your data files**: Data files can be mounted anywhere
    by using the `--dbpath` command-line option. It is really important to make sure
    that data files are stored in partitions with sufficient disk space, preferably
    XFS, or at least **Ext4**.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意数据文件的位置**：数据文件可以通过使用`--dbpath`命令行选项挂载到任何位置。确保数据文件存储在具有足够磁盘空间的分区中，最好是XFS，或至少是**Ext4**，这一点非常重要。'
- en: '**Keep yourself updated with versions**: Even major numbered versions are the
    stable ones. So, 3.2 is stable, whereas 3.3 is not. In this example, 3.3 is the
    developmental version that will eventually materialize into the stable version
    3.4\. It is a good practice to always update to the latest security updated version
    (4.0.2, at the time of writing this book) and to consider updating as soon as
    the next stable version comes out (4.2, in this example).'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持与版本的更新**：即使是主要编号的版本也是稳定的。因此，3.2是稳定的，而3.3不是。在这个例子中，3.3是将最终实现为稳定版本3.4的开发版本。始终更新到最新的安全更新版本（在撰写本书时为4.0.2），并在下一个稳定版本发布时考虑更新（在这个例子中为4.2）是一个好习惯。'
- en: '**Use Mongo MMS to graphically monitor your service**: The free MongoDB, Inc.
    monitoring service is a great tool to get an overview of a MongoDB cluster, notifications,
    and alerts and to be proactive about potential issues.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Mongo MMS图形监控您的服务**：免费的MongoDB，Inc.监控服务是一个很好的工具，可以概览MongoDB集群、通知和警报，并积极应对潜在问题。'
- en: '**Scale up if your metrics show heavy use**: Do not wait until it is too late.
    Utilizing more than 65% in CPU or RAM, or starting to notice disk swapping, should
    both be the threshold to start thinking about scaling, either vertically (by using
    bigger machines) or horizontally (by sharding).'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果您的指标显示出重度使用，请扩展规模**：不要等到为时已晚。利用超过65%的CPU或RAM，或开始注意到磁盘交换，都应该是开始考虑扩展的门槛，可以通过垂直扩展（使用更大的机器）或水平扩展（通过分片）。'
- en: '**Be careful when sharding**: Sharding is a strong commitment to your shard
    key. If you make the wrong decision, it may be really difficult to go back, from
    an operational perspective. When designing for sharding, architects need to take
    deep considerations of the current workloads (reads/writes) and what the current
    and expected data access patterns are.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分片时要小心：分片是对分片键的强烈承诺。如果做出错误决定，从操作角度来看可能会非常困难。在设计分片时，架构师需要深入考虑当前的工作负载（读/写）以及当前和预期的数据访问模式。
- en: '**Use an application driver maintained by the MongoDB team**: These drivers
    are supported and tend to get updated faster than drivers with no official support.
    If MongoDB does not support the language that you are using yet, please open a
    ticket in MongoDB''s JIRA tracking system.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用由MongoDB团队维护的应用程序驱动程序：这些驱动程序得到支持，并且往往比没有官方支持的驱动程序更新得更快。如果MongoDB尚不支持您使用的语言，请在MongoDB的JIRA跟踪系统中提交工单。
- en: '**Schedule regular backups**: No matter whether you are using standalone servers,
    replica sets, or sharding, a regular backup policy should also be used as a second-level
    guard against data loss. XFS is a great choice as a filesystem, as it can perform
    snapshot backups.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期备份计划：无论您使用独立服务器、副本集还是分片，都应该使用定期备份策略作为第二级防止数据丢失的保护。XFS是一个很好的文件系统选择，因为它可以执行快照备份。
- en: '**Manual backups should be avoided**: Regular, automated backups should be
    used, when possible. If we need to resort to a manual backup, then we can use
    a hidden member in a replica set to take the backup from. We have to make sure
    that we are using `db.fsyncwithlock` at this member, to get the maximum consistency
    at this node, along with having journaling turned on. If this volume is on AWS,
    we can get away with taking an EBS snapshot straight away.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动备份应该避免：在可能的情况下应该使用定期自动备份。如果我们需要进行手动备份，那么我们可以使用副本集中的隐藏成员来进行备份。我们必须确保在该成员上使用`db.fsyncwithlock`，以获得节点的最大一致性，同时打开日志记录。如果这个卷在AWS上，我们可以立即进行EBS快照备份。
- en: '**Enable database access control**: Never, ever put a database into a production
    system without access control. Access control should be implemented at a node
    level, by a proper firewall that only allows access to specific application servers
    to the database, and at a DB level, by using the built-in roles or defining custom
    defined ones. This has to be initialized at start up time by using the `--auth`
    command-line parameter and can be configured by using the `admin` collection.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用数据库访问控制：绝对不要在生产系统中放入没有访问控制的数据库。访问控制应该在节点级别实施，通过一个适当的防火墙，只允许特定应用服务器访问数据库，并在数据库级别使用内置角色或定义自定义角色。这必须在启动时使用`--auth`命令行参数进行初始化，并可以通过`admin`集合进行配置。
- en: '**Test your deployment using real data**: Since MongoDB is a schema-less, document-oriented
    database, you may have documents with varying fields. This means that it is even
    more important than with an RDBMS to test using data that resembles production
    data as closely as possible. A document with an extra field of an unexpected value
    can make the difference between an application working smoothly or crashing at
    runtime. Try to deploy a staging server using production-level data, or at least
    fake your production data in staging, by using an appropriate library, such as
    Faker for Ruby.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用真实数据测试部署：由于MongoDB是一个无模式、面向文档的数据库，您可能有具有不同字段的文档。这意味着与关系数据库管理系统相比，使用尽可能接近生产数据的数据进行测试更加重要。具有意外值的额外字段的文档可能会导致应用程序在运行时顺利工作或崩溃之间的差异。尝试使用生产级数据部署一个分级服务器，或者至少在分级中使用适当的库（例如Ruby的Faker）伪造生产数据。
- en: Schema design best practices
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式设计最佳实践
- en: 'MongoDB is schema-less, and you have to design your collections and indexes
    to accommodate for this fact:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是无模式的，您必须设计您的集合和索引以适应这一事实：
- en: '**Index early and often**: Identify common query patterns, using MMS, Compass
    GUI, or logs, and index for these early, using as many indexes as possible at
    the beginning of a project.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 早期和频繁地建立索引：使用MMS、Compass GUI或日志识别常见的查询模式，并在项目开始时尽可能多地建立这些索引。
- en: '**Eliminate unnecessary indexes**: A bit counter-intuitive to the preceding
    suggestion, monitor your database for changing query patterns, and drop the indexes
    that are not being used. An index will consume RAM and I/O, as it needs to be
    stored and updated along with documents in the database. Using an aggregation
    pipeline and `$indexStats`, a developer can identify the indexes that are seldom
    being used and eliminate them.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除不必要的索引：与前面的建议有些相悖，监视数据库的查询模式变化，并删除未被使用的索引。索引将消耗内存和I/O，因为它需要与数据库中的文档一起存储和更新。使用聚合管道和`$indexStats`，开发人员可以识别很少被使用的索引并将其删除。
- en: '**Use a compound index, rather than index intersection**: Querying with multiple
    predicates (*A* and *B*, *C* or *D* and *E*, and so on) will work better with
    a single compound index than with multiple simple indexes, most of the time. Also,
    a compound index will have its data ordered by field, and we can use this to our
    advantage when querying. An index on fields *A*, *B*, and *C* will be used in
    queries for *A*, *(A,B)*, *(A,B,C)*, but not in querying for *(B,C)* or *(C)*.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复合索引，而不是索引交集：使用多个谓词（*A*和*B*，*C*或*D*和*E*等）进行查询，通常使用单个复合索引比使用多个简单索引更好。此外，复合索引将其数据按字段排序，我们可以在查询时利用这一点。在字段*A*、*B*和*C*上的索引将用于查询*A*、*(A,B)*、*(A,B,C)*，但不用于查询*(B,C)*或*(C)*。
- en: '**Low selectivity indexes**: Indexing a field on gender, for example, will
    statistically return half of our documents back, whereas an index on last name
    will only return a handful of documents with the same last name.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低选择性索引：例如，在性别字段上建立索引，统计上会返回一半的文档，而在姓氏上建立索引只会返回少量具有相同姓氏的文档。
- en: '**Use regular expressions**: Again, since indexes are ordered by value, searching
    using a regular expression with leading wildcards (that is, `/.*BASE/`) won''t
    be able to use the index. Searching with trailing wildcards (that is, `/DATA.*/`)
    can be efficient, as long as there are enough case-sensitive characters in the
    expression.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用正则表达式**：同样，由于索引是按值排序的，使用具有前置通配符的正则表达式（即`/.*BASE/`）将无法使用索引。使用具有尾随通配符的正则表达式（即`/DATA.*/`）可能是有效的，只要表达式中有足够的区分大小写的字符。'
- en: '**Avoid negation in queries**: Indexes are indexing values, not the absence
    of them. Using `NOT` in queries can result in full table scans, instead of using
    the index.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免在查询中使用否定**：索引是对值进行索引，而不是它们的缺失。在查询中使用`NOT`可能导致对整个表的扫描，而不是使用索引。'
- en: '**Use partial indexes**: If we need to index a subset of the documents in a
    collection, partial indexes can help us to minimize the index set and improve
    performance. A partial index will include a condition on the filter that we use
    in the desired query.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用部分索引**：如果我们需要对集合中的一部分文档进行索引，部分索引可以帮助我们最小化索引集并提高性能。部分索引将包括我们在所需查询中使用的过滤器上的条件。'
- en: '**Use document validation**: Use document validation to monitor for new attributes
    being inserted into your documents and decide what to do with them. With document
    validation set to warn, we can keep a log of documents that were inserted with
    arbitrary attributes that we did not expect during the design phase, and decide
    whether this is a bug or a feature of our design.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用文档验证**：使用文档验证来监视插入文档中的新属性，并决定如何处理它们。通过将文档验证设置为警告，我们可以保留在设计阶段未预期插入具有任意属性的文档的日志，并决定这是设计的错误还是特性。'
- en: '**Use MongoDB Compass**: MongoDB''s free visualization tool is great for getting
    a quick overview of our data and how it grows over time.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用MongoDB Compass**：MongoDB的免费可视化工具非常适合快速了解我们的数据以及随时间的增长。'
- en: '**Respect the maximum document size of 16 MB**: The maximum document size for
    MongoDB is 16 MB. This is a fairly generous limit, but it is one that should not
    be violated under any circumstances. Allowing for documents to grow unbounded
    should not be an option, and, as efficient as it may be to embed documents, we
    should always keep in mind that this should be under control.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尊重16MB的最大文档大小**：MongoDB的最大文档大小为16MB。这是一个相当慷慨的限制，但在任何情况下都不应违反。允许文档无限增长不应是一个选项，尽管嵌入文档可能是高效的，但我们应始终记住这应该是受控制的。'
- en: '**Use the appropriate storage engine**: MongoDB has introduced several new
    storage engines since version 3.2\. The in-memory storage engine should be used
    for real-time workloads, whereas the encrypted storage engine should be the engine
    of choice when there are strict requirements around data security.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用适当的存储引擎**：自MongoDB 3.2版本以来，MongoDB引入了几个新的存储引擎。内存存储引擎应用于实时工作负载，而加密存储引擎应该是在对数据安全性有严格要求时的首选引擎。'
- en: Best practices for write durability
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入耐久性的最佳实践
- en: Writing durability can be fine-tuned in MongoDB, and, according to our application
    design, it should be as strict as possible, without affecting our performance
    goals.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB中，写入耐久性可以进行微调，并且根据我们的应用程序设计，应尽可能严格，而不影响我们的性能目标。
- en: Fine-tune the data and flush it to the disk interval in the WiredTiger storage
    engine, the default is to flush data to the disk every 60 seconds after the last
    checkpoint, or after 2 GB of data has been written. This can be changed by using
    the `--wiredTigerCheckpointDelaySecs` command-line option.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在WiredTiger存储引擎中微调数据并将其刷新到磁盘间隔，默认情况下是在最后一个检查点后每60秒将数据刷新到磁盘，或者在写入2GB数据后。这可以通过使用`--wiredTigerCheckpointDelaySecs`命令行选项进行更改。
- en: 'In MMAPv1, data files are flushed to the disk every 60 seconds. This can be
    changed by using the `--syncDelay` command-line option. We can also perform various
    tasks, such as the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在MMAPv1中，数据文件每60秒刷新到磁盘。这可以通过使用`--syncDelay`命令行选项进行更改。我们还可以执行各种任务，例如以下内容：
- en: With WiredTiger, we can use the XFS filesystem for multi-disk consistent snapshots
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WiredTiger，我们可以使用XFS文件系统进行多磁盘一致的快照
- en: We can turn off `atime` and `diratime` in data volumes
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在数据卷中关闭`atime`和`diratime`
- en: You can make sure that you have enough swap space (usually double your memory
    size)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以确保有足够的交换空间（通常是内存大小的两倍）
- en: You can use a NOOP scheduler if you are running in virtualization environments
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在虚拟化环境中运行，可以使用NOOP调度程序
- en: We can raise file descriptor limits to the tens of thousands
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将文件描述符限制提高到数万个
- en: We can disable transparent huge pages and enable standard 4-KVM pages instead
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以禁用透明大页，并启用标准的4-KVM页
- en: Write safety should be journaled, at the very least
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入安全性应至少记录
- en: SSD read ahead default should be set to 16 blocks; HDD should be 32 blocks
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSD读取默认应设置为16个块；HDD应设置为32个块
- en: We can turn NUMA off in BIOS
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在BIOS中关闭NUMA
- en: We can use RAID 10
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用RAID 10
- en: You can synchronize the time between hosts by using NTP, especially in sharded
    environments
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用NTP同步主机之间的时间，特别是在分片环境中
- en: Only use 64-bit builds for production; 32-bit builds are outdated and can only
    support up to 2 GB of memory
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只使用64位构建用于生产；32位构建已过时，只能支持最多2GB的内存
- en: Best practices for replication
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制的最佳实践
- en: 'Replica sets are MongoDB''s mechanism to provide redundancy, high availability,
    and higher read throughput, under the right conditions. In MongoDB, replication
    is easy to configure and focus in operational terms:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 副本集是MongoDB提供冗余、高可用性和更高读取吞吐量的机制，在适当的条件下。在MongoDB中，复制易于配置并专注于操作术语：
- en: '**Always use replica sets**: Even if your dataset is small at the moment, and
    you don''t expect it to grow exponentially, you never know when that might happen.
    Also, having a replica set of at least three servers helps to design for redundancy,
    separating the workloads between real time and analytics (using the secondary)
    and having data redundancy built from day one.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终使用副本集**：即使您的数据集目前很小，而且您不指望它呈指数增长，您也永远不知道什么时候会发生。此外，至少有三个服务器的副本集有助于设计冗余，将工作负载分开为实时和分析（使用次要服务器），并从一开始就构建数据冗余。'
- en: '**Use a replica set to your advantage**: A replica set is not just for data
    replication. We can (and should, in most cases) use the primary server for writes
    and preference reads from one of the secondary to offload the primary server.
    This can be done by setting read preferences for reads, along with the correct
    write concern, to ensure that writes propagate as needed.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**充分利用副本集**：副本集不仅用于数据复制。我们可以（而且在大多数情况下应该）使用主服务器进行写入，并从其中一个次要服务器进行偏好读取，以卸载主服务器。这可以通过为读取设置读取偏好和正确的写入关注来实现，以确保写入按需传播。'
- en: '**Use an odd number of replicas in a MongoDB replica set**: If a server is
    down or loses connectivity with the rest of them (network partitioning), the rest
    have to vote as to which one will be elected as the primary server. If we have
    an odd number of replica set members, we can guarantee that each subset of servers
    knows if they belong to the majority or the minority of the replica set members.
    If we can not have an odd number of replicas, we need to have one extra host set
    as an arbiter, with the sole purpose of voting in the election process. Even a
    micro-instance in EC2 could serve this purpose.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MongoDB副本集中使用奇数个副本：如果一个服务器宕机或者与其他服务器失去连接（网络分区），其他服务器必须投票选举出主服务器。如果我们有奇数个副本集成员，我们可以保证每个服务器子集知道它们属于大多数还是少数的副本集成员。如果我们不能有奇数个副本，我们需要设置一个额外的主机作为仲裁者，唯一目的是在选举过程中进行投票。即使是EC2中的微型实例也可以完成这个任务。
- en: Best practices for sharding
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分片的最佳实践
- en: 'Sharding is MongoDB''s solution for horizontal scaling. In [Chapter 8](a16331a3-8736-4ad4-a14a-a48cd3c545a8.xhtml), *Monitoring,
    Backup, and Security*, we will go over its usage in more detail, but the following
    are some best practices, based on the underlying data architecture:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 分片是MongoDB的水平扩展解决方案。在[第8章](a16331a3-8736-4ad4-a14a-a48cd3c545a8.xhtml)中，*监控、备份和安全*，我们将更详细地介绍其使用，但以下是一些基于基础数据架构的最佳实践：
- en: '**Think about query routing**: Based on different shard keys and techniques,
    the `mongos` query router may direct the query to some (or all) of the members
    of a shard. It is important to take our queries into account when designing sharding,
    so that we don''t end up with our queries hitting all of our shards.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**考虑查询路由**：根据不同的分片键和技术，`mongos`查询路由器可能会将查询发送到一些（或全部）分片成员。在设计分片时，考虑我们的查询非常重要，这样我们的查询就不会命中所有的分片。'
- en: '**Use tag-aware sharding**: Tags can provide more fine-grained distribution
    of data across our shards. Using the right set of tags for each shard, we can
    ensure that subsets of data get stored in a specific set of shards. This can be
    useful for data proximity between application servers, MongoDB shards, and the
    users.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用标签感知分片**：标签可以在分片之间提供更精细的数据分布。使用每个分片的正确标签集，我们可以确保数据子集存储在特定的分片集中。这对于应用服务器、MongoDB分片和用户之间的数据接近可能非常有用。'
- en: Best practices for security
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: 'Security is always a multi-layered approach, and these few recommendations
    do not form an exhaustive list; they are just the bare basics that need to be
    done in any MongoDB database:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 安全始终是多层次的方法，这些建议只是一些基本的需要在任何MongoDB数据库中完成的事项，它们并不构成详尽的清单：
- en: The HTTP status interface should be disabled.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该禁用HTTP状态接口。
- en: The RESTful API should be disabled.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful API应该被禁用。
- en: The JSON API should be disabled.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON API应该被禁用。
- en: Connect to MongoDB using SSL.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SSL连接到MongoDB。
- en: Audit the system activity.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计系统活动。
- en: Use a dedicated system user to access MongoDB with appropriate system-level
    access.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用专用系统用户访问MongoDB，并具有适当的系统级访问权限。
- en: Disable server-side scripting if it is not needed. This will affect MapReduce,
    built-in `db.group()` commands, and `$where` operations. If these are not used
    in your codebase, it is better to disable server-side scripting at startup by
    using the `--noscripting` parameter.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不需要，禁用服务器端脚本。这将影响MapReduce、内置的`db.group()`命令和`$where`操作。如果这些在您的代码库中没有使用，最好在启动时使用`--noscripting`参数禁用服务器端脚本。
- en: Best practices for AWS
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS的最佳实践
- en: 'When we are using MongoDB, we can use our own servers in a data center, a MongoDB-hosted
    solution such as MongoDB Atlas, or we can get instances from Amazon by using EC2\.
    EC2 instances are virtualized and share resources in a transparent way, with collocated
    VMs in the same physical host. So, there are some more considerations to take
    into account if you are going down that route, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用MongoDB时，我们可以在数据中心使用自己的服务器，使用MongoDB Atlas等MongoDB托管解决方案，或者通过EC2从亚马逊获取实例。EC2实例是虚拟化的，并以透明的方式共享资源，在同一物理主机上放置VM。因此，如果您选择这条路线，还有一些其他考虑因素需要考虑，如下所示：
- en: Use EBS-optimized EC2 instances.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用EBS优化的EC2实例。
- en: Get EBS volumes with provisioned **I/O operations per second** (**IOPS**) for
    consistent performance.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取具有预留IOPS的EBS卷，以实现一致的性能。
- en: Use EBS snapshotting for backup and restore.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用EBS快照进行备份和恢复。
- en: Use different availability zones for high availability and different regions
    for disaster recovery. Using different availability zones within each region that
    Amazon provides guarantees that our data will be highly available. Different regions
    should only be used for disaster recovery, in case a catastrophic event ever takes
    out an entire region. A region might be EU-West-2 (for London), whereas an availability
    zone is a subdivision within a region; currently, two availability zones are available
    for London.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了实现高可用性，可以使用不同的可用性区域，为了灾难恢复，可以使用不同的地区。在每个亚马逊提供的地区内使用不同的可用性区域可以保证我们的数据具有高可用性。不同的地区应该只用于灾难恢复，以防发生灾难性事件摧毁整个地区。一个地区可能是EU-West-2（伦敦），而一个可用性区域是地区内的一个细分；目前，伦敦有两个可用性区域。
- en: Deploy global; access local.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球部署；本地访问。
- en: For truly global applications with users from different time zones, we should
    have application servers in different regions access the data that is closest
    to them, using the right read preference configuration in each server.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于真正的全球应用程序，用户来自不同的时区，我们应该在不同的地区拥有应用服务器，访问距离他们最近的数据，使用正确的读取偏好配置在每个服务器上。
- en: Reference documentation
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文档
- en: Reading a book is great (and reading this book is even greater), but continuous
    learning is the only way to keep up to date with MongoDB. In the following sections,
    we will highlight the places that you should go for updates and development/operational
    references.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读一本书很棒（阅读这本书更棒），但持续学习是保持与MongoDB最新的方式。在接下来的章节中，我们将强调您应该去哪里获取更新和开发/运营参考资料。
- en: MongoDB documentation
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB文档
- en: The online documentation available at [https://docs.mongodb.com/manual/](https://docs.mongodb.com/manual/)
    is the starting point for every developer, new or seasoned.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.mongodb.com/manual/](https://docs.mongodb.com/manual/)上的在线文档是每个开发人员的起点，无论是新手还是老手。'
- en: 'The JIRA tracker is a great place to take a look at fixed bugs and the features
    that are coming up next: [https://jira.mongodb.org/browse/SERVER/](https://jira.mongodb.org/browse/SERVER/)[.](https://jira.mongodb.org/browse/SERVER/)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA跟踪器是查看已修复的错误和即将推出的功能的好地方：[https://jira.mongodb.org/browse/SERVER/](https://jira.mongodb.org/browse/SERVER/)。
- en: Packt references
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Packt参考资料
- en: 'Some other great books on MongoDB are as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 关于MongoDB的其他好书如下：
- en: '*MongoDB for Java Developers*, by Francesco Marchioni'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*面向Java开发人员的MongoDB*，Francesco Marchioni著'
- en: '*MongoDB Data Modeling*, by Wilson da Rocha França'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*MongoDB数据建模*，Wilson da Rocha França著'
- en: Any book by Kristina Chodorow
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kristina Chodorow的任何一本书
- en: Further reading
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The MongoDB user group ([https://groups.google.com/forum/#!forum/mongodb-user](https://groups.google.com/forum/#!forum/mongodb-user))
    has a great archive of user questions about features and long-standing bugs. It
    is a place to go when something doesn't work as expected.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB用户组（[https://groups.google.com/forum/#!forum/mongodb-user](https://groups.google.com/forum/#!forum/mongodb-user)）有一个很好的用户问题存档，涉及功能和长期存在的错误。当某些功能不如预期时，这是一个可以去的地方。
- en: Online forums (Stack Overflow and Reddit, among others) are always a source
    of knowledge, with the caveat that something may have been posted a few years
    ago and may not apply anymore. Always check before trying.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在线论坛（Stack Overflow和Reddit等）始终是知识的来源，但需要注意的是，某些内容可能是几年前发布的，可能已经不适用。在尝试之前一定要检查。
- en: Finally, MongoDB University is a great place to keep your skills up to date
    and to learn about the latest features and additions: [https://university.mongodb.com/](https://university.mongodb.com/).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，MongoDB大学是保持您的技能最新并了解最新功能和增加的好地方：[https://university.mongodb.com/](https://university.mongodb.com/)。
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started our journey through web, SQL, and NoSQL technologies,
    from their inception to their current states. We identified how MongoDB has been
    shaping the world of NoSQL databases over the years, and how it is positioned
    against other SQL and NoSQL solutions.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了我们的网络、SQL和NoSQL技术之旅，从它们的起源到它们的当前状态。我们确定了MongoDB如何在多年来塑造NoSQL数据库的世界，以及它如何与其他SQL和NoSQL解决方案相比。
- en: We explored MongoDB's key characteristics and how MongoDB has been used in production
    deployments. We identified the best practices for designing, deploying, and operating
    MongoDB.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了MongoDB的关键特性以及MongoDB在生产部署中的使用情况。我们确定了设计、部署和操作MongoDB的最佳实践。
- en: Initially, we identified how to learn by going through documentation and online
    resources that can be used to stay up-to-date with the latest features and developments.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们确定了如何通过查阅文档和在线资源来学习，这些资源可以帮助我们了解最新的功能和发展动态。
- en: In the next chapter, we will go deeper into schema design and data modeling,
    looking at how to connect to MongoDB by using both the official drivers and an
    **Object Document Mapper** (**ODM**), a variation of object-relational mappers
    for NoSQL databases.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨模式设计和数据建模，看看如何通过使用官方驱动程序和对象文档映射（ODM）来连接到MongoDB，这是一种用于NoSQL数据库的对象关系映射器的变体。
