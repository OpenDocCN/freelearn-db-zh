- en: Chapter 9. Performing Table and Database Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。执行表和数据库操作
- en: In the previous chapters, we dealt mostly with table columns. In this chapter,
    we will learn how to perform some operations that influence tables or databases
    as a whole. We will cover table attributes and how to modify them, and will also
    discuss multi-table operations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们主要处理了表列。在本章中，我们将学习如何执行一些影响整个表或数据库的操作。我们将涵盖表属性以及如何修改它们，并讨论多表操作。
- en: 'Various links that enable table operations have been put together on the **Operations**
    page of the `Table` view. Here is an overview of this page:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在`表`视图的**操作**页面上汇集了各种启用表操作的链接。以下是此页面的概述：
- en: '![Performing Table and Database Operations](img/7782_09_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![执行表和数据库操作](img/7782_09_01.jpg)'
- en: Maintaining a table
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护表
- en: During its lifetime, a table repeatedly gets modified and is, therefore, continually
    growing and shrinking. Outages may occur on the server, leaving some tables in
    a damaged state.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在其生命周期中，表会反复修改，因此不断增长和缩小。服务器可能会出现中断，导致一些表处于损坏状态。
- en: Using the **Operations** page, we can perform various operations, which are
    listed next. However, not every operation is available for every storage engine.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**操作**页面，我们可以执行各种操作，下面列出了这些操作。但是，并非每种存储引擎都支持每种操作。
- en: '**Check table:** Scans all rows to verify that deleted links are correct. A
    checksum is also calculated to verify the integrity of the keys. If everything
    is all right, we will obtain a message stating **OK** or **Table is already up
    to date**; if any other message shows up, it''s time to repair this table (refer
    to the **Repair table** bullet point).'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查表：**扫描所有行以验证删除的链接是否正确。还会计算校验和以验证键的完整性。如果一切正常，我们将获得一个显示**OK**或**表已经是最新的**的消息；如果出现其他消息，现在是修复此表的时候了（参考**修复表**项目）。'
- en: '**Analyze table:** Analyzes and stores the key distribution; this will be used
    on subsequent `JOIN` operations to determine the order in which the tables should
    be joined. This operation should be periodically done (in case data has changed
    in the table) to improve `JOIN` efficiency.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析表：**分析并存储键分布；这将在后续的`JOIN`操作中用于确定应该连接表的顺序。应定期执行此操作（如果表中的数据已更改）以提高`JOIN`效率。'
- en: '**Repair table:** Repairs any corrupted data for tables in the `MyISAM` and
    `ARCHIVE` engines. Note that a table might be so corrupted that we cannot even
    go into `Table` view for it! In such a case, refer to the *Multi-table operations*
    section for the procedure to repair it.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复表：**修复`MyISAM`和`ARCHIVE`引擎中表的任何损坏数据。请注意，表可能会损坏到我们甚至无法进入`表`视图！在这种情况下，请参考*多表操作*部分以修复它的程序。'
- en: '**Defragment table:** Random insertions or deletions in an `InnoDB` table fragment
    its index. The table should be periodically defragmented for faster data retrieval.
    This operation causes MySQL to rebuild the table and only applies to `InnoDB`.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碎片整理表：**在`InnoDB`表中进行随机插入或删除会使其索引碎片化。应定期对表进行碎片整理以加快数据检索。此操作会导致MySQL重建表，并且仅适用于`InnoDB`。'
- en: '**Optimize table:** This is useful when the table contains overheads. After
    massive deletions of rows or length changes for `VARCHAR` columns, lost bytes
    remain in the table. phpMyAdmin warns us in various places (for example, in the
    `Structure` view) if it feels the table should be optimized. This operation reclaims
    the unused space in the table. In the case of MySQL 5.x, the relevant tables that
    can be optimized use the `MyISAM, InnoDB`, and `ARCHIVE` engines.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化表：**当表包含开销时，这是有用的。在大量删除行或`VARCHAR`列长度更改后，表中会保留丢失的字节。如果phpMyAdmin在各个地方（例如在`结构`视图中）感觉表应该被优化，它会警告我们。此操作将回收表中未使用的空间。在MySQL
    5.x的情况下，可以优化的相关表使用`MyISAM，InnoDB`和`ARCHIVE`引擎。'
- en: '**Flush table:** This must be done when there have been many connection errors
    and the MySQL server blocks further connections. Flushing will clear some internal
    caches and allow normal operations to resume.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**刷新表：**当出现许多连接错误并且MySQL服务器阻止进一步连接时，必须执行此操作。刷新将清除一些内部缓存，并允许正常操作恢复。'
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The operations are based on the available underlying MySQL queries—phpMyAdmin
    only calls those queries. More details are available at [http://dev.mysql.com/doc/refman/5.5/en/table-maintenance-sql.html](http://dev.mysql.com/doc/refman/5.5/en/table-maintenance-sql.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 操作是基于可用的底层MySQL查询进行的 - phpMyAdmin只调用这些查询。更多详细信息请参阅[http://dev.mysql.com/doc/refman/5.5/en/table-maintenance-sql.html](http://dev.mysql.com/doc/refman/5.5/en/table-maintenance-sql.html)。
- en: Changing table attributes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改表属性
- en: Table attributes are the various properties of a table. This section discusses
    the settings for some of them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 表属性是表的各种属性。本节讨论了其中一些设置的设置。
- en: Table storage engine
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表存储引擎
- en: The first attribute we can change is called **Storage Engine**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改的第一个属性称为**存储引擎**。
- en: '![Table storage engine](img/7782_09_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![表存储引擎](img/7782_09_02.jpg)'
- en: This controls the whole behavior of the table—its location (on disk or in memory),
    the index structure, and whether it supports transactions and foreign keys. The
    drop-down list varies depending on the storage engines supported by our MySQL
    server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这控制了表的整体行为 - 其位置（在磁盘上或内存中）、索引结构以及是否支持事务和外键。下拉列表取决于我们的MySQL服务器支持的存储引擎。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Changing a table's storage engine may be a long operation if the number of rows
    is large.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果行数较多，更改表的存储引擎可能是一个长时间的操作。
- en: Table comments
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表注释
- en: '**Table comments** option allows us to enter comments for the table.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**表注释**选项允许我们为表输入注释。'
- en: '![Table comments](img/7782_09_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![表注释](img/7782_09_03.jpg)'
- en: These comments will be shown at appropriate places, for example, in the navigation
    panel, next to the table name in the `Table` view, and in the export file. The
    following screenshot shows what the navigation panel looks like when the `$cfg['ShowTooltip']`
    parameter is set to its default value of `TRUE:`
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释将显示在适当的位置，例如在导航面板中，在`Table`视图中的表名称旁边，以及在导出文件中。以下屏幕截图显示了当`$cfg['ShowTooltip']`参数设置为其默认值`TRUE`时导航面板的外观：
- en: '![Table comments](img/7782_09_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![表注释](img/7782_09_04.jpg)'
- en: The default value `(FALSE)` of `$cfg['ShowTooltipAliasDB']` and `$cfg['ShowTooltipAliasTB']`
    produces the behavior we saw earlier—the true database and table names are displayed
    in the navigation panel and in the `Database` view for the **Structure** page.
    Comments appear as a tooltip (when the cursor is hovered over a database or table
    name). If one of these parameters is set to `TRUE`, the behavior is reversed—showing
    the comment by default and the true name as a tooltip. This is convenient when
    the real table names are not meaningful.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`$cfg[''ShowTooltipAliasDB'']`和`$cfg[''ShowTooltipAliasTB'']`的默认值为`(FALSE)`，会产生我们之前看到的行为—导航面板和`Structure`页面中显示真实的数据库和表名。当光标悬停在数据库或表名上时，注释会显示为工具提示。如果其中一个参数设置为`TRUE`，则行为将反转—默认显示注释，并将真实名称显示为工具提示。当真实表名不具有意义时，这是方便的。'
- en: 'There is another possibility for `$cfg[''ShowTooltipAliasTB'']—` the `''nested''`
    value. Here is what happens if we use this feature:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种可能性是`$cfg['ShowTooltipAliasTB']`的值为`'nested'`。如果使用此功能会发生什么：
- en: The true table name is displayed in the navigation panel
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航面板中显示真实表名
- en: The table comment (for example, `project__)` is interpreted as the project name
    and is displayed as it is (refer to the *Nested display of tables within a database*
    section in [Chapter 3)](ch03.html "Chapter 3. Over Viewing the Interface")
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表注释（例如，`project__`）被解释为项目名称，并按原样显示（参见[第3章](ch03.html "第3章。查看界面概述")中的*数据库中表的嵌套显示*部分）
- en: Table order
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表顺序
- en: When we browse a table, or execute a statement such as `SELECT * from book`
    without specifying a sort order, MySQL uses the order in which the rows are physically
    stored. This table order can be changed with the **Alter table order by** dialog.
    We can choose any column and the table will be reordered once on this column.
    We choose **author_id** in the example, and after we click on **Go**, the table
    gets sorted on this column.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们浏览表，或执行诸如`SELECT * from book`之类的语句而没有指定排序顺序时，MySQL使用行物理存储的顺序。可以使用**Alter
    table order by**对话框更改表顺序。我们可以选择任何列，表将在此列上重新排序一次。在示例中，我们选择**author_id**，然后单击**Go**，表将按此列排序。
- en: Reordering is convenient if we know that we will be retrieving rows in this
    order most of the time. Moreover, if we use an `ORDER BY` clause later on, and
    the table is already physically sorted on this column, we might get better performance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道大部分时间将按此顺序检索行，则重新排序是方便的。此外，如果以后使用`ORDER BY`子句，并且表已经在此列上物理排序，可能会获得更好的性能。
- en: This default ordering will last as long as there are no changes in the table
    (no insertions, deletions, or updates). This is why phpMyAdmin shows the **(singly)**
    warning.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认排序将持续到表中没有更改（没有插入、删除或更新）为止。这就是为什么phpMyAdmin显示**(单独)**警告。
- en: '![Table order](img/7782_09_05.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![表顺序](img/7782_09_05.jpg)'
- en: After the sort has been done on **author_id**, books for author **1** will be
    displayed first, followed by the books for author **2**, and so on (we are talking
    about a default browsing of the table without explicit sorting). We can also specify
    the sort order as **Ascending** or **Descending**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在对**author_id**进行排序后，作者**1**的书将首先显示，然后是作者**2**的书，依此类推（我们谈论的是默认浏览表而没有明确排序）。我们还可以指定排序顺序为**升序**或**降序**。
- en: If we insert another row, describing a new book from author **1**, and then
    click on **Browse**, the book will not be displayed along with the other books
    for this author because the sort was done before the insertion.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们插入另一行，描述来自作者**1**的新书，然后单击**浏览**，由于排序是在插入之前完成的，该书将不会与此作者的其他书一起显示。
- en: Table collation
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表排序规则
- en: 'Character-based columns have a collation attribute that describes which character
    set is used to interpret the contents, and rules for sorting. The **name** column
    currently has a **latin1_swedish_ci** collation, as can be seen via the **Structure**
    page. On the **Operations** page, if we change the collation for table `author`
    from **latin1_swedish_ci** to, say, **utf8_general_ci**, this generates the following
    statement:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 基于字符的列具有描述用于解释内容的字符集以及排序规则的排序属性。**name**列当前具有**latin1_swedish_ci**排序规则，可以通过**Structure**页面看到。在**Operations**页面上，如果我们将表`author`的排序规则从**latin1_swedish_ci**更改为**utf8_general_ci**，则会生成以下语句：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Therefore, we only changed the default collation for future columns that will
    be added to this table; no collation was changed for existing columns.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只更改了将来将添加到此表中的列的默认排序规则；对于现有列，未更改排序规则。
- en: Table options
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表选项
- en: 'Other attributes that influence the table''s behavior may be specified using
    the **Table options** dialog:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用**表选项**对话框指定影响表行为的其他属性：
- en: '![Table options](img/7782_09_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![表选项](img/7782_09_06.jpg)'
- en: 'The options are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 选项包括：
- en: '**PACK_KEYS:** Setting this attribute results in a smaller index. This can
    be read faster but takes more time to update. Available for the `MyISAM` storage
    engine.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PACK_KEYS：**设置此属性会导致较小的索引。这样可以更快地读取，但更新需要更多时间。适用于`MyISAM`存储引擎。'
- en: '**CHECKSUM:** This makes MySQL compute a checksum for each row. This results
    in slower updates, but finding of corrupted tables becomes easier. Available for
    `MyISAM` only.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CHECKSUM：**这使得MySQL为每一行计算一个校验和。这会导致更新速度变慢，但查找损坏的表变得更容易。仅适用于`MyISAM`。'
- en: '**DELAY_KEY_WRITE:** This instructs MySQL not to write the index updates immediately,
    but to queue them for writing later. This improves performance but there is a
    negative trade-off—the index might need to be rebuilt in case of a server failure
    (refer to [http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-optimization-tips.html)](http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-optimization-tips.html)).
    Available for `MyISAM` only.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DELAY_KEY_WRITE：**这指示MySQL不立即写入索引更新，而是将它们排队以便稍后写入。这可以提高性能，但存在负面折衷——在服务器故障的情况下可能需要重建索引（参见[http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-optimization-tips.html)](http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-optimization-tips.html)）。仅适用于`MyISAM`。'
- en: '**TRANSACTIONAL, PAGE_CHECKSUM:** Applies to the `Aria` storage engine, previously
    known as `Maria`. The **TRANSACTIONAL** option marks this table as being transactional;
    however, the exact meaning of this option varies as future versions of this storage
    engine will gain more transactional features. **PAGE_CHECKSUM** computes a checksum
    on all index pages. Currently documented at [http://kb.askmonty.org/en/aria-storage-engine](http://kb.askmonty.org/en/aria-storage-engine).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TRANSACTIONAL、PAGE_CHECKSUM：**适用于`Aria`存储引擎，以前称为`Maria`。**TRANSACTIONAL**选项将此表标记为事务性表；然而，此选项的确切含义会随着此存储引擎的未来版本获得更多的事务性功能而变化。**PAGE_CHECKSUM**计算所有索引页的校验和。目前在[http://kb.askmonty.org/en/aria-storage-engine](http://kb.askmonty.org/en/aria-storage-engine)中有文档记录。'
- en: '**ROW_FORMAT:** To the storage engines that support this feature `(MyISAM,
    InnoDB, PBXT`, and `Aria)`, a choice of row format is presented. The default value
    being the current state of this table''s row format.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ROW_FORMAT：**对支持此功能的存储引擎（`MyISAM、InnoDB、PBXT`和`Aria`）提供了一种行格式的选择。默认值是该表行格式的当前状态。'
- en: '**AUTO_INCREMENT:** This changes the auto-increment value. It is shown only
    if the table''s primary key has the auto-increment attribute.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AUTO_INCREMENT：**这会更改自动递增值。仅当表的主键具有自动递增属性时才显示。'
- en: Emptying or deleting a table
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清空或删除表
- en: Emptying a table (erasing its data) and deleting a table (erasing its data and
    the table's structure) can be done with the **Empty the table (TRUNCATE)** and
    **Delete the table (DROP)** links located in the **Delete data or table** section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 清空表（删除其数据）和删除表（删除其数据和表的结构）可以通过**清空表（TRUNCATE）**和**删除表（DROP）**链接来完成，这些链接位于**删除数据或表**部分。
- en: Renaming, moving, and copying tables
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名、移动和复制表
- en: The **Rename** operation is the easiest to understand—the table simply changes
    its name and stays in the same database.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**重命名**操作是最容易理解的——表只是更改其名称并保持在同一数据库中。'
- en: The **Move** operation (shown in the following screenshot) manipulates a table
    in two ways—changes its name and also the database in which it is stored.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**移动**操作（如下截图所示）以两种方式操作表——更改其名称以及存储它的数据库。'
- en: '![Renaming, moving, and copying tables](img/7782_09_07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![重命名、移动和复制表](img/7782_09_07.jpg)'
- en: Moving a table is not directly supported by MySQL. So, phpMyAdmin has to create
    the table in the target database, copy the data, and then finally drop the source
    table. This could take a long time depending on the table's size.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL不直接支持移动表。因此，phpMyAdmin必须在目标数据库中创建表，复制数据，然后最终删除源表。这可能需要很长时间，具体取决于表的大小。
- en: The **Copy** operation leaves the original table intact and copies its structure
    or data (or both) to another table, possibly in another database. Here, the **book-copy**
    table will be an exact copy of the `book` source table. After the copy, we remain
    in the `Table` view for the `book` table, unless we selected **Switch to copied
    table** option, in which case we are moved to the `Table` view of the newly created
    table.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**复制**操作会保留原始表并将其结构或数据（或两者）复制到另一个表中，可能是另一个数据库中。在这里，**book-copy**表将是`book`源表的精确副本。复制后，我们仍然保持在`book`表的`Table`视图中，除非我们选择了**切换到复制表**选项，此时我们将移动到新创建表的`Table`视图中。'
- en: '![Renaming, moving, and copying tables](img/7782_09_08.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![重命名、移动和复制表](img/7782_09_08.jpg)'
- en: The **Structure only** copy is done to create a test table with the same structure
    but without the data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**仅结构**复制用于创建具有相同结构但没有数据的测试表。'
- en: Appending data to a table
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向表追加数据
- en: The **Copy** dialog may also be used to append (add) data from one table to
    another. Both tables must have the same structure. This operation is achieved
    by entering the table to which we want to copy the data and choosing **Data only**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 复制对话框也可以用于将数据从一个表追加（添加）到另一个表中。两个表必须具有相同的结构。通过输入我们想要复制数据的表并选择**仅数据**来实现此操作。
- en: For example, book data is coming from various sources (various publishers) in
    the form of one table per publisher and we want to aggregate all the data to one
    place. For `MyISAM`, a similar result can be obtained by using the `Merge` storage
    engine (which is a collection of identical `MyISAM` tables). However, if the table
    is `InnoDB`, we need to rely on phpMyAdmin's **Copy** feature.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，图书数据来自各种来源（各种出版商）以每个出版商一个表的形式，并且我们希望将所有数据汇总到一个地方。对于`MyISAM`，可以通过使用`Merge`存储引擎（这是一组相同的`MyISAM`表）来获得类似的结果。但是，如果表是`InnoDB`，我们需要依赖phpMyAdmin的**复制**功能。
- en: Performing other table operations
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行其他表操作
- en: On the table **Operations** interface, other dialogs may appear. The referential
    integrity verification dialog will be covered in [Chapter 10](ch10.html "Chapter 10. Benefiting
    from the Relational System"). Partition maintenance will be examined in [Chapter
    17](ch17.html "Chapter 17. Supporting Features Added in MySQL 5").
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在**操作**界面上，可能会出现其他对话框。引用完整性验证对话框将在[第10章](ch10.html "第10章。从关系系统中受益")中介绍。分区维护将在[第17章](ch17.html
    "第17章。MySQL 5中添加的支持功能")中进行检查。
- en: Multi-table operations
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多表操作
- en: 'In the `Database` view, there is a checkbox next to each table name and a drop-down
    menu under the table list. This enables us to quickly choose some tables and perform
    an operation on all those tables at once. Here, we select the **book-copy** and
    the **book** tables, and choose the **Check table** operation for the selected
    tables as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`数据库`视图中，每个表名旁边都有一个复选框，并且在表列表下方有一个下拉菜单。这使我们能够快速选择一些表并一次对所有这些表执行操作。在这里，我们选择**book-copy**和**book**表，并选择所选表的**检查表**操作，如下截图所示：
- en: '![Multi-table operations](img/7782_09_09.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![多表操作](img/7782_09_09.jpg)'
- en: We could also quickly select or deselect all the checkboxes with **Check All
    / Uncheck All** option.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用**全选/取消全选**选项快速选择或取消选择所有复选框。
- en: Repairing an "in use" table
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复“正在使用”的表
- en: The multi-table mode is the only method (unless we know the exact SQL query
    to type) for repairing a corrupted table. Such tables may be shown with the **in
    use** flag in the database list. Users seeking help in the support forums for
    phpMyAdmin often receive this tip from experienced phpMyAdmin users.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 多表模式是修复损坏表的唯一方法（除非我们知道要输入的确切SQL查询）。此类表可能在数据库列表中显示为**正在使用**标志。在phpMyAdmin的支持论坛中寻求帮助的用户经常会从经验丰富的phpMyAdmin用户那里得到这个提示。
- en: Database operations
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库操作
- en: 'The **Operations** tab in the `Database` view gives access to a panel that
    enables us to perform operations on a database taken as a whole as shown in the
    following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`数据库`视图中的**操作**选项卡提供了访问面板的权限，使我们能够对整个数据库执行操作，如下截图所示：'
- en: '![Database operations](img/7782_09_10.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![数据库操作](img/7782_09_10.jpg)'
- en: Renaming a database
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重命名数据库
- en: A **Rename database to** dialog is available. Although this operation is not
    directly supported by MySQL, phpMyAdmin does it indirectly by creating a new database,
    renaming each table (thus sending it to the new database), and dropping the original
    database.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**重命名数据库为**对话框可用。虽然MySQL不直接支持此操作，但phpMyAdmin通过创建新数据库，重命名每个表（从而将其发送到新数据库）并删除原始数据库来间接执行此操作。'
- en: Copying a database
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制数据库
- en: It is also possible to do a complete copy of a database, even if MySQL itself
    does not support this operation natively. The options are similar to those already
    explained for the table copy.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 即使MySQL本身不原生支持此操作，也可以对数据库进行完整复制。选项与已经解释的表复制类似。
- en: '![Copying a database](img/7782_09_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![复制数据库](img/7782_09_11.jpg)'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the operations we can perform on entire tables or databases.
    It also looked at table maintenance operations for table repair and optimization,
    changing various table attributes, table movements (including renaming and moving
    to another database), and multi-table operations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了我们可以对整个表或数据库执行的操作。还介绍了表维护操作，包括表修复和优化，更改各种表属性，表移动（包括重命名和移动到另一个数据库）和多表操作。
- en: In the next chapter, we will begin to examine advanced features that rely on
    the phpMyAdmin configuration storage, such as the relational system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始研究依赖于phpMyAdmin配置存储的高级功能，例如关系系统。
