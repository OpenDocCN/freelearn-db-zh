- en: Chapter 4. Data Modeling with Navicat
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用Navicat进行数据建模
- en: As of version 10 of Navicat, a data modeler feature has been added to the application,
    which allows the user to create and edit database objects, such as tables, fields,
    and relationships in a visual editor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从Navicat的10版本开始，该应用程序增加了一个数据建模功能，允许用户在可视化编辑器中创建和编辑数据库对象，如表、字段和关系。
- en: PremiumSoft (the makers of Navicat) also released this feature as a separate
    application software product with the name **Navicat Data Modeler**, and it is
    available for Windows, Mac OS X, and Linux. For those who exclusively require
    a visual tool for data modeling and do not require the other administration and
    data management tools, which were covered in the previous chapters, Navicat Data
    Modeler could be a pertinent choice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PremiumSoft（Navicat的制造商）还将此功能作为一个名为**Navicat Data Modeler**的独立应用软件产品发布，可在Windows、Mac
    OS X和Linux上使用。对于那些专门需要数据建模的可视化工具，而不需要其他管理和数据管理工具的人来说，Navicat Data Modeler可能是一个合适的选择。
- en: While Oracle's MySQL Workbench (a GUI administration and database modeling tool
    for MySQL) could be considered a free alternative, Navicat Data Modeler provides
    means for easier manipulation of model objects and also presents some advanced
    features, such as history tracking and database synchronization; thanks to this,
    you can asynchronously work with data diagrams for later synchronization with
    actual database structure(s). For a better understanding of the functionalities
    of Navicat modeling tools, we will begin the chapter by following a tutorial to
    design our first data model, in order to aid you in learning each feature step
    by step.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Oracle的MySQL Workbench（用于MySQL的GUI管理和数据库建模工具）可以被认为是一个免费的替代品，但Navicat Data
    Modeler提供了更容易操作模型对象的手段，并且还提供了一些高级功能，如历史跟踪和数据库同步；由于这一点，您可以异步地处理数据图表，以便稍后与实际数据库结构进行同步。为了更好地理解Navicat建模工具的功能，我们将通过跟随教程来设计我们的第一个数据模型，以帮助您逐步学习每个功能。
- en: 'In this chapter, we will learn how to master Navicat''s visual data modeling
    tool, which makes it easy to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何掌握Navicat的可视化数据建模工具，这使得以下操作变得容易：
- en: Design data models in a GUI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GUI中设计数据模型
- en: Create, edit, and manipulate table structures from within the visual editor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可视化编辑器中创建、编辑和操作表结构
- en: Forward-engineer a data model into a `.sql` file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据模型转换为`.sql`文件
- en: Reverse-engineer an existing database into visual representations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有数据库反向工程成可视化表示
- en: Working with Navicat's model designer
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Navicat的模型设计师
- en: Before we begin designing our first data model, it is a good idea to get acquainted
    with the tools that Navicat Data Modeler provides, which we have at our disposal.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始设计第一个数据模型之前，熟悉Navicat Data Modeler提供的工具是一个好主意，我们可以利用这些工具。
- en: The last button on the main toolbar in Navicat's main window is the **Model**
    button. Clicking on this button will take you to the model view. An alternative
    way is to select **Model** from the **View** menu (on the Mac, you can press the
    *+* key and the *8* key simultaneously as a shortcut). Then you can create a new
    blank model by right-clicking anywhere in the object pane of the main window and
    selecting **New model**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Navicat的主窗口的主工具栏上的最后一个按钮是**Model**按钮。单击此按钮将带您进入模型视图。另一种方法是从**View**菜单中选择**Model**（在Mac上，您可以同时按下*+*键和*8*键作为快捷键）。然后，您可以通过右键单击主窗口的对象窗格中的任何位置并选择**New
    model**来创建一个新的空模型。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On the Mac, press the *+* key and the *N* key simultaneously as a shortcut or
    click on the *+* button at the bottom-left side frame in the main window. On a
    Windows PC, simply click on the **New Model** button on the secondary toolbar,
    located under the main toolbar in the main window.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，同时按下*+*键和*N*键作为快捷键，或者在主窗口的左下方框架上单击*+*按钮。在Windows PC上，只需单击主窗口中主工具栏下方的次工具栏上的**New
    Model**按钮。
- en: 'The screenshot of Navicat''s toolbar on Mac and Windows is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Navicat在Mac和Windows上的工具栏截图如下：
- en: '![Working with Navicat''s model designer](img/7461EN_04_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![使用Navicat的模型设计师](img/7461EN_04_01.jpg)'
- en: This action also brings up a new window called **model designer** , where you
    can edit the data model. The left side pane of the **model designer** window contains
    the diagram of a tree palette that aids you to toggle its counterpart; a model
    tree palette is obtained by clicking on the tiny icons just above it. The diagram
    tree palette lists the model objects, such as tables, relationships, notes, and
    images (pictures) of the active diagram in alphabetical order. The model tree
    palette lists only the table objects of all the diagrams in the model. Now these
    metaphors can be extremely confusing, so I will describe briefly what each metaphor
    means and also explain their hierarchy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作也会弹出一个名为**模型设计师**的新窗口，您可以在其中编辑数据模型。**模型设计师**窗口的左侧窗格包含了一个树形调色板的图表，可以帮助您切换到其对应的模型树调色板；通过点击其上方的小图标，可以获得一个模型树调色板。图表树调色板按字母顺序列出了模型对象，如表、关系、注释和活动图表的图片。模型树调色板只列出了模型中所有图表对象。这些隐喻可能会非常令人困惑，所以我将简要描述每个隐喻的含义，并解释它们的层次结构。
- en: Each model can contain one or more diagram that could also be called **entity-relationship
    diagrams** (**ER diagrams**) among database administrators. A database design
    can be split across the multiple diagrams within a model. There is also the concept
    of **layers**, but unlike graphics and image processing applications, layers in
    Navicat's Data Modeler are not containers or placeholders. Just like other objects,
    they are drawn on the canvas, but with a slight difference so that they are opaque
    and can be overlaid on other objects. Layers can be useful to organize certain
    objects by grouping the related ones and separating them according to different
    concerns. For example, when designing an ERP database, you may want to gather
    tables related with accounting and finance in one layer, and those related with
    sales and marketing in another.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模型可以包含一个或多个图表，这也可以称为数据库管理员的**实体-关系图**（**ER图**）。数据库设计可以分布在模型内的多个图表中。还有**层**的概念，但与图形和图像处理应用程序不同，Navicat的数据建模器中的层不是容器或占位符。与其他对象一样，它们绘制在画布上，但有一个细微的区别，使它们不透明并且可以叠加在其他对象上。层可以用于通过将相关对象分组并根据不同的关注点进行分离来组织某些对象。例如，在设计ERP数据库时，您可能希望将与会计和财务相关的表汇集在一层中，并将与销售和营销相关的表汇集在另一层中。
- en: '![Working with Navicat''s model designer](img/7461EN_04_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![使用Navicat的模型设计师](img/7461EN_04_02.jpg)'
- en: Aligned to the right-hand side of it is a vertical toolbar also called the model
    diagram palette, from which you can select the type of database object you want
    to place in the diagram. The available objects in this context are tables, notes
    (labels), pictures (images), layers, and relationships. The right side of the
    window contains the **Properties** palette (on the lower left-hand side in Windows),
    and it is used to display and edit the properties of the active diagram and the
    objects it contains. Here you can manage every setting, pertaining to the selected
    item in the canvas, with options to rename the diagram, adjust the number of pages
    (significant when printing), adjust the font and color of the labels of the objects,
    and the notation of the diagram. There are five notations available—**Default**,
    **Simple**, **IDEF1X**, **UML**, and **Crow's Foot**, respectively.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其右侧对齐的是一个垂直工具栏，也称为模型图表调色板，您可以从中选择要放置在图表中的数据库对象类型。在此上下文中可用的对象包括表、注释（标签）、图片（图像）、层和关系。窗口的右侧包含**属性**调色板（在Windows中位于左下角），用于显示和编辑活动图和其中包含的对象的属性。在这里，您可以管理与画布中所选项目相关的每个设置，包括重命名图表、调整页面数量（打印时很重要）、调整对象标签的字体和颜色，以及图表的符号。有五种可用的符号——**默认**、**简单**、**IDEF1X**、**UML**和**Crow's
    Foot**。
- en: 'Below the **Properties** palette is **History Palette** (in the Mac version)
    that lists every action you performed step by step, allowing you to take these
    actions back by as many steps as you wish. There''s also a preview pane on the
    opposite side, almost placed symmetrically, that you can use for a map-like navigation.
    In the Windows version, these two palettes are placed at each other''s exact opposite
    location. Refer to the following screenshot of Navicat in the Mac version:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**调色板下方是**历史**调色板（在Mac版本中），它逐步列出您执行的每个操作，允许您按照您希望的步骤数撤消这些操作。在相反的一侧还有一个预览窗格，几乎对称地放置，您可以用它进行类似地图的导航。在Windows版本中，这两个调色板放置在彼此的确切相反位置。请参考Mac版本中Navicat的以下截图：'
- en: '![Working with Navicat''s model designer](img/7461EN_04_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![使用Navicat的模型设计师](img/7461EN_04_03.jpg)'
- en: Creating our first model
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个模型
- en: This section features a tutorial in which we will create the model of a fairly
    **Simple To Do** application for the database. Our new database will consist of
    three tables—**tasks**, **categories**, and **users**. Using the model designer,
    we will design these tables and also define the field types, primary keys, and
    relationships. All of these three tables will be interrelated to each other using
    foreign keys. We will then annotate the model and finally generate the actual
    database, forward-engineering the model we will have created. To start working
    on the model, switch to the **model view** window(if you haven't already done
    so) by clicking on the large **Model** icon on the main toolbar of Navicat's main
    window; or select **Model** from the **View** menu, and then to create a new model,
    right-click on the empty area in the object pane and select **New Model** from
    the pop-up menu. In the Windows version of Navicat, you can also simply click
    on the **New Model** button from the smaller secondary toolbar,right under the
    main toolbar of Navicat's main window. In the Mac version, there is no secondary
    toolbar. Instead, on the lower frame, which is thick enough to fit a small button,
    there is a **+** sign. This **+** sign intuitively indicates the function of adding
    an object in the chosen context. In this case, a model is accompanied by two more
    buttons; one is with a **-** sign that means delete, the other with a pencil icon
    that means edit. (The Windows version has equivalent buttons explicitly labeled
    as **Design Model** and **Delete Model** respectively.) After you perform this
    step, a new model designer window named **Untitled–Model** will pop up, presenting
    you with a blank diagram named **Diagram 1**. Now, let's get ready to start editing
    the model by creating our first table in the diagram. Click on the **Table** button
    (a tiny button with a table-shaped icon) from the vertical model diagram toolbar,
    and then click on an empty area of the canvas. You could also right-click on the
    canvas and select **New** | **Table** from the pop-up menu. A new, square-like
    box with rounded corners will be drawn in the canvas right where you last clicked,
    with a blue title bar labeled as **Table 1** also highlighted, indicating that
    it's ready to be renamed for your convenience. In order to rename it, type `category`
    and press the *Enter* key. Next, right-click inside the box and select **Add Field**
    from the pop-up menu. (An alternative shortcut is to press the down arrow or the
    *Tab* key from your keyboard when editing a table or a field name.) You will notice
    a text cursor blinking inside the box representing the table.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了一个教程，我们将为数据库创建一个相当简单的待办事项应用程序的模型。我们的新数据库将包括三个表——任务、类别和用户。使用模型设计工具，我们将设计这些表，还将定义字段类型、主键和关系。这三个表将使用外键相互关联。然后我们将对模型进行注释，最终生成实际的数据库，将我们创建的模型进行正向工程。要开始对模型进行操作，请切换到“模型视图”窗口（如果尚未这样做），方法是单击Navicat主窗口主工具栏上的大“模型”图标；或者从“视图”菜单中选择“模型”，然后右键单击对象窗格中的空白区域，选择“新建模型”。在Navicat的Windows版本中，您还可以直接单击主窗口下方主工具栏下方的“新建模型”按钮。在Mac版本中，没有次要工具栏。相反，在足够宽的下框架上，有一个“+”号。这个“+”号直观地表示在所选上下文中添加对象的功能。在这种情况下，一个模型伴随着另外两个按钮；一个是带有“-”符号的按钮，表示删除，另一个是带有铅笔图标的按钮，表示编辑。（Windows版本有相应的按钮，明确标记为“设计模型”和“删除模型”）完成此步骤后，将弹出一个名为“Untitled-Model”的新模型设计师窗口，向您呈现一个名为“Diagram
    1”的空白图。现在，让我们准备开始编辑模型，通过在图表中创建我们的第一个表。单击垂直模型图工具栏上的“表”按钮（一个带有表形图标的小按钮），然后单击画布的空白区域。您还可以右键单击画布，然后从弹出菜单中选择“新建”|“表”。在您上次单击的位置，将在画布上绘制一个新的类似正方形的带有圆角的框，带有蓝色标题栏标记为“表1”，也突出显示，表示它已准备好为您方便地重命名。为了重命名它，请键入“category”并按“Enter”键。接下来，在框内右键单击，然后从弹出菜单中选择“添加字段”。（另一种快捷方式是在编辑表或字段名称时，从键盘上按下箭头键或“Tab”键。）您会注意到一个文本光标在代表表的框内闪烁。
- en: 'Type `id` and press *Enter*. While Navicat is creating the field, it also senses
    what this field is meant for by the name you entered, and it automatically defines
    the field as a primary key of the **INTEGER** type. Now go on and repeat the previous
    step, this time typing `name` as the field name, and press *Enter*. Eureka! Navicat
    perceived this one correctly as well, and it created the field as a varchar type
    of 255 characters in length. The 255-character length is perhaps outrageous, but
    we''ll see how to cut it down to size in a little bit. The ID and name fields
    are sufficient for the category table, so we are now moving onto the second table.
    Refer to the following screenshot to see how the tables, **category** and **task**,
    are created:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 键入“id”并按“Enter”键。当Navicat创建字段时，它还会根据您输入的名称感知到这个字段的用途，并自动将字段定义为**INTEGER**类型的主键。现在继续并重复上一步，这次键入“name”作为字段名称，并按“Enter”键。欣喜！Navicat也正确感知到了这个字段，并将其创建为长度为255个字符的varchar类型。255个字符的长度也许有些夸张，但我们将看到如何稍后将其缩小。ID和名称字段对于类别表已经足够了，所以我们现在转向第二个表。请参考以下屏幕截图，查看表“category”和“task”是如何创建的：
- en: '![Creating our first model](img/7461EN_04_04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个模型](img/7461EN_04_04.jpg)'
- en: Create another table and name it `task`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个表，并将其命名为“task”。
- en: Add a field named `id` for this one as well (see how Navicat makes it another
    primary key of the **INTEGER** type).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此也添加一个名为“id”的字段（看看Navicat如何将其创建为另一个**INTEGER**类型的主键）。
- en: Add the second field as `title` and press *Enter*. (Navicat will create this
    one of type **VARCHAR(255)**.)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个字段命名为“title”并按“Enter”键。（Navicat将创建一个**VARCHAR(255)**类型的字段。）
- en: In the same way, add the following fields—`description`, `due_date`, `category_id`,
    and `user_id`. (Navicat will determine what type they should be created of.)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以同样的方式，添加以下字段——“description”、“due_date”、“category_id”和“user_id”。（Navicat将确定它们应该创建的类型。）
- en: Create one last table and name it `user`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建最后一个表，并将其命名为“user”。
- en: Create the following fields for it—`id`, `login_name`, `password`, `email`,
    and `role.`
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此创建以下字段—`id`、`login_name`、`password`、`email`和`role`。
- en: 'Now, we need to fine-tune some of these fields. For example, we will trim the
    length of those varchar fields from a 255-character length to some more reasonable
    length. To do this, right-click on **task** and select **Design Table** from the
    pop-up menu. This will make a table designer interface very identical to the tables
    you saw in [Chapter 2](ch02.html "Chapter 2. Working with Databases"), *Working
    with Databases*. In Mac, the table will look similar to the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要微调一些这些字段。例如，我们将把这些varchar字段的长度从255个字符减少到一些更合理的长度。要做到这一点，右键单击**任务**，然后从弹出菜单中选择**设计表**。这将使一个表设计界面非常类似于您在[第2章](ch02.html
    "第2章。与数据库一起工作")*与数据库一起工作*中看到的表。在Mac上，表将看起来类似于以下截图：
- en: '![Creating our first model](img/7461EN_04_05.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个模型](img/7461EN_04_05.jpg)'
- en: On this screen, you can add or remove fields, or rename them, change their data
    types, change the data length, assign or remove primary keys, define default values
    for fields, add indexes, and even add constraints such as foreign keys or uniqueness
    definitions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上，您可以添加或删除字段，或重命名它们，更改它们的数据类型，更改数据长度，分配或删除主键，为字段定义默认值，添加索引，甚至添加诸如外键或唯一性定义之类的约束。
- en: You can even reorder the fields by gesturing the mouse to drag-and-drop the
    fields in this interface.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以通过手势将鼠标拖放字段来重新排列字段。
- en: For this example, we will just reduce the length of the title to `50` and the
    description to `200`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将把标题的长度减少到`50`，描述的长度减少到`200`。
- en: You can refer to [Chapter 2](ch02.html "Chapter 2. Working with Databases"),
    *Working with Databases*, for more details on the table designer interface and
    the functionalities it provides, for editing and tweaking table structures.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考[第2章](ch02.html "第2章。与数据库一起工作")*与数据库一起工作*，了解有关表设计界面及其提供的功能的更多详细信息，用于编辑和调整表结构。
- en: Defining the relationships
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义关系
- en: Now that we have our three related tables, it is time to define the relationships
    between them. This model is intended for a **Simple To Do** database, where our
    main data would be stored in the **task** table. Every task to be entered here
    will have a title, description, entry date, due date, category, and user. Here
    we are storing the categories and users on separate tables, so we need to refer
    to the related category and user from the **task** table, using the ID columns.
    There is a many-to-one relationship between the **category** table and the **task**
    table. In our case, a task can have one category associated with it, but a category
    can have many tasks under it. As such, a task can be assigned to one user, but
    a user can have many tasks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了三个相关的表，是时候定义它们之间的关系了。这个模型是用于一个**简单的待办事项**数据库，我们的主要数据将存储在**任务**表中。在这里输入的每个任务都将有一个标题、描述、录入日期、截止日期、类别和用户。我们在单独的表中存储类别和用户，因此我们需要从**任务**表中引用相关的类别和用户，使用ID列。**类别**表和**任务**表之间存在多对一的关系。在我们的情况下，一个任务可以与一个类别关联，但一个类别可以有多个任务。因此，一个任务可以分配给一个用户，但一个用户可以有多个任务。
- en: To establish a join between two tables, first select the relationship tool from
    the vertical palette, then move your pointer to the **task** table and click-and-drag
    the **category_id** field, dragging it onto the **id** field of the **category**
    table. This should establish the join between the two tables, and a line joining
    them on the canvas should appear.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要在两个表之间建立连接，首先从垂直调色板中选择关系工具，然后将指针移动到**任务**表，点击并拖动**category_id**字段，将其拖放到**类别**表的**id**字段上。这样应该建立了两个表之间的连接，在画布上连接它们的一条线应该出现。
- en: 'But that''s not all. What we have done so far is to establish a basic one-to-one
    relationship with no further information on the cardinality between the two objects,
    as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是全部。到目前为止，我们所做的是建立一个基本的一对一关系，没有进一步的关于两个对象之间基数的信息，如下图所示：
- en: '![Defining the relationships](img/7461EN_04_06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![定义关系](img/7461EN_04_06.jpg)'
- en: Now, to right-click on the adjoining line and then select **Cardinality on category**
    | **One or Many** from the pop-up menu. Now that a one-to-many relationship between
    the two tables is established, a foreign-key from **category** to **task** is
    automatically created; also, the category end of the joining line will have a
    fork-like joint in the diagram. One shortcoming of the diagram editor (directly
    editing on the canvas) is that when relationships are visually defined by point-and-click
    and drag-and-drop gestures, the joints of the lines may not be placed at the beginning
    or the end of referencing and the referenced fields. So, you will need to manually
    adjust them by clicking and dragging the joints to the correct location on the
    diagram object (of course, if you want more precision in the visual representation
    of these relationships).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，右键单击相邻的线，然后从弹出菜单中选择**类别上的基数** | **一对多**。现在，两个表之间建立了一对多的关系，从**类别**到**任务**的外键也自动创建了；此外，连接线的类别端将在图表中有一个类似叉子的连接点。图表编辑器（直接在画布上编辑）的一个缺点是，当关系通过点按和拖放手势进行视觉定义时，线的连接点可能不会放置在引用和被引用字段的开始或结束位置。因此，您需要通过点击和拖动连接点来手动调整它们，将它们调整到图表对象的正确位置（当然，如果您希望在这些关系的视觉表示中获得更多精度）。
- en: We could have also used the **Design Relation...** command from the pop-up menu
    that is the equivalent of double-clicking on the joining line, which would bring
    us back to the table designer that has the **Foreign Keys** tab active. This is
    where you can fine-tune the foreign key definition of the adjoining table-field
    pairs; furthermore, it gives you the flexibility to reference more than one field
    in the join.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用弹出菜单中的**设计关系...**命令，这相当于双击连接线，这将带我们回到具有**外键**选项卡激活的表设计界面。在这里，您可以微调相邻表-字段对的外键定义；此外，它还为您提供了引用多个字段的灵活性。
- en: 'As you have seen, it is best to use on-canvas editing and the table designer
    in conjunction with one another, rather than as alternatives, to make the best
    of two worlds, and for maximum flexibility in data modeling. Refer to the following
    screenshot to see how **Foreign Keys** are created:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，最好同时使用画布编辑和表设计工具，而不是作为替代方案，以充分利用两个世界，并在数据建模中获得最大的灵活性。参考以下截图，看看**外键**是如何创建的：
- en: '![Defining the relationships](img/7461EN_04_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![定义关系](img/7461EN_04_07.jpg)'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As many DBAs and software project managers would suggest (if not required),
    it is a good idea to conform to certain naming conventions when creating database
    objects, especially constraints such as **Foreign Keys**. I prefer to name **Foreign
    Keys** as starting with the prefix `fk_` concatenated by the table name, and then
    with `_4_` proceeded by the referenced table name, followed by the name of its
    primary key field. For example, in the case of the task-category relation, I used
    `fk_task_4_category_id` as the foreign key name, which means that this constraint
    is a foreign key defined for the **task** table that references the **id** field
    of the **category** table from the **category_id** field of the **task** table
    itself.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如许多数据库管理员和软件项目经理所建议的（如果不是必须的），在创建数据库对象时遵守某些命名约定是一个好主意，特别是像**外键**这样的约束。我喜欢将**外键**命名为以表名为前缀的`fk_`，然后是`_4_`，然后是被引用的表名，最后是其主键字段的名称。例如，在任务-类别关系的情况下，我使用`fk_task_4_category_id`作为外键名称，这意味着这个约束是为**任务**表定义的外键，它引用**任务**表自身的**category_id**字段从**类别**表的**id**字段。
- en: While Navicat provides a lot of ergonomie for database object management, especially
    for constraint and index management, many other tools do not. In case of a need
    for modification, it can become cumbersome for someone who is not using a sophisticated
    GUI tool to manage a database, to locate a foreign key or some other constraint
    in the database unless a certain naming standard is respected from beginning to
    end, and by everyone involved.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Navicat为数据库对象管理提供了许多人性化的功能，特别是约束和索引管理，但许多其他工具却没有。如果需要修改，对于不使用复杂GUI工具来管理数据库的人来说，要找到数据库中的外键或其他约束可能会变得很麻烦，除非从头到尾都遵守某种命名标准，并且所有人都遵守。
- en: When you're finished editing, click on the **OK** button on the lower right-hand
    side of the screen to save your changes, or click on **Cancel** to discard them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑完成后，点击屏幕右下角的**确定**按钮保存更改，或者点击**取消**放弃更改。
- en: Adding some pizzazz to the model with notes and images
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过注释和图片为模型增添一些活力
- en: Imagine a case where you are designing a database model as part of a project
    proposal and you want your model to look pretty and appealing. Well, it could
    take more than a well-designed ER diagram to make your model seductive. The additional
    objects on the vertical model diagram palette, what I call annotation tools, can
    help you achieve just that.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种情况，你正在设计一个数据库模型作为项目提案的一部分，你希望你的模型看起来漂亮和吸引人。嗯，除了一个精心设计的ER图表之外，可能还需要更多。垂直模型图表面板上的附加对象，我称之为注释工具，可以帮助你实现这一点。
- en: 'Click on the tiny button with a yellow icon resembling a post-it note, on the
    vertical model diagram palette, to activate the note tool, and then click on an
    empty area of the canvas to drop in a sticky note. You can double-click on it
    to edit its text, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 点击垂直模型图表面板上一个黄色图标的小按钮，激活注释工具，然后点击画布上的空白区域放置一个便利贴。你可以双击它来编辑它的文字，如下截图所示：
- en: '![Adding some pizzazz to the model with notes and images](img/7461EN_04_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![通过注释和图片为模型增添一些活力](img/7461EN_04_08.jpg)'
- en: The note we have just added looks indeed like a post-it sticky, and it looks
    pretty good to me, in my humble opinion. But if you wish to change the appearance
    of the note (such as the color and text style), you can go to the properties pane
    and experiment with the different settings. The properties editor lets you tweak
    the note color, (rectangle) size, location, and even the font size and style.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的注释看起来确实像一个便利贴，我个人认为它看起来很不错。但如果你想改变注释的外观（比如颜色和文字样式），你可以在属性窗格中尝试不同的设置。属性编辑器可以让你调整注释的颜色，（矩形）大小，位置，甚至字体大小和样式。
- en: If you prefer not to have a piece of sticky note on your model, but rather something
    more contemporary, you can choose to make the paper-like graphic completely disappear
    and leave only the text. To do this, simply click on the note with the arrow tool
    so it remains highlighted (or selected), and then in the properties pane select
    **Label** from the drop-down list named **Note style**. In Windows, right-click
    on the note and then go to **Style** | **Note**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想在你的模型上贴一个便利贴，而是想要更现代的东西，你可以选择让纸张状的图形完全消失，只留下文字。要做到这一点，只需点击箭头工具，使注释保持高亮（或选中），然后在属性窗格中从下拉列表**注释样式**中选择**标签**。在Windows中，右键点击注释，然后转到**样式**
    | **注释**。
- en: Right below the notes icon, there is the image tool with a tiny picture icon.
    You can add any picture or image to the diagram by first activating this tool
    by clicking on it, and by secondly clicking anywhere on the canvas. This will
    prompt you with your operating system's standard **Open** file dialog box, to
    select an image file or photo from your disk. Upon doing so, the image you have
    selected will be placed where you had clicked on the canvas. You could, for example,
    place your company logo in a corner to make the look and feel a little more corporate.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在注释图标的下方，有一个带有小图片图标的图片工具。你可以通过首先点击激活此工具，然后在画布上的任何位置点击来向图表中添加任何图片或图像。这将提示你使用操作系统的标准**打开**文件对话框，从磁盘中选择一个图像文件或照片。这样做后，你选择的图像将被放置在你在画布上点击的位置。例如，你可以将公司标志放在一个角落，使外观更加企业化。
- en: Working with layers
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图层
- en: As mentioned earlier, the layers in Navicat's Model Designer are only for colorizing
    certain areas of the canvas for some kind of annotation, and can be used for marking
    a certain area of the canvas to gather some tables of a certain type of business
    logic. For example, you would want to separate the tables related with HR and
    put them within the boundaries of a certain layer, and put the tables related
    with manufacturing and logistics in another layer, for example, in a different
    area distinguished by a different layer, preferably in a different color, in the
    same diagram.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Navicat的模型设计中的图层只用于给画布的某些区域上色以进行注释，并且可以用于标记画布的某些业务逻辑类型的表。例如，你可能想要将与人力资源相关的表分开，并将它们放在一个特定图层的边界内，将与制造和物流相关的表放在另一个图层中，例如，在一个由不同图层区分的不同区域中，最好是用不同的颜色在同一个图表中。
- en: To create a layer, simply click on the icon above the relationship tool (and
    below the image tool) on the vertical palette, then click-and-drag a rectangular
    area ofyour choice on the canvas that you want your layer to be placed across.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个图层，只需点击垂直调色板上关系工具上方（图像工具下方）的图标，然后在画布上点击并拖动你想要放置图层的矩形区域。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please remember that layers are neither containers nor placeholders, and they
    serve no other purpose than being a visual aid.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，图层既不是容器也不是占位符，它们除了作为视觉辅助外没有其他用途。
- en: Deleting unwanted objects
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除不需要的对象
- en: When you create a table in the model designer, it begins to exist both in the
    diagram and the model. Deleting a table from the diagram thereafter does not necessarily
    mean it will be deleted from the model, but the good news is that you are asked
    from what context you want to delete a table, provided that you right-click on
    the table and select **Delete** | **from Diagram** or **Delete** | **from Diagram
    and Model**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在模型设计中创建一个表时，它会同时存在于图表和模型中。此后从图表中删除表并不一定意味着它会从模型中删除，但好消息是，你会被询问你想从哪个上下文中删除表，只要你右键点击表并选择“删除”|“从图表中删除”或“删除”|“从图表和模型中删除”。
- en: What's the difference? Well, the decision affects the objects that will be created
    when you generate a database from a model design. At the end of this section,
    you will learn how to forward-engineer a database by generating SQL from the model
    design.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么不同？嗯，这个决定会影响从模型设计生成数据库时将创建的对象。在本节的最后，你将学会如何通过从模型设计生成SQL来正向工程化数据库。
- en: Objects other than tables and relationships have no impact on the database structure,
    so deleting them from a diagram also removes them from the model.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了表和关系之外的对象对数据库结构没有影响，因此从图表中删除它们也会从模型中删除它们。
- en: Working with multiple diagrams
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多个图表
- en: As discussed in the beginning of the chapter, a model can contain multiple diagrams.
    Working with more than one diagram within a model can become necessary if you're
    working with very large databases, whose model would be too large to be managed,
    leaving you no choice but to divide them into subgroups and place them in separate
    diagrams.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章开头所讨论的，一个模型可以包含多个图表。如果你正在处理非常庞大的数据库，其模型太大无法管理，那么在模型内使用多个图表可能是必要的，你别无选择，只能将它们分成子组并放置在不同的图表中。
- en: We will not go into detail about working with more than one diagram within the
    same model. However, I want to mention a few points here. Also, the user interface
    of Navicat for Windows differs in some aspects from that of the Mac version, so
    I'll try to briefly explain the differences between the two user interfaces.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍在同一个模型中使用多个图表的工作。但是，我想在这里提到一些要点。此外，Navicat for Windows的用户界面在某些方面与Mac版本不同，因此我将尝试简要解释两个用户界面之间的区别。
- en: On both the Windows and Mac platforms, you can create a new diagram simply by
    clicking on the **New Diagram** button on the toolbar of the Model Designer window.
    When you do this on Windows, the new diagram comes up under a new tab right above
    the canvas area. You can switch between the diagrams simply by clicking on their
    tabs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows和Mac平台上，你可以通过在模型设计窗口的工具栏上点击“新建图表”按钮来创建一个新的图表。在Windows上这样做时，新的图表会出现在画布区域上方的新标签下。你可以通过点击它们的标签来在图表之间切换。
- en: In the Mac version, instead of a tab bar on the top left side of the canvas,
    there's a drop-down menu labeled with the name of the active diagram. Also in
    the Mac version, at the bottom left side of every window, there is a small, black
    icon in the shape of toothed gear wheels. When clicked, it pops up a menu for
    you to add objects to, relevant to the context you're currently in. To switch
    between diagrams on the Mac, just click on its name and then select the name of
    the diagram from the drop-down menu that opens, which you want to toggle.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac版本中，画布的左上方没有标签栏，而是一个下拉菜单，标有活动图表的名称。此外，在Mac版本中，每个窗口的左下方都有一个形状像齿轮的小黑色图标。点击它会弹出一个菜单，让你添加与当前上下文相关的对象。要在Mac上切换图表，只需点击其名称，然后从打开的下拉菜单中选择你想要切换的图表的名称。
- en: Exporting the model diagram to SQL
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型图表导出到SQL
- en: We have completed the design of a simple, yet functional, database model design.
    Now, it's time to put it to some use.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了一个简单但功能齐全的数据库模型设计。现在是时候将其投入使用了。
- en: I mentioned earlier, the possibility of generating a database from a model.
    To achieve this with a model we designed from scratch, we first need to export
    our design to a `.sql` file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过，可以从模型生成数据库的可能性。要实现这一点，我们首先需要将我们的设计导出到一个`.sql`文件中。
- en: On the Mac, there's a button labeled **Export SQL** on the toolbar of the Model
    Designer window. When you press it, the canvas is masked with an export settings
    form, where you must indicate which tables to export and optionally specify some
    advanced settings, such as excluding DROP statements, primary keys, indexes, and
    foreign keys from the generated SQL. You can leave these untouched if you don't
    want to omit anything.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，模型设计窗口的工具栏上有一个标有**导出SQL**的按钮。当您按下它时，画布上会出现一个导出设置表单，您必须在其中指定要导出的表，并可选择指定一些高级设置，例如排除生成的SQL中的DROP语句、主键、索引和外键。如果您不想省略任何内容，可以将这些设置保持不变。
- en: In the Windows version, however, there's no export button on the toolbar; rather,
    you must select **Tools** | **Export SQL...** from the menu bar.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Windows版本中，工具栏上没有导出按钮；相反，您必须从菜单栏中选择**工具** | **导出SQL...**。
- en: I suggest you uncheck the option of DROP statements, which could cause SQL errors,
    as this is the first time we'll be creating the **Simple To Do** database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您取消DROP语句的选项，因为这是我们第一次创建**Simple To Do**数据库，可能会导致SQL错误。
- en: You can name the file to be exported something like `simple-todo.sql` and proceed
    with the exporting process.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将要导出的文件命名为`simple-todo.sql`，然后继续导出过程。
- en: Importing and exporting data was discussed in detail in [Chapter 3](ch03.html
    "Chapter 3. Data Management with Navicat"), *Data Management with Navicat*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 导入和导出数据在[第3章](ch03.html "第3章。使用Navicat进行数据管理")中有详细讨论，*使用Navicat进行数据管理*。
- en: 'The source code of the exported file should resemble the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 导出文件的源代码应该类似于以下内容：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Finally, by applying what you have learned in [Chapter 2](ch02.html "Chapter 2. Working
    with Databases"), *Working with Databases* and [Chapter 3](ch03.html "Chapter 3. Data
    Management with Navicat"), *Data Management with Navicat*, you can create a new
    database called **simple_todo** or just **todo**, and **Execute SQL file...**
    to generate the database from our exported model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过应用您在[第2章](ch02.html "第2章。与数据库一起工作")中学到的知识，*与数据库一起工作*和[第3章](ch03.html "第3章。使用Navicat进行数据管理")中学到的知识，*使用Navicat进行数据管理*，您可以创建一个名为**simple_todo**或**todo**的新数据库，并**执行SQL文件...**从我们导出的模型生成数据库。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also paste the following code in a query window and execute the query
    to achieve the same result, provided that you have created the blank database.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将以下代码粘贴到查询窗口中，并执行查询以实现相同的结果，前提是您已经创建了空白数据库。
- en: Reverse-engineering a database into a model
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据库反向工程成模型
- en: In the previous sections, we learnt how to design data models from scratch.
    Now that you're acquainted with the data modeling tools and diagram structures,
    we can move onto generating a model from an existing database.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们学会了如何从头开始设计数据模型。现在您已经熟悉了数据建模工具和图表结构，我们可以开始从现有数据库生成模型。
- en: For this part I have chosen the Sakila example database, which I introduced
    in [Chapter 3](ch03.html "Chapter 3. Data Management with Navicat"), *Data Management
    with Navicat*. If you already followed the tutorials in the previous chapter,
    you must have a working copy of the **sakila** database available to be reverse-engineered
    into a data model. If not, now is a good time to take a look into it and at least
    follow the steps to get the **sakila** database imported into your MySQL server.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，我选择了Sakila示例数据库，我在[第3章](ch03.html "第3章。使用Navicat进行数据管理")中介绍了*使用Navicat进行数据管理*。如果您已经按照上一章的教程操作，那么您必须有一个可用于反向工程成数据模型的**sakila**数据库的工作副本。如果没有，现在是一个好时机来看一看，并至少按照步骤将**sakila**数据库导入到您的MySQL服务器中。
- en: Go to Navicat's main window and locate the **sakila** database in the **connections**
    pane; right-click on its name and select **Reverse Database to Model...** from
    the pop-up menu.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Navicat的主窗口，在**连接**窗格中找到**sakila**数据库；右键单击其名称，然后从弹出菜单中选择**反向数据库到模型...**。
- en: 'A new model design window should instantly show up featuring all the tables
    and relationships of the Sakila database in a visual diagram, as shown in the
    following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新的模型设计窗口应该立即显示出Sakila数据库的所有表和关系的可视图表，如下面的屏幕截图所示：
- en: '![Reverse-engineering a database into a model](img/7461EN_04_09.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![将数据库反向工程成模型](img/7461EN_04_09.jpg)'
- en: You could experiment with applying what you have learned in this chapter, for
    example, by adding notes and layers, and fine-tuning joining lines.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试应用本章学到的知识，例如添加注释和图层，以及微调连接线。
- en: If you end up modifying the model with added tables, fields, and relationships,
    you can synchronize these changes back to the **sakila** database without having
    to regenerate the entire database from a SQL file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您最终修改了模型，添加了表、字段和关系，您可以将这些更改同步回**sakila**数据库，而无需从SQL文件重新生成整个数据库。
- en: To do this, simply hit the **Synchronize** button on the toolbar (on the Mac)
    or select **Tools** | **Synchronize to Database...** from the menu bar (on Windows).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，只需点击工具栏上的**同步**按钮（在Mac上），或者从菜单栏中选择**工具** | **同步到数据库...**（在Windows上）。
- en: Details on the data synchronization process and its settings were covered in
    detail in [Chapter 3](ch03.html "Chapter 3. Data Management with Navicat"), *Data
    Management with Navicat*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有关数据同步过程及其设置的详细信息在[第3章](ch03.html "第3章。使用Navicat进行数据管理")中有详细介绍，*使用Navicat进行数据管理*。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started the chapter by getting you acquainted with the visual data modeler
    of Navicat, the metaphors it introduces, and how to design tables, fields, constraints,
    and relationships between these objects. These are both visual and form-based
    tools, which resemble other tools of Navicat covered in the previous chapters.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从让您熟悉Navicat的可视化数据建模工具开始，介绍了它引入的隐喻，以及如何设计表、字段、约束和这些对象之间的关系。这些都是视觉和基于表单的工具，类似于前几章介绍的Navicat的其他工具。
- en: Using these tools, you learned how to design a database model from scratch and
    then actually generated that database from the model.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些工具，您学会了如何从头开始设计数据库模型，然后实际从模型生成了数据库。
- en: Finally, we reverse-engineered a larger, existing database and automatically
    generated its visual model with a one-click wizard, and you have learned how you
    can synchronize your changes back to the database as you progress on the model.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们对一个更大的现有数据库进行了逆向工程，并使用一键向导自动生成了其可视化模型，您已经学会了如何在模型上进行进展时将更改同步回数据库。
