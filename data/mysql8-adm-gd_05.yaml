- en: MySQL 8 Database Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8数据库管理
- en: In the previous chapter, we learned about MySQL 8 data types, explaining in
    detail which data types are available and how they are categorized. There are
    various properties associated with each of these data types, and the storage capacity
    varies with each type. The previous chapter also provided you with an in-depth
    understanding of MySQL 8 data types. Now its time to get some practical knowledge
    on MySQL 8 administrative features. Isn't it interesting to know more about the
    administrative features of MySQL 8, how configuration will be done for it, and
    much more? It's extremely important for an administrator to have detailed knowledge
    on how MySQL 8 works for globalization, how logs are maintained, and how to enhance
    capability of the server. Now, let's start with some fundamental concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了MySQL 8数据类型，详细解释了可用的数据类型及其分类。每种数据类型都有各种属性，存储容量也因类型而异。上一章还为您提供了对MySQL
    8数据类型的深入了解。现在是时候获得一些关于MySQL 8管理功能的实际知识了。了解更多关于MySQL 8管理功能的信息，如何为其进行配置等，这难道不是很有趣吗？对于管理员来说，详细了解MySQL
    8的全球化工作原理、如何维护日志以及如何增强服务器的功能非常重要。现在，让我们从一些基本概念开始。
- en: 'We will cover the follow topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: MySQL 8 server administration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8服务器管理
- en: Data directory
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据目录
- en: The system database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统数据库
- en: Running multiple instances on a single machine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单台机器上运行多个实例
- en: Components and plugin management
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件和插件管理
- en: Roles and permissions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色和权限
- en: Caching techniques
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存技术
- en: Globalization
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球化
- en: MySQL 8 server logs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8服务器日志
- en: MySQL 8 server administration
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8服务器管理
- en: There are many operating parameters that available with MySQL 8, and among them
    all the required parameters are set by default during the installation process.
    After installation, you are allowed to change the **option file** by removing
    or adding a comment sign (`#`) at the start of the line of a specific parameter
    setting. The user is also allowed to set parameters at runtime by using command
    line arguments or the option file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8有许多可用的操作参数，其中所有必需的参数在安装过程中默认设置。安装后，您可以通过删除或添加特定参数设置行的注释符（`#`）来更改**选项文件**。用户还可以使用命令行参数或选项文件在运行时设置参数。
- en: Server options and different types of variables
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器选项和不同类型的变量
- en: In this section, we are going to cover **server options**, **system variable**, and
    **status variables** available in MySQL 8 on startup.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍MySQL 8启动时可用的**服务器选项**、**系统变量**和**状态变量**。
- en: '**Server option**: As described in the previous chapter MySQL 8 uses the option
    file and command line arguments to set startup parameters. Refer to [https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html](https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html) for details
    on all the available options. `mysqld` accepts many command options. For a brief
    summary, execute the following command:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器选项：如前一章所述，MySQL 8使用选项文件和命令行参数来设置启动参数。有关所有可用选项的详细信息，请参阅[https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html](https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html)。`mysqld`接受许多命令选项。要获得简要摘要，请执行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To see the full list, use the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整列表，请使用以下命令：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Server System variable**: The MySQL server manages many system variables.
    MySQL provides the default value for each system variable. System variables can
    be set using the command line or can be defined in the option file. MySQL 8 has
    the flexibility to change these variables at runtime without server start or stop.
    For more details refer to: [https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器系统变量**：MySQL服务器管理许多系统变量。MySQL为每个系统变量提供默认值。系统变量可以使用命令行设置，也可以在选项文件中定义。MySQL
    8具有在运行时更改这些变量的灵活性，无需服务器启动或停止。有关更多详细信息，请参阅：[https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html)。'
- en: '**Server status variable**: The MySQL server uses many status variables to
    provide information about its operation. For more details refer to: [https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html](https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器状态变量**：MySQL服务器使用许多状态变量来提供有关其操作的信息。有关更多详细信息，请参阅：[https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html](https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html)。'
- en: Server SQL modes
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器SQL模式
- en: 'MySQL 8 provides different modes that will affect MySQL support and data validation
    checks. This option makes it easier for the user to use MySQL in different environments.
    To set different modes MySQL provides the `sql_mode` system variable which can
    be set at either a global or session level. Refer to the following points in detail
    to understand modes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8提供了不同的模式，这些模式将影响MySQL支持和数据验证检查。此选项使用户更容易在不同环境中使用MySQL。为了设置不同的模式，MySQL提供了`sql_mode`系统变量，可以在全局或会话级别设置。详细了解模式的以下要点：
- en: Setting the SQL mode
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置SQL模式
- en: 'SQL mode can be setup on startup using the `--sql-mode="modes"` option. The
    user can also define this option in the option file as `sql-mode="modes"`* .*
    You can define multiple nodes by adding comma separated values. MySQL 8 uses the
    following modes as default modes:`ONLY_FULL_GROUP_BY`, `STRICT_TRANS_TABLES`,
    `NO_ZERO_IN_DATE`, `NO_ZERO_DATE`, `ERROR_FOR_DIVISION_BY_ZERO`*, *`NO_AUTO_CREATE_USER,
    NO_ENGINE_SUBSTITUTION` To change mode at runtime, execute the following commands:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`--sql-mode="modes"`选项在启动时设置SQL模式。用户还可以在选项文件中定义此选项为`sql-mode="modes"`*。*您可以通过添加逗号分隔的值来定义多个节点。MySQL
    8默认使用以下模式：`ONLY_FULL_GROUP_BY`、`STRICT_TRANS_TABLES`、`NO_ZERO_IN_DATE`、`NO_ZERO_DATE`、`ERROR_FOR_DIVISION_BY_ZERO`*、*`NO_AUTO_CREATE_USER,
    NO_ENGINE_SUBSTITUTION`。要在运行时更改模式，请执行以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To retrieve the values of both the variables, execute the following commands:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索这两个变量的值，请执行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The available SQL modes
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的SQL模式
- en: 'This section describes all the available SQL modes. Out of them, the first
    three are the most important SQL modes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分描述了所有可用的SQL模式。其中，前三个是最重要的SQL模式：
- en: '`ANSI`: This mode is used to change syntax and behavior, by making it closer
    to standard SQL.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANSI`：此模式用于更改语法和行为，使其更接近标准SQL。'
- en: '`STRICT_TRANS_TABLES`: As the name implies, this mode is related to transaction
    and it is mainly used for transactional storage engines. When this mode is enable
    for nontransactional tables,  MySQL 8 will convert invalid values to the closest
    valid value and insert the adjusted value into the column. If the value is missing,
    then MySQL 8 will insert an implicit default value related to the column''s data
    type. In this case, MySQL 8 will generate a warning message instead of an error
    message, and continue with the statement execution without breaking it.In the
    case of transactional tables, however, MySQL 8 gives an error and will breaks
    execution.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STRICT_TRANS_TABLES`：顾名思义，此模式与事务有关，主要用于事务存储引擎。当此模式对非事务表启用时，MySQL 8将无效值转换为最接近的有效值，并将调整后的值插入列中。如果值丢失，则MySQL
    8将插入与列数据类型相关的隐式默认值。在这种情况下，MySQL 8将生成警告消息而不是错误消息，并继续执行语句而不中断。然而，在事务表的情况下，MySQL
    8会给出错误并中断执行。'
- en: '`TRADITIONAL`: This mode generally behaves like traditional SQL database system.
    It indicates give error instead of a warning when an incorrect value inserted
    into the column.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRADITIONAL`：此模式通常表现得像传统的SQL数据库系统。它表示在将不正确的值插入列时产生错误而不是警告。'
- en: '`ALLOW_INVALID_DATES`: This mode checks only the month range and the date range
    of the date value. In other words, the month range must be between 1 to 12 and
    date range must be between 1 to 31\. This mode is applicable for `DATE` and `DATETIME`
    data types and not for `timestamp` data type.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALLOW_INVALID_DATES`：此模式仅检查日期值的月份范围和日期范围。换句话说，月份范围必须在1到12之间，日期范围必须在1到31之间。此模式适用于`DATE`和`DATETIME`数据类型，而不适用于`timestamp`数据类型。'
- en: '`ANSI_QUOTES`: Used to consider `"` as an identifier quote character instead
    of a string quote character. When this mode is enabled, you cannot use double
    quotation to quote string literal.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANSI_QUOTES`：用于将`"`视为标识符引用字符而不是字符串引用字符。当启用此模式时，您不能使用双引号引用字符串文字。'
- en: '`ERROR_FOR_DIVISION_BY_ZERO`: Used to handle the case of division by zero.
    This mode output also depends on strict SQL mode status:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR_FOR_DIVISION_BY_ZERO`：用于处理除以零的情况。此模式的输出还取决于严格的SQL模式状态：'
- en: If this mode is not enabled, division by zero inserts `NULL`and produces no
    warning.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用此模式，除以零会插入`NULL`并且不会产生警告。
- en: If this mode is enabled, division by zero inserts `NULL`and produces a warning.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式，除以零会插入`NULL`并产生警告。
- en: If this mode and strict mode are enabled, division by zero produces an error,
    unless `IGNORE`is given as well. For `INSERT IGNORE` and `UPDATE IGNORE`, division
    by zero inserts `NULL`and produces a warning.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式和严格模式，除以零会产生错误，除非也给出了`IGNORE`。对于`INSERT IGNORE`和`UPDATE IGNORE`，除以零会插入`NULL`并产生警告。
- en: '`HIGH_NOT_PRECEDENCE`: This mode is used to set a high precedence for the `NOT`
    operator. For example, when the mode is enabled the expression `NOT a BETWEEN
    b AND c` is parsed as `NOT (a BETWEEN b AND c)` instead of `(NOT a) BETWEEN b
    AND c`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HIGH_NOT_PRECEDENCE`：此模式用于为`NOT`运算符设置高优先级。例如，当启用此模式时，表达式`NOT a BETWEEN b AND
    c`被解析为`NOT (a BETWEEN b AND c)`而不是`(NOT a) BETWEEN b AND c`。'
- en: '`IGNORE_SPACE`: This mode applies to built-in functions rather than user defined
    functions or stored procedures.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IGNORE_SPACE`：此模式适用于内置函数，而不适用于用户定义的函数或存储过程。'
- en: '`NO_AUTO_CREATE_USER`: This mode is used to prevent `GRANT` statements by automatically
    creating new user accounts unless authentication information is specified.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_AUTO_CREATE_USER`：此模式用于防止通过自动创建新用户帐户的`GRANT`语句。'
- en: '`NO_AUTO_VALUE_ON_ZERO`: This mode is used for auto incremental columns. When
    0 is found MySQL creates a new sequence number for the field, and that will create
    problems when you are loading dump. Enable this mode before reloading dump to
    resolve this problem.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_AUTO_VALUE_ON_ZERO`：此模式用于自动增量列。当找到0时，MySQL为该字段创建一个新的序列号，这在加载转储时会造成问题。在重新加载转储之前启用此模式以解决此问题。'
- en: '`NO_BACKSLASH_ESCAPES`: If this mode is enabled, backslash becomes an ordinary
    character.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_BACKSLASH_ESCAPES`：如果启用此模式，反斜杠将成为普通字符。'
- en: '`NO_DIR_IN_CREATE`: This option is useful for slave replication servers where
    the `INDEX DIRECTORY` and `DATA DIRECTORY` directives are ignored on table creation.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_DIR_IN_CREATE`：此选项对于从属复制服务器非常有用，在表创建时会忽略`INDEX DIRECTORY`和`DATA DIRECTORY`指令。'
- en: '`NO_ENGINE_SUBSTITUTION`: Used to provide substitution of the default storage
    engine. When this mode is enabled and the desired engine is unavailable, MySQL
    gives an error and a table is not created.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_ENGINE_SUBSTITUTION`：用于提供默认存储引擎的替换。当启用此模式并且所需的引擎不可用时，MySQL会给出错误，表不会被创建。'
- en: '`NO_FIELD_OPTIONS`: This indicates, don''t print MySQL specific column options
    in the output of `SHOW_CREATE_TABLE`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_FIELD_OPTIONS`：这表示，在`SHOW_CREATE_TABLE`的输出中不打印MySQL特定的列选项。'
- en: '`NO_KEY_OPTIONS`: This indicates, don''t print MySQL specific index options
    in the output of `SHOW_CREATE_TABLE`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_KEY_OPTIONS`：这表示，在`SHOW_CREATE_TABLE`的输出中不打印MySQL特定的索引选项。'
- en: '`NO_TABLE_OPTIONS`: This indicates, don''t print MySQL specific table options
    in the output of `SHOW_CREATE_TABLE`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_TABLE_OPTIONS`：这表示，在`SHOW_CREATE_TABLE`的输出中不打印MySQL特定的表选项。'
- en: '`NO_UNSIGNED_SUBTRACTION`: When this mode is enabled, it makes sure that subtraction
    result must be a signed value even though any of the operand is unsigned.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_UNSIGNED_SUBTRACTION`：当启用此模式时，它确保减法结果必须是有符号值，即使操作数中的任何一个是无符号的。'
- en: '`NO_ZERO_DATE`: The effect of this mode depends on the strict mode as defined
    below:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_ZERO_DATE`：此模式的效果取决于下面定义的严格模式：'
- en: If it is not enabled, 0000-00-00 is allowed and MySQL produces no warning on
    insertion
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用，允许使用0000-00-00，MySQL在插入时不会产生警告
- en: If this mode is enabled, 0000-00-00 is allowed and MySQL records a warning
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用此模式，则允许0000-00-00，并且MySQL记录警告
- en: If both this mode and strict mode are enabled, 0000-00-00 is not allowed and
    MySQL produces an error on insertion
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果同时启用此模式和严格模式，则不允许0000-00-00，并且MySQL在插入时产生错误
- en: '`NO_ZERO_IN_DATE`: This mode effect is also depending on the strict mode as
    defined below:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_ZERO_IN_DATE`：此模式的影响也取决于如下定义的严格模式：'
- en: If it is not enabled, dates with zero parts are allowed and MySQL produces no
    warning on insertion
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用，允许具有零部分的日期，并且MySQL在插入时不会产生警告
- en: If this mode is enabled, dates with zero parts are allowed and produce a warning
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用此模式，则允许具有零部分的日期并产生警告
- en: If this mode and strict mode are enabled, dates with zero parts are not allowed
    and MySQL produces an error
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用此模式和严格模式，则不允许具有零部分的日期，并且MySQL在插入时产生错误
- en: '`ONLY_FULL_GROUP_BY`: If this mode is enabled, MySQL will reject queries in
    which `select` list, `order by` list, and the `HAVING` condition refer to non
    aggregated columns.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ONLY_FULL_GROUP_BY`：如果启用此模式，MySQL将拒绝查询，其中`select`列表，`order by`列表和`HAVING`条件引用非聚合列。'
- en: '`PAD_CHAR_TO_FULL_LENGTH`: This mode is applied on the column whose data type
    is set as `CHAR`. When this mode is enabled, MySQL retrieves column values by
    padding to their full length.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PAD_CHAR_TO_FULL_LENGTH`：此模式适用于数据类型设置为`CHAR`的列。启用此模式时，MySQL通过填充以获取列值的完整长度。'
- en: '`PIPES_AS_CONCAT`: When this mode is set as enabled `| |` will be considered
    as a string concatenation operator instead of `OR`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PIPES_AS_CONCAT`：当启用此模式时，`| |`将被视为字符串连接运算符，而不是`OR`。'
- en: '`REAL_AS_FLOAT`: By default, MySQL 8 will consider `REAL` as a synonym of `DOUBLE`,
    but when this flag is enabled MySQL will consider `REAL` as a synonym of `FLOAT`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REAL_AS_FLOAT`：默认情况下，MySQL 8将`REAL`视为`DOUBLE`的同义词，但当启用此标志时，MySQL将`REAL`视为`FLOAT`的同义词。'
- en: '`STRICT_ALL_TABLES`: In this mode invalid data values are rejected.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STRICT_ALL_TABLES`：在此模式下，无效的数据值将被拒绝。'
- en: '`TIME_TRUNCATE_FRACTIONAL`: This mode indicates if truncation is allowed on
    `TIME`, `DATE`, and `TIMESTAMP` columns or not. The default behavior is to perform
    rounding on the values instead of truncation.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME_TRUNCATE_FRACTIONAL`：此模式指示是否允许对`TIME`，`DATE`和`TIMESTAMP`列进行截断。默认行为是对值进行四舍五入而不是截断。'
- en: Combination SQL modes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合SQL模式
- en: 'MySQL 8 also provides some special modes as combinations of mode values:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8还提供了一些特殊模式，作为模式值的组合：
- en: '`ANSI`: It includes the effects of the `REAL_AS_FLOAT`, `PIPES_AS_CONCAT`,
    `ANSI_QUOTES`, `IGNORE_SPACE`, and` ONLY_FULL_GROUP_BY` modes.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANSI`：它包括`REAL_AS_FLOAT`，`PIPES_AS_CONCAT`，`ANSI_QUOTES`，`IGNORE_SPACE`和`ONLY_FULL_GROUP_BY`模式的影响。'
- en: '`DB2`: It includes the effects of the `PIPES_AS_CONCAT`, `ANSI_QUOTES`, `IGNORE_SPACE`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, and `NO_FIELD_OPTIONS` modes.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DB2`：它包括`PIPES_AS_CONCAT`，`ANSI_QUOTES`，`IGNORE_SPACE`，`NO_KEY_OPTIONS`，`NO_TABLE_OPTIONS`和`NO_FIELD_OPTIONS`模式的影响。'
- en: '`MAXDB`: It includes the effects of  `PIPES_AS_CONCAT`, `ANSI_QUOTES`, `IGNORE_SPACE`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, `NO_FIELD_OPTIONS`, and `NO_AUTO_CREATE_USER`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAXDB`：它包括`PIPES_AS_CONCAT`，`ANSI_QUOTES`，`IGNORE_SPACE`，`NO_KEY_OPTIONS`，`NO_TABLE_OPTIONS`，`NO_FIELD_OPTIONS`和`NO_AUTO_CREATE_USER`的影响。'
- en: '`MSSQL`: It includes the effects of `PIPES_AS_CONCAT`, `ANSI_QUOTES`, `IGNORE_SPACE`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, and `NO_FIELD_OPTIONS`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MSSQL`：它包括`PIPES_AS_CONCAT`，`ANSI_QUOTES`，`IGNORE_SPACE`，`NO_KEY_OPTIONS`，`NO_TABLE_OPTIONS`和`NO_FIELD_OPTIONS`的影响。'
- en: '`MYSQL323`: It includes the effects of the `MYSQL323` and `HIGH_NOT_PRECEDENCE`
    modes.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL323`：它包括`MYSQL323`和`HIGH_NOT_PRECEDENCE`模式的影响。'
- en: '`MYSQL40`: It includes the effects of the `MYSQL40` and `HIGH_NOT_PRECEDENCE`
    modes.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL40`：它包括`MYSQL40`和`HIGH_NOT_PRECEDENCE`模式的影响。'
- en: '`ORACLE`: It includes the effects of the `PIPES_AS_CONCAT`, `ANSI_QUOTES`,
    `IGNORE_SPACE`, `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, `NO_FIELD_OPTIONS`, and `NO_AUTO_CREATE_USER`
    modes.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ORACLE`：它包括`PIPES_AS_CONCAT`，`ANSI_QUOTES`，`IGNORE_SPACE`，`NO_KEY_OPTIONS`，`NO_TABLE_OPTIONS`，`NO_FIELD_OPTIONS`和`NO_AUTO_CREATE_USER`模式的影响。'
- en: '`POSTGRESQL`: It includes the effect of the `PIPES_AS_CONCAT`, `ANSI_QUOTES`,
    `IGNORE_SPACE`, `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, and `NO_FIELD_OPTIONS` modes.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POSTGRESQL`：它包括`PIPES_AS_CONCAT`，`ANSI_QUOTES`，`IGNORE_SPACE`，`NO_KEY_OPTIONS`，`NO_TABLE_OPTIONS`和`NO_FIELD_OPTIONS`模式的影响。'
- en: '`TRADITIONAL`: It includes the effects of the `STRICT_TRANS_TABLES`, `STRICT_ALL_TABLES`,
    `NO_ZERO_IN_DATE`, `NO_ZERO_DATE`, `ERROR_FOR_DIVISION_BY_ZERO`, `NO_AUTO_CREATE_USER`
    and `NO_ENGINE_SUBSTITUTION` modes.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRADITIONAL`：它包括`STRICT_TRANS_TABLES`，`STRICT_ALL_TABLES`，`NO_ZERO_IN_DATE`，`NO_ZERO_DATE`，`ERROR_FOR_DIVISION_BY_ZERO`，`NO_AUTO_CREATE_USER`和`NO_ENGINE_SUBSTITUTION`模式的影响。'
- en: Strict SQL mode
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 严格的SQL模式
- en: The **strict mode** is used to manage *Invalid data* or *missing data*. If strict
    mode is not enabled, then MySQL will manage the insert and update operations by
    adjusting values and generating warning messages. We can do the same on strict
    mode by enabling the `INSERT IGNORE` or `UPDATE IGNORE` options. Let's take a
    key insertion example where a key value exceeds the maximum limit. MySQL produces
    an error and stops the execution if strict mode is enabled, and on the opposite
    side it allows key value by truncating if strict mode is disabled. In the same
    way, in the case of the `SELECT` statement where the data is not changed, MySQL
    will still produce an error, generating a warning message in case of invalid values
    if strict mode is enabled. Strict mode is in effect if either the `STRICT_ALL_TABLES` or
    the `STRICT_TRANS_TABLES` option is enabled. These two options behave similarly
    in the case of transactional tables and differently in the case of nontransactional
    tables.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**严格模式**用于管理*无效数据*或*丢失数据*。如果未启用严格模式，则MySQL将通过调整值和生成警告消息来管理插入和更新操作。我们可以通过启用`INSERT
    IGNORE`或`UPDATE IGNORE`选项在严格模式下执行相同的操作。让我们以一个键插入的例子来说明，其中键值超过了最大限制。如果启用了严格模式，MySQL会产生错误并停止执行，而在相反的情况下，它会通过截断允许键值。同样，在`SELECT`语句的情况下，如果数据没有更改，MySQL仍会产生错误，在严格模式下，如果存在无效值，则会生成警告消息。如果启用了`STRICT_ALL_TABLES`或`STRICT_TRANS_TABLES`选项，则严格模式生效。这两个选项在事务表的情况下行为类似，在非事务表的情况下行为不同。'
- en: '**For transactional tables**: If either of the modes are enabled, then MySQL
    will produce an error and aborts the statement execution, in case of invalid or
    missing values.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于事务表**：如果启用了任一模式，则MySQL将在出现无效或缺少值的情况下产生错误并中止语句执行。'
- en: '**For nontransactional tables**: The behavior of MySql will depend on the following
    factors, when the tables are nontransactional:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于非事务表**：当表是非事务性的时，MySQL的行为将取决于以下因素：'
- en: '`STRICT_ALL_TABLES`: In this case, an error will be generated and the execution
    will be stopped. But still, there is a possibility of error where the partial
    data gets updated. To avoid this error scenario, use a single-row statement, which
    will abort execution if the error occurred during first row insertion/updation.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STRICT_ALL_TABLES`: 在这种情况下，将生成错误并停止执行。但仍然存在部分数据更新的可能性。为了避免这种错误情况，使用单行语句，如果在第一行插入/更新期间发生错误，将中止执行。'
- en: '`STRICT_TRANS_TABLES`: This option provide flexibility to convert an invalid
    value to the closest valid value. In case of missing value, MySQL inserts the
    data type''s default value into the column. Here, MySQL generates a warning message
    and continues with the execution.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STRICT_TRANS_TABLES`: 此选项提供了将无效值转换为最接近有效值的灵活性。在缺少值的情况下，MySQL将数据类型的默认值插入到列中。在这里，MySQL生成警告消息并继续执行。'
- en: Strict mode affects handling of divisions by zero, zero dates, and zeros in
    dates as describe in the preceding points with the `ERROR_FOR_DIVISION_BY_ZERO`, `NO_ZERO_DATE `and `NO_ZERO_IN_DATE` modes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式影响对零的除法、零日期和日期中的零的处理，如前面的点中所述，使用`ERROR_FOR_DIVISION_BY_ZERO`、`NO_ZERO_DATE`和`NO_ZERO_IN_DATE`模式。
- en: 'The SQL mode will be applied on the following SQL statements:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: SQL模式将应用于以下SQL语句：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can go to : [https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html) for
    a detailed list of the errors associated with strict SQL mode in MySQL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问：[https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)
    以获取MySQL中严格SQL模式相关错误的详细列表。
- en: The IGNORE keyword
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IGNORE关键字
- en: 'MySQL provides an `IGNORE` keyword which is optional for statement execution.
    The `IGNORE` keyword is used to downgrade errors to warnings and applicable to
    several statements. For multiple row statements, the `IGNORE` keyword allows you
    to skip the particular row, instead of aborting. The following statements support
    the `IGNORE` keyword:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了一个可选的`IGNORE`关键字，用于语句执行。`IGNORE`关键字用于将错误降级为警告，并适用于多个语句。对于多行语句，`IGNORE`关键字允许您跳过特定行，而不是中止。以下语句支持`IGNORE`关键字：
- en: '`CREATE TABLE ... SELECT`: Individual `CREATE` and `SELECT` statements do not
    have support on this keyword, but when we insert into the table using `SELECT`
    statement, rows that duplicate an existing row on a unique key value are discarded.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE TABLE ... SELECT`: 单独的`CREATE`和`SELECT`语句不支持此关键字，但是当我们使用`SELECT`语句插入表时，具有唯一键值的行将被丢弃。'
- en: '`DELETE`: If this statement executes with the `IGNORE` option MySQL avoid errors
    occurred during execution.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`: 如果此语句执行`IGNORE`选项，MySQL将避免执行期间发生的错误。'
- en: '`INSERT`: Duplicate values in unique key and data conversion issues will be
    handled by this keyword during row insertion. MySQL will insert the closest possible
    values into the column and ignore the error.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT`: 在行插入期间，此关键字将处理唯一键中的重复值和数据转换问题。MySQL将在列中插入最接近的可能值并忽略错误。'
- en: '`LOAD DATA` and `LOAD XML`: At the time of loading data if duplication is found
    the statement will discard it and continue insertion for the remaining data if
    the `IGNORE` keyword is defined.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOAD DATA`和`LOAD XML`: 在加载数据时，如果发现重复，该语句将丢弃它并继续插入剩余数据，如果定义了`IGNORE`关键字。'
- en: '`UPDATE`: In cases of duplicate key conflict on unique key during statement
    execution, MySQL will update the column with the closest identified values.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATE`: 在语句执行期间，如果唯一键发生重复键冲突，MySQL将使用最接近的识别值更新列。'
- en: The `IGNORE` keyword also applies on some specific errors, listed here:[ https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`IGNORE`关键字也适用于一些特定的错误，列在这里：[https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)。'
- en: IPv6 support
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6支持
- en: 'MySQL 8 provides support for **IPv6**, with the following capabilities:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8提供了对**IPv6**的支持，具有以下功能：
- en: MySQL server will accept TCP/IP connections from clients with IPv6 connectivity
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL服务器将接受来自具有IPv6连接性的客户端的TCP/IP连接
- en: MySQL 8 account names permit IPv6 addresses, which enables DBA to specify privileges
    for the clients that are connected with server, using IPv6
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8帐户名称允许IPv6地址，这使得DBA可以为连接到服务器的客户端指定特权，使用IPv6
- en: The IPv6 functions enable conversions between string and internal IPv6 address
    formats, and checking whether the values represent a valid IPv6 address or not
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv6功能使字符串和内部IPv6地址格式之间的转换成为可能，并检查这些值是否表示有效的IPv6地址
- en: Server side help
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端帮助
- en: 'MySQL 8 provides `HELP` statement, to get information from the MySQL reference
    manual. To manage this information, MySQL uses several tables of system database.
    To initialize these tables, MySQL provides the `fill_help_tables.sql` script.
    This script is available at [http://dev.mysql.com/doc/index-other.html](https://dev.mysql.com/doc/index-other.html).
    After downloading and unzipping the script file, execute the below command, for
    invoking the `HELP` function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8提供了`HELP`语句，以从MySQL参考手册中获取信息。为了管理这些信息，MySQL使用系统数据库的几个表。为了初始化这些表，MySQL提供了`fill_help_tables.sql`脚本。此脚本可在[http://dev.mysql.com/doc/index-other.html](https://dev.mysql.com/doc/index-other.html)下载并解压缩后，执行以下命令，以调用`HELP`函数：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At the time of installation process content initialization occurs. In case of
    upgrading it will be perform so; execute the above command manually.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中发生内容初始化。在升级的情况下，将执行上述命令。
- en: The server shutdown process
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器关闭过程
- en: 'The server shutdown process performs the following steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器关闭过程执行以下步骤：
- en: '**The shutdown process is initiated**: There are several ways to initialize
    the shutdown process. Execute the `mysqladmin shutdown` command which can be executed
    on any platform. There are some system specific ways to initialize the shutdown
    process; for example, Unix based systems will start to shut down when it receives
    a **SIGTERM** signal. In the same way, Window based systems will start to shut
    down when the service manager tells them to.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭过程已启动：有几种方法可以初始化关闭过程。执行`mysqladmin shutdown`命令，可以在任何平台上执行。还有一些特定于系统的方法来初始化关闭过程；例如，基于Unix的系统在接收到**SIGTERM**信号时将开始关闭。同样，基于Windows的系统将在服务管理器告知它们时开始关闭。
- en: '**The server creates a shutdown thread if necessary**: Based on the shutdown
    initialization process, the server will decide to create new thread or not. If
    it is requested by the client, a new thread will be created. If a signal is received,
    then the server might create a thread or it might handle it by itself. If the
    server tries to create a separate thread for the shutdown process and an error
    occurs, then it produces the following message in the error log:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，服务器将创建一个关闭线程：根据关闭初始化过程，服务器将决定是否创建新线程。如果客户端请求，将创建一个新线程。如果收到信号，则服务器可能会创建一个线程，或者自行处理。如果服务器尝试为关闭过程创建一个单独的线程，并且发生错误，则会在错误日志中产生以下消息：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**The server stops accepting new connections**: When the shutdown activity
    is initiated, the server will stop accepting new connection requests, using a handler
    of network interfaces. The server will be using Windows features such as named
    pipe, TCP/IP port, the Unix socket file, and shared memory on Windows in order
    to listen to new connection requests.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器停止接受新连接：当关闭活动启动时，服务器将停止接受新的连接请求，使用网络接口的处理程序。服务器将使用Windows功能（如命名管道、TCP/IP端口、Unix套接字文件以及Windows上的共享内存）来监听新的连接请求。
- en: '**The server terminates current activity**: Once the shut down process is initialized,
    the server will start to break the connection with the client. In the normal scenario,
    the connection threads will die quickly, but the ones which are working or are
    in an ongoing activity stage will take a long time to *die*. So if a thread is
    executing open transactions and if it gets rollback in the middle of execution
    then the user might get only partially updated data. On the other hand, if the
    thread is working on a transaction, then the server will wait until the transaction
    is completed. Also, the user can terminate the ongoing transaction by executing
    the  `KILL QUERY` or `KILL CONNECTION` statements.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器终止当前活动：一旦关闭过程启动，服务器将开始与客户端断开连接。在正常情况下，连接线程将很快终止，但正在工作或处于进行中的活动阶段的线程将需要很长时间才能终止。因此，如果一个线程正在执行打开的事务，并且在执行过程中被回滚，那么用户可能只会得到部分更新的数据。另一方面，如果线程正在处理事务，服务器将等待直到事务完成。此外，用户可以通过执行`KILL
    QUERY`或`KILL CONNECTION`语句终止正在进行的事务。
- en: '**The server shuts down or closes storage engines**: In this phase, the server
    flushes the cache and closes all the open tables. Here, the storage engine performs
    all the actions necessary for tables. `InnoDB` flushes its buffer pool, writes
    the current LSN into tablespace and terminates its thread. The `MyISAM` flushes
    the pending index.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器关闭或关闭存储引擎：在此阶段，服务器刷新缓存并关闭所有打开的表。在这里，存储引擎执行所有必要的表操作。`InnoDB`刷新其缓冲池，将当前LSN写入表空间并终止其线程。`MyISAM`刷新挂起的索引。
- en: '**The server exits**: In this phase, the server will provide one of the following
    values to the management processes:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器退出：在此阶段，服务器将向管理进程提供以下值：
- en: 0 = successful termination (no restart done)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 = 成功终止（未重新启动）
- en: 1 = unsuccessful termination (no restart done)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 = 未成功终止（未重新启动）
- en: 2 = unsuccessful termination (restart done)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 = 未成功终止（已重新启动）
- en: Data directory
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据目录
- en: 'The data directory is the place where MySQL 8 stores all the information that
    is managed by itself. Each sub-directory of the data directory represents a database
    directory and its related data. All the MySQL installations have the following
    standard databases:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 数据目录是MySQL 8存储自身管理的所有信息的位置。数据目录的每个子目录代表一个数据库目录及其相关数据。所有MySQL安装都具有以下标准数据库：
- en: '**The** `sys` **directory**: This represents the sys schema, which contains
    the objects useful for the Performance Schema information interpretation.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys`目录：表示sys模式，其中包含用于性能模式信息解释的对象。'
- en: '**The** `performance schema` **directory**: This directory is used to observe
    the internal execution of the MySQL server at run-time.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`performance schema`目录：此目录用于观察MySQL服务器在运行时的内部执行。'
- en: '**The** `mysql` **directory**: This directory is related to the MySQL system
    database, which contains the data dictionary table and the system tables. It contains
    the information that is required by the MySQL server once it is running.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql`目录：与MySQL系统数据库相关的目录，其中包含数据字典表和系统表。一旦MySQL服务器运行，它包含MySQL服务器所需的信息。'
- en: The system database
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统数据库
- en: The system database mainly contains the data dictionary tables that stores the
    object's metadata and system tables for other operational purposes. The system
    database contains a number of system tables. We will learn more about them in
    the coming sections.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 系统数据库主要包含存储对象元数据和其他操作目的的系统表的数据字典表。系统数据库包含许多系统表。我们将在接下来的部分中了解更多信息。
- en: Data dictionary tables
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据字典表
- en: The data dictionary tables contains the metadata about data objects. Tables
    of this directory are invisible and are not read by general SQL queries such as `SELECT`,
    `SHOW TABLES`, `INFORMATION_SCHEMA.TABLES`, and so on. MySQL mainly exposes the
    metadata using the `INFORMATION_SCHEMA` option.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 数据字典表包含有关数据对象的元数据。该目录中的表是不可见的，并且不会被一般的SQL查询（如`SELECT`、`SHOW TABLES`、`INFORMATION_SCHEMA.TABLES`等）读取。MySQL主要使用`INFORMATION_SCHEMA`选项公开元数据。
- en: Grant system tables
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授予系统表
- en: These tables are used to manage and provide grant information of users, database
    and relevant privileges. MySQL 8 uses grant tables as transactional tables, not
    nontransactional (`MyISAM`, for example) tables, so all the operations on the
    transaction are either completed or failed; no partial case will be made possible.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表用于管理和提供用户、数据库和相关权限的授权信息。MySQL 8使用授权表作为事务表，而不是非事务表（例如`MyISAM`），因此对事务的所有操作要么完成，要么失败；不会出现部分情况。
- en: Object information system tables
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象信息系统表
- en: 'These tables contains information related to the stored programs, components
    and server-side plugins. The following main tables are used to store information:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表包含与存储程序、组件和服务器端插件相关的信息。以下主要表用于存储信息：
- en: '**Component**: Works as a registry for the server. The MySQL 8 server loads
    all the components listed by this table on server startup.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**: 作为服务器的注册表。MySQL 8服务器在启动时加载此表列出的所有组件。'
- en: '**Func**: This table contains information related to all the **user-defined
    functions** (**UDF**). MySQL 8 will load all the UDFs listed in this table during
    server startup.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Func**: 这个表包含与所有**用户定义函数**（**UDF**）相关的信息。MySQL 8在服务器启动时加载此表中列出的所有UDF。'
- en: '**Plugin**: Contains the information related to the server-side plugins. The
    MySQL 8 server loads all the available plugins during startup.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**: 包含与服务器端插件相关的信息。MySQL 8服务器在启动时加载所有可用的插件。'
- en: Log system tables
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志系统表
- en: These tables are useful for logging and using csv storage engines. For example,
    the functions `general_log` and `slow_log`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表对记录和使用csv存储引擎很有用。例如，`general_log`和`slow_log`函数。
- en: The server-side help system tables
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端帮助系统表
- en: 'These tables are useful to store help information. The following tables are
    available in this category :'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表用于存储帮助信息。在这个类别中有以下表：
- en: '`help_category`: Provides information about the help categories'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help_category`: 提供关于帮助类别的信息'
- en: '`help_keyword`: Provides keywords associated with help topics'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help_keyword`: 提供与帮助主题相关的关键字'
- en: '`help_relation`: Helps in mappings between help keywords and topics'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help_relation`: 用于帮助关键字和主题之间的映射'
- en: '`help_topic`: Help topic contents'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help_topic`: 帮助主题内容'
- en: Time zone system tables
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时区系统表
- en: 'These tables are useful to store time zone information. The following tables
    are available in this category:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表用于存储时区信息。在这个类别中有以下表：
- en: '`time_zone`: Provides the time zone IDs and whether they use leap seconds'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_zone`: 提供时区ID以及它们是否使用闰秒'
- en: '`time_zone_leap_second`: Will come in handy when leap seconds occur'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_zone_leap_second`: 当闰秒发生时会派上用场'
- en: '`time_zone_name`: Helps in mappings between time zone IDs and names'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_zone_name`: 用于时区ID和名称之间的映射'
- en: '`time_zone_transition` and  `time_zone_transition_type`: Time zone descriptions'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_zone_transition`和`time_zone_transition_type`: 时区描述'
- en: Replication system tables
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制系统表
- en: 'These tables are useful to support the replication feature. It helps to store
    replication related information when it is configured to as mentioned in following
    tables. The following tables are available in this category:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表对支持复制功能很有用。当配置为以下表中所述时，它有助于存储复制相关信息。在这个类别中有以下表：
- en: '`gtid_executed`: Used for creating the table for storing GTID values'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gtid_executed`: 用于创建存储GTID值的表'
- en: '`ndb_binlog_index`: Provides the binary log information for MySQL Cluster replication'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndb_binlog_index`: 为MySQL集群复制提供二进制日志信息'
- en: '`slave_master_info`, `slave_relay_log_info` and  `slave_worker_info`: Used
    to store replication information on slave servers'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slave_master_info`、`slave_relay_log_info`和`slave_worker_info`: 用于在从服务器上存储复制信息'
- en: Optimizer system tables
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化器系统表
- en: 'This tables are useful for optimizer. The following tables are available in
    this category:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表对优化器很有用。在这个类别中有以下表：
- en: '`innodb_index_stats` and `innodb_table_stats`: Used for getting the `InnoDB` persistent
    optimizer statistics'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_index_stats`和`innodb_table_stats`: 用于获取`InnoDB`持久优化器统计信息'
- en: '`server_cost`: Contains the optimizer cost estimates for general server operations.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_cost`: 包含了对一般服务器操作的优化器成本估算。'
- en: '`engine_cost`: Contains the estimates for operations specific to particular
    storage engines'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`engine_cost`: 包含特定存储引擎操作的估算'
- en: Other miscellaneous system tables
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他杂项系统表
- en: 'Tables that don''t fall into the above-mentioned categories fall under this
    category. The following tables are available in this category:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 不属于上述类别的表属于这个类别。在这个类别中有以下表：
- en: '`servers`: Used by the `FEDERATED` storage engine'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servers`: 被`FEDERATED`存储引擎使用'
- en: '`innodb_dynamic_metadata`: Used by the `InnoDB` storage engine to store fast
    changing table metadata such as auto-increment counter values and index tree corruption
    flags'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_dynamic_metadata`: 被`InnoDB`存储引擎用于存储快速变化的表元数据，如自增计数器值和索引树损坏标志'
- en: 'You can learn more about the different system tables at: [https://dev.mysql.com/doc/refman/8.0/en/system-database.html](https://dev.mysql.com/doc/refman/8.0/en/system-database.html).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解更多关于不同系统表的信息：[https://dev.mysql.com/doc/refman/8.0/en/system-database.html](https://dev.mysql.com/doc/refman/8.0/en/system-database.html)。
- en: Running multiple instances on a single machine
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在单台机器上运行多个实例
- en: 'There might be some situations where you are required to install multiple instances
    on a single machine. It may be to check the performance of two different versions,
    or perhaps there is a need to manage two separate databases on different MySQL
    instances. The reason can be anything, but MySQL allows user to execute multiple
    instances on the same machine by providing different configuration values. MySQL
    8 allows users to configure parameters by making use of the command line, option
    file, or by setting environment variables. The primary resource used by MySQL
    8 for this is the data directory and it must be unique for the two instances.
    We can define the value for the same using the `--datadir=dir_name`function. Apart
    from the data directory, we will also configure unique values for the following
    options as well:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况需要在一台机器上安装多个实例。这可能是为了检查两个不同版本的性能，或者可能需要在不同的MySQL实例上管理两个单独的数据库。原因可能是任何，但是MySQL允许用户通过提供不同的配置值在同一台机器上执行多个实例。MySQL
    8允许用户使用命令行、选项文件或设置环境变量来配置参数。MySQL 8用于此的主要资源是数据目录，对于两个实例，它必须是唯一的。我们可以使用`--datadir=dir_name`函数来定义相同的值。除了数据目录，我们还将为以下选项配置唯一的值：
- en: '`--port=port_num`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--port=port_num`'
- en: '`--socket={file_name|pipe_name}`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--socket={file_name|pipe_name}`'
- en: '`--shared-memory-base-name=name`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--shared-memory-base-name=name`'
- en: '`--pid-file=file_name`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--pid-file=file_name`'
- en: '`--general_log_file=file_name`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--general_log_file=file_name`'
- en: '`--log-bin[=file_name]`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-bin[=file_name]`'
- en: '``--slow_query_log_file=file_name``'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``--slow_query_log_file=file_name``'
- en: '`--log-error[=file_name]`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-error[=file_name]`'
- en: '`--tmpdir=dir_name`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--tmpdir=dir_name`'
- en: Setting up multiple data directories
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置多个数据目录
- en: 'As described above, each of the MySQL instances must have a separate data directory.
    The user is allowed to define separate directories using the following methods:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，每个MySQL实例必须有一个单独的数据目录。用户可以使用以下方法定义单独的目录：
- en: '**Create a new data directory**: In this method we must follow the same procedure
    which was defined in [Chapter 2](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml),
    *Installing and Upgrading MySQL*. For Microsoft Windows, when we install MySQL
    8 from Zip archives, copy its data directory to the location where you want to
    set up the new instance. In the case of an MSI package along with the data directory,
    create a pristine `template` data directory named data under the installation
    directory. Once the installation is complete, copy the data directory to set up
    additional instances.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建新的数据目录**：在这种方法中，我们必须遵循[第2章](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml)中定义的相同过程，*安装和升级MySQL*。对于Microsoft
    Windows，当我们从Zip存档安装MySQL 8时，将其数据目录复制到要设置新实例的位置。在MSI软件包的情况下，连同数据目录一起，在安装目录下创建一个原始的`template`数据目录，命名为data。安装完成后，复制数据目录以设置额外的实例。'
- en: '**Copy an existing data directory**: In this method, we will copy an existing
    instance''s data directory to the new instance''s data directory. To copy an existing
    directory, perform the following steps:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制现有数据目录**：在这种方法中，我们将现有实例的数据目录复制到新实例的数据目录。要复制现有目录，请执行以下步骤：'
- en: Stop the existing MySQL instance. Make sure it's cleanly shut down so that no
    pending changes are available in the disk.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止现有的MySQL实例。确保它被干净地关闭，以便磁盘中没有未决的更改。
- en: Copy the data directory to the new location.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据目录复制到新位置。
- en: Copy the `my.cnf` or `my.ini` option file used by the existing instance to the
    new location.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有实例使用的`my.cnf`或`my.ini`选项文件复制到新位置。
- en: Modify the new option as per the new instance. Make sure all the unique configurations
    are done properly.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据新实例修改新选项。确保所有唯一的配置都正确完成。
- en: Start the new instance with the new option file.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的选项文件启动新实例。
- en: Running multiple MySQL instances on Windows
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上运行多个MySQL实例
- en: The user is allowed to run multiple MySQL instances on a single Windows machine
    either by using the command line and passing values or by the window service.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过使用命令行和传递值或通过窗口服务在单个Windows机器上运行多个MySQL实例。
- en: '**Starting multiple MySQL instances at the Windows command line: **To execute
    multiple instances using the command line, we can either specify the option at
    runtime or we can set it in the option file. The option file is a better option
    to start instances because there is no need to specify arguments every time at
    startup. To setup or configure the option file, follow the same steps described
    in [Chapter 2](https://cdp.packtpub.com/mysql_8_administrator___s_guide/wp-admin/post.php?post=121&action=edit#post_26), *Installing
    and Upgrading MySQL*.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Windows命令行上启动多个MySQL实例：**要使用命令行执行多个实例，我们可以在运行时指定选项，也可以在选项文件中设置它。选项文件是启动实例的更好选择，因为无需在启动时每次指定参数。要设置或配置选项文件，请按照[第2章](https://cdp.packtpub.com/mysql_8_administrator___s_guide/wp-admin/post.php?post=121&action=edit#post_26)中描述的相同步骤，*安装和升级MySQL*。'
- en: '**Starting multiple MySQL instances as Windows services: **To start multiple
    instance on Windows as service, we have to specify different services with unique
    names. As described in [Chapter 2](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml),
    *Installing and Upgrading MySQL,* use the `–install` or `--install-manual` options
    to define MySQL as a Windows service. The following options are available to define
    multiple MySQL instances as Windows services:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Windows服务上启动多个MySQL实例：**要在Windows上启动多个实例作为服务，我们必须指定具有唯一名称的不同服务。如[第2章](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml)中所述，*安装和升级MySQL*，使用`–install`或`--install-manual`选项将MySQL定义为Windows服务。以下选项可用于将多个MySQL实例定义为Windows服务：'
- en: '**Approach 1**: Create two separate option files for instances and define the `mysqld`
    group inside it. For example, use the function `C:\my-opts1.cnf`. The code for
    the same is given below for your reference:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法1**：为实例创建两个单独的选项文件，并在其中定义`mysqld`组。例如，使用函数`C:\my-opts1.cnf`。以下是相同代码供您参考：'
- en: '[PRE7]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can do the same using `C:\my-opts2.cnf` function as well. The following
    code depicts the process:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`C:\my-opts2.cnf`函数来做同样的事情。以下代码描述了该过程：
- en: '[PRE8]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can install the MySQL8 services using the following commands:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装MySQL8服务：
- en: '[PRE9]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Approach 2**: Create one common option file as `C:\my.cnf` for both the services:'
  id: totrans-190
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法2**：为两个服务创建一个公共选项文件`C:\my.cnf`：'
- en: '[PRE10]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Execute the following commands to install MySQL services:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下命令安装MySQL服务：
- en: '[PRE11]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To start MySQL services, execute the following commands:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要启动MySQL服务，请执行以下命令：
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Components and plugin management
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件和插件管理
- en: 'The component based structure is supported by MySQL server, to extend the server
    capabilities. MySQL 8 uses the `INSTALL COMPONENT` and `UNINSTALL COMPONENT` SQL
    statements to load and unload components at runtime. MySQL 8 manages component
    details into the `mysql.component` system table. So, every time a new component
    is installed, MySQL 8 server performs the following tasks:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器支持基于组件的结构，以扩展服务器功能。MySQL 8使用`INSTALL COMPONENT`和`UNINSTALL COMPONENT`
    SQL语句在运行时加载和卸载组件。MySQL 8将组件详细信息管理到`mysql.component`系统表中。因此，每次安装新组件时，MySQL 8服务器都会执行以下任务：
- en: Load components into server to make available instantly
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将组件加载到服务器中以立即可用
- en: Load service registered component into the `mysql.component` system table.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将服务注册的组件加载到`mysql.component`系统表中。
- en: 'When we uninstall any component, MySQL server will perform the same steps,
    but in the reverse order. To see which components are available, execute the following
    query:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们卸载任何组件时，MySQL服务器将执行相同的步骤，但顺序相反。要查看可用的组件，请执行以下查询：
- en: '[PRE13]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: MySQL 8 server plugins
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8服务器插件
- en: MySQL 8 server has a plugin API that enables the creation of server components.
    With MySQL 8, you have the flexibility of installing a plugin at runtime or at
    startup. In the following topics we will learn about the life cycle of the MySQL
    8 server plugins.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8服务器具有插件API，可用于创建服务器组件。使用MySQL 8，您可以在运行时或启动时灵活安装插件。在接下来的主题中，我们将了解MySQL
    8服务器插件的生命周期。
- en: Installing the plugins
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: 'The loading of the plugins varies with their types and characteristics. To
    get a clearer picture of this, let''s go though the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 插件的加载因其类型和特性而异。为了更清楚地了解这一点，让我们来看看以下内容：
- en: '**Built-in plugins**: The server knows about the built-in plugins and loads
    them automatically, on startup. The user is allowed to change the state of plugins
    by any of their activation statuses, which will be discussed in the following
    section.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置插件**：服务器知道内置插件并在启动时自动加载它们。用户可以通过任何激活状态来改变插件的状态，这将在下一节中讨论。'
- en: '**Plugins registered in the **`mysql.plugin`** system table**: On startup MySQL
    8 server will load all the plugins which are registered in the `mysql.plugin` table.
    If the server is started with the `--skip-grant-tables` option,  the server will
    not load the plugins listed there.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在`mysql.plugin`系统表中注册的插件**：在启动时，MySQL 8服务器将加载在`mysql.plugin`表中注册的所有插件。如果服务器使用`--skip-grant-tables`选项启动，则服务器将不加载那里列出的插件。'
- en: '**Plugins named with command-line options**: MySQL 8 provides the  `--plugin-load`, `--plugin-load-add`,
    and `--early-plugin-load` options for loading plugins with the command line. The `--plugin-load`
    and `--plugin-load-add` options load the plugins on server startup after the built-in
    plugins are installed. But, we can use the `--early-plugin-load` option to load
    the plugins, prior to initialization of built-in plugins and storage engines.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用命令行选项命名的插件**：MySQL 8提供`--plugin-load`、`--plugin-load-add`和`--early-plugin-load`选项，用于在命令行加载插件。`--plugin-load`和`--plugin-load-add`选项在安装内置插件后在服务器启动时加载插件。但是，我们可以使用`--early-plugin-load`选项在初始化内置插件和存储引擎之前加载插件。'
- en: '**Plugins installed with the **`INSTALL PLUGIN`** statement**: This is a permanent plugin
    registration option, which will register the plugin information in the `mysql.plugin`
    table. It will also load all the plugins available in the plugin library.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用`INSTALL PLUGIN`语句安装的插件**：这是一个永久的插件注册选项，它将在`mysql.plugin`表中注册插件信息。它还将加载插件库中的所有可用插件。'
- en: Activate plugin
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活插件
- en: 'To control the state (like the activation or deactivation) of plugins, MySQL
    8 provides the following options:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制插件的状态（如激活或停用），MySQL 8提供以下选项：
- en: '`--plugin_name=OFF`:Disables the named plugin. Some of the built-in plugins, 
    such as the `asmysql_native_password` plugin, are not affected by this command.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--plugin_name=OFF`：禁用指定的插件。一些内置插件，如`asmysql_native_password`插件，不受此命令影响。'
- en: '`--plugin_name[=ON]`:This command enables the specified plugin. If plugin initialization
    failed during startup MySQL 8 will start with the plugin disabled.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--plugin_name[=ON]`：此命令启用指定的插件。如果在启动时插件初始化失败，MySQL 8将以禁用插件的状态启动。'
- en: '`--plugin_name=FORCE`:This is the same as the above command, except the server
    does not start. This means that it forces the server to start with the plugin
    if it is mentioned on startup.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--plugin_name=FORCE`：这与上述命令相同，只是服务器不会启动。这意味着如果在启动时提到了插件，它会强制服务器与插件一起启动。'
- en: '`--plugin_name=FORCE_PLUS_PERMANENT`:The same as the `FORCE` option, but additionally
    prevents the plugin from being unloaded at runtime.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--plugin_name=FORCE_PLUS_PERMANENT`：与`FORCE`选项相同，但另外防止插件在运行时被卸载。'
- en: Uninstall plugin
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载插件
- en: MySQL 8 uses the `UNINSTALL PLUGIN` statement to uninstall the plugin, without
    considering whether it was installed during the runtime or at startup. But this
    statement will not allow us to uninstall the built-in plugins and the plugins
    that were installed by the  `--plugin_name=FORCE_PLUS_PERMANENT` option. This
    statement just unloads the plugin and removes it from the `mysql.plugin` table,
    so it requires additional *delete* privileges on the `mysql.plugin` table.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8使用`UNINSTALL PLUGIN`语句卸载插件，而不考虑它是在运行时还是在启动时安装的。但是，此语句不允许我们卸载内置插件和通过`--plugin_name=FORCE_PLUS_PERMANENT`选项安装的插件。此语句只是卸载插件并将其从`mysql.plugin`表中删除，因此需要`mysql.plugin`表上的额外*delete*权限。
- en: Getting information about the installed plugins
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取已安装插件的信息
- en: 'There are multiple ways to get information about the installed plugins. Some
    of them are listed as follows, for your reference:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以获取有关已安装插件的信息。以下是其中一些，供您参考：
- en: 'The `INFORMATION_SCHEMA.PLUGINS` table contains plugin details such as `PLUGIN_NAME`,
    `PLUGIN_VERSION`, `PLUGIN_STATUS`, `PLUGIN_TYPE`, `PLUGIN_LIBRARY`, and many more.
    Each individual row of this table represents information about the plugin:'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFORMATION_SCHEMA.PLUGINS`表包含插件的详细信息，如`PLUGIN_NAME`、`PLUGIN_VERSION`、`PLUGIN_STATUS`、`PLUGIN_TYPE`、`PLUGIN_LIBRARY`等等。该表的每一行都代表有关插件的信息：'
- en: '[PRE14]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `SHOW PLUGINS` statement shows the name, status, type, library, and license
    details for each of the individual plugins. If the library value is `NULL`, it
    indicates that it is a built-in plugin and hence, it cannot be unloaded.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW PLUGINS`语句显示了每个单独插件的名称、状态、类型、库和许可证详情。如果库的值为`NULL`，则表示它是一个内置插件，因此无法卸载。'
- en: '[PRE15]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `mysql.plugin` table contains details regarding all the plugins which were
    registered by the `INSTALL PLUGIN` function.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql.plugin`表包含了所有通过`INSTALL PLUGIN`函数注册的插件的详细信息。'
- en: Roles and permissions
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角色和权限
- en: To put it simply, a *role* is a collection of privileges. To create a role in
    MySQL 8, you must have the global `CREATE ROLE` or `CREATE USER` privilege. MySQL
    8 provides various privileges to attach to roles and users. Refer to [https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html) for
    more details on the available privileges.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，*角色*是一组权限。在MySQL 8中创建角色，您必须具有全局的`CREATE ROLE`或`CREATE USER`权限。MySQL 8提供了各种权限，可附加到角色和用户上。有关可用权限的更多详细信息，请参阅[https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html)。
- en: 'Now, let''s take an example to understand the role creation and privileges
    assignment. Assume we have a `hr_employee` table already created in the current
    database and we want to give access of this table to the `hrdepartment` role.
    This dilemma can be resolved by making use of the following code:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们举个例子来理解角色创建和权限分配的作用。假设我们已经在当前数据库中创建了一个`hr_employee`表，并且我们想要将这个表的访问权限赋予`hrdepartment`角色。这个困境可以通过使用以下代码来解决：
- en: '[PRE16]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The above code will help us to create the `hrdepartment` role and grant all
    the necessary access to it. This topic will be covered in detailed in [Chapter
    11](d95269f6-7e47-49e2-9681-8a898d1f2742.xhtml), *Security*.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将帮助我们创建`hrdepartment`角色并授予它所有必要的访问权限。这个主题将在[第11章](d95269f6-7e47-49e2-9681-8a898d1f2742.xhtml)中详细介绍，*安全*。
- en: Caching techniques
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存技术
- en: Cache is a mechanism used to improve performance. MySQL uses several strategies
    to cache information in the buffer. MySQL 8 make use of the cache at the storage
    engine level to handle its operations. It also applies the cache in prepared statements
    and stored programs to improve performance. MySQL 8 has introduced various system
    level variables to manage cache, such as `binlog_stmt_cache_size`, `daemon_memcached_enable_binlog`,
    `daemon_memcached_w_batch_size`, `host_cache_size`, and many more. We will cover
    caching in detail in [Chapter 12](e0ed94d9-6f7c-4ef1-ac13-33797e23054c.xhtml), *Optimizing
    MySQL 8*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是一种用于提高性能的机制。MySQL使用多种策略在缓冲区中缓存信息。MySQL 8在存储引擎级别使用缓存来处理其操作。它还在准备好的语句和存储程序中应用缓存以提高性能。MySQL
    8引入了各种系统级变量来管理缓存，例如`binlog_stmt_cache_size`、`daemon_memcached_enable_binlog`、`daemon_memcached_w_batch_size`、`host_cache_size`等等。我们将在[第12章](e0ed94d9-6f7c-4ef1-ac13-33797e23054c.xhtml)中详细介绍缓存，*优化MySQL
    8*。
- en: Globalization
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全球化
- en: Globalization is a feature which provides multi-language support for an application,
    such as enabling the use of native languages. It is much easier to understand
    messages in our own native language than other languages, right? To achieve this,
    globalization comes into the picture. Using globalization a user can store, retrieve
    and update data into many languages. There are certain parameters that are to
    be considered in globalization. We will discuss them in detail in the following
    sections.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 全球化是一个功能，为应用程序提供多语言支持，比如启用本地语言的使用。用我们自己的母语理解消息要比其他语言容易得多，对吧？为了实现这一点，全球化就出现了。使用全球化，用户可以将数据存储、检索和更新为多种语言。在全球化中有一些参数需要考虑。我们将在接下来的章节中详细讨论它们。
- en: Character sets
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符集
- en: Before going into detail about character sets it is required to understand what
    a character set actually is, as well as its related terms, right? Let's start
    with the term itself; the character set is a set of symbols and encoding. Another
    important term related to character set is **collation**, the set of rules used
    for comparing characters. Let's take a simple example to understand the character
    sets and collation. Consider two alphabets, *P* and *Q*, and assign a number to
    each, so that *P=1* and *Q=2*. Now, assume *P* is a symbol and 1 is its encoding.
    Here, the combination of both the letters and their encoding is known as the character
    set. Now suppose, we want to compare these values; the simplest way is by referring
    the encoding values. With this as 1 is less than 2 we can say *P* is less than
    *Q* which is known as collation. This is the simplest example to understand character
    sets and collation, but in real life we have many characters, including special
    characters, and in the same way collations have many rules.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细讨论字符集之前，需要了解字符集实际上是什么，以及它的相关术语，对吧？让我们从术语本身开始；字符集是一组符号和编码。与字符集相关的另一个重要术语是**校对规则**，用于比较字符。让我们举一个简单的例子来理解字符集和校对规则。考虑两个字母，*P*和*Q*，并为每个分配一个数字，使得*P=1*和*Q=2*。现在，假设*P*是一个符号，1是它的编码。在这里，这两个字母及它们的编码的组合被称为字符集。现在假设我们想要比较这些值；最简单的方法是参考编码值。由于1小于2，我们可以说*P*小于*Q*，这就是校对规则。这是一个简单的例子来理解字符集和校对规则，但在现实生活中，我们有许多字符，包括特殊字符，同样的校对规则也有许多规则。
- en: Character set support
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符集支持
- en: 'MySQL 8 supports many character sets, with a variety of collations. Character
    sets can be defined at the column, table, database or server levels. We can use
    the character set for `InnoDB`, `MyISAM`, and `Memory` storage engines. To check
    all the available character sets of MySQL 8, execute the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8支持多种字符集，具有各种排序规则。字符集可以在列、表、数据库或服务器级别定义。我们可以在`InnoDB`、`MyISAM`和`Memory`存储引擎中使用字符集。要检查MySQL
    8的所有可用字符集，请执行以下命令：
- en: '[PRE17]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the same way, to see the collation of characters, execute the following
    command:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要查看字符的排序规则，请执行以下命令：
- en: '[PRE18]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The collation will have the following three characteristics:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 排序规则将具有以下三个特征：
- en: Two different character sets cannot have the same collation.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个不同的字符集合不能具有相同的排序规则。
- en: Each character set has a default collation. As displayed in the above code,
    the `show character set` command displays the default collation of the character
    set.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个字符集都有一个默认的排序规则。如上所示，`show character set`命令显示了字符集的默认排序规则。
- en: Collation follows predefined naming conventions, which will be explained later.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序规则遵循预定义的命名约定，稍后将对其进行解释。
- en: '**Character set repertoire**: A **repertoire **is the collection of characters
    in the dataset. Any string expression will have a repertoire attribute and will
    belong to one of the below values:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符集合：**repertoire**是数据集中的字符集合。任何字符串表达式都将具有repertoire属性，并且将属于以下值之一：
- en: '**ASCII**: An expression that contains characters in the Unicode range U+0000
    to U+007F.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASCII：包含Unicode范围U+0000到U+007F的字符的表达式。
- en: '**UNICODE**: An expression that contains characters in the Unicode range U+0000 to U+10FFFF.
    This includes characters in the **Basic Multilingual Plane** (**BMP**) range (U+0000 to U+FFFF)
    and supplementary characters outside the BMP range (U+01000 to U+10FFFF).'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UNICODE：包含Unicode范围U+0000到U+10FFFF的字符的表达式。这包括**基本多语言平面**（**BMP**）范围（U+0000到U+FFFF）和BMP范围之外的补充字符（U+01000到U+10FFFF）。
- en: 'From the range of both values, we can identify that the ASCII is a subset of
    the UNICODE range and we can safely convert ASCII values to UNICODE values without
    any loss in data. The Repertoire is mainly used for the conversion of expressions
    from one character set to another. In some of the conversion cases MySQL 8 throws
    an error like illegal mix of collations; to handle these scenarios, repertoire
    is required. To understand its use, consider the following example:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 从这两个值的范围中，我们可以确定ASCII是UNICODE范围的子集，我们可以安全地将ASCII值转换为UNICODE值而不会丢失数据。Repertoire主要用于将表达式从一个字符集转换为另一个字符集。在某些转换情况下，MySQL
    8会抛出类似“illegal mix of collations”的错误；为了处理这些情况，需要repertoire。要了解其用法，请考虑以下示例：
- en: '[PRE19]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**UTF-8 for metadata**: Metadata means the data about the data. In terms of
    database we can say that anything that describes database objects is known as
    **metadata**. For example: column names, usernames, and many more. MySQL follows
    the below two rules for metadata:'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于元数据的UTF-8**：元数据是关于数据的数据。在数据库方面，我们可以说描述数据库对象的任何内容都称为**元数据**。例如：列名，用户名等。MySQL遵循以下两条元数据规则：'
- en: Include all characters in all the languages for metadata; this enables a user
    to use his own language for column name and table name.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括所有语言中的所有字符以用于元数据；这使用户可以使用自己的语言作为列名和表名。
- en: Manage one common character set for all metadata. Otherwise, the `SHOW` and
    `SELECT` statements for tables in `INFORMATION_SCHEMA` will not work properly.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有元数据管理一个共同的字符集合。否则，`INFORMATION_SCHEMA`中的表的`SHOW`和`SELECT`语句将无法正常工作。
- en: To follow the above rules MySQL 8 stores metadata into the Unicode format. Consider
    that MySQL functions such as `USER()`, `CURRENT_USER()`, `SESSION_USER()`, `SYSTEM_USER()`,
    `DATABASE()`, and `VERSION()` have the UTF-8 character set by default. MySQL 8
    server has defined `character_set_system` to specify character sets for metadata.
    Make sure that the storage of metadata in Unicode does not mean that column headers
    and the `DESCRIBE` function will return values in the form of the metadata character
    set. It works as per the  `character_set_results`  system variable.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循上述规则，MySQL 8将元数据存储为Unicode格式。请注意，MySQL函数（如`USER()`、`CURRENT_USER()`、`SESSION_USER()`、`SYSTEM_USER()`、`DATABASE()`和`VERSION()`）默认使用UTF-8字符集。MySQL
    8服务器已定义`character_set_system`来指定元数据的字符集。确保在Unicode中存储元数据并不意味着列标题和`DESCRIBE`函数将以元数据字符集的形式返回值。它将根据`character_set_results`系统变量工作。
- en: Adding the character set
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加字符集
- en: 'This section describes how to add character sets in MySQL 8\. This method may
    vary based on the character set type - it might be simple or complex depending
    on the character type. The following four steps are required for adding character
    sets into MySQL 8:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍如何在MySQL 8中添加字符集。此方法可能因字符类型而异，可能简单或复杂。在MySQL 8中添加字符集需要以下四个步骤：
- en: Add a `<charset>` element for `MYSET` to the `sql/share/charsets/Index.xml`
    file. For the syntax, refer the already defined file for the other character set.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`<charset>`元素添加到`sql/share/charsets/Index.xml`文件中的`MYSET`。有关语法，请参考已定义的其他字符集文件。
- en: In this step, the process is different for simple and complex character sets.
    For simple character sets, create a configuration file, `MYSET.xml`, in the `sql/share/charsets`
    directory to describe the character set properties. In the case of complex character
    sets, the C source file is required. For example, create the `ctype-MYSET.c` type
    in the strings directory. For each `<collation>` element, provide `ctype-MYSET.c
    file`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，简单字符集和复杂字符集的处理方式不同。对于简单字符集，创建一个配置文件`MYSET.xml`，描述字符集属性，放在`sql/share/charsets`目录中。对于复杂字符集，需要C源文件。例如，在strings目录中创建`ctype-MYSET.c`类型。对于每个`<collation>`元素，提供`ctype-MYSET.c`文件。
- en: 'Modify the configuration information:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改配置信息：
- en: 'Edit `mysys/charset-def.c`, and *register* the collations for the new character
    set. Add these lines to the **declaration** section:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`mysys/charset-def.c`，并*注册*新字符集的排序规则。将这些行添加到**declaration**部分：
- en: '[PRE20]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add these lines to the **registration**section:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些行添加到**registration**部分：
- en: '[PRE21]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If the character set uses `ctype-MYSET.c`, edit strings`/CMakeLists.txt` and
    add `ctype-MYSET.c` to the definition of the `STRINGS_SOURCES` variable.
  id: totrans-263
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字符集使用`ctype-MYSET.c`，请编辑`strings/CMakeLists.txt`并将`ctype-MYSET.c`添加到`STRINGS_SOURCES`变量的定义中。
- en: 'Edit `cmake/character_sets.cmake` with the following changes:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`cmake/character_sets.cmake`进行以下更改：
- en: Add `MYSET` to the value of with `CHARSETS_AVAILABLE` in alphabetic order.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按字母顺序将`MYSET`添加到`CHARSETS_AVAILABLE`的值中。
- en: Add `MYSET` to the value of `CHARSETS_COMPLEX` in alphabetic order. This is
    needed even for simple character sets, or `CMake` will not recognize `DDEFAULT_CHARSET=MYSET.`
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按字母顺序将`MYSET`添加到`CHARSETS_COMPLEX`的值中。即使对于简单的字符集，也需要这样做，否则`CMake`将无法识别`DDEFAULT_CHARSET=MYSET`。
- en: Reconfigure, recompile, and test.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新配置、重新编译和测试。
- en: Configuring the character sets
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置字符集
- en: MySQL 8 provides the `--character-set-server` and `--collation-server` options
    to configure the character sets. The default character set has been changed from
    `latin1` to `UTF8`. `UTF8` is the dominating character set, though it hadn't been
    a default one in prior versions of MySQL. With these changes globally accepted,
    character sets and collations
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8提供了`--character-set-server`和`--collation-server`选项来配置字符集。默认字符集已从`latin1`更改为`UTF8`。`UTF8`是主导字符集，尽管在MySQL的先前版本中它不是默认字符集。随着这些全球性变化的接受，字符集和排序规则
- en: are now based on `UTF8`; one of the common reasons is because there are around
    21 different languages supported by `UTF8`, which makes systems provide multilingual
    support. Before configuring collation, refer to the collation list available at
    [https://dev.mysql.com/doc/refman/8.0/en/show-collation.html](https://dev.mysql.com/doc/refman/8.0/en/show-collation.html).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基于`UTF8`；一个常见的原因是因为`UTF8`支持大约21种不同的语言，这使得系统提供多语言支持。在配置排序规则之前，请参考[https://dev.mysql.com/doc/refman/8.0/en/show-collation.html](https://dev.mysql.com/doc/refman/8.0/en/show-collation.html)上提供的排序规则列表。
- en: Language selection
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言选择
- en: 'MySQL 8 uses English languages by default for the error messages, but allows
    user to choose several other languages. For example, Russian, Spanish, Swedish,
    and many more. MySQL 8 uses `lc_messages_dir` and `lc_messages`, two system variables
    that manage the language for error messages, and have the following properties:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8默认使用英语语言的错误消息，但允许用户选择其他几种语言。例如，俄语、西班牙语、瑞典语等。MySQL 8使用`lc_messages_dir`和`lc_messages`两个系统变量来管理错误消息的语言，并具有以下属性：
- en: '`lc_messages_dir`:  It is a system variable and is set up during server startup.
    It is global variable so is commonly used by all the clients at runtime.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lc_messages_dir`：这是一个系统变量，在服务器启动时设置。它是全局变量，因此通常由所有客户端在运行时使用。'
- en: '`lc_messages`: This variable is used at global as well as at session level.
    Individual users are allowed to use a different language for error messages. For
    example, if `en_US` is set during server startup but if you want to use French,
    then execute the following command:'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lc_messages`：此变量在全局和会话级别上都被使用。允许个别用户使用不同的语言来显示错误消息。例如，如果在服务器启动时设置了`en_US`，但如果要使用法语，则执行以下命令：'
- en: '[PRE22]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'MySQL 8 server follows the below three rules for error message files:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8服务器遵循以下三条错误消息文件规则：
- en: MySQL 8 will find the file at a location constructed by two system variables, `lc_messages_dir`
    and `lc_messages`. For example, if you start MySQL 8 with the below command then `mysqld` maps
    the locale `nl_NL` to the Dutch language and search for the  error file in the
    ` /usr/share/mysql/dutch` directory. MySQL 8 stores all language files in the `MySQL8
    Base Directory/share/mysql/LANGUAGE` directory. By default, the language files
    are located in the `share/mysql/LANGUAGE` directory under the MySQL base directory.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8将在由两个系统变量`lc_messages_dir`和`lc_messages`构成的位置找到文件。例如，如果使用以下命令启动MySQL
    8，则`mysqld`将将区域设置`nl_NL`映射到荷兰语，并在`/usr/share/mysql/dutch`目录中搜索错误文件。MySQL 8将所有语言文件存储在`MySQL8
    Base Directory/share/mysql/LANGUAGE`目录中。默认情况下，语言文件位于MySQL基目录下的`share/mysql/LANGUAGE`目录中。
- en: '[PRE23]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If the message file does not exist under the directory then MySQL 8 will ignore
    the value of the `lc_messages` variable and consider the value of the `lc_messages_dir` variable
    as a location in which to look.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果目录下不存在消息文件，则MySQL 8将忽略`lc_messages`变量的值，并将`lc_messages_dir`变量的值视为要查找的位置。
- en: If the MySQL 8 server does not find the message file, then it shows a message
    in the error log file and uses English for the messages.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果MySQL 8服务器找不到消息文件，则它会在错误日志文件中显示一条消息，并对消息使用英语。
- en: Time zone settings for MySQL8
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL8的时区设置
- en: 'The MySQL 8 server manages time zones in three different ways:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8服务器以三种不同的方式管理时区：
- en: '**System time zone**: This is managed by the `system_time_zone` system variable,
    which can be set either by `–timezone=timezone_name` or by the `TZ` environment
    variable before execution of mysqld.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统时区：这由`system_time_zone`系统变量管理，可以通过`--timezone=timezone_name`或在执行mysqld之前使用`TZ`环境变量来设置。
- en: '**Server''s current time zone**: This is managed by the `time_zone` system
    variable. The default value of the `time_zone` variable is `SYSTEM`, which means
    the server time zone is the same as the system time zone. MySQL 8 allows users
    to set the `time_zone` global variable value at startup time by specifying `default-time-zone=''*timezone*''`
    in the option file, and at runtime by using the following command:'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器当前时区：这由`time_zone`系统变量管理。`time_zone`变量的默认值是`SYSTEM`，这意味着服务器时区与系统时区相同。MySQL
    8允许用户在启动时通过在选项文件中指定`default-time-zone='*timezone*'`来设置`time_zone`全局变量的值，并在运行时使用以下命令：
- en: '[PRE24]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Pre-connection time zone**: This is managed by the `time_zone` variable and
    specific to the client that connects to the MySQL 8 server.  This variable takes
    its initial value from the global `time_zone` variable but MySQL 8 allows the
    user to change it at runtime by executing the below command :'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预连接时区：这由`time_zone`变量管理，特定于连接到MySQL 8服务器的客户端。此变量从全局`time_zone`变量获取其初始值，但MySQL
    8允许用户通过执行以下命令在运行时更改它：
- en: '[PRE25]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This session variable affects the display and storage of zone specific values.
    For example, values returned by the `NOW()` and `CURTIME()` functions. On the
    other hand, this variable does not affects values which are displayed and stored
    in UTC format, such as with the `UTC_TIMESTAMP()` function.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 此会话变量影响区域特定值的显示和存储。例如，由`NOW()`和`CURTIME()`函数返回的值。另一方面，此变量不会影响以UTC格式显示和存储的值，例如`UTC_TIMESTAMP()`函数。
- en: Locale support
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域设置支持
- en: 'MySQL 8 uses `lc_time_names` system variables to control languages which will
    impact what day, month name, and abbreviations will be displayed. The  `DATE_FORMAT()`, `DAYNAME()`,
    and `MONTHNAME()` function outputs depend on the `lc_time_names` variable''s value.
    The first question that comes to mind is, where are these locales defined and
    how do we get them? Not to worry, refer to [http://www.iana.org/assignments/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry).
    All locales are defined with language and region abbreviations by **Internet Assigned
    Numbers Authority** (**IANA**). By default, MySQL 8 sets `en_US` as the locale
    in the system variable.  There is provision for the user to set the value on server
    startup or to set `GLOBAL` if they have `SYSTEM_VARIABLES_ADMIN` or `SUPER`privileges.
    MySQL 8 allows a user to check and set the locale for his connection. Execute
    the following commands to check the locale on your workstation:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8使用`lc_time_names`系统变量来控制语言，这将影响显示的日期、月份名称和缩写。`DATE_FORMAT()`、`DAYNAME()`和`MONTHNAME()`函数的输出取决于`lc_time_names`变量的值。首先浮现在脑海中的问题是，这些区域设置是在哪里定义的，我们如何获取它们？不用担心，参考[http://www.iana.org/assignments/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry)。所有区域设置都由**互联网编号分配机构**（**IANA**）以语言和地区缩写定义。默认情况下，MySQL
    8将`en_US`设置为系统变量的区域设置。用户可以在服务器启动时设置值，或者如果具有`SYSTEM_VARIABLES_ADMIN`或`SUPER`特权，则可以设置`GLOBAL`。MySQL
    8允许用户检查和设置其连接的区域设置。执行以下命令在您的工作站上检查区域设置：
- en: '[PRE26]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: MySQL 8 server logs
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8服务器日志
- en: 'MySQL 8 server provides the following different type of logs that enable users
    to track the activity of the server in various situations:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8服务器提供了以下不同类型的日志，使用户能够跟踪服务器在各种情况下的活动：
- en: '| **Log type** | **Information written to log** |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| **日志类型** | **写入日志的信息** |'
- en: '| --- | --- |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Error log | Problems encountered starting, running, or stopping `mysqld`
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 错误日志 | 启动、运行或停止`mysqld`时遇到的问题 |'
- en: '| General query log | Established client connections and statements received
    from clients |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 通用查询日志 | 已建立的客户端连接和从客户端接收到的语句 |'
- en: '| Binary log | Statements that change data (also used for replication) |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| 二进制日志 | 更改数据的语句（也用于复制） |'
- en: '| Relay log | Data changes received from a replication master server |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| 中继日志 | 从复制主服务器接收到的数据更改 |'
- en: '| Slow query log | Queries that took more than `long_query_time` seconds to
    execute |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| 慢查询日志 | 执行时间超过`long_query_time`秒的查询 |'
- en: '| DDL log (metadata log) | Metadata operations performed by DDL statements
    |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| DDL日志（元数据日志） | DDL语句执行的元数据操作 |'
- en: You can learn more about the  different type of logs at [https://dev.mysql.com/doc/refman/8.0/en/server-logs.html](https://dev.mysql.com/doc/refman/8.0/en/server-logs.html).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://dev.mysql.com/doc/refman/8.0/en/server-logs.html](https://dev.mysql.com/doc/refman/8.0/en/server-logs.html)了解有关不同类型日志的更多信息。
- en: 'MySQL 8 will not generate the logs in MySQL 8, except in error logs in Windows,
    unless we enable it. By default, MySQL 8 will store all logs into a file under
    the data directory. When we talk about files, so many questions come into our
    mind, right? For example; what will be the size of file? How many files will be
    generated? How do we flush log files? MySQL 8 provides various configurations
    for managing log files; we will see all these configurations in a later part of
    this chapter. Another important question is where do we store logs? In tables
    or in files? Below are some points which describe the benefits of tables compared
    to files:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8不会生成MySQL 8中的日志，除非在Windows中的错误日志中启用。默认情况下，MySQL 8将所有日志存储在数据目录下的文件中。当我们谈论文件时，会有很多问题涌入我们的脑海，对吧？例如；文件的大小是多少？会生成多少个文件？我们如何刷新日志文件？MySQL
    8提供了各种配置来管理日志文件；我们将在本章的后面部分看到所有这些配置。另一个重要的问题是我们在哪里存储日志？在表中还是在文件中？以下是一些描述表与文件相比的优点的要点：
- en: If logs are stored into tables then their contents are accessible through SQL
    statements. This means that users can execute select queries with required criteria
    to get a specific output.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果日志存储在表中，则其内容可通过SQL语句访问。这意味着用户可以执行带有所需条件的选择查询，以获得特定的输出。
- en: Any remote user can connect to the database and get the details of the log.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何远程用户都可以连接到数据库并获取日志的详细信息。
- en: 'Log entries are managed by standard format. You can check the structure of
    log tables with the following commands:'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志条目由标准格式管理。您可以使用以下命令检查日志表的结构：
- en: 'The code for a general log:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 通用日志的代码：
- en: '[PRE27]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The code for a slow query log:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 慢查询日志的代码：
- en: '[PRE28]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The error log
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误日志
- en: 'This log is used to record diagnostic messages like error, warnings and notes
    that occur from the startup of MySQL 8 through till its end. MySQL 8 provides
    various configurations and components for users to generate log files as per their
    requirements. When we start writing into files some basics questions come to mind;
    what do we write? How do we write it? Where do we write it to? Let''s start with
    first question. MySQL 8 uses the `log_error_verbosity` system variable and assigns
    the below filtering options to decide what type of messages should be written
    into the error log file:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 此日志用于记录从MySQL 8启动到结束期间发生的错误、警告和注释等诊断消息。MySQL 8为用户提供了各种配置和组件，以便根据其要求生成日志文件。当我们开始写入文件时，会有一些基本问题涌入脑海；我们要写什么？我们如何写？我们要写到哪里？让我们从第一个问题开始。MySQL
    8使用`log_error_verbosity`系统变量，并分配以下过滤选项来决定应将哪种类型的消息写入错误日志文件：
- en: '``Error Only``'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``仅错误``'
- en: '`Errors and Warnings`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误和警告`'
- en: '`Errors, Warnings and Notes`'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误，警告和注释`'
- en: 'To write at the destination place MySQL uses the below format where the time
    stamp depends on the `log_timestamps` system variable:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 要在目的地位置写入MySQL使用以下格式，其中时间戳取决于`log_timestamps`系统变量：
- en: '[PRE29]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: After writing log files, the first question that comes to mind is, how do we
    flush these logs? For that, MySQL 8 provides three ways; `FLUSH ERROR LOGS`,`FLUSH
    LOGS`, or `mysqladmin flush-logs`. These commands will close and reopen the log
    file to which it is writing. When we talk about how to write and where to write,
    there are so many things to understand.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 写入日志文件后，首先要考虑的问题是，我们如何刷新这些日志？为此，MySQL 8提供了三种方法：`FLUSH ERROR LOGS`，`FLUSH LOGS`或`mysqladmin
    flush-logs`。这些命令将关闭并重新打开正在写入的日志文件。当我们谈论如何写入以及在哪里写入时，有很多事情要理解。
- en: Component configuration
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件配置
- en: 'MySQL 8 uses the `log_error_services` system variable to control error log
    components. It allows users to define multiple components by semicolons, separated
    for the execution. Here, components will be executed in the order in which they
    are defined. The user is allowed to change the values of this variable with the
    following constraints:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8使用`log_error_services`系统变量来控制错误日志组件。它允许用户通过分号分隔的方式定义多个组件以进行执行。在这里，组件将按照定义的顺序执行。用户可以在以下约束条件下更改此变量的值：
- en: '`INSTALL COMPONENT`: To enable any log component we must first install it using
    this command, and then use the component by listing it in `log_error_services`
    system variable.  Follow the following commands to add the `log_sink_syseventlog`
    component:'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装组件：要启用任何日志组件，我们必须首先使用此命令安装它，然后通过在`log_error_services`系统变量中列出该组件来使用该组件。按照以下命令添加`log_sink_syseventlog`组件：
- en: '[PRE30]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After execution of the installation command MySQL 8 will register the component
    into the `mysql.component` system table to make it available for loading on each
    startup.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 执行安装命令后，MySQL 8将注册该组件到`mysql.component`系统表中，以便在每次启动时加载。
- en: '`UNINSTALL COMPONENT`: To disable any of the log components, first remove it
    from the `log_error_services` system variable list and then uninstall it with
    this command. Execute the below command to uninstall a component:'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载组件：要禁用任何日志组件，首先从`log_error_services`系统变量列表中删除它，然后使用此命令卸载它。执行以下命令以卸载组件：
- en: '[PRE31]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To enable error log components on each startup, define it in the `my.cnf` file
    or use `SET_PERSIST`. When we define it in `my.cnf` it takes effect from the next
    restart, whereas `SET_PERSIST` will give an immediate effect. Use the following
    command for `SET_PERSIST`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 要在每次启动时启用错误日志组件，请在`my.cnf`文件中定义它，或使用`SET_PERSIST`。当我们在`my.cnf`中定义它时，它将从下一次重新启动开始生效，而`SET_PERSIST`将立即生效。使用以下命令进行`SET_PERSIST`：
- en: '[PRE32]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'MySQL 8 also allows users to write error logs into system logs: for Microsoft,
    consider Event log, and for Unix based systems, consider syslog. To enable error
    logging into system `logfibf`, configure `log_filter_internal` and the system
    log writer `log_sink_syseventlog` components and follow the same instructions
    explain above. Another way is to write a JSON string into the log file configuration `log_sink_json`
    component. An interesting point about a JSON writer is that it will manage file
    naming conventions by adding NN (two-digit numbers). For example, consider file
    names as `file_name.00.json`, `file_name.01.json`, and so forth.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8还允许用户将错误日志写入系统日志：对于Microsoft，请考虑事件日志，对于基于Unix的系统，请考虑syslog。要将错误日志记录到系统`logfibf`中，配置`log_filter_internal`和系统日志写入器`log_sink_syseventlog`组件，并按照上述说明执行相同的指令。另一种方法是将JSON字符串写入日志文件配置`log_sink_json`组件。关于JSON写入器的一个有趣的点是，它将通过添加NN（两位数）来管理文件命名约定。例如，将文件名视为`file_name.00.json`，`file_name.01.json`等。
- en: Default error log destination configuration
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认错误日志目的地配置
- en: Error logs can be written into log files or on console. This section describes
    how to configure the destination of error log on different environments.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志可以写入日志文件或控制台。本节描述了如何在不同环境中配置错误日志的目的地。
- en: Default error log destination on Windows
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows上的默认错误日志目的地
- en: '`--console`: If this is given then the console will be considered the default
    destination. `--console` takes precedence over `--log-error` in cases where both
    are defined. If the default location is console, then MySQL 8 server sets the `log_error`
    variable''s value as `stderror`.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--console`：如果给出此选项，则控制台将被视为默认目的地。在定义了两者的情况下，`--console`优先于`--log-error`。如果默认位置是控制台，那么MySQL
    8服务器将`log_error`变量的值设置为`stderror`。'
- en: '`--log-error`: If this is not given, or given without naming a file, then the
    default file name is `host_name.err` and the file will be created in the data
    directory unless the `--pid-fileoption` is specified. If the file name is specified
    in `–pid-file` option, then the naming convention would be a **PID** file base
    name with a suffix of `.err` in the data directory.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-error`：如果未给出此选项，或者给出但未命名文件，则默认文件名为`host_name.err`，并且该文件将在数据目录中创建，除非指定了`--pid-fileoption`。如果在`–pid-file`选项中指定了文件名，则命名约定将是数据目录中带有`.err`后缀的**PID**文件基本名称。'
- en: Default error log destination on Unix and  Unix-Like systems
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix和类Unix系统上的默认错误日志目的地
- en: All the above mentioned scenarios in Microsoft Windows will be managed by the `–log_error`
    option in Unix systems.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统中，Microsoft Windows中提到的所有上述情况将由`–log_error`选项管理。
- en: '`--log-error`: If this is not given then the default destination is the console.
    If no file name is given, then as with Windows it will create a file in the data
    directory with the `host_name.err` name. The user is allowed to specify `–log-error`
    in an option file under the `mysqld` or `mysqld_safe` sections.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-error`：如果未给出此选项，则默认目的地是控制台。如果未给出文件名，则与Windows一样，它将在数据目录中创建一个名为`host_name.err`的文件。用户可以在`mysqld`或`mysqld_safe`部分的选项文件中指定`–log-error`。'
- en: The general query log
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般查询日志
- en: The general query log is a general purpose log, used to record all the actions
    performed by `mysqld`. In this log, file statements are written in the sequence
    in which they are received, but the execution sequence may differ from the receiving
    sequence. It starts logging from the connection of the client and continues until
    it disconnects. Apart from SQL commands it also logs the `connection_type` means
    by which the protocol client is connected, for example TCP/IP, SSL, Socket, and
    many more. As it logs most of the action performed by `mysqld` it's very useful
    when we want to find what error occurred with the client.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 一般查询日志是一个通用日志，用于记录`mysqld`执行的所有操作。在此日志中，文件语句按接收顺序编写，但执行顺序可能与接收顺序不同。它从客户端连接开始记录，并持续到断开连接。除了SQL命令，它还记录了`connection_type`，即协议客户端连接的方式，例如TCP/IP、SSL、Socket等。由于它记录了`mysqld`执行的大部分操作，当我们想要查找客户端发生了什么错误时，它非常有用。
- en: 'By default, this log is disabled. We can enable it by using the **`--general_log[={0|1}]`**
    command. When we do not specify any argument or define 1 as the argument it indicates
    enable general query log, while 0 indicates disable log. In addition, we can specify
    log file name with the `--general_log_file=file_name` command. If no file name
    is specified by the command, then MySQL 8 will consider the default name as `host_name.log`.
    Setting the log file name has no effect on logging if the log destination value
    does not contain `FILE`. Server restarts and log flushing do not cause a new general
    query log file to be generated; you have to use the `rename` (For Microsoft Windows)
    or `mv` (For Linux) commands to create a new file. MySQL 8 provides a second approach
    for renaming files at runtime by disabling the log using the following command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此日志被禁用。我们可以使用**`--general_log[={0|1}]`**命令来启用它。当我们不指定任何参数或将1定义为参数时，表示启用一般查询日志，而0表示禁用日志。此外，我们可以使用`--general_log_file=file_name`命令指定日志文件名。如果命令未指定文件名，则MySQL
    8将考虑默认名称为`host_name.log`。设置日志文件名对日志记录没有影响，如果日志目的地值不包含`FILE`。服务器重新启动和日志刷新不会导致生成新的一般查询日志文件；您必须使用`rename`（对于Microsoft
    Windows）或`mv`（对于Linux）命令来创建新文件。MySQL 8提供了第二种在运行时重命名文件的方法，方法是使用以下命令禁用日志：
- en: '[PRE33]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Once the log is disabled, rename the log file and enable the log again with
    the `ON` option. Similarly, to enable or disable the log at runtime for particular
    connections use the session `sql_log_off` variable with the `ON` or `OFF` option. One
    more option is aligning with the general log file, that is, `--log-output`. By
    using this option, we can specify the destination of log output; it does not mean
    logs are enabled.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用日志后，使用`ON`选项重命名日志文件并再次启用日志。同样，要在特定连接的运行时启用或禁用日志，请使用会话`sql_log_off`变量和`ON`或`OFF`选项。另一个选项是与一般日志文件对齐的，即`--log-output`。通过使用此选项，我们可以指定日志输出的目的地；这并不意味着日志已启用。
- en: 'The three following different options are available with this command:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令提供了以下三种不同的选项：
- en: '`TABLE`: Log to tables'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE`：记录到表中'
- en: '`FILE`: Log to files'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILE`：记录到文件中'
- en: '`NONE`: Do not log into tables or files. `NONE`, if present, takes precedence
    over any other specifiers.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NONE`：不记录到表或文件中。如果存在`NONE`，则优先于任何其他指定符。'
- en: If the `--log-output` option is omitted, then the default value is file.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了`--log-output`选项，则默认值为文件。
- en: The binary log
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制日志
- en: 'The binary log is a file which contains all the events of a database that describe
    changes, for example, table creation, data updates, and deletes from the table.
    It is not used for the `SELECT` and `SHOW` statements as it is not updating any
    data. Binary log writing will slightly reduce performance of database operations,
    however it enables users to use replication setup and operation restore. The main
    purposes of the binary log are:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志是一个文件，其中包含描述数据库事件的所有事件，例如表创建、数据更新和表中的删除。它不用于`SELECT`和`SHOW`语句，因为它不会更新任何数据。二进制日志写入会稍微降低数据库操作的性能，但它使用户能够使用复制设置和操作还原。二进制日志的主要目的是：
- en: '**For replication in master-slave architecture**: For replication based on
    binary file, master server performs insert and updates operations which are reflected
    in the binary log file. Now, slaves nodes are configured to read these binary
    files and same events are executed in the binary file of the slave servers to
    replicate the data onto the slave servers.'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用于主从架构的复制**：基于二进制文件的复制，主服务器执行插入和更新操作，这些操作在二进制日志文件中反映出来。现在，从节点被配置为读取这些二进制文件，并且相同的事件在从服务器的二进制文件中执行，以便将数据复制到从服务器上。'
- en: '**Data recovery operations**: Once backup is restored into database, the events
    of the binary log are recorded, and these events are in re-executed form, which
    brings the database up to date from the point of the backup.'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据恢复操作**：一旦备份被还原到数据库中，二进制日志的事件将被记录，并以重新执行的形式执行这些事件，从而使数据库从备份点更新到最新状态。'
- en: 'The binary log is enabled by default, which indicates that the log_bin system
    variable is set as ON. To disable this log use  `--skip-log-bin` or the `--disable-log-bin` option
    at startup. To delete all binary log files, use the RESET MASTER statement, or
    a subset of them with `PURGE BINARY LOGS`. MySQL 8 server uses the following three
    logging formats to record information into the binary log file:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志默认启用，这表明log_bin系统变量设置为ON。要禁用此日志，请在启动时使用`--skip-log-bin`或`--disable-log-bin`选项。要删除所有二进制日志文件，请使用RESET
    MASTER语句，或者使用`PURGE BINARY LOGS`删除其中的一部分。MySQL 8服务器使用以下三种日志格式将信息记录到二进制日志文件中：
- en: '**Statement based logging**: This format is used by starting the server with
    the `--binlog-format=STATEMENT` command. It is mainly propagation of SQL statements.'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**基于语句的日志记录**：通过使用`--binlog-format=STATEMENT`命令启动服务器来使用此格式。这主要是SQL语句的传播。'
- en: '**Row based logging**: Use `--binlog-format=ROW` on server startup to enable
    row based logging. This format indicates how rows are affected. This is the default
    option.'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**基于行的日志记录**：在服务器启动时使用`--binlog-format=ROW`启用基于行的日志记录。此格式指示行受到的影响。这是默认选项。'
- en: '**Mixed logging**: Start MySQL 8 with the `--binlog-format=MIXED` option to
    enabled mixed logging. In this mode statement based logging is available by default
    and MySQL 8 will automatically switch into row based logging in some of the cases.'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**混合日志记录**：使用`--binlog-format=MIXED`选项启动MySQL 8以启用混合日志记录。在此模式下，默认情况下可用语句基础日志记录，并且在某些情况下MySQL
    8将自动切换到基于行的日志记录。'
- en: 'MySQL 8 allows users to change format at runtime with global and session scope.
    Global format is set for all the clients while session is use for the individual
    client. The following sets the format at runtime with the global and session scope
    respectively:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8允许用户在全局和会话范围内在运行时更改格式。全局格式适用于所有客户端，而会话格式适用于单个客户端。以下分别设置全局和会话范围的格式：
- en: '[PRE34]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'There are two exceptional cases where we cannot change format:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种特殊情况下我们无法更改格式：
- en: Within a stored procedure or function
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储过程或函数中
- en: In cases where the row based format is set and temporary table is open
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置为行格式并且临时表处于打开状态的情况下
- en: MySQL 8 has the `--binlog-row-event-max-size` variable to control the size of
    the binary log file in terms of bytes. Assign as a value to this variable a multiple
    of 256; the default value of this option is 8192\. Individual storage engines
    of MySQL 8 have their own capabilities for logging. If a storage engine supports
    row based logging, then it is known as **row-logging** capable, and if a storage
    engine supports statement based logging then it is known as **statement-logging**
    capable. Refer to the below table for more information on storage engine logging
    capabilities.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8具有`--binlog-row-event-max-size`变量，用于以字节为单位控制二进制日志文件的大小。将此变量的值分配为256的倍数；此选项的默认值为8192。MySQL
    8的各个存储引擎都有其自己的日志记录能力。如果存储引擎支持基于行的日志记录，则称为**行日志**能力，如果存储引擎支持基于语句的日志记录，则称为**语句日志**能力。有关存储引擎日志记录能力的更多信息，请参考下表。
- en: '| **Storage engine** | **Row logging supported** | **Statement logging supported**
    |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: 存储引擎 | 支持行日志记录 | 支持语句日志记录
- en: '| `ARCHIVE` | Yes | Yes |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| `ARCHIVE` | 是 | 是 |'
- en: '| `BLACKHOLE` | Yes | Yes |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| `BLACKHOLE` | 是 | 是 |'
- en: '| `CSV` | Yes | Yes |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `CSV` | 是 | 是 |'
- en: '| `EXAMPLE` | Yes | No |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `EXAMPLE` | 是 | 否 |'
- en: '| `FEDERATED` | Yes | Yes |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `FEDERATED` | 是 | 是 |'
- en: '| `HEAP` | Yes | Yes |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `HEAP` | 是 | 是 |'
- en: '| `InnoDB` | Yes | Yes when the transaction isolation level is `REPEATABLE`, `READ`,
    or `SERIALIZABLE`; No otherwise. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `InnoDB` | 是 | 当事务隔离级别为`REPEATABLE`、`READ`或`SERIALIZABLE`时为是；否则为否。 |'
- en: '| `MyISAM` | Yes | Yes |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `MyISAM` | 是 | 是 |'
- en: '| `MERGE` | Yes | Yes |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `MERGE` | 是 | 是 |'
- en: '| `NDB` | Yes | No |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `NDB` | 是 | 否 |'
- en: As describe in this section the binary log will work based on types of statement
    like safe, unsafe, or binary injected, on the logging format such as `ROW`, `STATEMENT`,
    or `MIXED`, and with the logging capabilities of storage engines like row capable,
    statement capable, both, or neither. To understand all the possible cases of binary
    logging refer to the table given in this link: [https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html).
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节所述，二进制日志将根据语句类型（安全、不安全或二进制注入）、日志格式（`ROW`、`STATEMENT`或`MIXED`）以及存储引擎的日志功能（行可用、语句可用、两者都可用或两者都不可用）进行工作。要了解二进制日志记录的所有可能情况，请参考此链接中给出的表格：[https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html)。
- en: The slow query log
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 慢查询日志
- en: 'Slow query logs are used to record SQL statements that takes long time to execute.
    MySQL 8 has defined the following two system variables for time configuration
    of slow query:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 慢查询日志用于记录执行时间长的SQL语句。MySQL 8为慢查询的时间配置定义了以下两个系统变量：
- en: '`long_query_time`:  This is used to define the ideal time for query execution.
    If a SQL statement takes longer than this time, then it is considered a slow query
    and a statement is recorded into the log file. The default value is 10 seconds.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long_query_time`：用于定义查询执行的理想时间。如果SQL语句的执行时间超过此时间，则被视为慢查询，并将语句记录到日志文件中。默认值为10秒。'
- en: '`min_examined_row_limit`: This is the minimum time required for the execution
    of each query. The default value is 0 seconds.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_examined_row_limit`：执行每个查询所需的最短时间。默认值为0秒。'
- en: MySQL 8 will not consider the initial time of acquiring a lock into execution
    time and will return slow query logs into a file once all locks are released and
    query execution is completed. When MySQL 8 is started, slow query logging is disabled
    by default; to start this log use the `slow_query_log[={0|1}]` command, where
    `0` indicates slow query log is disabled and 1 or without argument is used to
    enabled it. To log administrative statements and queries without indexing, use
    the **`log_slow_admin_statements` **and** `log_queries_not_using_indexes`** variables.
    Here, administrative statements include `ALTER TABLE`, `ANALYZE TABLE`, `CHECK
    TABLE`, `CREATE INDEX`, `DROP INDEX`, `OPTIMIZE TABLE`, and `REPAIR TABLE`. MySQL
    8 allows users to specify the name of the log file using `--slow_query_log_file=file_name` command.
    If no file name is specified, then MySQL 8 will create a file with the `host_name-slow.log`
    naming convention in the data directory. To write minimal information into this
    log file use the `--log-short-format` option.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8不会将获取锁的初始时间计入执行时间，并且在所有锁释放并完成查询执行后将慢查询日志返回到文件中。当启动MySQL 8时，默认情况下禁用慢查询日志；要启动此日志，请使用`slow_query_log[={0|1}]`命令，其中`0`表示禁用慢查询日志，1或无参数用于启用它。要记录不使用索引的管理语句和查询，请使用**`log_slow_admin_statements`**和**`log_queries_not_using_indexes`**变量。这里，管理语句包括`ALTER
    TABLE`、`ANALYZE TABLE`、`CHECK TABLE`、`CREATE INDEX`、`DROP INDEX`、`OPTIMIZE TABLE`和`REPAIR
    TABLE`。MySQL 8允许用户使用`--slow_query_log_file=file_name`命令指定日志文件的名称。如果未指定文件名，则MySQL
    8将在数据目录中使用`host_name-slow.log`命名约定创建文件。要将最少的信息写入此日志文件，请使用`--log-short-format`选项。
- en: 'All the above described parameters are controlled by MySQL 8 in the following
    sequence:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有描述的参数由MySQL 8按以下顺序控制：
- en: The query must either not be an administrative statement, or `log_slow_admin_statements`
    must be enabled
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询必须不是管理语句，或者`log_slow_admin_statements`必须已启用
- en: The query must have taken at least `long_query_timeseconds`, or `log_queries_not_using_indexes` must
    be enabled and the query must have used no indexes for row lookups
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询必须至少花费`long_query_time`秒，或者启用了`log_queries_not_using_indexes`，并且查询必须没有使用索引进行行查找
- en: The query must have examined at least `min_examined_row_limitrows`
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询必须至少检查`min_examined_row_limit`行
- en: The query must not be suppressed according to the `log_throttle_queries_not_using_indexes`
    setting
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询不应根据`log_throttle_queries_not_using_indexes`设置被抑制
- en: The `--log-output` option is also available for this log file, and has the same
    implementation and effect as the general purpose log.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`--log-output`选项也适用于此日志文件，并具有与通用日志相同的实现和效果。'
- en: The DDL log
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDL日志
- en: 'As name implies, this log file is used to record all the DDL statement execution
    related details. MySQL 8 uses this log file to recover from crashes that occur
    during the metadata operation execution. Let''s take one example to understand
    the scenarios:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，此日志文件用于记录所有与DDL语句执行相关的详细信息。MySQL 8使用此日志文件来从在元数据操作执行期间发生的崩溃中恢复。让我们举一个例子来理解不同的情况：
- en: '**Drop table t1, t2**: We must be sure that both the t1  and t2 tables are
    dropped'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除表t1，t2**：我们必须确保t1和t2表都被删除'
- en: When we execute any DDL statement, a record of these operations is written into
    the `ddl_log.log` file under the MySQL 8 data directory. This file is a binary
    file and not in human readable format. The user is not allowed to update the contents
    of this log file. Metadata statements recording is not required in normal execution
    of MySQL server; enable it only if it is required.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行任何DDL语句时，这些操作的记录将被写入MySQL 8数据目录下的`ddl_log.log`文件中。该文件是一个二进制文件，不是人类可读的格式。用户不允许更新此日志文件的内容。在MySQL服务器的正常执行中不需要记录元数据语句；只有在需要时才启用它。
- en: Server log maintenance
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器日志维护
- en: To maintain log files, we must clean up on a regular basis to manage disk space.
    For RPM based Linux systems the `mysql-log-rotate` script is available automatically.
    For other systems no such script is available, so we must install a short script
    by ourselves to manage log files. MySQL 8 provides the `expire_logs_days` system
    variable which is used to manage binary log files. Using this variable log Binary
    log files are automatically removed after a specified period.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 为了维护日志文件，我们必须定期清理以管理磁盘空间。对于基于RPM的Linux系统，`mysql-log-rotate`脚本会自动提供。对于其他系统，没有这样的脚本，因此我们必须自己安装一个简短的脚本来管理日志文件。MySQL
    8提供了`expire_logs_days`系统变量，用于管理二进制日志文件。使用此变量，二进制日志文件将在指定期限后自动删除。
- en: 'The default value of this variable is 30 days; you can change its value by
    configuration change. Binary log files are remove on server startup or when the
    log is flushed. In case of replication, you can also use the `binlog_expire_logs_seconds`
    system variable to manage logs for masters and slaves. Log flushing performs the
    following tasks:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量的默认值为30天；您可以通过配置更改其值。二进制日志文件在服务器启动时或日志刷新时删除。在复制的情况下，您还可以使用`binlog_expire_logs_seconds`系统变量来管理主服务器和从服务器的日志。日志刷新执行以下任务：
- en: If general query logging or slow query logging to a log file is enabled, the
    server closes and reopens the query log file
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了一般查询日志或慢查询日志到日志文件，服务器将关闭并重新打开查询日志文件
- en: If binary logging is enabled, the server closes the current binary log file
    and opens a new log file with the next sequence number
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了二进制日志记录，服务器将关闭当前的二进制日志文件，并打开下一个序列号的新日志文件
- en: If the server was started with the `--log-error` option to cause the error log
    to be written to a file, the server closes and reopens the log file
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果服务器是使用`--log-error`选项启动的，以导致错误日志被写入文件，服务器将关闭并重新打开日志文件
- en: 'To take backup or rename the old log files before generating a new log file,
    use the `mv` (move) command for Unix system, and the `rename` function in Windows.
    In case of general query and slow query log files, you can rename a file by disabling
    the log using the following command:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成新的日志文件之前备份或重命名旧的日志文件，可以在Unix系统中使用`mv`（移动）命令，在Windows中使用`rename`函数。对于一般查询和慢查询日志文件，可以通过使用以下命令禁用日志来重命名文件：
- en: '[PRE35]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After renaming log files, enable logs using the following command:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名日志文件后，使用以下命令启用日志：
- en: '[PRE36]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Summary
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This was an interesting chapter for any MySQL 8 user, wasn't it?  In this chapter
    we understood how MySQL 8 manages different log files and which log file to use
    at what time. At the same time we also covered many of the administrative features,
    such as globalization, system data database, and component and plugin configuration,
    and explained how to run multiple instances on a single machine. The later part
    of the chapter covered log maintenance.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于任何MySQL 8用户来说都是一个有趣的章节，不是吗？在本章中，我们了解了MySQL 8如何管理不同的日志文件，以及在什么时候使用哪个日志文件。同时，我们还涵盖了许多管理功能，例如全球化、系统数据数据库和组件和插件配置，并解释了如何在单台机器上运行多个实例。本章的后半部分涵盖了日志维护。
- en: Moving on to the next chapter, we will provide you with information about storage
    engines, such as what the different types of storage engine are, which one to
    use for your application, and how to create our own custom storage engine for
    MySQL 8.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为您提供有关存储引擎的信息，例如不同类型的存储引擎是什么，哪种适合您的应用程序，以及如何为MySQL 8创建自定义存储引擎。
