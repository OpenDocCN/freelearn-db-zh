- en: MySQL 8 Storage Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8存储引擎
- en: In the previous chapter, we learned about setting up a new system, data dictionary,
    and system database. Detailed information was provided on caching techniques,
    globalization, different types of components, and plugin configuration, along
    with several types of log files which are very important for administration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何设置新系统、数据字典和系统数据库。提供了有关缓存技术、全球化、不同类型组件和插件配置以及对管理非常重要的几种类型日志文件的详细信息。
- en: 'This chapter gives detailed information on MySQL 8 storage engines. It explains
    the `InnoDB` storage engine and its features in detail and also provides a practical
    guideline on custom storage engine creation and how to make it pluggable so that
    it can be installed in MySQL 8\. The topics that we will be covering in this chapter
    are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了MySQL 8存储引擎。它详细解释了`InnoDB`存储引擎及其特性，并提供了有关自定义存储引擎创建以及如何使其可插拔以便安装在MySQL
    8中的实用指南。本章将涵盖以下主题：
- en: Overview of storage engines
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储引擎概述
- en: Several types of storage engines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种类型的存储引擎
- en: The `InnoDB` storage engine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎'
- en: Creating a custom storage engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义存储引擎
- en: Overview of storage engines
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储引擎概述
- en: Storage engines are MySQL components for handling the SQL operations used in
    different types of tables. MySQL storage engines are designed to manage different
    types of tasks in different types of environments. It is very important to know
    and choose which storage engine is best suited for the system or application requirements.
    In following sections, we will get to know in detail about the types of storage
    engines, the default storage engine, and the creation of custom storage engines.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎是MySQL组件，用于处理不同类型表格中使用的SQL操作。MySQL存储引擎旨在管理不同类型环境中的不同类型任务。了解并选择最适合系统或应用需求的存储引擎非常重要。在接下来的章节中，我们将详细了解存储引擎的类型、默认存储引擎以及自定义存储引擎的创建。
- en: Let us go through and see why the storage engine is a very important component
    in databases, including MySQL 8\. Storage engines work with database engines to
    perform various types of tasks in different environments. They execute create,
    read, update, and delete operations in the form of statements on data from the
    database. It looks quite simple when you provide the `ENGINE` parameter with the
    create table statement but there is configuration for plenty of operations to
    be done on the data for each of the requests sent via SQL statements. It is much
    more than just persisting data - the engine takes care of features such as storage
    limits, transactions, locking granularity/level, multi-version concurrency control,
    geospatial data types, geospatial indexing, B-tree indexes, T-tree indexes, `Hash`
    indexes, full-text search indexes, clustered indexes, data caches, index caches,
    compressed data, encrypted data, cluster databases, replication, foreign keys,
    back up, query caches, and updating statistics for the data dictionary.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看为什么存储引擎是数据库中非常重要的组件，包括MySQL 8。存储引擎与数据库引擎一起在不同环境中执行各种类型的任务。它们以语句的形式在数据库中对数据执行创建、读取、更新和删除操作。当您在创建表语句中提供`ENGINE`参数时，看起来很简单，但对于每个通过SQL语句发送的请求，需要对数据执行大量操作的配置。它远不止是持久化数据
    - 引擎还负责存储限制、事务、锁定粒度/级别、多版本并发控制、地理空间数据类型、地理空间索引、B树索引、T树索引、`Hash`索引、全文搜索索引、聚集索引、数据缓存、索引缓存、压缩数据、加密数据、集群数据库、复制、外键、备份、查询缓存以及更新数据字典的统计信息。
- en: MySQL storage engine architecture
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL存储引擎架构
- en: The MySQL storage engine's pluggable architecture allows a database professional
    to select any storage engine for the specialization required in any particular
    application. The MySQL Storage engine architecture provides an easy application
    model and API with the consistency that isolates the database administrator and
    the application programmer from all the low-level implementation details underlying
    at the storage level. Thus, the application always works above different storage
    engines' different capabilities. It provides standard management and support services
    that are common for all underlying storage engines.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL存储引擎的可插拔架构允许数据库专业人员为任何特定应用程序选择任何存储引擎。MySQL存储引擎架构提供了一个简单的应用模型和API，具有一致性，可以隔离数据库管理员和应用程序员免受存储级别的所有底层实现细节的影响。因此，应用程序始终在不同存储引擎的不同功能之上运行。它提供了标准的管理和支持服务，适用于所有底层存储引擎。
- en: Storage engines perform activities on the data that is persisted at the physical
    server level. Such modular and efficient architecture provides solutions to specific
    needs of any particular application, such as transaction processing, high availability
    situations, or data warehousing, and at the same time has the advantage of independent
    interfaces and services from the underlying storage engines.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎在物理服务器级别上对持久化数据执行活动。这种模块化和高效的架构为任何特定应用程序的特定需求提供了解决方案，例如事务处理、高可用性情况或数据仓库，并且同时具有独立于底层存储引擎的接口和服务的优势。
- en: The database administrator and the application programmer interact with the
    MySQL database by Connector APIs and services on top of the storage engines. The
    application is shielded by the MySQL server architecture from the detailed level
    complexity of the storage engines by providing easy to use APIs that are consistent
    and applicable on all the storage engines. If the application requires changes
    in the underlying storage engine, or if one or more storage engines are added
    to support the needs of the application, no major coding or process changes are
    required to get things working.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理员和应用程序员通过连接器API和服务与MySQL数据库进行交互，这些API和服务位于存储引擎之上。MySQL服务器架构使应用程序免受存储引擎的详细级别复杂性的影响，通过提供易于使用的API，这些API在所有存储引擎上都是一致的和适用的。如果应用程序需要更改底层存储引擎，或者添加一个或多个存储引擎以支持应用程序的需求，那么不需要进行重大的编码或流程更改即可使事情正常运行。
- en: Several types of storage engine
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多种类型的存储引擎
- en: Now we know the importance of storage engines and critical decisions to identify
    which storage engines to use from plenty of storage engines available for MySQL
    8\. Let us take a look at what is available and with which specifications. InnoDB
    is the name that first entered your thoughts when you started thinking of storage
    engines, right?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了存储引擎的重要性，以及从众多可用的存储引擎中选择使用哪些存储引擎的关键决策。让我们看看有哪些可用的存储引擎以及它们的规格。当您开始考虑存储引擎时，`InnoDB`是您首先想到的名字，对吧？
- en: InnoDB is the default and most general-purpose storage engine in MySQL 8 and
    it is recommended by Oracle to use for tables as well as for special use cases.
    The MySQL server has a pluggable storage engine architecture that enables storage
    engine loading as well as unloading from the already running MySQL server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: InnoDB是MySQL 8中的默认和最通用的存储引擎，Oracle建议将其用于表以及特殊用例。MySQL服务器具有可插拔的存储引擎架构，可以从已经运行的MySQL服务器中加载和卸载存储引擎。
- en: To identify which storage engines your server supports is made very easy in
    MySQL 8\. We only have to go to the MySQL shell or prompt and use the `SHOW ENGINES`
    statement. Hit the statement when prompted and result will be the list of engines
    with a few columns, such as Engine, Support, Transactions, Savepoints, and Comment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中，识别服务器支持的存储引擎非常容易。我们只需进入MySQL shell或提示符，并使用`SHOW ENGINES`语句。在提示时输入该语句，结果将是一列引擎，包括Engine、Support、Transactions、Savepoints和Comment。
- en: Values in Support column, DEFAULT, YES, and NO, indicate that a storage engine
    is available and currently set as the default storage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 支持列中的值DEFAULT、YES和NO表示存储引擎是否可用，并当前设置为默认存储引擎。
- en: Overview of the InnoDB storage engine
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InnoDB存储引擎概述
- en: '`InnoDB` is the default and most general-purpose storage engine in MySQL 8,
    providing high reliability and high performance.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`是MySQL 8中默认的、最通用的存储引擎，提供高可靠性和高性能。'
- en: If you have not configured a different default storage engine, then issuing
    the SQL statement `CREATE TABLE` without the `ENGINE = clause` creates a table
    with the storage engine `InnoDB` as the default engine in MySQL 8.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有配置不同的默认存储引擎，那么在MySQL 8中发出不带`ENGINE =`子句的SQL语句`CREATE TABLE`将创建一个具有存储引擎`InnoDB`作为默认引擎的表。
- en: The features and advantages offered by the `InnoDB` storage engine are explained
    later in the *The InnoDB storage engine* section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎提供的功能和优势将在*InnoDB存储引擎*部分中进行解释。'
- en: Custom storage engine
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义存储引擎
- en: storage engine architecture in MySQL 5.1 and all the later versions and MySQL
    8 have taken advantage of the flexible storage engine architecture.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.1和所有后续版本以及MySQL 8中的存储引擎架构都利用了灵活的存储引擎架构。
- en: The storage engine pluggable architecture provides the capability to create
    and add new storage engines without recompilation of the server, adding directly
    to a running MySQL server. The architecture makes it very easy to develop and
    deploy new storage engines to MySQL 8.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎可插拔架构提供了创建和添加新存储引擎的能力，而无需重新编译服务器，直接添加到正在运行的MySQL服务器。这种架构使得开发和部署新的存储引擎到MySQL
    8变得非常容易。
- en: We will develop a new storage engine by using the pluggable feature of the MySQL
    storage engine architecture in the upcoming *Creating a custom storage engine* section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在即将到来的*创建自定义存储引擎*部分中使用MySQL存储引擎架构的可插拔特性来开发一个新的存储引擎。
- en: Several types of storage engines
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多种类型的存储引擎
- en: In this section, we will take a closer look at the widely used storage engines
    that are supported by MySQL 8\. But before checking on them, let us see how the
    storage engine architecture has made it pluggable and provided flexibility to
    enable using multiple storage engines in the same schema or server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将更仔细地查看MySQL 8支持的广泛使用的存储引擎。但在查看它们之前，让我们看看存储引擎架构是如何可插拔的，并提供了灵活性，以便在同一模式或服务器中使用多个存储引擎。
- en: 'The following is the list of storage engines supported in MySQL 8:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL 8支持的存储引擎列表。
- en: '`InnoDB`: The default storage engine for MySQL 8\. It is an `ACID` compliant
    (transaction-safe) storage engine that has commit, roll back, and crash-recovery
    for protecting the user data and `referential-integrity` constraints to maintain
    data integrity, and much more.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`：MySQL 8的默认存储引擎。它是一个符合`ACID`（事务安全）的存储引擎，具有提交、回滚和崩溃恢复，用于保护用户数据和`引用完整性`约束以维护数据完整性，等等。'
- en: '`MyISAM`: The storage engine with tables having a small footprint. It has table-level
    locking and so is mostly used in read-only or read-mostly data workloads, such
    as in data warehousing and web configurations.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`：具有小占用空间的表的存储引擎。它具有表级锁定，因此主要用于只读或读最多的数据工作负载，例如数据仓库和Web配置。'
- en: '`Memory`: The storage engine previously known as the `HEAP` engine. It keeps
    data in RAM, which provides faster data access, mostly used in quick lookups of
    non-critical data environments.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Memory`：以前被称为`HEAP`引擎的存储引擎。它将数据保存在RAM中，提供更快的数据访问，主要用于非关键数据环境的快速查找。'
- en: '`CSV`: The storage engine with tables as comma-separated values in text files
    and tables. They are not indexed and are mostly used for importing and dumping
    data in `CSV` format.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSV`：这种存储引擎使用文本文件和表中的逗号分隔值作为表。它们没有索引，主要用于以`CSV`格式导入和转储数据。'
- en: '`Archive`: The storage engine comprises compact, unindexed tables, intended
    to store and retrieve a huge amount of historical, archived, or security audit
    data.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`存档`：这种存储引擎包括紧凑的、无索引的表，旨在存储和检索大量历史、归档或安全审计数据。'
- en: '`Blackhole`: The storage engine with tables that can be used for replication
    configuration. A query always returns an empty set. `DML` SQL statements are sent
    to slave servers. It accepts data but data is not stored, such as in a Unix `/dev/null` device
    use.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`黑洞`：这种存储引擎包括用于复制配置的表。查询总是返回一个空集。`DML` SQL语句被发送到从服务器。它接受数据，但数据不会被存储，就像在Unix的`/dev/null`设备中使用一样。'
- en: '`Merge`: The storage engine provides the capability to logically group a series
    of similar `MyISAM` tables and refer to them as one object instead of separate
    table.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`合并`：这种存储引擎提供了将一系列相似的`MyISAM`表逻辑分组并将它们称为一个对象的能力，而不是单独的表。'
- en: '`Federated`: The storage engine that can link many separate physical MySQL
    servers into one logical database. It is ideal for data marts or distributed environments.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`联合`：这种存储引擎可以将许多独立的物理MySQL服务器链接成一个逻辑数据库。它非常适合数据仓库或分布式环境。'
- en: '`Example`: The storage engine that does nothing but works as a `stub`. It is
    primarily used by the developers who illustrate how to begin writing new storage
    engines in the MySQL source code.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`示例`：这种存储引擎什么也不做，只是作为一个`存根`。它主要由开发人员使用，用来演示如何在MySQL源代码中开始编写新的存储引擎。'
- en: MySQL does not restrict using the same storage engine for an entire server or
    schema; instead, specifying the engine at table level makes it flexible based
    on the type of data and the use case of the application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL不限制在整个服务器或模式上使用相同的存储引擎；相反，在表级别指定引擎使其根据数据类型和应用程序的用例变得灵活。
- en: Pluggable storage engine architecture
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可插拔存储引擎架构
- en: 'The MySQL server uses the pluggable storage engine architecture, which enables
    storage engine loading as well as unloading from already running MySQL servers:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器使用可插拔存储引擎架构，可以从已运行的MySQL服务器中加载和卸载存储引擎：
- en: '**Plugging in a storage engine**: Before a storage engine can be used in the
    server, the storage engine plugin shared library has to be loaded into MySQL with
    the `INSTALL PLUGIN` SQL statement. If you create a `MYEXAMPLE` engine plugin
    that is named `MyExample` and the shared library is named `MyExample.so`, then
    you need to load them with the following statement:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装存储引擎**：在服务器中使用存储引擎之前，必须使用`INSTALL PLUGIN` SQL语句将存储引擎插件共享库加载到MySQL中。如果您创建了一个名为`MyExample`的`MYEXAMPLE`引擎插件，并且共享库的名称为`MyExample.so`，那么您需要使用以下语句加载它们：'
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For installing a storage engine, the user issuing the preceding statement must
    have the `INSERT` privilege for the `mysql.plugin` table and the plugin file must
    be present in the MySQL plugin directory. The shared library also must be present
    in the MySQL server plugin directory given in the `plugin_dir` variable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装存储引擎，发出前述语句的用户必须对`mysql.plugin`表具有`INSERT`权限，并且插件文件必须存在于MySQL插件目录中。共享库也必须存在于`plugin_dir`变量中给出的MySQL服务器插件目录中。
- en: '**Unplugging a storage engine**: Before unplugging a storage engine, make sure
    that no tables are using the storage engine. If a storage engine is unplugged
    and is needed by any existing tables, the tables become inaccessible and will
    only be present on disk as applicable. If you unplug the `MYEXAMPLE` engine plugin
    named `MyExample` then execute the following statement for unplugging the storage
    engine:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卸载存储引擎**：在卸载存储引擎之前，请确保没有表在使用该存储引擎。如果卸载了一个存储引擎，并且任何现有表需要该存储引擎，那么这些表将变得不可访问，并且只会存在于适用的磁盘上。如果您卸载了名为`MyExample`的`MYEXAMPLE`引擎插件，然后执行以下语句来卸载存储引擎：'
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The common database server layer
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的数据库服务器层
- en: The MySQL pluggable storage engine is responsible for executing I/O operations
    on the actual data and also to cater to the specific application needs that includes
    enabling and enforcing the required features whenever required. Using a specific
    or single storage engine will more likely result in more efficiency and higher
    database performance because the engine enables the features only needed for a
    particular application, and resulting in less system overhead on the database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL可插拔存储引擎负责在实际数据上执行I/O操作，并满足特定应用程序的需求，包括在需要时启用和强制执行所需的功能。使用特定或单一存储引擎更有可能导致更高的效率和更高的数据库性能，因为该引擎仅启用特定应用程序所需的功能，从而减少数据库的系统开销。
- en: 'A storage engine supports the following unique infrastructure components or
    keys:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎支持以下独特的基础设施组件或键：
- en: '**Concurrency**: Some applications have granular lock levels (such as row-level
    locks) requirements more than others. Overall performance and overhead due to
    locking can be affected by choosing the right/wrong locking strategy and this
    also includes multi-version concurrency control or snapshot read capabilities.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发性**：一些应用程序对锁级别（如行级锁）的要求比其他应用程序更细粒度。选择正确/错误的锁定策略以及多版本并发控制或快照读取功能都可能影响整体性能和由于锁定而产生的开销。'
- en: '**Transaction support**: Very well-defined requirements exist, such as `ACID`
    compliance and more if the application needs transactions.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务支持**：存在非常明确定义的要求，比如`ACID`兼容性，如果应用程序需要事务，则还有更多要求。'
- en: '**Referential integrity**: The server can enforce relational database referential
    integrity using `DDL` -defined foreign keys if required..'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用完整性**：服务器可以使用`DDL`定义的外键来强制关系数据库引用完整性，如果需要的话。'
- en: '**Physical storage**: This includes everything from the page size of tables
    and indexes and also includes the format used for storing data on a physical disk
    as well.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理存储**：这包括从表和索引的页面大小到在物理磁盘上存储数据所使用的格式等一切。'
- en: '**Index support**: This includes indexing strategies based on the application
    needs, as each of the storage engines have their own indexing methods.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引支持**：这包括基于应用程序需求的索引策略，因为每个存储引擎都有自己的索引方法。'
- en: '**Memory caches**: The caching strategies based on the application needs, as
    each of the storage engines have their own caching methods along with common memory
    caches across all the storage engines.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存缓存**：这是基于应用程序需求的缓存策略，因为每个存储引擎都有自己的缓存方法，以及所有存储引擎的通用内存缓存。'
- en: '**Performance aids**: This involves bulk insert handing, database check pointing,
    multiple I/O threads for parallel operations, thread concurrency, and more.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能辅助**：这涉及到大量插入处理、数据库检查点、多个I/O线程进行并行操作、线程并发性等。'
- en: '**Miscellaneous target features**: This may includes support for security restrictions
    on certain data manipulation operations, geospatial operations, and other similar
    features.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他目标特性**：这可能包括对某些数据操作的安全限制、地理空间操作和其他类似特性的支持。'
- en: Each of the preceding infrastructure components are designed to support a specific
    set of features for a particular application's needs and so it is very important
    to understand the application requirement very carefully and select the right
    storage engine, as it may impact on the overall system efficiency and performance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 前述的基础设施组件都是为了支持特定应用程序需求的一组特定功能而设计的，因此非常重要的是要非常仔细地了解应用程序的需求，并选择正确的存储引擎，因为这可能会影响整个系统的效率和性能。
- en: Setting the storage engine
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置存储引擎
- en: 'When you create new table using the `CREATE TABLE` statement, you can specify
    which engine to be used for the table with the `ENGINE` table option. If you do
    not specify the `ENGINE` table option then the default storage engine will be
    used instead. `InnoDB` is the default engine for MySQL 8.0\. You can also convert
    a table from one storage engine to another storage engine by using the `ALTER
    TABLE` statement, as shown in the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`CREATE TABLE`语句创建新表时，可以使用`ENGINE`表选项指定要为表使用的引擎。如果不指定`ENGINE`表选项，则将使用默认的存储引擎。`InnoDB`是MySQL
    8.0的默认引擎。您还可以使用`ALTER TABLE`语句将表从一个存储引擎转换为另一个存储引擎，如下例所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The default storage engine can be set for the current session by setting the
    `default_storage_engine` variable, as shown in the following example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过设置`default_storage_engine`变量为当前会话设置默认存储引擎，如下例所示：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The default storage engine for `TEMPORARY` tables using `CREATE TEMPORARY TABLE`
    can be set separately by setting the `default_tmp_storage_engine` variable at
    either startup or runtime.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CREATE TEMPORARY TABLE`创建`TEMPORARY`表的默认存储引擎可以通过在启动或运行时设置`default_tmp_storage_engine`变量来单独设置。
- en: The MyISAM storage engine
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`MyISAM`存储引擎'
- en: The `MyISAM` storage engine uses tables having a small footprint. It has table-level
    locking implemented and so is mostly used where there are read-only or read-mostly
    data workloads, such as in data warehousing and web configurations. Each of the
    `MyISAM` tables are stored with two files on disk. The filename begins with the
    table name and its extension type, one with the `.MYD` extension for the data
    file and another with the `.MYI` extension for the index file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyISAM`存储引擎使用占用空间小的表。它实现了表级锁定，因此主要用于只读或读取大部分数据负载的情况，例如数据仓库和Web配置。每个`MyISAM`表都存储在磁盘上的两个文件中。文件名以表名和其扩展类型开头，一个带有`.MYD`扩展名的数据文件，另一个带有`.MYI`扩展名的索引文件。'
- en: 'For the `MyISAM` engine, there are several startup options specified with `mysqld`
    that can change the behavior of `MyISAM` tables; for example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`引擎，有几个在`mysqld`中指定的启动选项可以改变`MyISAM`表的行为；例如：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This option will set the mode in the automatic recovery of crashed tables in
    `MyISAM`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将设置在`MyISAM`中崩溃表的自动恢复模式。
- en: Spaces needed for keys in `MyISAM`, `B-Tree` indexes are used by `MyISAM` tables
    and space compression is used in `String` indexes. If a string is the first part
    of the index then prefix compression is also done, which overall makes the index
    file size smaller. The prefix compression helps if many strings have a similar
    prefix. By using the table option `PACK_KEYS=1` in `MyISAM` tables, prefix compression
    can also be applied on the numbers if there are many numbers with a similar prefix.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyISAM`中需要用于键的空间，`MyISAM`表使用`B-Tree`索引，并且在`String`索引中使用空间压缩。如果一个字符串是索引的第一部分，那么还会进行前缀压缩，这样整体使索引文件大小更小。前缀压缩有助于处理许多具有相似前缀的字符串。通过在`MyISAM`表中使用表选项`PACK_KEYS=1`，前缀压缩也可以应用于数字，如果有许多具有相似前缀的数字。
- en: Partitioning is not supported for `MyISAM` tables in MySQL 8.0.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，不支持对`MyISAM`表进行分区。
- en: 'Some of the important tables characteristics for `MyISAM` tables are as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyISAM`表的一些重要特性如下：'
- en: All data values stored have the low byte first order, which makes the data independent
    of machine and operating systems
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储的所有数据值都以低字节优先顺序存储，这使得数据独立于机器和操作系统
- en: All numeric key values are stored with high byte first order, which permits
    better index compression
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有数值键值都以高字节优先顺序存储，这允许更好的索引压缩
- en: '`MyISAM` table is limited with *(2^(32))²(1.844E+19)* rows'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`表的行数限制为*(2^(32))²(1.844E+19)*。'
- en: '`MyISAM` table is limited to a maximum number of 64 indexes per table'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`表的最大索引数限制为64个'
- en: '`MyISAM` table columns is limited to a maximum number of 16 columns per index'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`表的列索引最大数限制为16个'
- en: Concurrent inserts are supported in `MyISAM`, if a table does not have any free
    blocks in the middle of the data files
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`MyISAM`中支持并发插入，如果表在数据文件中间没有空闲块
- en: '`TEXT` and `BLOB` type columns can also be indexed in `MyISAM`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`中也可以对`TEXT`和`BLOB`类型的列进行索引'
- en: In indexed columns, `NULL` values are permitted
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在索引列中，允许`NULL`值
- en: Each of the columns can have a different character set
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一列都可以有不同的字符集
- en: It also support for a true `VARCHAR` type column with a starting length stored
    of 1 or 2 byte, tables with `VARCHAR` columns with a fixed or dynamic row length,
    and `UNIQUE` constraints with an arbitrary length
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还支持真正的VARCHAR类型列，其起始长度存储为1或2个字节，具有固定或动态行长度的VARCHAR列，以及任意长度的UNIQUE约束
- en: '**`MyISAM` **table storage formats: The following three different types of
    storage formats listed are supported in `MyISAM`:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM表存储格式：MyISAM支持以下三种不同类型的存储格式：
- en: '`Static` **table**: The default format for the tables in the `MyISAM` storage
    engine, with fixed-sized columns'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态表：MyISAM存储引擎中表的默认格式，具有固定大小的列
- en: '`Dynamic` **table**: As the name suggests, the format that contains variable
    sized columns, including `VARCHAR`, `BLOB` , or `TEXT`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态表：顾名思义，包含可变大小列的格式，包括VARCHAR、BLOB或TEXT
- en: '`Compressed` **table**: The table format for keeping read-only data and compressed
    formats in `MyISAM` storage engine tables'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩表：用于在MyISAM存储引擎表中保存只读数据和压缩格式的表格格式
- en: The first two formats, fixed and dynamic, are chosen automatically based on
    the column type used. The compressed format can be created by using the `myisampack` utility.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种格式，固定和动态，根据使用的列类型自动选择。压缩格式可以通过使用myisampack实用程序创建。
- en: '**`MyISAM` table problems**: The file format has been extensively tested but
    some circumstances arise that result in corrupted database tables. Let us look
    at such circumstances and the way to recover those tables.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM表问题：文件格式经过了广泛测试，但有些情况会导致数据库表损坏。让我们看看这些情况以及恢复这些表的方法。
- en: 'We could get corrupted tables in the event of any of the following events :'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下事件中可能会出现损坏的表：
- en: If the `mysqld` process is killed in the middle of a write
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果mysqld进程在写入过程中被杀死
- en: If there is an unexpected computer shutdown
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有意外的计算机关闭
- en: If there is any hardware failure
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有任何硬件故障
- en: If a table is being modified at the same time by the MySQL server and an external
    program, such as `myisamchk`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果MySQL服务器和外部程序（如myisamchk）同时修改表
- en: The MySQL or `MyISAM` code has a software bug
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL或MyISAM代码存在软件错误
- en: Check the health of the table with the `CHECK TABLE` statement and attempt to
    repair any corrupted `MyISAM` table by using the `REPAIR TABLE` statement.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CHECK TABLE语句检查表的健康状况，并尝试使用REPAIR TABLE语句修复任何损坏的MyISAM表。
- en: 'There is also possible issue you get with `MyISAM` tables and that is tables
    are not being closed properly. In order to identify if the table is closed properly
    or not, each `MyISAM` index file keeps a counter in the header. The counter can
    be incorrect under the following circumstances:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: MyISAM表可能出现的问题是表没有被正确关闭。为了确定表是否被正确关闭，每个MyISAM索引文件在标头中保留一个计数器。在以下情况下，计数器可能不正确：
- en: If a table is copied without issuing `LOCK TABLES` and `FLUSH TABLES`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果表在不发出LOCK TABLES和FLUSH TABLES的情况下被复制
- en: MySQL crashed before the final close during an update
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL在更新期间最终关闭之前崩溃
- en: '`mysqld` is using the table and at the same time it is modified by another
    program: `myisamcheck --recover` or `myisamchk --update-state`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mysqld正在使用表，同时被另一个程序修改：myisamcheck --recover或myisamchk --update-state
- en: The MEMORY storage engine
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MEMORY存储引擎
- en: The `MEMORY` storage engine, also previously known as the `HEAP` engine, keeps
    data in `RAM`, which provides faster data access. It is mostly used in quick lookups
    of non-critical data environments. It creates special-purpose tables with contents
    stored in memory but the data is vulnerable to crashes, power outages, and hardware
    issues. Therefore, these tables are used in temporary work areas or possibly using
    read only data that is cached after the data is pulled from other tables.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: MEMORY存储引擎，以前也称为HEAP引擎，将数据保存在RAM中，提供更快的数据访问。它主要用于快速查找非关键数据环境。它创建专用表，其中内容存储在内存中，但数据容易受到崩溃、停电和硬件问题的影响。因此，这些表用于临时工作区或在从其他表中提取数据后缓存只读数据。
- en: 'You should choose whether use `MEMORY` or `NDB Cluster.` You should check if
    the application is required for important, highly available, or frequently updated
    data and consider whether `NDB Cluster` is the better choice or not. `NDB Cluster`
    provides the same features as the `MEMORY` engine, but with higher performance
    levels and additional features not provided by `MEMORY` engine. These include:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该选择使用MEMORY还是NDB Cluster。您应该检查应用程序是否需要重要的、高可用的或经常更新的数据，并考虑NDB Cluster是否是更好的选择。NDB
    Cluster提供与MEMORY引擎相同的功能，但性能水平更高，并且具有MEMORY引擎不提供的其他功能。这些包括：
- en: Low contention between clients by multiple thread operations and row-level locking
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端之间的低争用通过多线程操作和行级锁定
- en: Scalability with statements mixes, including writes
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括写入的语句混合的可伸缩性
- en: Data durability; it supports optional disk-backed operations
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据耐久性；它支持可选的磁盘支持操作
- en: Shared-nothing architecture, providing multiple-host operations without a single
    point of failure, enabling 99.999% availability for the application
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无共享架构，提供多主机操作而没有单点故障，为应用程序提供99.999%的可用性
- en: Automatic data distributions across nodes
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动数据分布跨节点
- en: Support for variable length data types, including `BLOB` and `TEXT`
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持可变长度数据类型，包括BLOB和TEXT
- en: '**Partitioning** is not supported in `MEMORY` tables.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: MEMORY表不支持分区
- en: '**Performance** depends on how busy the server is and the effect of single
    thread execution with table lock overhead during updates processing. The table
    locking during updates processing causes a slowdown of concurrent usage from multiple
    sessions on `MEMORY` tables.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 性能取决于服务器的繁忙程度以及单线程执行对更新处理期间的表锁开销的影响。在更新处理期间对表进行锁定会导致在MEMORY表上的多个会话的并发使用减慢。
- en: '**MEMORY tables characteristics**: Table definitions are stored on the MySQL
    data dictionary and do not create any files on the disk. The following are the
    table feature highlights:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**MEMORY表特点**：表定义存储在MySQL数据字典中，并不在磁盘上创建任何文件。以下是表特性的亮点：'
- en: 100% dynamic hashing for inserts and space is allocated in small blocks.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 100%动态哈希用于插入，并且空间分配在小块中。
- en: No extra key space or overflow area or extra space for free lists is required.
    Reuse of deleted rows when new records inserted by putting rows in linked lists.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要额外的键空间、溢出区域或空闲列表的额外空间。通过将行放入链接列表中重用已删除的行来插入新记录。
- en: Fixed length row-storage format, `VARCHAR` , is stored with fixed length. Cannot
    store `BLOB` or `TEXT` columns.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定长度行存储格式，`VARCHAR`，以固定长度存储。无法存储`BLOB`或`TEXT`列。
- en: '`AUTO_INCREMENT` columns are supported.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持`AUTO_INCREMENT`列。
- en: '**Indexing** in `HASH` and `BTREE` types are supported by the `MEMORY` storage
    engine. `MEMORY` tables have a maximum of 64 indexes per table, a maximum of 16
    columns per index and a maximum key length of 3,072 bytes. `MEMORY` tables also
    can have `non-unique` keys.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY`存储引擎支持`HASH`和`BTREE`类型的索引。`MEMORY`表每个表最多有64个索引，每个索引最多有16列，最大键长度为3,072字节。`MEMORY`表也可以有`非唯一`键。'
- en: '**User created and temporary tables**: Internal temporary tables are created
    by the server on the fly while processing queries. Two types of tables differ
    in storage conversion, where the `MEMORY` tables are not subject to conversion:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户创建和临时表**：服务器在处理查询时动态创建内部临时表。两种类型的表在存储转换上有所不同，其中`MEMORY`表不受转换的影响：'
- en: When an internal temporary table becomes too large, it is converted to on-disk
    storage by the server automatically
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当内部临时表变得太大时，服务器会自动将其转换为磁盘存储
- en: User created `MEMORY` tables are never converted by the server
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户创建的`MEMORY`表不会被服务器转换
- en: Data loading can be performed using the `--init-file` option, using `INSERT
    INTO ... SELECT` or `LOAD DATA INFILE` statements from any persistence data source
    if required.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`--init-file`选项，使用`INSERT INTO ... SELECT`或`LOAD DATA INFILE`语句从任何持久性数据源加载数据，如果需要的话。
- en: The CSV storage engine
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSV存储引擎
- en: This storage engine stores data in the form of comma-separated values in text
    files. The engine is always compiled into the MySQL server and the source can
    be examined from the `storage/csv` directory of your MySQL distribution.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该存储引擎以逗号分隔值的形式将数据存储在文本文件中。该引擎始终编译到MySQL服务器中，可以从MySQL分发的`storage/csv`目录中检查源代码。
- en: The data file created by the server begins with the given table and the extension
    of `.CSV`. The data file is a plain text file containing data in the comma-separate
    values format.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器创建的数据文件以给定表和扩展名`.CSV`开头。数据文件是一个纯文本文件，以逗号分隔值格式包含数据。
- en: The MySQL server creates a corresponding metafile along with a `CSV` table that
    stores information about the state of the table and the count for the rows that
    exists in the table. The metafile is also stored with the table name at the beginning
    with the `.CSM` extension.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器创建一个与`CSV`表对应的元文件，该文件存储有关表状态和表中存在的行数的信息。元文件也与表名一起存储在以`.CSM`扩展名开头的位置。
- en: '**Repairing and checking** `CSV` **tables**: The storage engine supports `CHECK`
    and `REPAIR` statements to verify and possibly repair a damaged `CSV` table. You
    can use the `CHECK TABLE` statement to verify or validate the table and use the `REPAIR
    TABLE` statement to repair a table that copies valid rows from an existing `CSV`
    data file and replaces an existing file with newly copied/recovered rows.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复和检查**`CSV`**表**：存储引擎支持`CHECK`和`REPAIR`语句来验证并可能修复损坏的`CSV`表。您可以使用`CHECK TABLE`语句来验证或验证表，并使用`REPAIR
    TABLE`语句来修复从现有`CSV`数据文件复制有效行并用新复制/恢复的行替换现有文件的表。'
- en: During repair, only rows from the `CSV` data file to the first damaged row gets
    copied to the new table or copied data file. The rest of the rows after the damaged
    row gets removed from the table, including valid rows, so I suggest that you take
    enough back up of the data file prior to proceeding with the repair.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在修复过程中，只有从`CSV`数据文件到第一个损坏的行的行被复制到新表或复制的数据文件中。损坏行后的其余行将从表中删除，包括有效行，因此建议您在进行修复之前对数据文件进行足够的备份。
- en: Indexing or partitioning is not supported in the `CSV` storage engine and all
    the tables created with the `CSV` storage engine must have the `NOT NULL` attribute
    on all the columns.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`CSV`存储引擎不支持索引或分区，所有使用`CSV`存储引擎创建的表必须在所有列上具有`NOT NULL`属性。'
- en: The ARCHIVE storage engine
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARCHIVE存储引擎
- en: The `ARCHIVE` storage engine creates special-purpose tables that are used for
    storing huge amounts of unindexed data with a very small footprint.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARCHIVE`存储引擎创建专用表，用于存储大量未索引数据，占用非常小的空间。'
- en: When the `ARCHIVE` table is created, it begins with the table name and ends
    with the `.ARZ` extension. During optimization operations, a file with an `.ARN`
    extension may appear.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建`ARCHIVE`表时，它以表名开头，并以`.ARZ`扩展名结尾。在优化操作期间，可能会出现一个带有`.ARN`扩展名的文件。
- en: '`The AUTO_INCREMENT` column attribute is supported by the engine. It also supports
    `INSERT`, `REPLACE`, `SELECT`, and `BLOB` columns (all but spatial data types)
    but it does not support `DELETE,` `UPDATE`, `ORDER`, or `BY` operations.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎支持`AUTO_INCREMENT`列属性。它还支持`INSERT`、`REPLACE`、`SELECT`和`BLOB`列（除了空间数据类型），但不支持`DELETE`、`UPDATE`、`ORDER`或`BY`操作。
- en: '**Partitioning** is not supported by the `ARCHIVE` storage engine:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARCHIVE`存储引擎不支持分区：'
- en: '**Storage**: The engine uses lossless data compression with `zlib` and the
    rows get compressed as inserted. It supports the `CHECK TABLE` operation. Several
    types of insertion are used in the engine:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：该引擎使用`zlib`进行无损数据压缩，并在插入时对行进行压缩。它支持`CHECK TABLE`操作。引擎使用几种插入类型：'
- en: '`INSERT` statement sends rows into a compression buffer, and the buffer gets
    flushed as necessary. Insertion in the compression buffer is protected by the
    lock and flush will only occur if `SELECT` is requested.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT`语句将行发送到压缩缓冲区，并根据需要刷新缓冲区。压缩缓冲区中的插入受锁保护，只有在请求`SELECT`时才会发生刷新。'
- en: Once completed a bulk buffer can be seen. It can only be seen if any other inserts
    occur at the same time. Here flush will not occur upon `SELECT`, unless while
    loading any normal insert.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成后可以看到一个批量缓冲区。只有在同时发生其他插入时才能看到。在加载任何正常插入时，刷新不会在`SELECT`时发生。
- en: '**Retrieval**: After retrieval, rows gets uncompressed as requested and it
    does not use any row cache. A complete table scan is performed for the `SELECT`
    operation:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检索**：检索后，根据请求解压行，并且不使用任何行缓存。对于`SELECT`操作执行完整的表扫描：'
- en: '`SELECT` checks how many rows are available currently and reads only that number
    of rows. It is performed as a consistent read operation.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT`检查当前有多少行可用，并且只读取该数量的行。它作为一次一致的读操作执行。'
- en: The number of rows reported by `SHOW TABLE STATUS` is always accurate for the
    `ARCHIVE` tables.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW TABLE STATUS`报告的行数对于`ARCHIVE`表始终是准确的。'
- en: Use `OPTIMIZE TABLE` or `REPAIR TABLE` operations to achieve better compression.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`OPTIMIZE TABLE`或`REPAIR TABLE`操作以实现更好的压缩。
- en: The BLACKHOLE storage engine
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BLACKHOLE存储引擎
- en: The `BLACKHOLE` storage engine acts as a black hole. It accepts data but does
    not store it and a query always returns an empty result.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎充当黑洞。它接受数据但不存储数据，查询总是返回空结果。'
- en: The server only adds the table definition in the global data dictionary when
    you create a `BLACKHOLE` table and no files are associated with the table.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器只有在创建`BLACKHOLE`表并且没有文件与该表关联时，才会在全局数据字典中添加表定义。
- en: All kinds of **indexing** is supported in the `BLACKHOLE` storage engine and
    so the same can be included in the table definition.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎支持各种**索引**，因此可以在表定义中包含相同的内容。'
- en: '**Partitioning** is not supported in the `BLACKHOLE` storage engine.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎不支持分区。'
- en: Insertion to the table does not store any data but if binary logging is enabled
    for statements, then the statements are logged and replicated to the slave servers.
    Such a mechanism is useful as a filter or repeater.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对表的插入不会存储任何数据，但如果为语句启用了二进制日志记录，则会记录并复制到从服务器。这种机制可用作过滤器或中继器。
- en: 'The `BLACKHOLE` storage engine has the following possible uses:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎有以下可能的用途：'
- en: Dump file syntax verification
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转储文件语法验证
- en: Overhead measurement using binary logging enabled or disabled with a `BLACKHOLE`
    performance comparison
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用启用或禁用二进制日志记录的`BLACKHOLE`性能比较的开销测量
- en: It can also be used for finding any performance bottlenecks, except for the
    storage engine itself
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还可用于查找任何性能瓶颈，除了存储引擎本身
- en: '**Auto increment columns**: As the engine is a no-op engine, it will not increment
    any field values but it has implications in the replication, which can be very
    important. Consider a scenario that has the following conditions:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**自增列**：由于该引擎是一个无操作引擎，它不会增加任何字段值，但它对复制有影响，这可能非常重要。考虑以下情况：'
- en: The master server has a `BLOCKHOLE` table with an auto increment field with
    a primary key
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主服务器具有带有主键的自增字段的`BLOCKHOLE`表
- en: The same table exists on the slave server but uses the `MyISAM` engine
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器上存在相同的表，但使用`MyISAM`引擎
- en: Insertion is performed into the master server's table without setting any auto
    increment value in the `INSERT` statement or using the `SET INSERT_ID` statement
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`INSERT`语句中插入到主服务器的表中，而不设置任何自增值或使用`SET INSERT_ID`语句
- en: In the preceding scenario, the replication will fail on the primary key column
    with a duplicate entry.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，主键列上的复制将失败，因为有重复条目。
- en: The MERGE storage engine
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MERGE存储引擎
- en: The `MERGE` storage engine, known also as the `MRG_MyISAM` engine, is collection
    of similar tables that can be used as one table instead. Here, "similar" means
    that all the tables have similar column data types and indexing information. It
    is not possible to merge tables with the columns listed in a different order or
    to have the same data types in respective columns or have indexing in a different
    order.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`MERGE`存储引擎，也称为`MRG_MyISAM`引擎，是一组类似的表，可以作为一个表来使用。这里的“类似”意味着所有表具有相似的列数据类型和索引信息。不可能合并列顺序不同的表，或者在各自列中具有相同的数据类型，或者以不同的顺序进行索引。'
- en: 'The following is the list of differences in tables that will not restrict a
    merge:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不会限制合并的表中的差异列表：
- en: Names of respective columns and indexes can be different.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各自列和索引的名称可能不同。
- en: Comments in between tables, columns, and indexes can be different.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表，列和索引之间的注释可能不同。
- en: '`AVG_ROW_LENGTH`, `MAX_ROWS` , or `PACK_KEYS` table options can be different.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVG_ROW_LENGTH`，`MAX_ROWS`或`PACK_KEYS`表选项可能不同。'
- en: When a `MERGE` table is created, MySQL also creates a `.MRG` file on the disk
    with the names of underlying `MyISAM` tables being used as one. The format of
    the table is stored in the MySQL data dictionary and the underlying tables do
    not require to be in the same database as the `MERGE` table.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`MERGE`表时，MySQL还会在磁盘上创建一个`.MRG`文件，其中包含正在使用的`MyISAM`表的名称。表的格式存储在MySQL数据字典中，底层表不需要在与`MERGE`表相同的数据库中。
- en: Having privileges are a must for `SELECT`, `UPDATE`, and `DELETE` on the `MyISAM`
    tables that are being mapped with the `MERGE` table and so `SELECT`, `INSERT`,
    `UPDATE`, and `DELETE` statements on the `MERGE` table can be used.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 必须具有对与`MERGE`表映射的`MyISAM`表的`SELECT`，`UPDATE`和`DELETE`权限，因此可以使用`SELECT`，`INSERT`，`UPDATE`和`DELETE`语句对`MERGE`表进行操作。
- en: Executing the `DROP TABLE` statement on the `MERGE` table will drop only the
    specification for the `MERGE` and nothing is impacted on the underlying tables.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MERGE`表上执行`DROP TABLE`语句将仅删除`MERGE`的规范，对底层表不会产生影响。
- en: Using `MERGE` tables has the following security issues. If the user has access
    to the `MyISAM` table `t1`, then the user can create the `MERGE` table `m1` that
    can access `t1`. Now, if the user's privileges on the table `t1` are revoked,
    the user can still continue accessing table `t1` by using table `m1`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MERGE`表存在以下安全问题。如果用户可以访问`MyISAM`表`t1`，那么用户可以创建可以访问`t1`的`MERGE`表`m1`。现在，如果用户对表`t1`的权限被撤销，用户仍然可以通过使用表`m1`继续访问表`t1`。
- en: The FEDERATED storage engine
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FEDERATED存储引擎
- en: The `FEDERATED` storage engine can link many separate physical MySQL servers
    into one logical database and so it can let you access data from a remote MySQL
    server without using either replication or cluster technology.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`FEDERATED`存储引擎可以将许多独立的物理MySQL服务器链接成一个逻辑数据库，因此可以让您访问远程MySQL服务器的数据，而无需使用复制或集群技术。'
- en: When we query to the local `FEDERATED` table, that automatically pulls the data
    from the remote federated tables and the data is not required to be stored on
    local tables.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查询本地`FEDERATED`表时，会自动从远程联合表中提取数据，不需要将数据存储在本地表中。
- en: The `FEDERATED` storage engine is not supported by default in the MySQL server
    but starting the server with the `--federated` option will enable the `FEDERATED`
    engine option.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`FEDERATED`存储引擎不是MySQL服务器的默认支持，但是使用`--federated`选项启动服务器将启用`FEDERATED`引擎选项。'
- en: 'When the `FEDERATED` table is created the table definition is the same as other
    tables, but the physical storage of the associated data is handled on the remote
    server instead. The `FEDERATED` table consists of the following two elements:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`FEDERATED`表时，表定义与其他表相同，但关联数据的物理存储是在远程服务器上处理的。`FEDERATED`表包括以下两个元素：
- en: A **remote server** with a database table consisting of a table definition and
    the associated table data. This type of table can be any supported by the remote
    server that includes `MyISAM` or `InnoDB` as well.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**远程服务器**，其中包含一个由表定义和相关表数据组成的数据库表。这种类型的表可以是远程服务器支持的任何类型，包括`MyISAM`或`InnoDB`。
- en: A **local server** with a database table consisting of a table definition the
    same as the respective table on the remote server. The table definition is stored
    in the data dictionary and no associated data file on the local server is stored.
    Instead, in addition to the table definition, it keeps a connection string that
    is pointing to the remote table itself.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**本地服务器**，其中包含一个由远程服务器上相同的表定义组成的数据库表。表定义存储在数据字典中，本地服务器上没有关联的数据文件存储。相反，除了表定义之外，它还保留一个指向远程表本身的连接字符串。
- en: 'The following is the flow of information between the local and remote server
    when a SQL statement is executed on the `FEDERATED` table:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`FEDERATED`表上执行SQL语句时，本地服务器和远程服务器之间的信息流如下：
- en: The engine checks each of the columns the table has and builds an appropriate
    SQL statement that refers to the remote table.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该引擎检查表的每一列，并构建一个适当的SQL语句，引用远程表。
- en: The MySQL client API is used for sending the SQL statement to the remote server.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MySQL客户端API用于将SQL语句发送到远程服务器。
- en: The statement is processed by the remote server and the respective result is
    retrieved by the local server.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该语句由远程服务器处理，并且本地服务器检索相应的结果。
- en: The EXAMPLE storage engine
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EXAMPLE存储引擎
- en: The `EXAMPLE` storage engine is only a stub engine and the purpose of the engine
    is to provide examples in the MySQL source code, which helps developers to write
    new storage engines.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXAMPLE`存储引擎只是一个存根引擎，其目的是在MySQL源代码中提供示例，以帮助开发人员编写新的存储引擎。'
- en: To work with the `EXAMPLE` engine source code, look at the `storage/example`
    directory of the MySQL source code distribution download.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`EXAMPLE`引擎源代码，请查看MySQL源代码分发下载的`storage/example`目录。
- en: No files are created if the table is created with the `EXAMPLE` engine. Data
    cannot be stored in the `EXAMPLE` engine and it returns empty results.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`EXAMPLE`引擎创建表，则不会创建文件。数据不能存储在`EXAMPLE`引擎中，并且返回空结果。
- en: Indexing and partitioning is not supported in the `EXAMPLE` storage engine.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXAMPLE`存储引擎不支持索引和分区。'
- en: The InnoDB storage engine
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InnoDB存储引擎
- en: '`InnoDB` is the most general-purpose storage engine and is the default engine
    in MySQL 8, providing high reliability and high performance .'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`是最通用的存储引擎，也是MySQL 8中的默认引擎，提供高可靠性和高性能。'
- en: 'The following are the key advantages offered by the `InnoDB` storage engine:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎提供的主要优势如下：'
- en: Its `DML` operations follows the `ACID` model and transactions have commit,
    rollback, and crash-recovery features to protect user data
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其`DML`操作遵循`ACID`模型，并且事务具有提交、回滚和崩溃恢复功能，以保护用户数据
- en: '`Oracle-style` gives consistent reads and row level locking increases the performance
    of multi-user concurrency'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oracle-style`提供一致的读取和行级锁定，增加了多用户并发性能'
- en: Each `InnoDB` table has a primary key index, known as the clustered index, that
    arranges data on the disk in order to optimize queries based on primary key and
    minimizes I/O during primary key lookups
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个`InnoDB`表都有一个主键索引，称为聚簇索引，它按顺序在磁盘上排列数据，以优化基于主键的查询，并在主键查找期间最小化I/O
- en: By supporting foreign keys, inserts, deletes, and updates are checked, ensuring
    consistency across different tables in order to maintain data integrity
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过支持外键，插入、删除和更新都会进行检查，以确保跨不同表的一致性，以维护数据完整性
- en: 'The following are the key benefits of using `InnoDB` tables:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`InnoDB`表的主要优势如下：
- en: If the server crashes due to any hardware or software issue, regardless of what
    changes were being processed in the server at that time, you're not required to
    do anything special after restarting the server. It has a crash recovery system
    that takes care of changes that were committed during the crash of the server.
    It will go to those changes and start where the processing was left off.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果服务器由于任何硬件或软件问题而崩溃，无论当时服务器正在处理什么更改，重新启动服务器后都不需要进行任何特殊操作。它具有崩溃恢复系统，可以处理在服务器崩溃期间提交的更改。它将转到这些更改并从处理中断的地方开始。
- en: The engine has it's own buffer pool used for caching table and indexing data
    to memory based on data accessed. Frequently used data is fetched directly from
    the cache memory and so it speeds up processing. In dedicated servers, it takes
    up to 80% of physical memory assigned to be used in the buffer pool.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引擎具有自己的缓冲池，用于根据访问的数据将表和索引数据缓存到内存中。经常使用的数据直接从缓存内存中获取，因此可以加快处理速度。在专用服务器中，它占用分配的物理内存的80％用于缓冲池。
- en: Splitting related data to tables using foreign key setup enforces referential
    integrity which prevents inserting any unrelated data to a secondary table without
    the respective data in the primary table.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外键设置将相关数据拆分到表中，强制执行引用完整性，防止在没有主表中相应数据的情况下向辅助表插入任何不相关的数据。
- en: In case of corrupt data in the memory or disk, the checksum mechanism gives
    an alert about the corrupt data before we get to use it.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果内存或磁盘中存在损坏的数据，校验和机制会在我们使用之前提醒我们有损坏的数据。
- en: Change buffering automatically optimizes `Insert`, `Update`, and `Delete`. `InnoDB`
    also allows concurrent read and write access to the same table and caching data
    changes to streamline the disk I/O.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改缓冲区会自动优化`Insert`，`Update`和`Delete`。`InnoDB`还允许对同一表进行并发读写访问，并缓存数据更改以简化磁盘I/O。
- en: When the same data rows are accessed from the table repeatedly, the Adaptive
    Hash Index feature makes the lookups faster and gives performance benefits.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当从表中重复访问相同的数据行时，自适应哈希索引功能可以加快查找速度并提供性能优势。
- en: Compression is allowed on tables and associated indexes.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在表和相关索引上进行压缩。
- en: Monitoring on internal workings and performance details of the storage engine is
    easy by querying `INFORMATION_SCHEMA` or `Performance Schema` tables.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查询`INFORMATION_SCHEMA`或`Performance Schema`表，轻松监视存储引擎的内部工作和性能细节。
- en: Now let us look at each of the areas of the storage engine where `InnoDB` is
    enhanced or optimized to provide very efficient and enhanced performance.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看存储引擎的每个区域，在这些区域中`InnoDB`被增强或优化以提供非常高效和增强的性能。
- en: ACID model
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ACID模型
- en: The `ACID` model is a group of database design principles with an emphasis on
    reliability, which is most important for mission critical applications and business
    data.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`ACID`模型是一组数据库设计原则，强调可靠性，这对于关键任务应用程序和业务数据至关重要。'
- en: MySQL has components such as the `InnoDB` storage engine that closely adhere to
    the `ACID` model. Therefore, data is safe and not corrupted, even in exceptional
    cases of hardware malfunctions or software crashes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL具有诸如`InnoDB`存储引擎之类的组件，严格遵循`ACID`模型。因此，即使在硬件故障或软件崩溃的特殊情况下，数据也是安全且不会损坏。
- en: With MySQL 8, `InnoDB` supports atomic `DDL`, ensuring that the `DDL` operations
    are fully committed or rolled back, even if the server is halted while performing
    the operation. Now `DDL` logs can be written to the `mysql.innodb_ddl_log` configuration
    for the data dictionary tables, enabling the `innodb_print_ddl_logs` configuration
    option to print `DDL` recovery logs to `stderr`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL 8，`InnoDB`支持原子`DDL`，确保即使在执行操作时服务器停止，`DDL`操作也会完全提交或回滚。现在`DDL`日志可以写入`mysql.innodb_ddl_log`配置以用于数据字典表，并启用`innodb_print_ddl_logs`配置选项以将`DDL`恢复日志打印到`stderr`。
- en: Multiversioning
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多版本
- en: InnoDB is a multiversioned storage engine. That means it has the capability
    to keep old versions of changed row data information and support transnational
    features, such as concurrency and roll back. The information is stored in the
    tablespace, data structure, and named rollback segment.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: InnoDB是一种多版本存储引擎。这意味着它具有保留更改的旧版本行数据信息并支持事务特性（如并发性和回滚）的能力。信息存储在表空间、数据结构和命名回滚段中。
- en: 'Internally, for each of the rows getting stored in the database, `InnoDB` creates
    three fields: 6-byte `DB_TRX_ID`, 7-byte `DB_ROLL_PTR` (called a roll pointer)
    and 6-byte `DB_ROW_ID`. With these fields, `InnoDB` creates clustered indexes
    to keep the information of changed row data in the database.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，对于存储在数据库中的每一行，`InnoDB`创建三个字段：6字节的`DB_TRX_ID`，7字节的`DB_ROLL_PTR`（称为回滚指针）和6字节的`DB_ROW_ID`。有了这些字段，`InnoDB`创建了聚集索引，以保留数据库中更改的行数据信息。
- en: Architecture
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: 'In this section, we will give a brief introduction to the major components
    of the `InnoDB` architecture:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍`InnoDB`架构的主要组件：
- en: '**Buffer pool**: Area of main memory where tables and indexing data are cached
    to speed up processing'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲池：主内存区域，用于缓存表和索引数据以加快处理速度
- en: '**Change buffer**: Special data structure where changes to secondary index
    pages are cached'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改缓冲区：缓存对辅助索引页面的更改的特殊数据结构
- en: '**Adaptive Hash Index**: Enables in-memory database, such as lookups, operations
    on systems with balanced and appropriate combinations of the buffer pool''s memory
    and workload'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自适应哈希索引：使内存数据库能够在具有平衡和适当组合的缓冲池内存和工作负载的系统上进行查找和操作
- en: '**Redo log buffer**: Memory area where data is held to be written on the redo
    log'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重做日志缓冲区：存储数据以便写入重做日志的内存区域
- en: '**System tablespace**: Storage area where the `doublewrite` buffer, undo logs,
    and the change buffer, prior to the MySQL 8 data dictionary information, are stored'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统表空间：存储`doublewrite`缓冲区、撤销日志和更改缓冲区的存储区域，在MySQL 8数据字典信息之前存储
- en: '**Doublewrite buffer**: Storage area in the system tablespace where pages are
    written that are flushed from the buffer pool'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双写缓冲区：系统表空间中的存储区域，用于写入从缓冲池刷新的页面
- en: '**Undo logs**: Collection of undo log records which are associated with any
    single transaction'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**撤销日志**：与任何单个事务相关联的撤销日志记录的集合'
- en: '**File-per-table tablespaces**: Single-table tablespace added to its own data
    file'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个表的表空间**：添加到自己的数据文件的单表表空间'
- en: '**General tablespaces**: Shared tablespace created by the `CREATE TABLESPACE`
    syntax'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用表空间**：使用`CREATE TABLESPACE`语法创建的共享表空间'
- en: '**Undo tablespace**: One or more files with undo logs'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**撤销表空间**：一个或多个带有撤销日志的文件'
- en: '**Temporary tablespace**: Utilized for non-compressed temporary tables and
    their related objects'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**临时表空间**：用于非压缩临时表及其相关对象'
- en: '**Redo log**:Disk-based data structure used for correcting incomplete transaction
    data during crash recovery'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重做日志**：用于在崩溃恢复期间纠正不完整事务数据的基于磁盘的数据结构'
- en: With MySQL 8, the `InnoDB` storage engine utilizes the global MySQL data dictionary
    and not its own storage engine-specific data dictionary.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中，`InnoDB`存储引擎利用全局MySQL数据字典，而不是其自己的存储引擎特定数据字典。
- en: Locking and transaction model
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁定和事务模型
- en: 'This section gives brief information on locking used by `InnoDB` and the transaction
    model implemented by `InnoDB`. `InnoDB` uses the following different lock types:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍了`InnoDB`使用的锁定和`InnoDB`实现的事务模型。`InnoDB`使用以下不同类型的锁定：
- en: '**Shared and exclusive locks**: Two types of standard row-level locking are
    implemented. A shared lock allows you to read a row to different transactions;
    an exclusive lock holds to update or delete a row and does not allow you to even
    read the row to any different transaction.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享和排他锁**：实现了两种标准的行级锁定。共享锁允许您将一行读取到不同的事务中；排他锁用于更新或删除一行，并且不允许您将该行读取到任何不同的事务中。'
- en: '**Intention locks**: Table level locks to support multiple granularity locking
    by which `InnoDB` practically maintains the coexistence of row-level locks and
    entire table-level locks.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**意向锁**：表级锁，支持多粒度锁定，`InnoDB`实际上维护了行级锁和整个表级锁的共存。'
- en: '**Record locks**: Index record lock that prevents any other transaction to
    insert, update, or delete the record.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录锁**：索引记录锁，防止任何其他事务插入、更新或删除记录。'
- en: '**Gap locks**: Lock applies on a gap (range) between index records.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间隙锁**：锁定适用于索引记录之间的间隙（范围）。'
- en: '**Next-key locks**: Combination of index record lock plus gap lock on the gap
    for the preceding index record.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下一个键锁**：在前一个索引记录的间隙上组合索引记录锁和间隙锁。'
- en: '**Insert intention locks**: Type of gap lock which is set by `INSERT` operation
    just before the row insertion.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插入意向锁**：`INSERT`操作在插入行之前设置的一种间隙锁类型。'
- en: '**AUTO-INC locks**: Special table-level lock for inserting records with the `AUTO_INCREMENT`
    column.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AUTO-INC锁**：用于插入具有`AUTO_INCREMENT`列的记录的特殊表级锁。'
- en: '**Predicate locks for spatial indexes**: Lock on spatial index, enabling support
    for isolation levels in tables with spatial indexes.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间索引的谓词锁**：对空间索引的锁定，使支持具有空间索引的表的隔离级别'
- en: The goal of following the transaction model is to unite traditional two-phase
    locking with the best of the multiversioning database properties. Row-level locking
    is performed and queries are run with nonlocking consistent reads. `InnoDB` takes
    care of transaction isolation levels, autocommit, rollback and commit, and locking
    reads. It allows nonlocking consistent reads as applicable. `InnoDB` also uses
    a mechanism to avoid phantom rows and a configuration to support automatic deadlock
    detection.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循事务模型的目标是将传统的两阶段锁定与多版本数据库属性的最佳部分结合起来。执行行级锁定，并使用非锁定一致性读取运行查询。`InnoDB`负责事务隔离级别、自动提交、回滚和提交以及锁定读取。它允许根据需要进行非锁定一致性读取。`InnoDB`还使用一种机制来避免幻影行，并配置支持自动死锁检测。
- en: Configuration
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: 'This section provides brief information about the configuration and procedures
    used in the `InnoDB` initialization startup for different `InnoDB` components:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了有关`InnoDB`初始化启动中使用的配置和程序的简要信息，适用于不同的`InnoDB`组件：
- en: '`InnoDB` **startup configuration**: This involves specifying startup options,
    log file configuration, storage considerations, system tablespace data files,
    undo tablespaces, temporary tablespaces, page sizes, and memory configurations'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **启动配置**：包括指定启动选项、日志文件配置、存储考虑事项、系统表空间数据文件、撤销表空间、临时表空间、页面大小和内存配置'
- en: '`InnoDB` **for read-only operation**: This enables a MySQL instance for read-only
    operation, using the `--innodb-read-only=1` option, which is very helpful when
    using read-only media such as `CD` or `DVD`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于只读操作的** `InnoDB`：使用`--innodb-read-only=1`选项，可以将MySQL实例配置为只读操作，当使用只读介质（如`CD`或`DVD`）时非常有用'
- en: '`InnoDB` **buffer pool configuration**: Configures the buffer pool size, multiple
    instances, flushing, and monitoring'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **缓冲池配置**：配置缓冲池大小、多个实例、刷新和监控'
- en: '`InnoDB` **change buffering**: Configures the change buffer options for secondary
    index caching'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **更改缓冲**：为辅助索引缓存配置更改缓冲选项'
- en: '**Thread concurrency for** `InnoDB`: Concurrent thread count limit configuration'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`InnoDB`的线程并发性**：并发线程计数限制配置'
- en: '**The number of background** `InnoDB` **I/O threads:** Configures the number
    of background threads servicing I/O read/write operations on data pages'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台** `InnoDB` **I/O线程的数量**：配置后台线程的数量，用于对数据页进行I/O读/写操作'
- en: '**Using asynchronous I/O on Linux**: A configuration to use native asynchronous
    I/O subsytems on Linux'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上使用异步I/O：在Linux上使用本机异步I/O子系统的配置
- en: '**The** `InnoDB` **master thread I/O rate**: Configures overall I/O capacity
    for a master thread working in the background, responsible for multiple tasks'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`InnoDB`主线程I/O速率**：配置后台工作的主线程的整体I/O容量，负责多个任务'
- en: '**Spin lock polling**: Configures a spin wait delay period to control the maximum
    delay for frequent polling between multiple threads requesting to acquire `mutexes`
    or `rw-locks`'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自旋锁轮询**：配置自旋等待延迟周期，以控制多个线程之间频繁轮询以获取`mutexes`或`rw-locks`的最大延迟'
- en: '`InnoDB` **purge scheduling**: Configures purge threads for applicable scalability'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **清除调度**：为适用的可伸缩性配置清除线程。'
- en: '**Optimizer statistics for** `InnoDB`: Configures persistent and non-persistent
    optimizer statistics parameters'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`InnoDB`的优化器统计信息**：配置持久和非持久的优化器统计参数。'
- en: '**The merge threshold for index pages**: Configures `MERGE_THRESHOLD` to reduce
    merge-split behavior'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引页的合并阈值**：配置`MERGE_THRESHOLD`以减少合并分裂行为。'
- en: '**Enabling automatic configuration for** **a dedicated MySQL Server**: Configures
    the dedicated server option `--innodb_dedicated_server` , which makes automatic
    configuration for the buffer pool size and log file size'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用专用MySQL服务器的自动配置**：配置专用服务器选项`--innodb_dedicated_server`，以自动配置缓冲池大小和日志文件大小。'
- en: Tablespaces
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表空间
- en: 'This section provides brief information on tablespaces and operations related
    to tablespaces performed in `InnoDB`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了关于表空间和在`InnoDB`中执行的表空间相关操作的简要信息：
- en: '**Resizing the `InnoDB` system tablespace**: Increasing and decreasing the
    size of the system tablespace with configuration while starting/restarting the
    MySQL server.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整`InnoDB`系统表空间的大小**：在启动/重新启动MySQL服务器时，增加和减少系统表空间的大小。'
- en: 'C**hanging the number or size of `InnoDB` redo log files**: Configures `innodb_log_files_in_group`
    and `innodb_log_file_size` values respectively in `my.cnf` prior to starting/restarting
    the MySQL server.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改`InnoDB`重做日志文件的数量或大小**：在启动/重新启动MySQL服务器之前，分别配置`my.cnf`中的`innodb_log_files_in_group`和`innodb_log_file_size`值。'
- en: '**Using raw disk partitions for the system tablespace**: Configures the raw
    disk partitions to be used as data files in the system tablespace.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用原始磁盘分区作为系统表空间的数据文件**：配置原始磁盘分区以用作系统表空间中的数据文件。'
- en: '`InnoDB` **File-Per-Table tablespaces**: The feature `innodb_file_per_table`
    enabled by default which ensures that each of the tables and associated indexes
    are stored in a separate `.idb` data file.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **每表表空间**：默认启用了`innodb_file_per_table`功能，确保每个表和相关索引都存储在单独的`.idb`数据文件中。'
- en: '**Configuring undo tablespaces**: A configuration to set the number of undo
    tablespaces where an undo log resides.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置撤消表空间**：配置设置撤消表空间的数量，其中撤消日志驻留。'
- en: '**Truncating undo tablespaces**: Configures `innodb_undo_log_truncate` to enable
    truncating undo tablespace files exceeding the maximum limit defined in `innodb_max_undo_log_size`.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**截断撤消表空间**：配置`innodb_undo_log_truncate`以启用截断超过`innodb_max_undo_log_size`定义的最大限制的撤消表空间文件。'
- en: '`InnoDB` **general tablespaces**: A shared tablespace created using the `CREATE
    TABLESPACE` statement. It is similar to a system tablespace.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **通用表空间**：使用`CREATE TABLESPACE`语句创建的共享表空间。它类似于系统表空间。'
- en: '`InnoDB` **tablespace encryption**: Support for data encryption in tables stored
    as file-per-table tablespaces which use the `AES` block-based encryption algorithm.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **表空间加密**：支持以文件为基础的表空间存储的表的数据加密，使用`AES`分块加密算法。'
- en: Tables and indexes
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表和索引
- en: 'This section provides brief information on `InnoDB` tables and indexes and
    their related operations:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了关于`InnoDB`表和索引以及它们相关操作的简要信息：
- en: '**Creating `InnoDB` tables**: Creates tables using the `CREATE TABLE` statement.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建`InnoDB`表**：使用`CREATE TABLE`语句创建表。'
- en: '**The physical row structure of an** `InnoDB` **table**: Depends on the specified
    row format during the table creation. If not specified, uses the default, `DYNAMIC`.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`InnoDB`表的物理行结构**：取决于表创建时指定的行格式。如果未指定，则使用默认的`DYNAMIC`。'
- en: '**Moving or copying `InnoDB` tables**: Different techniques for moving or copying
    some or all `InnoDB` tables to a different instance or server.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动或复制`InnoDB`表**：将一些或所有`InnoDB`表移动或复制到不同的实例或服务器的不同技术。'
- en: '**Converting tables from `MyISAM` to `InnoDB`**: Considers guidelines and tips
    while converting `MyISAM` tables to `InnoDB` tables, except a partitioned table,
    which is not supported with MySQL 8.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将表从`MyISAM`转换为`InnoDB`**：在将`MyISAM`表转换为`InnoDB`表时考虑指南和提示，但不支持分区表，这在MySQL
    8中不受支持。'
- en: '`AUTO_INCREMENT` **handling in** `InnoDB`: Configures the mode for `AUTO_INCREMENT`
    with the `innodb_autoinc_lock_mode` parameter as 0,1, and 2 for traditional, consecutive,
    or interleaved, respectively, where interleaved is the default mode from MySQL
    8.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`中的`AUTO_INCREMENT` **处理**：使用`innodb_autoinc_lock_mode`参数配置`AUTO_INCREMENT`的模式为0、1和2，分别为传统、连续或交错，其中交错是MySQL
    8的默认模式。'
- en: '**Limits on `InnoDB` tables**: A table can contain a maximum of 1,017 columns,
    a maximum of 64 secondary indexes, and several other limits defined based on the
    page size, table size, and data-row formats.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`InnoDB`表的限制**：表最多可以包含1,017列，最多可以包含64个次要索引，以及基于页面大小、表大小和数据行格式定义的其他限制。'
- en: '**Clustered and secondary indexes**: `InnoDB` uses a special index called a
    clustered index. The rest of the indexes are called secondary indexes.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚集和次要索引**：`InnoDB`使用称为聚集索引的特殊索引。其余的索引称为次要索引。'
- en: '**The physical structure of `InnoDB` index**: For spatial indexes, `InnoDB`
    uses the `R-tree` data structure, a specialized data structure. For rest of the
    indexes, the `B-tree` data structure is used.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`InnoDB`索引的物理结构**：对于空间索引，`InnoDB`使用专门的数据结构`R-tree`。对于其他索引，使用`B-tree`数据结构。'
- en: '**Sorted index builds**: Bulk load when creating or rebuilding indexes for
    inserts. They are known as sorted index builds, and are not supported in spatial
    indexes.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序索引构建**：在创建或重建索引进行插入时进行批量加载。它们被称为排序索引构建，并且不支持空间索引。'
- en: '`InnoDB` `FULLTEXT` **indexes**: Created for text-based columns - `char`, `varchar`,
    or `text` type. They help to speed up queries and searching operations.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` `FULLTEXT` **索引**：为基于文本的列（`char`，`varchar`或`text`类型）创建。它们有助于加快查询和搜索操作的速度。'
- en: INFORMATION_SCHEMA tables
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: INFORMATION_SCHEMA表
- en: This section provides usage examples for `InnoDB` `INFORMATION_SCHEMA` tables
    and related information.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了`InnoDB` `INFORMATION_SCHEMA`表的用法示例和相关信息。
- en: It provides metadata, statistics, and status information about the different
    aspects of the `InnoDB` storage engine.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了有关`InnoDB`存储引擎不同方面的元数据、统计和状态信息。
- en: 'The list of `InnoDB` `INFORMATION_SCHEMA` tables can be retrieved by executing
    the `SHOW TABLES` statement on the `INFORMATION_SCHEMA` database:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在`INFORMATION_SCHEMA`数据库上执行`SHOW TABLES`语句来检索`InnoDB` `INFORMATION_SCHEMA`表的列表：
- en: '[PRE5]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Tables about compression**: The number of compression operations and the
    amount of time spent for compression-related information provided in the `INNODB_CMP` and `INNODB_CMP_RESET`
    tables. Memory allocation during compression is provided in the `INNODB_CMPMEM`
    and `INNODB_CMPMEM_RESET` tables.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于压缩的表**：`INNODB_CMP`和`INNODB_CMP_RESET`表提供了有关压缩操作次数和压缩相关信息所花费的时间。在压缩期间的内存分配在`INNODB_CMPMEM`和`INNODB_CMPMEM_RESET`表中提供。'
- en: '**Transaction and locking information**: `INNODB_TRX` has information on transactions
    currently executing and the `data_locks` and `data_lock_waits` tables from the `Performance
    Schema` table give information about the locks.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务和锁信息**：`INNODB_TRX`包含当前执行的事务信息，`Performance Schema`表中的`data_locks`和`data_lock_waits`表提供有关锁的信息。'
- en: '**Schema object tables**: This provides metadata information about the `InnoDB`
    schema objects.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式对象表**：提供有关`InnoDB`模式对象的元数据信息。'
- en: '`FULLTEXT` **index tables**: This provides metadata information about `FULLTEXT`
    indexes.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FULLTEXT` **索引表**：提供有关`FULLTEXT`索引的元数据信息。'
- en: '**Buffer pool tables**: This provides status information and metadata about
    the pages in the buffer pool.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲池表**：提供有关缓冲池中页面的状态信息和元数据。'
- en: '**Metrics table**: This provides performance and resource related information.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标表**：提供性能和资源相关信息。'
- en: '**Temporary table information table**: This provides metadata information about
    all users and system-created temporary tables currently active in an `InnoDB`
    instance.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**临时表信息表**：提供有关当前在`InnoDB`实例中活动的所有用户和系统创建的临时表的元数据信息。'
- en: '**Retrieving `InnoDB` tablespace metadata**: This provides metadata information
    about all the types of tablespaces in an `InnoDB` instance.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检索`InnoDB`表空间元数据**：提供有关`InnoDB`实例中所有类型的表空间的元数据信息。'
- en: A new view, `INNODB_TABLESPACES_BRIEF`, has been added to provide the name,
    path, flag, space, and space type data.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加了一个新视图`INNODB_TABLESPACES_BRIEF`，用于提供名称、路径、标志、空间和空间类型数据。
- en: A new table, `INNODB_CACHED_INDEXES`, has been added to provide the number of
    index pages cached in the buffer pool for each index.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加了一个新表`INNODB_CACHED_INDEXES`，用于提供缓冲池中每个索引的索引页数。
- en: Memcached plugin
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Memcached插件
- en: MySQL 8 provides you with the `InnoDB` memcached plugin named `daemon_memcached`,
    which can help us in managing data easily. It will automatically store and retrieve
    data from `InnoDB` tables and provide `get`, `set`, and `incr` operations that
    remove performance overhead by skipping SQL parsing, which speeds up data operations.
    The `memcached` plugin uses the integrated `memcached` daemon that automatically
    retrieves and stores data from and to the `InnoDB` table, enabling the MySQL server
    to send data quickly to the `key-value` store.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8为您提供了名为`daemon_memcached`的`InnoDB` memcached插件，可以帮助我们轻松管理数据。它将自动从`InnoDB`表中存储和检索数据，并提供`get`、`set`和`incr`操作，通过跳过SQL解析来消除性能开销，从而加快数据操作。`memcached`插件使用集成的`memcached`守护程序，自动从`InnoDB`表中检索和存储数据，使MySQL服务器能够快速将数据发送到`键值`存储。
- en: 'The following are the major benefits of using the `InnoDB memcached` plugin:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`InnoDB memcached`插件的主要好处如下：
- en: Accesses the `InnoDB` storage engine directly, reducing parsing and planning
    SQL overhead
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接访问`InnoDB`存储引擎，减少解析和规划SQL开销
- en: '`memcached` uses the same process space as the MySQL server, reducing network
    overhead'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memcached`使用与MySQL服务器相同的进程空间，减少了网络开销'
- en: Data written or requested in the `memcached` protocol is transparently written
    or queried from `InnoDB` tables, reducing having to go through SQL layer overhead
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`memcached`协议编写或请求的数据会透明地从`InnoDB`表中写入或查询，减少了必须经过SQL层开销的情况
- en: Simplifies application logic by automatically transfering between disk and memory
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过自动在磁盘和内存之间传输，简化应用逻辑
- en: The MySQL database stores data so that it is protected against corruption, crashes,
    or outages
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL数据库存储数据，以防止损坏、崩溃或中断
- en: Ensures high availability using the `daemon_memcached` plugin on the master
    server and MySQL replication in combination
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主服务器上使用`daemon_memcached`插件和MySQL复制结合，确保高可用性
- en: Repeated data requests are cached using the `InnoDB` buffer pool, providing
    high speed processing
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`InnoDB`缓冲池缓存重复的数据请求，提供高速处理
- en: As the data is stored in the `InnoDB` tables, the data consistency is enforced
    automatically
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于数据存储在`InnoDB`表中，数据一致性会自动执行
- en: The `InnoDB memcached` plugin supports multiple get operations (fetching multiple
    key/value pairs in a single `memcached` query) and range queries.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB memcached`插件支持多个获取操作（在单个`memcached`查询中获取多个键/值对）和范围查询。'
- en: Creating a custom storage engine
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义存储引擎
- en: MySQL AB introduced pluggable storage engine architecture in MySQL 5.1 and all
    later versions, including MySQL 8, have taken advantage of the flexible storage
    engine architecture.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL AB在MySQL 5.1中引入了可插拔存储引擎架构，包括MySQL 8在内的所有后续版本都利用了灵活的存储引擎架构。
- en: The storage engine pluggable architecture provides the capability to create
    and add new storage engines without recompiling the server, adding directly to
    a running MySQL server. The architecture makes it very easy to develop and deploy
    new storage engines to MySQL 8.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎可插拔架构提供了在不重新编译服务器的情况下创建和添加新存储引擎的能力，直接添加到运行中的MySQL服务器。这种架构使得开发和部署新的存储引擎到MySQL
    8变得非常容易。
- en: When developing new storage engine, it is required to take care of all the components
    that work for and with storage engines. These include installation handlers, operations
    on table such as creating, opening, and closing, `DML`, indexing, and so on.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发新的存储引擎时，需要注意为存储引擎工作的所有组件。这些包括安装处理程序、对表的操作（如创建、打开和关闭）、`DML`、索引等。
- en: In this section, we will cover how you can start developing a new storage engine
    on a high-level basis with reference to the MySQL documentation provided in the
    development community. The creation of a custom storage engine requires a working
    knowledge of development with `C` and `CPP`, and compilation with `cmake` and
    `Visual Studio`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何可以在高层次基础上开始开发新的存储引擎，参考MySQL开发社区提供的文档。创建自定义存储引擎需要具备使用`C`和`CPP`进行开发的工作知识，以及使用`cmake`和`Visual
    Studio`进行编译。
- en: Creating storage engine source files
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存储引擎源文件
- en: The easiest way to implement a new storage engine is to begin by copying and
    modifying the `EXAMPLE` storage engine. The files `ha_example.cc` and `ha_example.h` can
    be found in the `storage/example` directory of the MySQL source distribution.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 实现新存储引擎的最简单方法是通过复制和修改`EXAMPLE`存储引擎开始。文件`ha_example.cc`和`ha_example.h`可以在MySQL源分发的`storage/example`目录中找到。
- en: When copying the files, change the names from `ha_example.cc` and `ha_example.h` to
    something appropriate to your storage engine, such as `ha_foo.cc` and `ha_foo.h`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制文件时，将名称从`ha_example.cc`和`ha_example.h`更改为适合您的存储引擎的名称，例如`ha_foo.cc`和`ha_foo.h`。
- en: After you have copied and renamed the files, you must replace all instances
    of `EXAMPLE` and `example` with the name of your storage engine.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制和重命名文件后，必须将所有`EXAMPLE`和`example`的实例替换为您的存储引擎的名称。
- en: Adding engine-specific variables and parameters
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加特定于引擎的变量和参数
- en: A plugin can implement status and system variables and in this section we have
    covered the changes to variables and parameters with appropriate values and data
    types.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以实现状态和系统变量，在本节中我们已经介绍了变量和参数的更改，以及适当的值和数据类型。
- en: The server plugin interface enables plugins to expose status and system variables
    using the `status_vars` and `system_vars` members of the general plugin descriptor.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器插件接口使插件能够使用通用插件描述符的`status_vars`和`system_vars`成员公开状态和系统变量。
- en: '`status_vars` is a member of the general plugin descriptor. If the value is
    not 0, then it points to an array of the `st_mysql_show_var` structure where each
    of them describe one status variable followed by a structure with all the members
    set to 0\. The definition for the `st_mysql_show_var` structure is as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`status_vars`是通用插件描述符的成员。如果值不为0，则指向一个`st_mysql_show_var`结构的数组，其中每个结构描述一个状态变量，后跟一个所有成员都设置为0的结构。`st_mysql_show_var`结构的定义如下：'
- en: '[PRE6]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the plugin is installed, the plugin name and the name value are joined
    with an underscore to form the name displayed by the `SHOW STATUS` statement.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装后，插件名称和名称值用下划线连接，以形成`SHOW STATUS`语句显示的名称。
- en: 'The following list shows the permissible status variable type values and what
    the corresponding variable should be:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了允许的状态变量类型值以及相应的变量应该是什么：
- en: '`SHOW_BOOL`: This is a pointer to the `boolean` variable'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_BOOL`：这是一个指向`boolean`变量的指针'
- en: '`SHOW_INT`: This is a pointer to the `integer` variable'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_INT`：这是一个指向`integer`变量的指针'
- en: '`SHOW_LONG`: This is a pointer to the long `integer` variable'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_LONG`：这是一个指向长整型变量的指针'
- en: '`SHOW_LONGLONG`: This is a pointer to the `longlong integer` variable'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_LONGLONG`：这是一个指向`longlong integer`变量的指针'
- en: '`SHOW_CHAR`: This is a `String` index'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_CHAR`：这是一个`String`索引'
- en: '`SHOW_CHAR_PTR`: This is a pointer to `String` indexes'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_CHAR_PTR`：这是一个指向`String`索引的指针'
- en: '`SHOW_ARRAY`: This is a pointer to another `st_mysql_show_var array`'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_ARRAY`：这是一个指向另一个`st_mysql_show_var array`的指针'
- en: '`SHOW_FUNC`: This is a pointer to a function'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_FUNC`：这是一个指向函数的指针'
- en: '`SHOW_DOUBLE`: This is a pointer to a `double`'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_DOUBLE`：这是一个指向`double`的指针'
- en: All session and global system variables have to be published to `mysqld` before
    they are used. This is precisely done by constructing a `NULL` terminated array
    of the variables and linking to it in the plugin public interface.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 所有会话和全局系统变量在使用之前都必须发布到`mysqld`。这是通过构建一个变量的`NULL`终止数组，并在插件公共接口中链接到它来实现的。
- en: All mutable and plugin system variables are stored internally in the `HASH` structure.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可变的和插件系统变量都存储在`HASH`结构中。
- en: The display of the server command-line help text is generated by compiling `DYNAMIC_ARRAY` of
    all the relevant variables, sorting and iterating through them to display each
    option.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器命令行帮助文本的显示是通过编译所有相关变量的`DYNAMIC_ARRAY`，对其进行排序和迭代来显示每个选项。
- en: During the plugin installation process, the server processes command-line options,
    immediately after the plugin has been successfully loaded but the plugin initialization
    function is yet to be called.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在插件安装过程中，服务器处理命令行选项，插件成功加载后立即进行处理，但尚未调用插件初始化函数。
- en: Plugins loaded at `runtime` do not benefit from any configuration options and
    must have usable defaults. Once they are installed, they are loaded at `mysqld`
    initialization time and configuration options can be set at the command line or
    within `my.cnf`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在`runtime`加载的插件不受任何配置选项的影响，必须具有可用的默认值。一旦安装，它们将在`mysqld`初始化时加载，并且可以在命令行或`my.cnf`中设置配置选项。
- en: The `thd` parameter should be considered as read-only in plugins.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 插件中的`thd`参数应被视为只读。
- en: Creating the handlerton
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建handlerton
- en: The handlerton (the short form of handler singleton) defines the storage engine.
    It contains method pointers to methods applied to the storage engine as a whole,
    instead of methods that work on a per-table basis. Examples of such methods include
    transaction methods which handle commits and rollbacks operations.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: handlerton（处理程序单例的简称）定义了存储引擎。它包含指向应用于整个存储引擎的方法的方法指针，而不是在每个表上工作的方法。此类方法的示例包括处理提交和回滚操作的事务方法。
- en: 'An example from the `EXAMPLE` storage engine is as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXAMPLE`存储引擎的示例如下：'
- en: '[PRE7]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There are 30 `handlerton` elements, only few of which are mandatory.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 有30个`handlerton`元素，其中只有少数是强制性的。
- en: Handling handler installation
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理处理程序安装
- en: This is the first method call in your storage engine required for creating a
    new handler instance.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建新处理程序实例所需的存储引擎中的第一个方法调用。
- en: 'Before the `handlerton` is defined in the source file, there must be the instantiation
    method defined in method header. The following is an example from the `CSV` engine
    displaying the instantiation method:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文件中定义`handlerton`之前，必须在方法头中定义实例化方法。以下是`CSV`引擎显示实例化方法的示例：
- en: '[PRE8]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see in the preceding example, the method accepts a pointer to the
    table. The handler is responsible for managing and returning the handler object. After
    the method header definition, the method is named with the method pointer in the
    `create()` `handlerton` element. This identifies the method as being responsible
    for generating new handler instances when requested.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，该方法接受一个指向表的指针。处理程序负责管理和返回处理程序对象。在方法头定义之后，使用方法指针在`create()` `handlerton`元素中命名方法。这将标识该方法负责在请求时生成新的处理程序实例。
- en: 'The instantiation method for the `MyISAM` storage engine is shown in the following
    example:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了`MyISAM`存储引擎的实例化方法：
- en: '[PRE9]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Defining filename extensions
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义文件扩展名
- en: Storage engines must provide a list of extensions used by the storage engine
    associated to a given table, its data, and indexes to the MySQL server.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎必须提供与给定表及其数据和索引相关的存储引擎使用的扩展名列表给MySQL服务器。
- en: 'Extensions should be given in the form of a null-terminated string array and
    the same is returned when the [`custom-engine.html#custom-engine-api-reference-bas_ext
    bas_ext()`] method is called, as shown in the following block:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展应以空终止的字符串数组的形式给出，并且在调用[`custom-engine.html#custom-engine-api-reference-bas_ext
    bas_ext()`]方法时返回相同的内容，如下面的块所示：
- en: '[PRE10]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By providing extension information, you can also skip implementing `DROP TABLE` functionality,
    as the MySQL server will implement the same by closing the table and deleting
    all files with the extensions specified.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供扩展信息，您还可以跳过实现`DROP TABLE`功能，因为MySQL服务器将通过关闭表并删除指定扩展名的所有文件来实现相同的功能。
- en: Creating tables
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表
- en: 'After handler instantiation, the creation of the table method should be followed.
    The storage engine must implement the [`custom-engine.html#custom-engine-api-reference-create
    create()`] method, as shown in the following block:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理程序实例化之后，应该遵循创建表方法。存储引擎必须实现[`custom-engine.html#custom-engine-api-reference-create
    create()`]方法，如下面的块所示：
- en: '[PRE11]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding displayed method should create all the necessary files but it
    does not open the table. The MySQL server will call separately for the table to
    be opened.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 前面显示的方法应该创建所有必要的文件，但不会打开表。MySQL服务器将单独调用打开表。
- en: The `*name` parameter is for passing the name of the table and the `*form` parameter
    is for passing the `TABLE` structure. The table structure defines the table and
    matches the contents of `tablename.frm`. Storage engines must not modify the `tablename.frm` file
    as that will result in errors or unpredictable issues.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`*name`参数用于传递表的名称，`*form`参数用于传递`TABLE`结构。表结构定义了表，并匹配`tablename.frm`的内容。存储引擎不得修改`tablename.frm`文件，否则将导致错误或不可预测的问题。'
- en: 'The `*info` parameter is structure with information on the `CREATE TABLE` statement.
    It is used to create the table and the structure is defined in the `handler.h`
    file. The following is the structure for reference:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`*info`参数是包含有关`CREATE TABLE`语句的信息的结构。它用于创建表，结构在`handler.h`文件中定义。以下是参考结构：'
- en: '[PRE12]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Storage engines can ignore the contents of `*info` and `*form` because the creation
    and the initialization of the data files is only really required when used by
    the storage engine.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎可以忽略`*info`和`*form`的内容，因为只有在存储引擎使用时才真正需要创建和初始化数据文件。
- en: Opening a table
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开表
- en: 'Prior to any read or write operations performed on any table, the MySQL server
    calls the [`custom-engine.html#custom-engine-api-reference-open handler::open()`]
    method to open the table index and data files:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在对任何表执行任何读取或写入操作之前，MySQL服务器调用[`custom-engine.html#custom-engine-api-reference-open
    handler::open()`]方法来打开表索引和数据文件：
- en: '[PRE13]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first parameter is for the name of the table being opened. The second parameter
    is for the file operation to take. The values are defined in `handler.h`: `O_RDONLY
    - Open read only`, `O_RDWR - Open read/write`.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是要打开的表的名称。第二个参数是要执行的文件操作。这些值在`handler.h`中定义：`O_RDONLY - 只读打开`，`O_RDWR -
    读/写打开`。
- en: 'The final option dictates if the handler should check for a lock on the table
    before opening. The following options are available to choose from:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 最终选项决定处理程序在打开之前是否应检查表上的锁定。可以选择以下选项：
- en: '[PRE14]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The typical storage engine will implement some form of shared access control
    in order to prevent file corruption in a multi-threaded environment. For example,
    see the `get_share()` and `free_share()` methods of `sql/example/ha_tina.cc` for implementing
    file locking.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的存储引擎将实现某种形式的共享访问控制，以防止在多线程环境中发生文件损坏。例如，查看`sql/example/ha_tina.cc`中的`get_share()`和`free_share()`方法来实现文件锁定。
- en: Implementing basic table scanning
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现基本表扫描
- en: The most basic storage engines implement a read-only level of table scanning
    and they might be used to support SQL queries for requesting information from
    the logs and other data files that are populated outside of MySQL.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的存储引擎实现了只读级别的表扫描，并且可能用于支持SQL查询，以请求从MySQL之外填充的日志和其他数据文件中获取信息。
- en: 'The implementation of the methods is the first step towards the creation of
    advanced storage engines. The following shows the method calls made during a nine-row
    table scan of the `CSV` engine:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的实现是创建高级存储引擎的第一步。以下显示了在`CSV`引擎的九行表扫描期间进行的方法调用：
- en: '[PRE15]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following methods can be implemented to take care of specific operations:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 可以实施以下方法来处理特定操作：
- en: '**Implementing the** `store_lock()`: This method can modify the lock level,
    ignoring or adding locks for many tables'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现** `store_lock()`: 此方法可以修改锁级别，忽略或为多个表添加锁'
- en: '**Implementing the** `external_lock()`: This method is called when the `LOCK
    TABLES` statement is issued'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现** `external_lock()`: 当发出`LOCK TABLES`语句时调用此方法'
- en: '**Implementing the** `rnd_init()`: This method is used in table scanning for
    resetting counters and pointers at the start of a table'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现** `rnd_init()`: 此方法用于在表扫描中在表的开始处重置计数器和指针'
- en: '**Implementing the** `info(uinf flag)`: This method is used to provide extra
    table information to the optimizer'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现** `info(uinf flag)`: 此方法用于向优化器提供额外的表信息'
- en: '**Implementing the** `extra()`: This method is used to provide extra hints
    information to the storage engine'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现** `extra()`: 此方法用于向存储引擎提供额外的提示信息'
- en: '**Implementing the** `rnd_next()`: This method is called on each row of scanning
    until `EOF` is reached or the search condition is satisfied'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现** `rnd_next()`: 此方法在扫描每一行直到达到`EOF`或满足搜索条件时调用'
- en: Closing a table
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关闭表
- en: When the MySQL server has completed all the requested operations with the table,
    it will call the `custom-engine.html#custom-engine-api-reference-close close()` method.
    It will close the file pointers and release all the related resources.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 当MySQL服务器完成与表的所有请求操作后，它将调用`custom-engine.html#custom-engine-api-reference-close
    close()`方法。它将关闭文件指针并释放所有相关资源。
- en: 'Storage engines using the shared access methods are seen in the `CSV` engine. Other
    example engines must remove the same from the shared structure, as displayed here:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 使用共享访问方法的存储引擎在`CSV`引擎中可见。其他示例引擎必须从共享结构中删除相同的内容，如下所示：
- en: '[PRE16]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Storage engines use their own share management systems. They should use the
    required methods in order to remove the handler instance from the share for the
    respective table opened in their handler.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎使用自己的共享管理系统。它们应使用所需的方法，以便从其处理程序中打开的相应表的共享中删除处理程序实例。
- en: 'If your storage engine is compiled as a shared object, during loading if you
    get an error such as `undefined symbol: _ZTI7handler`, then make sure you compile
    and link your extension using the same flags as the server uses. The usual reason
    for this error is that LDFLAGS are missing the *-fno-rtti* option.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您的存储引擎编译为共享对象，在加载期间如果出现错误，例如`undefined symbol: _ZTI7handler`，则请确保使用与服务器相同的标志编译和链接您的扩展。此错误的常见原因是LDFLAGS缺少*-fno-rtti*选项。'
- en: Reference for advanced custom storage engine
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级自定义存储引擎的参考
- en: We have gone through the preceding sections in detail, giving high-level information
    for custom storage engine components and the required changes. For implementing
    `INSERT`, `UPDATE`, `DELETE`, indexing, and so on, in a custom storage engine,
    requires a working knowledge of development with `C/CPP` and compilation with
    `cmake` and `Visual Studio`. For advanced development for the custom storage engines,
    please refer to the detailed information given at [https://dev.mysql.com/doc/internals/en/custom-engine.html](https://dev.mysql.com/doc/internals/en/custom-engine.html)
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细介绍了前面的各个部分，为自定义存储引擎组件和所需的更改提供了高级信息。要在自定义存储引擎中实现`INSERT`、`UPDATE`、`DELETE`、索引等，需要具备使用`C/CPP`进行开发以及使用`cmake`和`Visual
    Studio`进行编译的工作知识。有关自定义存储引擎的高级开发，请参阅[https://dev.mysql.com/doc/internals/en/custom-engine.html](https://dev.mysql.com/doc/internals/en/custom-engine.html)中提供的详细信息
- en: Summary
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By now, you have learned the different database engines available in MySQL 8
    and we learned why we should care about storage engines and available storage
    engine options in MySQL 8\. We covered in detail the`InnoDB` storage engine and
    related important features already provided within the `InnoDB` storage engine.
    Now you are practically able to create a custom storage engine as per the system
    requirement and make it pluggable in MySQL 8\. An important aspect was to choose
    a suitable storage engine for your system, which is covered detail.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经了解了MySQL 8中可用的不同数据库引擎，以及我们为什么应该关注存储引擎和MySQL 8中可用的存储引擎选项。我们已经详细介绍了`InnoDB`存储引擎以及`InnoDB`存储引擎中已经提供的重要功能。现在，您实际上可以根据系统要求创建自定义存储引擎，并将其插入到MySQL
    8中。选择适合您系统的存储引擎是一个重要方面，我们已经详细介绍了这一点。
- en: In the next chapter, you will learn about how indexing works in MySQL 8, the
    new features introduced related to indexing, the different types of indexing,
    and how to use indexing on your tables. Along with that, a comparison will also
    be provided along with in-depth knowledge of various ways of index implementation.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解MySQL 8中索引的工作原理，与索引相关的新功能，不同类型的索引以及如何在表中使用索引。除此之外，还将提供比较以及深入了解各种索引实现方式。
