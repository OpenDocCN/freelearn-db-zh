- en: Transactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Performing transactions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行事务
- en: Using savepoints
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用保存点
- en: Isolation levels
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离级别
- en: Locking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the following recipes, we will discuss the transactions and various isolation
    levels in MySQL. Transaction means a set of SQL statements that should succeed
    or fail together. Transactions should also satisfy **Atomicity, Consistency, Isolation,
    and** **Durability**(**ACID**) properties. Take a very basic example of a money
    transfer from account `A` to account `B`. Assume that `A` has $600, `B` has $400,
    and `B` wishes to transfer $100 from `A` to itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将讨论MySQL中的事务和各种隔离级别。事务意味着一组应该一起成功或失败的SQL语句。事务还应该满足**原子性、一致性、隔离性和**
    **持久性**（**ACID**）属性。以一个非常基本的例子，从账户`A`转账到账户`B`。假设`A`有600美元，`B`有400美元，`B`希望从`A`转账100美元给自己。
- en: 'The bank would deduct $100 from `A` and add to `B` using the following SQL
    code (for illustration):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 银行将从`A`扣除100美元，并使用以下SQL代码将其添加到`B`（仅供说明）：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Programmatically, check whether `@a.bal` is greater than or equal to 100:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以编程方式检查`@a.bal`是否大于或等于100：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Programmatically, check whether `@b.bal` is `NOT NULL`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以编程方式检查`@b.bal`是否`NOT NULL`：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These four SQL lines should be part of a single transaction and satisfy the
    following ACID properties:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这四行SQL应该是一个单独的事务，并满足以下ACID属性：
- en: '**Atomicity**: Either all the SQLs should be successful or all should fail.
    There should not be any partial updates. If this property is not obeyed and if
    the database crashes after running two SQLs, then `A` would lose 100.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子性**：要么所有的SQL都应该成功，要么都应该失败。不应该有任何部分更新。如果不遵守这个属性，如果数据库在运行两个SQL后崩溃，那么`A`将会损失100美元。'
- en: '**Consistency**: A transaction must change affected data only in allowed ways.
    In this example, if `account_number` with `B` does not exist, the whole transaction
    should be rolled back.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致性：事务必须以允许的方式仅改变受影响的数据。在这个例子中，如果带有`B`的`account_number`不存在，整个事务应该被回滚。
- en: '**Isolation**: Transactions that occur at the same time (concurrent transactions)
    should not lead the database to an inconsistent state. Each of the transactions
    should be executed as if it were the only transaction in the system. No transaction
    should affect the existence of any other transaction. Suppose `A` transfers all
    of this 600 exactly at the same time while transferring to `B`; both transactions
    should act independently, ensuring the balance before transferring the amount.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**：同时发生的事务（并发事务）不应该导致数据库处于不一致的状态。每个事务应该被执行，就好像它是系统中唯一的事务一样。没有任何事务应该影响任何其他事务的存在。假设`A`在转账给`B`的同时完全转移了这600美元；两个事务应该独立运行，确保在转移金额之前的余额。'
- en: '**Durability**: The data should be persistent on disk and should not be lost
    despite any database or system failure.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**：数据应该持久存在于磁盘上，不应该在任何数据库或系统故障时丢失。'
- en: '`InnoDB`, the default storage engine in MySQL, supports transactions whereas
    MyISAM does not support them.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`是MySQL中的默认存储引擎，支持事务，而MyISAM不支持事务。'
- en: Performing transactions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行事务
- en: 'Create dummy tables and sample data to understand this recipe:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟表和示例数据以理解这个示例：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To start a transaction (set of SQLs), execute the `START TRANSACTION` or `BEGIN` statement:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个事务（一组SQL），执行`START TRANSACTION`或`BEGIN`语句：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then execute all the statements that you wish to be inside a transaction, such
    as transferring 100 from `A` to `B`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行所有希望在事务内部的语句，比如从`A`转账100到`B`：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After making sure that all the SQLs are executed successfully, execute the `COMMIT`
    statement, which will finish the transaction and commit the data:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有SQL都成功执行后，执行`COMMIT`语句，完成事务并提交数据：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you encounter any error in between and wish to abort the transaction, you
    can issue a `ROLLBACK` statement instead of `COMMIT`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在中间遇到任何错误并希望中止事务，可以发出`ROLLBACK`语句而不是`COMMIT`。
- en: 'For example, instead of sending to `B`, if `A` wants to transfer to an account
    that does not exist, you should abort the transaction and refund the amount to
    `A`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`A`想要转账到一个不存在的账户而不是发送给`B`，你应该中止事务并将金额退还给`A`：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Autocommit
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动提交
- en: 'By default, autocommit is `ON`, which means that all individual statements
    are committed as soon as they are executed unless they are in a `BEGIN...COMMIT`
    block. If autocommit is `OFF`, you need to explicitly issue a `COMMIT` statement
    to commit a transaction. To disable it, execute:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，自动提交是`ON`，这意味着所有单独的语句在执行时都会被提交，除非它们在`BEGIN...COMMIT`块中。如果自动提交是`OFF`，你需要显式地发出`COMMIT`语句来提交一个事务。要禁用它，执行：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: DDL statements, such as `CREATE` or `DROP` for databases and `CREATE`, `DROP`,
    or `ALTER` for tables or stored routines cannot be rolled back.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: DDL语句，比如数据库的`CREATE`或`DROP`，以及表或存储过程的`CREATE`、`DROP`或`ALTER`，不能被回滚。
- en: There are certain statements such as DDLs, `LOAD DATA INFILE`, `ANALYZE TABLE`,
    replication-related statements and so on that cause implicit `COMMIT`. For more
    details on these statements, refer [https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些语句，比如DDLs、`LOAD DATA INFILE`、`ANALYZE TABLE`、与复制相关的语句等会导致隐式的`COMMIT`。有关这些语句的更多细节，请参阅[https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html](https://dev.mysql.com/doc/refman/8.0/en/implicit-commit.html)。
- en: Using savepoints
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用保存点
- en: Using savepoints, you can roll back to certain points in the transaction without
    terminating the transaction. You can use  `SAVEPOINT identifier` to set a name
    for the transaction and use the `ROLLBACK TO identifier` statement to roll back
    a transaction to the named savepoint without terminating the transaction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用保存点，你可以在事务中回滚到某些点，而不终止事务。你可以使用`SAVEPOINT identifier`来为事务设置一个名称，并使用`ROLLBACK
    TO identifier`语句来将事务回滚到指定的保存点，而不终止事务。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Suppose `A` wants to transfer to multiple accounts; even if a transfer to one
    account fails, the others should not be rolled back:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`A`想要转账给多个账户；即使向一个账户的转账失败，其他账户也不应该被回滚：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Isolation levels
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离级别
- en: When two or more transactions occur at the same time, the isolation level defines
    the degree at which a transaction is isolated from the resource or data modifications
    made by other transactions. There are four types of isolation levels; to change
    the isolation level, you need to set the `tx_isolation` variable which is dynamic
    and has session level scope.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个或更多事务同时发生时，隔离级别定义了事务与其他事务所做的资源或数据修改隔离的程度。有四种隔离级别；要更改隔离级别，您需要设置动态的具有会话级范围的`tx_isolation`变量。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: To change this level, execute `SET @@transaction_isolation = 'READ-COMMITTED';`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改此级别，请执行`SET @@transaction_isolation = 'READ-COMMITTED';`。
- en: Read uncommitted
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取未提交
- en: The current transaction can read data written by another uncommitted transaction,
    which is also called **dirty read**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当前事务可以读取另一个未提交事务写入的数据，这也称为**脏读**。
- en: For example, `A` wants to add some amount to his account and transfer it to
    `B`. Assume both the transactions happen at the same time; the flow will be like
    this.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`A`想要向他的账户添加一些金额并转账给`B`。假设两个交易同时发生；流程将如下。
- en: '`A` initially has $400 and wants to transfer $500 to `B` after adding $500
    to his account.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`A`最初有400美元，想要在向`B`转账500美元后向他的账户添加500美元。'
- en: '| **# Transaction 1 (adding amount)** | **# Transaction 2 (transferring amount)**
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1（添加金额）** | **# 事务2（转账金额）** |'
- en: '|'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| -- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '|  -- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| -- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '| -- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|  -- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|  -- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: You can notice that *Transaction 2* has read the data that is not committed
    or rolled back from *Transaction 1*, causing account `A` to go into negative balance
    after this transaction, which is clearly not desired.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到*事务2*已经读取了未提交或回滚的*事务1*的数据，导致此事务后账户`A`的余额变为负数，这显然是不希望的。
- en: Read committed
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取提交
- en: The current transaction can read only the data committed by another  transaction,
    which is also called **non-repeatable read**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当前事务只能读取另一个事务提交的数据，这也称为**不可重复读**。
- en: Take the same example again where `A` has $400 and `B` has $600.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再举一个例子，`A`有400美元，`B`有600美元。
- en: '| **# Transaction 1 (adding amount)** | **# Transaction 2 (transferring amount)**
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1（添加金额）** | **# 事务2（转账金额）** |'
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|  -- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '| -- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| -- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '| -- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: You can notice that, in the same transaction, different results are fetched
    for the same `SELECT` statement.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到，在同一事务中，相同的`SELECT`语句获取了不同的结果。
- en: Repeatable read
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重复读
- en: A transaction will see the same data that is read by the first statement even
    though another transaction has committed the data. All consistent reads within
    the same transaction read the snapshot established by the first read. An exception
    is a transaction that can read the data changed within the same transaction.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 即使另一个事务已经提交了数据，事务仍将看到由第一个语句读取的相同数据。同一事务中的所有一致读取都读取第一次读取建立的快照。例外是可以读取同一事务中更改的数据的事务。
- en: When a transaction starts and executes its first read, a read view will be created
    and stay open until the end of the transaction. In order to provide the same result
    set until the end of the transaction, `InnoDB` uses row versioning and `UNDO`
    information. Suppose *Transaction 1* has selected a few rows and another transaction
    has deleted those rows and committed the data. If *Transaction 1* is open, it
    should be able to see the rows it has selected at the beginning. The deleted rows
    are preserved in the `UNDO` log space to fulfill *Transaction 1*. Once *Transaction
    1* finishes, the rows are marked to be deleted from the `UNDO` logs. This is called
    **Multi-Version Concurrency Control** (**MVCC**).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当事务开始并执行其第一次读取时，将创建一个读取视图，并保持打开直到事务结束。为了在事务结束之前提供相同的结果集，`InnoDB`使用行版本和`UNDO`信息。假设*事务1*选择了一些行，另一个事务删除了这些行并提交了数据。如果*事务1*仍然打开，它应该能够看到它一开始选择的行。已删除的行被保留在`UNDO`日志空间中以满足*事务1*。一旦*事务1*完成，这些行将被标记为从`UNDO`日志中删除。这称为**多版本并发控制**（**MVCC**）。
- en: Take the same example again where `A` has 400 and `B` has 600.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 再举一个例子，`A`有400美元，`B`有600美元。
- en: '| **# Transaction 1 (adding the amount)** | **# Transaction 2 (transferring
    the amount)** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1（添加金额）** | **# 事务2（转账金额）** |'
- en: '|'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|  -- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| -- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '| -- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '| -- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '|  -- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|  -- |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This applies only to `SELECT` statements and not necessarily to DML statements.
    If you insert or modify some rows and then commit that transaction, a `DELETE`
    or `UPDATE` statement issued from another concurrent `REPEATABLE READ` transaction
    could affect those just-committed rows, even though the session cannot query them.
    If a transaction does update or delete rows committed by a different transaction,
    those changes become visible to the current transaction.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于`SELECT`语句，不一定适用于DML语句。如果您插入或修改了一些行，然后提交该事务，来自另一个并发的`REPEATABLE READ`事务的`DELETE`或`UPDATE`语句可能会影响那些刚刚提交的行，即使会话无法查询它们。如果一个事务更新或删除了另一个事务提交的行，这些更改将对当前事务可见。
- en: 'For example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '| **# Transaction 1** | **# Transaction 2** |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1** | **# 事务2** |'
- en: '|'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|  -- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|  -- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|   -- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '|   -- |'
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|  -- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|  -- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|  -- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '| -- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '|  -- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Here''s another example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子：
- en: '| **# Transaction 1** | **# Transaction 2** |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1** | **# 事务2** |'
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE42]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE44]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|  -- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '| -- |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '[PRE45]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| -- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '[PRE46]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '|'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE47]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|  -- |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE48]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|  -- |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|  -- |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: Serializable
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可串行化
- en: This provides the highest level of isolation by locking all the rows that are
    being selected. This level is like `REPEATABLE READ`, but `InnoDB` implicitly
    converts all plain `SELECT` statements to `SELECT...LOCK IN SHARE MODE` if autocommit
    is disabled. If autocommit is enabled, `SELECT` is its own transaction.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了通过锁定所有被选中的行来提供最高级别的隔离。这个级别类似于`REPEATABLE READ`，但是如果禁用了自动提交，`InnoDB`会隐式地将所有普通的`SELECT`语句转换为`SELECT...LOCK
    IN SHARE MODE`。如果启用了自动提交，`SELECT`就是它自己的事务。
- en: 'For example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '| **# Transaction 1** | **# Transaction 2** |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1** | **# 事务2** |'
- en: '|'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE50]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '|'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE51]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE52]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|  -- |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|  -- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE54]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '| -- |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '|  -- |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE55]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '|'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Another example:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子：
- en: '| **# Transaction 1** | **# Transaction 2** |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| **# 事务1** | **# 事务2** |'
- en: '|'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE56]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE57]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE58]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '|  -- |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '|  -- |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE59]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE60]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '| -- |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: '|  -- |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '|  -- |'
- en: '[PRE61]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE62]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '| -- |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| -- |'
- en: So, serializable waits for the locks and always reads the latest committed data.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可串行化等待锁，并始终读取最新提交的数据。
- en: Locking
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁定
- en: 'There are two types of locking:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的锁定：
- en: '**Internal locking**: MySQL performs internal locking within the server itself
    to manage contention for table contents by multiple sessions'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部锁定**：MySQL在服务器内部执行内部锁定，以管理多个会话对表内容的争用'
- en: '**External locking**: MySQL gives the option to client sessions to acquire
    a table lock explicitly for preventing other sessions from accessing the table'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部锁定**：MySQL为客户会话提供了显式获取表锁的选项，以防止其他会话访问表。'
- en: '**Internal locking**: There are mainly two types of locks:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**内部锁定**：主要有两种类型的锁：'
- en: '**Row-level locks**: The locking is granular to the level of rows. Only the
    rows that are accessed are locked. This allows simultaneous write access by multiple
    sessions, making them suitable for multi-user, highly concurrent, and OLTP applications.
    Only `InnoDB` supports row-level locks.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行级锁定**：锁定粒度到行级。只有访问的行被锁定。这允许多个会话同时写入访问，使它们适用于多用户、高并发和OLTP应用程序。只有`InnoDB`支持行级锁定。'
- en: '**Table-level locks**: MySQL uses table-level locking for `MyISAM`, `MEMORY`,
    and `MERGE` tables, permitting only one session to update those tables at a time.
    This locking level makes these storage engines more suitable for read-only, read-mostly,
    or single-user applications.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表级锁定**：MySQL对`MyISAM`、`MEMORY`和`MERGE`表使用表级锁定，每次只允许一个会话更新这些表。这种锁定级别使这些存储引擎更适合只读、读多或单用户应用程序。'
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/internal-locking.html](https://dev.mysql.com/doc/refman/8.0/en/internal-locking.html)
    and [https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html)
    to know more about the `InnoDB` locks.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[https://dev.mysql.com/doc/refman/8.0/en/internal-locking.html](https://dev.mysql.com/doc/refman/8.0/en/internal-locking.html)和[https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html)以了解更多关于`InnoDB`锁的信息。
- en: '**External Locking**: You can use `LOCK TABLE` and `UNLOCK TABLES` statements
    to control the locks.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**外部锁定**：您可以使用`LOCK TABLE`和`UNLOCK TABLES`语句来控制锁。'
- en: 'Table locking for `READ` and `WRITE` are explained as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对`READ`和`WRITE`的表锁定如下所述：
- en: '`READ`: When a table is locked for `READ`, multiple sessions can read data
    from the table without acquiring a lock. Also, multiple sessions can acquire a
    lock on the same table, that is why a `READ` lock is also called a **shared lock**.
    When a `READ` lock is held, no session can write data into the table (including
    the session that held the lock). If any write attempt is make, it will be in waiting
    state until the `READ` lock is released.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ`：当表被锁定为`READ`时，多个会话可以从表中读取数据而不需要获取锁。此外，多个会话可以在同一张表上获取锁，这就是为什么`READ`锁也被称为**共享锁**。当持有`READ`锁时，没有会话可以向表中写入数据（包括持有锁的会话）。如果有任何写入尝试，它将处于等待状态，直到`READ`锁被释放。'
- en: '`WRITE`: When a table is locked for `WRITE`, no other session can read and
    write data from the table except the session that held the lock. No other session
    can even acquire any lock until the existing lock is released. That is why this
    is called `exclusive lock`. If any read/write attempt is make, it will be in waiting
    state until the `WRITE` lock is released.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WRITE`：当表被锁定为`WRITE`时，除了持有锁的会话外，没有其他会话可以从表中读取和写入数据。直到现有锁被释放，其他会话甚至无法获取任何锁。这就是为什么这被称为`独占锁`。如果有任何读/写尝试，它将处于等待状态，直到`WRITE`锁被释放。'
- en: All the locks are released when the ;`UNLOCK TABLES` statement is executed or
    when the session terminates.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行`UNLOCK TABLES`语句或会话终止时，所有锁都会被释放。
- en: How to do it...
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The syntax is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE63]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'To unlock the tables, use:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要解锁表，请使用：
- en: '[PRE64]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To lock all tables across all databases, execute the following statement. It
    is used when taking a consistent snapshot of the database. It freezes all writes
    to the database:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要锁定所有数据库中的所有表，请执行以下语句。在对数据库进行一致快照时使用。它会冻结对数据库的所有写入：
- en: '[PRE65]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Locking queue
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁定队列
- en: No two locks can be held together on a table except shared locks (a table can
    have multiple shared locks). If a table already has a shared lock and an exclusive
    lock comes, it will be kept in a queue until the shared lock is released. When
    an exclusive lock is in a queue, all subsequent shared locks are also blocked
    and kept in a queue.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 除了共享锁（一张表可以有多个共享锁）外，一张表上不能同时持有两个锁。如果一张表已经有一个共享锁，而独占锁来了，它将被保留在队列中，直到共享锁被释放。当独占锁在队列中时，所有后续的共享锁也会被阻塞并保留在队列中。
- en: '`InnoDB` acquires a metadata lock when reading/writing from a table. If a second
    transaction requests `WRITE LOCK`, it will be kept in a queue until the first
    transaction completes. If a third transaction wants to read the data, it has to
    wait until the second transaction completes.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在从表中读取/写入时会获取元数据锁。如果第二个事务请求`WRITE LOCK`，它将被保留在队列中，直到第一个事务完成。如果第三个事务想要读取数据，它必须等到第二个事务完成。'
- en: '**Transaction 1:**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务1：**'
- en: '[PRE66]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note that `COMMIT` is not executed. The transaction is kept open.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`COMMIT`没有被执行。事务保持打开状态。
- en: '**Transaction 2:**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务2：**'
- en: '[PRE67]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This statement has to wait until transaction 1 completes.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句必须等到事务1完成。
- en: '**Transaction 3:**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务3：**'
- en: '[PRE68]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Even transaction 3 will not give any result because an exclusive lock is in
    the queue (it is waiting for transaction 2 to complete). Moreover, it is blocking
    all operations on the table.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 即使事务3也不会产生任何结果，因为一个排他锁在队列中（它在等待事务2完成）。此外，它会阻塞表上的所有操作。
- en: 'You can check this by checking `SHOW PROCESSLIST` from another session:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从另一个会话中检查`SHOW PROCESSLIST`来检查这一点：
- en: '[PRE69]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can notice that both transaction 2 and transaction 3 are waiting for transaction
    1.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到事务2和事务3都在等待事务1。
- en: To know more about a metadata lock, refer to [https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html](https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html).
    The same behavior can be observed while using `FLUSH TABLES WITH READ LOCK`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关元数据锁的更多信息，请参考[https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html](https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html)。在使用`FLUSH
    TABLES WITH READ LOCK`时也可以观察到相同的行为。
- en: '**Transaction 1:**'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务1：**'
- en: '[PRE70]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note that `COMMIT` is not executed. The transaction is kept open.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`COMMIT`没有被执行。事务保持打开状态。
- en: '**Transaction 2:**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务2：**'
- en: '[PRE71]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '**Transaction 3:**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务3：**'
- en: '[PRE72]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Even transaction 3 will not give any result because `FLUSH TABLES` is waiting
    for all the operations on the table to complete before getting a lock. Moreover,
    it is blocking all the operations on the table.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 即使事务3也不会产生任何结果，因为`FLUSH TABLES`在获取锁之前需要等待表上的所有操作完成。此外，它会阻塞表上的所有操作。
- en: You can check this by checking `SHOW PROCESSLIST` from another session.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从另一个会话中检查`SHOW PROCESSLIST`来检查这一点。
- en: '[PRE73]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: For consistent backup, all the backup methods use `FLUSH TABLES WITH READ LOCK`,
    which can be very dangerous if there is a long-running transaction on table.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行一致的备份，所有备份方法都使用`FLUSH TABLES WITH READ LOCK`，如果表上有长时间运行的事务，这可能非常危险。
