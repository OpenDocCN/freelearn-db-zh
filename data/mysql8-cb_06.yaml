- en: Binary Logging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制日志记录
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Using binary logging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用二进制日志记录
- en: Binary log format
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制日志格式
- en: Extracting statements from a binary log
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从二进制日志中提取语句
- en: Ignoring databases to write to a binary log
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略数据库以写入二进制日志
- en: Relocating binary logs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新定位二进制日志
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The binary log contains a record of all changes to the database, both data and
    structure. The binary log is not used for statements such as `SELECT` or `SHOW`
    that do not modify data. Running a server with binary logging enabled has a slight
    performance effect. The binary log is crash-safe. Only complete events or transactions
    are logged or read back.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志包含对数据库的所有更改的记录，包括数据和结构。二进制日志不用于不修改数据的语句，如`SELECT`或`SHOW`。运行启用二进制日志的服务器会略微影响性能。二进制日志是崩溃安全的。只有完整的事件或事务才会被记录或读取。
- en: Why should you use binary log?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用二进制日志？
- en: '**Replication**: You stream the changes made to a server to another server
    using binary logs. The slave acts as a mirror copy and can be used to distribute
    the load. The server that accepts the writes is referred to as a master and the
    mirror copy server is referred to as a slave.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制**：您可以使用二进制日志将对服务器所做的更改流式传输到另一个服务器。从服务器充当镜像副本，并可用于分发负载。接受写入的服务器称为主服务器，镜像副本服务器称为从服务器。'
- en: '**Point-in-time recovery**: Suppose you take a backup at 00:00 on Sunday and
    your database crashed at 8:00 on Sunday. Using backup, you can recover till 00:00
    Sunday. Using binary logs you can reply to them, to recover till 08:00.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间点恢复**：假设您在星期日的00:00进行备份，而您的数据库在星期日的8:00崩溃。使用备份，您可以恢复到星期日的00:00。使用二进制日志，您可以回放它们，以恢复到08:00。'
- en: Using binary logging
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用二进制日志记录
- en: To enable `binlog`, you have to set `log_bin` and `server_id` and restart the
    server. You can mention the path and base name in the `log_bin` itself. For example, `log_bin`
    is set to `/data/mysql/binlogs/server1`, the binary logs are stored in the `/data/mysql/binlogs`
    folder with the name `server1.000001`, `server1.000002`, and so on. The server
    creates a new file in the series each time it starts or flushes the logs or the
    current log's size reaches `max_binlog_size`. It maintains the `server1.index`
    file, which contains the location of each binary log.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用`binlog`，必须设置`log_bin`和`server_id`并重新启动服务器。您可以在`log_bin`中提及路径和基本名称。例如，`log_bin`设置为`/data/mysql/binlogs/server1`，则二进制日志存储在`/data/mysql/binlogs`文件夹中，名称为`server1.000001`，`server1.000002`等。服务器每次启动或刷新日志或当前日志大小达到`max_binlog_size`时，都会创建一个新文件。它维护`server1.index`文件，其中包含每个二进制日志的位置。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's see how to play with the logs. I am sure you are going to love learning
    about them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何处理日志。我相信您会喜欢学习它们。
- en: Enabling binary logs
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用二进制日志记录
- en: Enable binary logging and set the `server_id`. Open the MySQL `config` file
    in your favorite editor and append the following lines. Choose `server_id` such
    that it will be unique to each MySQL server in your infrastructure.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用二进制日志记录并设置`server_id`。在您喜欢的编辑器中打开MySQL `config`文件并追加以下行。选择`server_id`，使其对您基础架构中的每个MySQL服务器都是唯一的。
- en: You can also simply put the `log_bin` variable in `my.cnf` without any value.
    In that case, the binary log is created in the `data directory` directory and
    uses `hostname` as its name.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以简单地将`log_bin`变量放在`my.cnf`中，而不设置任何值。在这种情况下，二进制日志将在`data directory`目录中创建，并使用`hostname`作为其名称。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Restart the MySQL server:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动MySQL服务器：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Verify that binary logs are created:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证是否创建了二进制日志：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute `SHOW BINARY LOGS;` or `SHOW MASTER LOGS;` to display all the binary
    logs of the server.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`SHOW BINARY LOGS;`或`SHOW MASTER LOGS;`以显示服务器的所有二进制日志。
- en: 'Execute the `SHOW MASTER STATUS;` command to get the current binary log position:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`SHOW MASTER STATUS;`命令以获取当前二进制日志位置：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As soon as `server1.000001` reaches `max_binlog_size` (1 GB default), a new
    file, `server1.000002`, will be created and added to `server1.index`. You can
    configure to set `max_binlog_size` dynamically with `SET @@global.max_binlog_size=536870912`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`server1.000001`达到`max_binlog_size`（默认为1GB），将创建一个新文件`server1.000002`并将其添加到`server1.index`中。您可以配置使用`SET
    @@global.max_binlog_size=536870912`动态设置`max_binlog_size`。
- en: Disabling binary logs for a session
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用会话的二进制日志记录
- en: 'There may be cases where you do not want the statements to be replicated to
    other servers. For that, you can use the following command to disable binary logging
    for that session:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在不希望将语句复制到其他服务器的情况。为此，可以使用以下命令禁用该会话的二进制日志记录：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: All the SQL statements logged after executing the previous statement are not
    logged to the binary log. This applies only for that session.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行前一个语句后记录的所有SQL语句不会记录到二进制日志中。这仅适用于该会话。
- en: 'To enable, you can execute the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用，可以执行以下操作：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Move to the next log
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移至下一个日志
- en: 'You can use the `FLUSH LOGS` command to close the current binary log and open
    a new one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`FLUSH LOGS`命令关闭当前的二进制日志并打开一个新的：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Expire binary logs
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过期二进制日志
- en: 'Binary logs consume a lot of space based on the number of writes. Leaving them
    as-is can fill up the disk in no time. It is essential to clean them up:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 基于写入次数，二进制日志会占用大量空间。将它们保持不变可能会在短时间内填满磁盘。清理它们是至关重要的：
- en: Set the expiry of logs using `binlog_expire_logs_seconds` and `expire_logs_days`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`binlog_expire_logs_seconds`和`expire_logs_days`设置日志的到期时间。
- en: If you want to set an expiry period in days, set `expire_logs_days`. For example,
    if you want to delete all the binary logs that are older than two days, `SET @@global.expire_logs_days=2`.
    Setting the value to `0` disables automatic expiry.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要设置以天为单位的到期时间，请设置`expire_logs_days`。例如，如果要删除两天前的所有二进制日志，`SET @@global.expire_logs_days=2`。将值设置为`0`会禁用自动到期。
- en: If you want to have more granularity, you can use the `binlog_expire_logs_seconds`
    variable, which sets the binary log expiration period in seconds.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更细粒度，可以使用`binlog_expire_logs_seconds`变量，该变量设置二进制日志的过期时间（以秒为单位）。
- en: The effects of this variable and `expire_logs_days` are cumulative. For example,
    if `expire_logs_days` is `1` and `binlog_expire_logs_seconds` is `43200`, then
    the binary log is purged every 1.5 days. This produces the same result as setting
    `binlog_expire_logs_seconds` to `129600` and leaving `expire_logs_days` set to
    0\. In MySQL 8.0, both `binlog_expire_logs_seconds` and `expire_logs_days` must
    be set to 0 to disable automatic purging of the binary log.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量和`expire_logs_days`的效果是累积的。例如，如果`expire_logs_days`是`1`，`binlog_expire_logs_seconds`是`43200`，那么二进制日志将每1.5天清除一次。这与将`binlog_expire_logs_seconds`设置为`129600`并将`expire_logs_days`设置为0的结果相同。在MySQL
    8.0中，`binlog_expire_logs_seconds`和`expire_logs_days`必须都设置为0才能禁用二进制日志的自动清除。
- en: 'To purge the logs manually, execute `PURGE BINARY LOGS TO ''<file_name>''`.
    For example, there are files such as `server1.000001`, `server1.000002`, `server1.000003`,
    and `server1.000004`, and if you execute `PURGE BINARY LOGS TO ''server1.000004''`,
    all the files up to `server1.000003` will be deleted and `server1.000004` will
    not be touched:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要手动清除日志，请执行`PURGE BINARY LOGS TO '<file_name>'`。例如，如果有文件如`server1.000001`，`server1.000002`，`server1.000003`和`server1.000004`，如果您执行`PURGE
    BINARY LOGS TO 'server1.000004'`，则所有文件直到`server1.000003`将被删除，`server1.000004`不会被触及：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can also execute the command `PURGE BINARY LOGS BEFORE '2017-08-03 15:45:00'`
    rather than specifying a log file. You can also use the word `MASTER` instead
    of `BINARY`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以执行命令`PURGE BINARY LOGS BEFORE '2017-08-03 15:45:00'`，而不是指定日志文件。您还可以使用单词`MASTER`而不是`BINARY`。
- en: '`mysql> PURGE MASTER LOGS TO ''server1.000004''` also works.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql> PURGE MASTER LOGS TO ''server1.000004''`也可以。'
- en: 'To delete all the binary logs and start from the beginning again, execute `RESET
    MASTER`:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除所有二进制日志并重新开始，请执行`RESET MASTER`：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Purging or expiring logs is a very unsafe method if you are using replication.
    The safe way to purge binary logs is to use the `mysqlbinlogpurge` script, which
    will be covered in [Chapter 12](part0417.html#CDLQI0-faa69fe6f4c04957afca3568dcd9cd83),
    *Managing Logs*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用复制，清除或过期日志是一种非常不安全的方法。清除二进制日志的安全方法是使用`mysqlbinlogpurge`脚本，这将在[第12章](part0417.html#CDLQI0-faa69fe6f4c04957afca3568dcd9cd83)
    *管理日志*中介绍。
- en: Binary log format
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制日志格式
- en: 'Binary logs can be written in three formats:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志可以以三种格式写入：
- en: '`STATEMENT`: Actual SQL statements are logged.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`STATEMENT`：实际的SQL语句被记录。'
- en: '`ROW`: Changes made to each row are logged.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ROW`：对每一行所做的更改都会被记录。'
- en: For example, an update statement updates 10 rows, the updated information of
    all 10 rows is written to the log. Whereas in statement-based replication, only
    the update statement is written. The default format is `ROW`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，更新语句更新了10行，所有10行的更新信息都被写入日志。而在基于语句的复制中，只有更新语句被写入。默认格式是“ROW”。
- en: '`MIXED`: MySQL switches from `STATEMENT` to `ROW` as and when needed.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MIXED`：MySQL根据需要从`STATEMENT`切换到`ROW`。'
- en: There are statements that can cause different results when executed on different
    servers. For example, the output of the `UUID()` function differs from server
    to server. Those statements are called non-deterministic and are unsafe for statement-based
    replication. In those situations, a MySQL server switches to row-based format
    when you set the `MIXED` format.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有些语句在不同服务器上执行时可能会导致不同的结果。例如，`UUID()`函数的输出因服务器而异。这些语句称为非确定性语句，对于基于语句的复制来说是不安全的。在这种情况下，当您设置`MIXED`格式时，MySQL服务器会切换到基于行的格式。
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html)
    to learn more about the unsafe statements and when switching happens.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html)了解有关不安全语句和切换发生的更多信息。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You can set the format using the dynamic variable, `binlog_format`, which has
    both global and session scope. Setting it at global level makes all clients use
    the specified format:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用动态变量`binlog_format`来设置格式，该变量具有全局和会话范围。在全局级别设置它会使所有客户端使用指定的格式：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html ](https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html)to
    learn about the advantages and disadvantages of various formats.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html](https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html)了解各种格式的优缺点。
- en: MySQL 8.0 uses version 2 binary log row events, which cannot be read by MySQL
    Server releases prior to MySQL 5.6.6\. Set `log-bin-use-v1-row-events` to `1`
    to use version 1 so that it can be read by versions prior to MySQL 5.6.6\. The
    default is `0`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MySQL 8.0使用版本2的二进制日志行事件，这些事件不能被MySQL 5.6.6之前的版本读取。将`log-bin-use-v1-row-events`设置为`1`以使用版本1，以便可以被MySQL
    5.6.6之前的版本读取。默认值为`0`。
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When you create a stored function, you must declare either that it is deterministic
    or that it does not modify data. Otherwise, it may be unsafe for binary logging.
    By default, for a `CREATE FUNCTION` statement to be accepted, at least one of
    `DETERMINISTIC`, `NO SQL`, or `READS SQL DATA` must be specified explicitly. Otherwise
    an error occurs:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您创建存储函数时，必须声明它是确定性的或者不修改数据。否则，它可能对二进制日志记录不安全。默认情况下，要接受`CREATE FUNCTION`语句，必须显式指定`DETERMINISTIC`，`NO
    SQL`或`READS SQL DATA`中的至少一个。否则会发生错误：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can write non-deterministic statements inside a routine and still declare
    as `DETERMINISTIC` (not a good practice), if you want to replicate routines that
    are not declared as `DETERMINISTIC`, you can set the `log_bin_trust_function_creators`
    variable:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在例程中写入非确定性语句，并且仍然声明为`DETERMINISTIC`（这不是一个好的做法），如果您想要复制未声明为`DETERMINISTIC`的例程，可以设置`log_bin_trust_function_creators`变量：
- en: '`mysql> SET GLOBAL log_bin_trust_function_creators = 1;`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql> SET GLOBAL log_bin_trust_function_creators = 1;`'
- en: See also
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html](https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html) to
    learn more about how the stored programs are replicated.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html](https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html)了解有关存储程序如何复制的更多信息。
- en: Extracting statements from a binary log
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从二进制日志中提取语句
- en: You can use the `mysqlbinlog` utility (shipped along with MySQL) to extract
    the contents from binary logs and apply them to other servers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用（随MySQL一起提供的）`mysqlbinlog`实用程序从二进制日志中提取内容并将其应用到其他服务器上。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Execute a few statements using various binary formats. When you set the `binlog_format`
    at `GLOBAL` level, you have to disconnect and reconnect to get the changes. If
    you want to be connected, set at `SESSION` level.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种二进制格式执行几个语句。当您将`binlog_format`设置为`GLOBAL`级别时，您必须断开连接并重新连接以获取更改。如果您想保持连接，请设置为`SESSION`级别。
- en: 'Change to **statement-based replication** (**SBR**):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到**基于语句的复制**（**SBR**）：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update a few rows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 更新几行：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Change to **row-based replication** (**RBR**):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到**基于行的复制**（**RBR**）：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update a few rows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 更新几行：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Change to `MIXED` format:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到`MIXED`格式：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Update a few rows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 更新几行：
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To display the contents of `server1.000001`, execute the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示`server1.000001`的内容，请执行以下操作：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will get output similar to the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得类似以下内容的输出：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the first line, the number following `# at` indicates the starting position
    (file offset) of the event in the binary log file. The second line contains the
    timestamp at which the statement started on the server. The timestamp is followed
    by `server id`, `end_log_pos`, `thread_id`, `exec_time`, and `error_code`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，`# at`后面的数字表示二进制日志文件中事件的起始位置（文件偏移量）。第二行包含语句在服务器上开始的时间戳。时间戳后面是`server id`、`end_log_pos`、`thread_id`、`exec_time`和`error_code`。
- en: '`server id`: Is the `server_id` value of the server where the event originated
    (`200` in this case).'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server id`：是事件发生的服务器的`server_id`值（在本例中为`200`）。'
- en: '`end_log_pos`: Is the start position of the next event.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end_log_pos`：是下一个事件的起始位置。'
- en: '`thread_id`: Indicates which thread executed the event.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thread_id`：指示执行事件的线程。'
- en: '`exec_time`: Is the time spent executing the event, on a master server. On
    a slave, it is the difference of the end execution time on the slave minus the
    beginning execution time on the master. The difference serves as an indicator
    of how much replication lags behind the master.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec_time`：是在主服务器上执行事件所花费的时间。在从服务器上，它是从从服务器上的结束执行时间减去主服务器上的开始执行时间的差异。这个差异作为指示从服务器落后主服务器的程度的指标。'
- en: '`error_code`: Indicates the result from executing the event. Zero means that
    no error occurred.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error_code`：指示执行事件的结果。零表示没有发生错误。'
- en: Observations
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察
- en: 'You executed the `UPDATE` statement in statement-based replication and the
    same statement is logged in the binary log. Apart from the server, session variables
    are also saved in the binary log to replicate the same behavior on the slave:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在基于语句的复制中执行了`UPDATE`语句，并且相同的语句记录在二进制日志中。除了服务器外，会话变量也保存在二进制日志中，以在从服务器上复制相同的行为：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When row-based replication is used, instead of the statement, the `ROW` is saved,
    which is in binary format and you cannot read. Moreover, you can observe the length,
    a single update statement generated so much data. Check the *Extract row event
    display* section, which explains how to view the binary format.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用基于行的复制时，保存的不是语句，而是以二进制格式保存的`ROW`，您无法阅读。此外，您可以观察到，单个更新语句生成了如此多的数据。查看*提取行事件显示*部分，该部分解释了如何查看二进制格式。
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When `MIXED` format is used, the `UPDATE` statement is logged as SQL, whereas
    the `INSERT` statement is logged in row-based format since the `INSERT` has an `UUID()`
    function that is non-deterministic:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用`MIXED`格式时，`UPDATE`语句被记录为SQL，而`INSERT`语句以基于行的格式记录，因为`INSERT`具有不确定性的`UUID()`函数：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The extracted log can be piped to MySQL to replay the events. It is better to
    use the force option while replaying binlogs because, if it is stuck at one point,
    it won't stop executing. Later, you can figure out the errors and fix the data
    manually.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的日志可以通过管道传输到MySQL以重放事件。在重放二进制日志时最好使用force选项，因为如果它卡在某一点，它不会停止执行。稍后，您可以找出错误并手动修复数据。
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or you can save into a file and execute later:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以保存到文件中，以后执行：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Extracting based on time and position
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于时间和位置提取
- en: You can extract the partial data from the binary log by specifying the position.
    Suppose you want to do point-in-time recovery. Assume a `DROP DATABASE` command
    was executed at `2017-08-19 12:18:00` and the latest available backup was `2017-08-19
    12:00:00`, which you already restored. Now, you need to restore data from `12:00:01`
    till `2017-08-19 12:17:00`. Remember, if you extract the full log, it will also
    contain the `DROP DATABASE` command and it will wipe your data again.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定位置从二进制日志中提取部分数据。假设您想进行时间点恢复。假设在`2017-08-19 12:18:00`执行了`DROP DATABASE`命令，并且最新可用的备份是`2017-08-19
    12:00:00`，您已经恢复了。现在，您需要从`12:00:01`到`2017-08-19 12:17:00`恢复数据。请记住，如果您提取完整的日志，它也将包含`DROP
    DATABASE`命令，并且会再次擦除您的数据。
- en: You can extract the data by specifying the time window through `--start-datetime`
    and `--stop-datatime` options.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`--start-datetime`和`--stop-datatime`选项指定时间窗口来提取数据。
- en: '[PRE33]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The disadvantage of using a time window is you will miss the transactions that
    happened at the second the disaster occurred. To avoid this, you have to use the
    file offset of the event in the binary log file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用时间窗口的缺点是您将错过灾难发生时发生的事务。为了避免这种情况，您必须使用二进制日志文件中事件的文件偏移量。
- en: A consistent backup saves the binlog file offset until which it has already
    backed up. Once the backup is restored, you have to extract the binlogs from the
    offset provided by the backup. You will learn more about backups in the next chapter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一致的备份保存了已备份的二进制日志文件偏移量。一旦备份恢复，您必须从备份提供的偏移量提取二进制日志。您将在下一章中了解更多关于备份的内容。
- en: 'Assume that the backup has given an offset of `471` and the `DROP DATABASE`
    command was executed at an offset of `1793`. You can use `--start-position` and
    `--stop-position` options to extract a log between offsets:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 假设备份给出了偏移量`471`，并且`DROP DATABASE`命令在偏移量`1793`处执行。您可以使用`--start-position`和`--stop-position`选项在偏移量之间提取日志：
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Make sure that the `DROP DATABASE` command does not appear again in the extracted
    binlog.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 确保提取的binlog中不再出现`DROP DATABASE`命令。
- en: Extracting based on the database
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于数据库提取
- en: Using the `--database` option, you can filter events of a specific database.
    If you give this multiple times, only the last option will be considered. This
    works very well for row-based replication. But for statement-based replication
    and `MIXED`, this gives output only when the default database is selected.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--database`选项，您可以过滤特定数据库的事件。如果您多次使用此选项，则只会考虑最后一个选项。这对于基于行的复制非常有效。但对于基于语句的复制和`MIXED`，只有在选择默认数据库时才会输出。
- en: 'The following command extracts events from the employees database:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令从employees数据库中提取事件：
- en: '[PRE35]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As explained in the MySQL 8 reference manual, suppose the binary log was created
    by executing these statements using statement-based-logging:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如MySQL 8参考手册中所述，假设二进制日志是通过使用基于语句的日志记录执行这些语句创建的：
- en: '[PRE36]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`mysqlbinlog --database=test` does not output the first two `INSERT` statements
    because there is no default database.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysqlbinlog --database=test`不会输出前两个`INSERT`语句，因为没有默认数据库。'
- en: It outputs the three `INSERT` statements following `USE test`, but not the three
    `INSERT` statements following `USE db2`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它会输出`USE test`后面的三个`INSERT`语句，但不会输出`USE db2`后面的三个`INSERT`语句。
- en: '`mysqlbinlog --database=db2` does not output the first two `INSERT` statements
    because there is no default database.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysqlbinlog --database=db2`不会输出前两个`INSERT`语句，因为没有默认数据库。'
- en: It does not output the three `INSERT` statements following `USE` test, but does
    output the three `INSERT` statements following `USE db2`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会输出`USE` test后面的三个`INSERT`语句，但会输出`USE db2`后面的三个`INSERT`语句。
- en: Extracting a row event display
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取行事件显示
- en: 'In row-based replication, by default, binary format is displayed. To view the
    `ROW` information, you have to pass the `--verbose` or `-v` option to `mysqlbinlog`.
    The binary format of row events are shown as comments in the form of *pseudo-SQL*
    statements with lines beginning with `###`. You can see that a single `UPDATE`
    statement is rewritten as an `UPDATE` statement for each row:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于行的复制中，默认情况下显示二进制格式。要查看`ROW`信息，您必须将`--verbose`或`-v`选项传递给`mysqlbinlog`。行事件的二进制格式显示为以`###`开头的行形式的伪SQL语句的注释。您可以看到单个`UPDATE`语句被重写为每行的`UPDATE`语句：
- en: '[PRE37]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you want to just see the pseudo-SQL without the binary row information,
    specify `--base64-output="decode-rows"` along with `--verbose`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想看到伪SQL而不包含二进制行信息，请指定`--base64-output="decode-rows"`以及`--verbose`：
- en: '[PRE38]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Rewriting a database name
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重写数据库名称
- en: Suppose you want to restore the binary log of the `employees` database on a
    production server as `employees_dev` on a development server. You can use the `--rewrite-db='from_name->to_name'`
    option. This will rewrite all occurrences of `from_name` to `to_name`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望将生产服务器上的`employees`数据库的二进制日志还原为开发服务器上的`employees_dev`。您可以使用`--rewrite-db='from_name->to_name'`选项。这将重写所有`from_name`到`to_name`的出现。
- en: 'To convert multiple databases, specify the option multiple times:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换多个数据库，请多次指定该选项：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You can see that the statement `use `employees_dev`/*!*/;` is used. So, while
    restoring, all the changes will be applied to `employees_dev database`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到语句`use `employees_dev`/*!*/;`被使用。因此，在还原时，所有更改将应用于`employees_dev`数据库。
- en: 'As explained in the MySQL reference manual:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如MySQL参考手册中所述：
- en: When used together with the `--database` option, the `--rewrite-db` option is
    applied first, then the `--database` option is applied using the rewritten database
    name. The order in which the options are provided makes no difference in this
    regard. This means that, for example, if `mysqlbinlog` is started with `--rewrite-db='mydb->yourdb'
    --database=yourdb`, then all updates to any tables in databases `mydb` and `yourdb`
    are included in the output.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当与`--database`选项一起使用时，首先应用`--rewrite-db`选项，然后使用重写后的数据库名称应用`--database`选项。在这方面，提供选项的顺序没有任何区别。这意味着，例如，如果使用`--rewrite-db='mydb->yourdb'
    --database=yourdb`启动`mysqlbinlog`，则`mydb`和`yourdb`数据库中任何表的所有更新都包含在输出中。
- en: 'On the other hand, if it is started with `--rewrite-db=''mydb->yourdb'' --database=mydb`,
    then `mysqlbinlog` outputs no statements at all: since all updates to `mydb` are
    first rewritten as updates to `yourdb` before applying the `--database` option,
    there remain no updates that match `--database=mydb`.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果使用`--rewrite-db='mydb->yourdb' --database=mydb`启动，则`mysqlbinlog`根本不输出语句：因为在应用`--database`选项之前，对`mydb`的所有更新都首先被重写为对`yourdb`的更新，因此没有更新与`--database=mydb`匹配。
- en: Disabling a binary log for recovery
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用二进制日志以进行恢复
- en: 'While restoring binary logs, if you don’t want the `mysqlbinlog` process to
    create binary logs, you can use the `--disable-log-bin` option so that binary
    logs won''t be written:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在还原二进制日志时，如果您不希望`mysqlbinlog`进程创建二进制日志，您可以使用`--disable-log-bin`选项，以便不写入二进制日志：
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can see that `SQL_LOG_BIN=0` is written to the `binlog` restore file, which
    will prevent creating the binlogs.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`SQL_LOG_BIN=0`被写入`binlog`还原文件，这将阻止创建binlogs。
- en: '`/*!32316 SET @OLD_SQL_LOG_BIN=@@SQL_LOG_BIN, SQL_LOG_BIN=0*/;`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`/*!32316 SET @OLD_SQL_LOG_BIN=@@SQL_LOG_BIN, SQL_LOG_BIN=0*/;`'
- en: Displaying events in a binary log file
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示二进制日志文件中的事件
- en: Apart from using `mysqlbinlog`, you can also use the `SHOW BINLOG EVENTS` command
    to display the events.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`mysqlbinlog`，您还可以使用`SHOW BINLOG EVENTS`命令来显示事件。
- en: 'The following command will display the events in the `server1.000008` binary
    log. If `LIMIT` is not specified, all the events are displayed:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将显示`server1.000008`二进制日志中的事件。如果未指定`LIMIT`，则显示所有事件：
- en: '[PRE41]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can also specify the position and offset:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指定位置和偏移量：
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Ignoring databases to write to a binary log
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽略写入二进制日志的数据库
- en: You can choose which databases should be written to the binary log by specifying
    the `--binlog-do-db=db_name` option in `my.cnf`. To specify multiple databases
    you *must* use multiple instances of this option. Because database names can contain
    commas, the list will be treated as the name of a single database if you supply
    a comma-separated list. You need to restart the MySQL server to effect changes.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`my.cnf`中指定`--binlog-do-db=db_name`选项来选择应写入二进制日志的数据库。要指定多个数据库，*必须*使用此选项的多个实例。因为数据库名称可以包含逗号，如果提供逗号分隔的列表，该列表将被视为单个数据库的名称。您需要重新启动MySQL服务器才能生效。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open `my.cnf` and add the following lines:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`my.cnf`并添加以下行：
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The behavior on `binlog-do-db` changes from statement-based logging to row-based
    logging just like the `--database` option in the `mysqlbinlog` utility.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`binlog-do-db`的行为从基于语句的日志记录更改为基于行的日志记录，就像`mysqlbinlog`实用程序中的`--database`选项一样。'
- en: In statement-based logging, only those statements are written to the binary
    log where the default database (that is, the one selected by `USE`) is written
    to the binary log. You should be very careful while using the `binlog-do-db` option
    because it does not work as you might expect when using statement-based logging.
    Go through the following examples mentioned in the reference manual.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于语句的日志记录中，只有那些默认数据库（即由`USE`选择的数据库）写入二进制日志的语句才会被写入。在使用基于语句的日志记录时，使用`binlog-do-db`选项时要非常小心，因为它的工作方式与您在使用基于语句的日志记录时所期望的方式不同。请参阅参考手册中提到的以下示例。
- en: Example 1
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1
- en: 'If the server is started with `--binlog-do-db=sales` and you issue the following
    statements, the `UPDATE` statement is not logged:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器是使用`--binlog-do-db=sales`启动的，并且您发出以下语句，则`UPDATE`语句不会被记录：
- en: '[PRE44]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The main reason for this *just check the default database* behavior is that
    it is difficult from the statement alone to know whether it should be replicated.
    It is also faster to check only the default database rather than all databases
    if there is no need.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这种*只检查默认数据库*行为的主要原因是，仅从语句本身很难知道是否应该复制它。如果没有必要，仅检查默认数据库而不是所有数据库也更快。
- en: Example 2
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2
- en: 'If the server is started with `--binlog-do-db=sales`, the following `UPDATE`
    statement is logged even though prices were not included when setting `--binlog-do-db`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器是使用`--binlog-do-db=sales`启动的，则即使在设置`--binlog-do-db`时未包括价格，以下`UPDATE`语句也会被记录：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Because sales is the default database when the `UPDATE` statement is issued,
    the `UPDATE` is logged.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当发出`UPDATE`语句时，因为销售是默认数据库，所以`UPDATE`被记录在日志中。
- en: In row-based logging, it is restricted to database `db_name`. Only changes to
    tables belonging to `db_name` are logged; the default database has no effect on
    this.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于行的日志记录中，它受到数据库`db_name`的限制。只有属于`db_name`的表的更改才会被记录；默认数据库对此没有影响。
- en: 'Another important difference in `--binlog-do-db` handling for statement-based
    logging, as opposed to the row-based logging, occurs with regard to statements
    that refer to multiple databases. Suppose that the server is started with `--binlog-do-db=db1`,
    and the following statements are executed:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`--binlog-do-db`在基于语句的日志记录中处理的另一个重要区别与基于行的日志记录有关，这涉及到引用多个数据库的语句。假设服务器是使用`--binlog-do-db=db1`启动的，并且执行了以下语句：'
- en: '[PRE46]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If you are using statement-based logging, the updates to both tables are written
    to the binary log. However, when using the row-based format, only the changes
    to `table1` are logged; `table2` is in a different database, so it is not changed
    by the `UPDATE`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用基于语句的日志记录，则两个表的更新都将写入二进制日志。但是，使用基于行的格式时，只有`table1`的更改被记录；`table2`位于不同的数据库中，因此不会受到`UPDATE`的影响。
- en: Similarly, you can use the `--binlog-ignore-db=db_name` option to ignore the
    database from writing to the binary log.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用`--binlog-ignore-db=db_name`选项来忽略写入二进制日志的数据库。
- en: Refer to the manual for more information, at: [https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html](https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅手册：[https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html](https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html)。
- en: Relocating binary logs
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新定位二进制日志
- en: Since binary logs occupy more space, and sometimes you may wish to change the
    location of binary logs, the following procedure helps. Changing the `log_bin`
    alone is not sufficient, you have to move all the binary logs and update the index
    file with the new location. The `mysqlbinlogmove` utility eases your work by automating
    those tasks.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于二进制日志占用更多空间，有时您可能希望更改二进制日志的位置，以下过程有所帮助。仅更改`log_bin`是不够的，您必须移动所有二进制日志并使用新位置更新索引文件。`mysqlbinlogmove`实用程序通过自动化这些任务来简化您的工作。
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: MySQL Utilities should be installed for using the `mysqlbinlogmove` script.
    Refer to [Chapter 1](part0025.html#NQU20-faa69fe6f4c04957afca3568dcd9cd83), *MySQL
    8.0 – Installing and Upgrading*,  for installation steps.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 安装MySQL Utilities以使用`mysqlbinlogmove`脚本。有关安装步骤，请参阅[第1章](part0025.html#NQU20-faa69fe6f4c04957afca3568dcd9cd83)，*MySQL
    8.0 – Installing and Upgrading*。
- en: 'Stop the MySQL server:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止MySQL服务器：
- en: '[PRE47]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Start the `mysqlbinlogmove` utility. If you want to change the binary logs
    from `/data/mysql/binlogs` to `/binlogs`, the following command should be used.
    If your base name is not default, you have to mention your base name through the `--bin-log-base
    name` option:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`mysqlbinlogmove`实用程序。如果要将二进制日志从`/data/mysql/binlogs`更改为`/binlogs`，则应使用以下命令。如果您的基本名称不是默认值，则必须通过`--bin-log-base
    name`选项提及您的基本名称：
- en: '[PRE48]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Edit the `my.cnf` file and update the new location of `log_bin`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`my.cnf`文件并更新`log_bin`的新位置：
- en: '[PRE49]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Start the MySQL server:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MySQL服务器：
- en: '[PRE50]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The new location is updated in AppArmor or SELinux.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 新位置在AppArmor或SELinux中得到更新。
- en: If there are a lot of binlogs, the downtime of the server will be high. To avoid
    that you can use the `--server` option to relocate all binary logs except the
    ones currently in use (with the higher sequence number). Then stop the server,
    use the preceding method, and relocate the last binary log, which will be much
    faster because only one file is there. Then you can change the `my.cnf` and start
    the server.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有很多二进制日志，服务器的停机时间会很长。为了避免这种情况，您可以使用“--server”选项来重新定位除当前正在使用的日志之外的所有二进制日志（具有更高的序列号）。然后停止服务器，使用前面的方法，重新定位最后一个二进制日志，这将会快得多，因为只有一个文件在那里。然后您可以更改“my.cnf”并启动服务器。
- en: 'For example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE51]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
