- en: Chapter 3. Data Naming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 数据命名
- en: In this chapter, we focus on transforming the data elements gathered in the
    collection process into a cohesive set of column names. Although this chapter
    has sections for the various steps we should accomplish for efficient data naming,
    there is no specific order in which to apply those steps. In fact, the whole process
    is broken down into steps to shed some light on each one in turn, but the actual
    naming process applies all those steps at the same time. Moreover, the division
    between the naming and grouping processes is somewhat artificial—you'll see that
    some decisions about naming influence the grouping phase, which is the subject
    of the next chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于将收集过程中获取的数据元素转化为一组连贯的列名。尽管本章有针对各个步骤的节，以实现高效的数据命名，但这些步骤的实际应用顺序并不固定。事实上，整个过程被分解为步骤，以便逐一阐明每个步骤，但实际的命名过程同时应用了所有这些步骤。此外，命名和分组过程之间的划分在某种程度上是人为的——你会看到，关于命名的某些决策会影响分组阶段，这是下一章的主题。
- en: Data Cleaning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据清理
- en: Having gathered information elements from various sources, some cleaning work
    is appropriate to improve the significance of these elements. The way each interviewee
    named elements might be inconsistent; moreover, the significance of a term can
    vary from person to person. Thus, a synonym detection process is in order.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从各种来源收集信息元素后，进行一些清理工作以提高这些元素的重要性是恰当的。每位受访者命名元素的方式可能不一致；此外，一个术语的重要性可能因人而异。因此，进行同义词检测是必要的。
- en: Since we took note of sample values, now it is time to cross-reference our list
    of elements with those sample values. Here is a practical example, using the car's
    id number.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们已注意到样本值，现在是时候将我们的元素列表与这些样本值进行交叉参考了。以下是一个实际例子，使用车辆识别号。
- en: When the decision is made to order a car—a Mitsou 2007—the office clerk opens
    a new file and assigns a sequential number dubbed `car_id number` to the file,
    for instance, 725\. At this point, no confirmation has been received from any
    car supplier, so the clerk does not know the future car's serial number—a unique
    number stamped on the engine and other critical parts of the vehicle.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当决定订购一辆车——比如2007年的Mitsou——办公室职员会打开一个新文件，并给文件分配一个称为`car_id number`的序号，例如725。此时，尚未从任何汽车供应商处收到确认，因此职员不知道未来车辆的序列号——一个在发动机和其他关键部件上压印的唯一号码。
- en: This car's id number is referred to as the `car_number` by the office clerk.
    The store assistants who register car movements use the name `stock_number`. But
    using this car number or the stock number is not meaningful for financing and
    insurance purposes; the car's serial number is used instead for that purpose.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 办公室职员将这辆车的识别号称为`car_number`。注册车辆移动的商店助理使用名称`stock_number`。但使用这个车辆号码或库存号码对于融资和保险目的并不具有意义；相反，车辆的序列号用于这些目的。
- en: At this point, a consensus must be reached by convincing users about the importance
    of standard terms. It must become clear to everyone that the term `car_number`
    is not precise enough to be used, so it will be replaced by `car_internal_number`
    in the data elements list, probably also in any user interface (UI) or report.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，必须通过说服用户认识到标准术语的重要性来达成共识。必须让每个人都清楚，`car_number`这一术语不够精确，因此它将在数据元素列表中被`car_internal_number`取代，很可能在任何用户界面（UI）或报告中也是如此。
- en: 'It can be argued that `car_internal_number` should be replaced by something
    more appropriate; the important point here is we merged two synonyms: `car_number`
    and `stock_number`, and established the difference between two elements that looked
    similar but were not, eliminating a source of confusion.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会认为`car_internal_number`应该被更恰当的东西取代；关键在于我们合并了两个同义词：`car_number`和`stock_number`，并明确了两个看似相似但实则不同的元素之间的区别，消除了一个混淆的源头。
- en: 'Therefore we end up with the following elements:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们得到了以下元素：
- en: '`Car_serial_number`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Car_serial_number`'
- en: '`Car_internal_number` (former car id number and stock number)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Car_internal_number`（前身为车辆识别号和库存号）'
- en: 'Eventually, when dealing with data grouping, another decision will have to
    be taken: to which number, serial or internal, do we associate the car''s physical
    key number.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在处理数据分组时，将不得不做出另一个决定：我们将车辆的物理钥匙号码与哪个号码——序列号还是内部号——关联起来。
- en: Subdividing Data Elements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 细分数据元素
- en: In this section, we try to find out if some elements should be broken into more
    simple ones. The reason for doing so is that, if an element is composed of many
    parts, applications will have to break it for sorting and selection purposes.
    Thus it's better to break the elements right now at the source. Recomposing it
    will be easier at the application level.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们试图找出某些元素是否应该分解成更简单的部分。这样做的原因是，如果一个元素由多个部分组成，应用程序将不得不为了排序和选择目的而分解它。因此，最好现在就在源头分解元素。在应用程序层面重新组合它将更容易。
- en: Breaking the elements provides more clarity at the UI level. Therefore, at this
    level we will avoid (as much as possible) the well-known last-name/first-name
    inversion problem.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 分解元素在UI层面提供了更多清晰度。因此，在这个层面上，我们将尽量避免（尽可能）众所周知的姓/名颠倒问题。
- en: 'As an example for this problem, let''s take the buyer''s name. During the interview,
    we noticed that the name is expressed in various ways on the forms:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个问题，我们以买家的名字为例。在访谈中，我们注意到名字在表格上有多种表达方式：
- en: '| Form | How the name is expressed |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 表格 | 名字的表达方式 |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Delivery certificate | Mr Joe Smith |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 交付证明 | 乔·史密斯先生 |'
- en: '| Sales contract | Smith, Joe |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 销售合同 | 史密斯，乔 |'
- en: We notice that
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到
- en: There is a salutation element, Mr
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个称呼元素，先生
- en: The element `name` is too imprecise; we really have a first name and a last
    name
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素`name`过于不精确；我们实际上有一个名字和一个姓氏
- en: On the sales contract, the comma after our last name should really be excluded
    from the element, as it's only a formatting character
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在销售合同上，我们的姓氏后面的逗号实际上应该从元素中排除，因为它只是一个格式化字符
- en: 'As a result, we determine that we should sub-divide the name into the following
    elements:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们确定我们应该将名字细分为以下元素：
- en: Salutation
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 称呼
- en: First name
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名字
- en: Last name
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓氏
- en: Sometimes it's useful to sub-divide an element, sometimes it's not. Let's consider
    the date elements. We could sub-divide each one into year, month, and day (three
    integers) but by doing so, we would lose the date calculation possibilities that
    MySQL offers. Among those are, finding the week day from a date, or determining
    the date that falls thirty days after a certain date. So for the date (and time),
    a single column can handle it all, although at the UI level, separate entry fields
    should be displayed for year, month, and day. This is to avoid any possibility
    of mix-up and also because we cannot expect users to know about what MySQL accepts
    as a valid date. There is a certain latitude in the range of valid values but
    we can take it for granted that users have unlimited creativity, regarding how
    to enter invalid values. If a single field is present on the UI, clear directions
    should be provided to help with filling this field correctly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时将一个元素进一步细分是有用的，有时则不然。让我们考虑日期元素。我们可以将每个日期细分为年、月和日（三个整数），但这样做会失去MySQL提供的日期计算可能性。其中包括，从日期中找出星期几，或确定某个日期三十天后的日期。因此，对于日期（和时间），单个列可以处理所有内容，尽管在UI层面，应为年、月和日显示单独的输入字段。这是为了避免任何混淆的可能性，也因为我们不能期望用户知道MySQL接受的有效日期是什么。有效值的范围有一定的灵活性，但我们可以理所当然地认为用户在输入无效值方面具有无限的创造力。如果UI上只有一个字段，应提供明确的指导以帮助正确填写此字段。
- en: Data Elements Containing Formatting Characters
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含格式化字符的数据元素
- en: The last case we'll examine is the phone number. In many parts of the world,
    the phone number follows a specific pattern and also uses formatting characters
    for legibility. In North America, we have a regional code, an exchange number,
    and phone number, for example, 418-111-2222; an extension could possibly be appended
    to the phone number. However, in practice only the regional code and extension
    are separated from the rest into data elements of their own. Moreover, people
    often enter formatting characters like (418) 111-2222 and expect those to be output
    back. So, a standard output format must be chosen, and then the correct number
    of sub-elements will have to be set into the model to be able to recreate the
    expected output.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后要考察的是电话号码。在世界许多地方，电话号码遵循特定模式，并使用格式化字符以提高可读性。在北美，我们有区号、交换号和电话号码，例如，418-111-2222；电话号码后面可能还会加上分机号。然而，在实践中，只有区号和分机号被从其余部分分离出来，成为独立的数据元素。此外，人们经常输入格式化字符，如(418)
    111-2222，并期望这些字符能被输出回来。因此，必须选择一个标准输出格式，然后正确设置模型中的子元素数量，以便能够重新创建预期的输出。
- en: Data that are Results
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为结果的数据
- en: Even though it might seem natural to have a distinct element for the `total_price`
    of the car, in practice this is not justified. The reason is that the total price
    is a computed result. Having the total price printed on a sales contract constitutes
    an output. Thus, we eliminate this information in the list of column names. For
    the same reason, we could omit the `tax` column because it can be computed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管似乎自然地为汽车的`total_price`设置一个独立的元素，但实际上这并不合理。原因是总价是一个计算结果。在销售合同上打印总价构成了一种输出。因此，我们在列名列表中消除了这一信息。出于同样的原因，我们可以省略`tax`列，因为它可以计算得出。
- en: 'By removing the total price column, we could encounter a pitfall. We have to
    be sure that we can reconstruct this total price from other sub-total elements,
    now and in the future. This might not be possible for a number of reasons:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除总价列，我们可能会遇到一个陷阱。我们必须确保能够从其他子总元素中重建这个总价，现在和将来都是如此。出于多种原因，这可能是不可能的：
- en: The total price includes an amount located in another table, and this table
    will change over time (for example, the tax rate). To avoid this problem, see
    the recommendations in the *Scalability over Time* section in [Chapter 4](ch05.html
    "Chapter 4. Data Grouping").
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总价包括位于另一个表中的金额，而这个表会随时间变化，例如税率。为了避免这个问题，请参阅[第四章](ch05.html "第四章 数据分组")中*随时间可扩展性*部分的建议。
- en: 'This total price contains an arbitrary value, due to some exceptional cases,
    for example, where there is a special sale, and the rebate was not planned in
    the system, or when the lucky buyer is the brother-in-law of the general manager!
    In this case, a decision can be made: adding a new column `other_rebate`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个总价包含了一个任意值，由于某些特殊情况，例如，有特别促销，而系统中未计划回扣，或者幸运买家是总经理的姐夫！在这种情况下，可以做出决定：增加一个新列`other_rebate`。
- en: Data as a Column's or Table's Name
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据作为列名或表名
- en: 'Now is the time to uncover what is perhaps the least known of the data naming
    problems: data hidden in a column''s or even a table''s name.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是揭露可能是最不为人知的数据命名问题的时候了：数据隐藏在列名甚至表名中。
- en: We had one example of this in [Chapter 1](ch02.html "Chapter 1. Introducing
    MySQL Design"). Remember the `qty_2006_1` column name. Although this is a commonly
    seen mistake, it's a mistake nonetheless. We clearly have two ideas here, the
    quantity and the date. Of course, to be able to use just two columns, some work
    will have to be done regarding the keys—this is covered in [Chapter 4](ch05.html
    "Chapter 4. Data Grouping"). For now, we should just use elements like `quantity`
    and `date` in our elements list, avoiding representing data in a column's name.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第一章](ch02.html "第一章 引入MySQL设计")中有一个这样的例子。记得`qty_2006_1`这个列名。尽管这是一个常见的错误，但它仍然是一个错误。这里我们明显有两个概念，数量和日期。当然，为了能够只使用两个列，关于键的一些工作必须完成——这在[第四章](ch05.html
    "第四章 数据分组")中有所涉及。目前，我们应该在我们的元素列表中使用像`quantity`和`date`这样的元素，避免在列名中表示数据。
- en: To find those problematic cases in our model, a possible method is to look for
    numbers. Column names like `address1, address2` or `phone1, phone2` should look
    suspicious.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的模型中找到这些有问题的案例，一种可能的方法是寻找数字。像`address1, address2`或`phone1, phone2`这样的列名应该看起来可疑。
- en: Now, have a look in [Chapter 2](ch03.html "Chapter 2. Data Collecting") at the
    data elements we got from our store assistant. Can you find a case of data being
    hidden in a column name?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请看[第二章](ch03.html "第二章 数据收集")中我们从店员那里得到的数据元素。你能找到一个数据隐藏在列名中的案例吗？
- en: If you have done this exercise, you might have found many past participles hidden
    into the column names, like *ordered, arrived*, and *washed*. These describe the
    events that happen to a car. We could try to anticipate all possible events but
    it might prove impossible. Who knows when a new column `car_provided_with_big_ribbon`
    will be needed? Such events, if treated as distinct column names, must be addressed
    by
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了这个练习，你可能会发现许多过去分词隐藏在列名中，如*已订购、已到达*和*已清洗*。这些描述了发生在汽车上的事件。我们可以尝试预见所有可能的事件，但这可能证明是不可能的。谁知道什么时候会需要一个新的列`car_provided_with_big_ribbon`？如果将这些事件作为不同的列名处理，必须通过
- en: A change in the data structure
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构的变更
- en: A change in the code (UI and reports)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码（UI和报告）的变更
- en: 'To stay flexible and avoid the wide-table syndrome, we need two tables: `car_event`
    and `event`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持灵活性并避免宽表综合症，我们需要两个表：`car_event`和`event`。
- en: '![Data as a Column''s or Table''s Name](img/1302_03_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![数据作为列名或表名](img/1302_03_01.jpg)'
- en: 'Here are the structure and sample values for those tables:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些表的结构和示例值：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The usage of backticks here ('event'), although not standard SQL, is a MySQL
    extension used to enclose and protect identifiers. In this specific case, it could
    help us with MySQL 5.1 in which the event keyword is scheduled to become part
    of the language for some another purpose (`CREATE EVENT`). At the time of writing,
    beta version MySQL 5.1.11 accepts `CREATE TABLE event`, but it might not always
    be true.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此处使用反引号（'event'），虽然不是标准SQL，但这是MySQL扩展，用于包围和保护标识符。在特定情况下，它可以帮助我们在MySQL 5.1中，其中event关键字计划成为语言的一部分，用于其他目的（`CREATE
    EVENT`）。在撰写本文时，MySQL 5.1.11 beta版接受`CREATE TABLE event`，但这可能不会一直成立。
- en: 'The following image shows sample values entered into the `event` table from
    within the **Insert** sub-page of phpMyAdmin:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了通过phpMyAdmin的**插入**子页面输入到`event`表中的示例值：
- en: '![Data as a Column''s or Table''s Name](img/1302_03_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![数据作为列名或表名](img/1302_03_02.jpg)'
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Again, sample values are entered via phpMyAdmin:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，示例值通过phpMyAdmin输入：
- en: '![Data as a Column''s or Table''s Name](img/1302_03_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![数据作为列名或表名](img/1302_03_03.jpg)'
- en: 'Data can also hide in a table name. Let''s consider the `car` and `truck` tables.
    They should probably be merged into a `vehicle` table, since the vehicle''s category—truck,
    car, and other values like minivan is really an attribute of a particular vehicle.
    We could also find another case for this table name problem: a table named `vehicle_1996`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数据也可能隐藏在表名中。让我们考虑`car`和`truck`表。它们可能应该合并为一个`vehicle`表，因为车辆的类别——卡车、汽车以及其他值如小型货车，实际上是特定车辆的一个属性。我们还可以为这个表名问题找到另一个案例：一个名为`vehicle_1996`的表。
- en: Planning for Changes
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更规划
- en: When designing a data structure, we have to think about how to manage its growth
    and the possible implications of the chosen technique.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计数据结构时，我们必须考虑如何管理其增长以及所选技术可能带来的影响。
- en: Let's say an unplanned car characteristic—the weight—has to be supported. The
    normal way of solving this is to find the proper table and add a column. Indeed,
    this is the best solution; however, someone has to alter the table's structure,
    and probably the UI too.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设需要支持一个未计划的轿车特性——重量。通常的解决方法是找到适当的表并添加一个列。确实，这是最佳解决方案；然而，需要有人更改表结构，可能还需要更改用户界面。
- en: The **free fields technique**, also called second-level data or **EAV** (Entity-Attribute-Value)
    technique is sometimes used in this case. To summarize this technique, we use
    a column whose value is a column name by itself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**自由字段技术**，也称为二级数据或**EAV**（实体-属性-值）技术，在这种情况下有时会被采用。简而言之，我们使用一个其值本身就是列名的列。'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even if this technique is shown here, I do not recommend using it, for the reasons
    explained in the *Pitfalls of the Free Fields Technique* section below.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此处展示了此技术，但我不建议使用它，原因在下面的*自由字段技术的陷阱*部分中解释。
- en: The difference between this technique and our `car_event` table is that, for
    `car_event`, the various attributes can all be related to a common subject, which
    is the event. On the contrary, free fields can store any kind of dissimilar data.
    This might also be a way to store data specific to a single instance or row of
    a table.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术与我们的`car_event`表的区别在于，对于`car_event`，各种属性都可以与一个共同主题——事件相关联。相反，自由字段可以存储任何类型的不同数据。这也可以是存储特定于单个实例或行表的数据的一种方式。
- en: In the following example, we use the `car_free_field` table to store unplanned
    information about the car whose `internal_number` is 412\. The weight and special
    paint had not been planned, so the UI gave the user the chance to specify which
    information they want to keep, and the corresponding value. We see here a screenshot
    from phpMyAdmin but most probably, another UI would be presented to the user—for
    example the salesperson who might not be trained to play at the database level.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用`car_free_field`表来存储关于内部编号为412的汽车的未计划信息。重量和特殊油漆未被计划，因此用户界面为用户提供了指定他们想要保留哪些信息以及相应值的机会。此处展示的是phpMyAdmin的截图，但很可能用户会看到另一种界面——例如，销售人员可能未受过数据库层面的操作培训。
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Planning for Changes](img/1302_03_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![变更规划](img/1302_03_04.jpg)'
- en: Pitfalls of the Free Fields Technique
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自由字段技术的陷阱
- en: Even if it's tempting to use this kind of table for added flexibility and to
    avoid user interface maintenance, there are a number of reasons why we should
    avoid using it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用这种表格可以增加灵活性并避免用户界面维护，但出于多种原因，我们应避免使用它。
- en: It becomes impossible to link this "column" (for example the **special paint
    needed**) to a lookup table containing the possible colors, with a foreign key
    constraint.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这个“列”（例如所需的**特殊油漆**）与包含可能颜色的查找表通过外键约束关联起来变得不可能。
- en: The `free_value` field itself must be defined with a generic field type like
    `VARCHAR` whose size must be wide enough to accommodate all values for all possible
    corresponding `free_name` values.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`free_value`字段本身必须定义为`VARCHAR`这样的通用字段类型，其大小必须足够宽以容纳所有可能对应的`free_name`值的所有值。'
- en: It prevents easy validation (for a weight, we need a numeric value).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得验证变得不易（例如，对于重量，我们需要一个数值）。
- en: Coding the SQL queries on these free fields becomes more complex—i.e. `SELECT
    internal_number from car_free_field where free_name = 'weight' and free_value
    > 2000`.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这些自由字段上编写SQL查询变得更加复杂——例如`SELECT internal_number from car_free_field where free_name
    = 'weight' and free_value > 2000`。
- en: Naming Recommendations
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名建议
- en: Here we touch a subject that can become sensitive. Establishing a naming convention
    is not easily done, because it can interfere with the psychology of the designers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们触及了一个可能变得敏感的话题。建立命名约定并不容易，因为它可能干扰设计师的心理。
- en: Designer's Creativity
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计师的创意
- en: Programmers and designers usually think of themselves as imaginative, creative
    people; UI design and data model are the areas in which they want to express those
    qualities. Since naming is writing, they want to put a personal stamp to the column
    and table names. This is why working as a team for data structure design necessitates
    a good dose of humility and achieves good results only if everyone is a good team
    player.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员和设计师通常认为自己是有想象力、有创造力的人；UI设计和数据模型是他们想要表达这些品质的领域。由于命名即写作，他们希望在列和表名上留下个人印记。这就是为什么团队合作进行数据结构设计需要一定程度的谦逊，并且只有当每个人都成为优秀的团队成员时才能取得良好结果。
- en: Also, when looking at the work of others in this area, there is a great temptation
    to *improve* the data elements names. Some discipline in the standardization has
    to be applied and all the team members have to collaborate.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在审视这一领域的他人工作时，有一种强烈的诱惑去*改进*数据元素的名称。在标准化方面需要有一定的纪律，并且所有团队成员必须协作。
- en: Abbreviations
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩写
- en: Probably because older database systems had severe restrictions about the representation
    of variables and data elements in general, the practice of abbreviating has been
    taught for many years and is followed by many data structure designers and programmers.
    I used programming languages that accepted only two characters for variable names—we
    had to extensively comment the correspondence between those cropped variables
    and their meaning.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是因为早期的数据库系统对变量和数据元素的表示有严格的限制，缩写的做法多年来一直被教授，并被许多数据结构设计师和程序员遵循。我使用过的编程语言只接受两个字符的变量名——我们不得不大量注释这些截断的变量与其含义之间的对应关系。
- en: Nowadays, I see no valid reasons for systematically abbreviating all column
    and table names; after all, who will understand the meaning of your `T1` table
    or your `B7` field?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我看不出有任何理由系统地缩写所有列和表名；毕竟，谁会理解你的`T1`表或你的`B7`字段的含义呢？
- en: 'Clarity versus Length: an Art'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清晰度与长度：一门艺术
- en: 'A consistent style of abbreviations should be used. In general, only the most
    meaningful words of a sentence should be put into a name, dropping prepositions,
    and other small words. As an example, let''s take the postal code. We could express
    this element with different column names:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 应采用一致的缩写风格。通常，一个句子中最有意义的词应该被放入名称中，省略介词和其他小词。以邮政编码为例，我们可以用不同的列名来表示这个元素：
- en: the_postal_code
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: the_postal_code
- en: pstl_code
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pstl_code
- en: pstlcd
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pstlcd
- en: postal_code
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: postal_code
- en: I recommend the last one for its simplicity.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐最后一个，因其简洁性。
- en: Suffixing
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后缀
- en: Carefully chosen suffixes can add clarity to column names. As an example, for
    the *date of first payment* element, I would suggest `first_payment_date`. In
    fact, the last word of a column name is often used to describe the type of content—like
    `customer_no, color_code, interest_amount`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 精心选择的后缀可以为列名增添清晰度。例如，对于*首次付款日期*元素，我建议使用`first_payment_date`。实际上，列名的最后一个词通常用来描述内容的类型——如`customer_no,
    color_code, interest_amount`。
- en: The Plural Form
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复数形式
- en: 'Another point of controversy for table names: should we use the plural form
    `cars` table? It can be argued that the answer is yes because this table contains
    many cars—in other words, it is a set. Nonetheless, I tend not to use the plural
    form for the simple reason that it adds nothing in terms of information. I know
    that a table is a set, so using the plural form would be redundant. It can be
    said also that each row describes one car.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于表名的另一个争议点：我们是否应使用复数形式的`cars`表？可以认为答案是肯定的，因为该表包含多辆汽车——换句话说，它是一个集合。然而，我倾向于不使用复数形式，原因很简单，它并未增加任何信息量。我知道表是一个集合，因此使用复数形式会显得多余。也可以说，每一行描述了一辆汽车。
- en: If we consider the subject on the angle of queries, we can draw different conclusions
    depending on the query. A query referring to the car table—`select car.color_code
    from car where car.id = 34` is more elegant if the plural form is not used, because
    the main idea here is that we retrieve one car whose id equals 34\. Some other
    queries might make more sense with a plural, like `select count(*) from cars`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从查询的角度考虑主题，我们可以根据查询得出不同的结论。例如，针对汽车表的查询——`select car.color_code from car where
    car.id = 34`，若不使用复数形式，则显得更为优雅，因为这里的主要意图是检索ID等于34的单辆汽车。而其他一些查询可能使用复数形式更有意义，如`select
    count(*) from cars`。
- en: As a conclusion for this section, the debate is not over, but the most important
    point is to choose a form and be consistent throughout the whole system.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 综上所述，这一部分的争论尚未结束，但最关键的是选择一种形式并在整个系统中保持一致。
- en: Naming Consistency
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名一致性
- en: We should ensure that a data element that is present in more than one table
    is represented everywhere by the same column name. In MySQL, a column name does
    not exist by itself; it is always inside a table. This is why, unfortunately,
    we cannot pick up consistent column names from, say, a pool of standardized column
    names and associate it with the tables. Instead, during each table's creation
    we indicate the exact column names we want and their attributes. So, let's avoid
    using different names—`internal_number` and `internal_num` when they refer to
    the same reality.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应确保存在于多个表中的数据元素在各处均以相同的列名表示。在MySQL中，列名并非独立存在，它总是位于表内。因此，遗憾的是，我们不能从一组标准化的列名池中挑选一致的列名并将其与表关联。相反，在创建每个表时，我们需明确指定所需的列名及其属性。因此，让我们避免使用不同的名称——如`internal_number`和`internal_num`，当它们指向同一实体时。
- en: 'An exception for this: if the column''s name refers to a key in another table—the
    `state` column—and we have more than one column referring to it like `state_of_birth,
    `state_of_residence``.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对此有一个例外：如果列名指向另一表中的键——如`state`列——并且有多个列指向它，比如`state_of_birth`、`state_of_residence`。
- en: MySQL's Possibilities versus Portability
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL的可能性与可移植性
- en: MySQL permits the use of many more characters for identifiers—database, table,
    and column names than its competitors. The blank space is accepted as are accented
    characters. The simple trade-off is that we need to enclose such special names
    with back quotes like `'state of residence'`. This procures a great liberty in
    the expression of data elements, especially for non-English designers, but introduces
    a state of non-portability because those identifiers are not accepted in standard
    SQL. Even some SQL implementations only accept uppercase characters for identifiers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL允许在标识符——数据库、表和列名中使用比其竞争对手更多的字符。空格和重音字符均被接受。简单的权衡是，我们需要用反引号将这些特殊名称括起来，如`'state
    of residence'`。这为数据元素的表达提供了极大的自由，尤其是对非英语设计者而言，但引入了不可移植的状态，因为这些标识符在标准SQL中不被接受。甚至某些SQL实现仅接受大写标识符。
- en: I recommend being very prudent before deciding to include such characters. Even
    when staying faithful to MySQL, there has been a portability issue between versions
    earlier than 4.1 when upgrading to 4.1\. In 4.1.x, MySQL started to represent
    identifiers internally in UTF-8 code, so a renaming operation had to be done to
    ensure that no accented characters in the database, table, column and constraint
    names were present before the upgrade. This tedious operation is not very practical
    in a 24/7 system availability context.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定包含此类字符之前，我建议应极为谨慎。即便忠于MySQL，在升级至4.1之前的版本时，也曾出现过可移植性问题。在4.1.x版本中，MySQL开始以内置UTF-8编码表示标识符，因此在升级前必须进行重命名操作，确保数据库、表、列及约束名中不包含重音字符。在24/7系统可用性的背景下，这一繁琐操作并不实用。
- en: Table Name into a Column Name
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表名转为列名
- en: 'Another style I often see: one would systematically add the table name as a
    prefix to every column name. Thus the `car` table would be comprised of the columns:
    `car_id_number, car_serial_number`. I think this is redundant and it shows its
    inelegance when examining the queries we build:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见风格是：人们会系统地将表名作为前缀添加到每个列名上。因此，`car` 表将包含以下列：`car_id_number, car_serial_number`。我认为这显得多余，且在审视我们构建的查询时，这种做法的不优雅之处便显而易见：
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: is not too bad, but when joining tables we get a query such as
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这还不算太糟，但当进行表连接时，我们得到的查询会是这样的：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since at the application level, the majority of queries we code are multi-tables
    like the one used above, the clumsiness of using a table name even abbreviated
    as part of column names becomes readily apparent. Of course, the same exception
    we saw in the *Naming Consistency* section applies: a column—foreign key—referring
    to a lookup table normally includes this table''s name as part of the column''s
    name. For example, in the `car_event` table, we have `event_code` which refers
    to the `code` column in table `event`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在应用层面，我们编写的大多数查询都是涉及多表的，如上例所示，使用表名（即使是缩写）作为列名的一部分，其笨拙性变得显而易见。当然，我们在*命名一致性*部分提到的例外情况同样适用：指向查找表的外键列通常会包含该表名作为列名的一部分。例如，在`car_event`
    表中，我们有`event_code`，它指向`event` 表中的`code` 列。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To get a clear and understandable data structure, proper data elements naming
    is important. We examined many techniques to apply in order to build consistent
    table and column names.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得清晰且易于理解的数据结构，恰当的数据元素命名至关重要。我们探讨了多种技巧，以确保构建出一致的表名和列名。
