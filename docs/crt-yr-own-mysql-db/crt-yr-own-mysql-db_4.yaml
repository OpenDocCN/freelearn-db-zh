- en: Chapter 4. Data Grouping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 数据分组
- en: In the previous chapters, we built a data collection, and started to clean it
    by proper naming. We had already introduced, in [Chapter 1](ch02.html "Chapter 1. Introducing
    MySQL Design"), the notion of a table, which logically regroups information about
    a certain subject. Some of the columns we gathered were grouped into tables during
    the naming process. While doing so, we noticed that the process of name checking
    was sometimes leading us to decompose data into more tables, like we did for the
    `car_event` and `event` tables. The goal of the present chapter is to provide
    finishing touches to our structure, by examining the technique of grouping column
    names into tables. Our data elements won't be living "in the air"; they will have
    to be organized into tables. Exactly which columns must be placed into which table
    will be considered here.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们构建了数据收集，并通过适当的命名开始清理它。我们在[第1章](ch02.html "第1章 介绍MySQL设计")中已经介绍了表的概念，它逻辑上汇总了关于某个主题的信息。我们在命名过程中将收集到的一些列分组到表中。在此过程中，我们注意到名称检查有时会引导我们将数据分解到更多的表中，就像我们对`car_event`和`event`表所做的那样。本章的目标是通过检查将列名分组到表中的技术，为我们的结构提供最后的润色。我们的数据元素不会“悬空”；它们必须被组织到表中。具体哪些列必须放在哪个表中，将在本节中考虑。
- en: Initial List of Tables
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始表列表
- en: 'When building the structure, we can start by finding general, natural subjects
    which look promising for grouping data. These subjects will provide our initial
    list of tables—here is an abridged example of what this list might look like:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 构建结构时，我们可以先找出那些看似适合数据分组的通用、自然主题。这些主题将提供我们初始的表列表——以下是一个简化的示例，展示了这个列表可能的样子：
- en: vehicle
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆
- en: customer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户
- en: event
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: vehicle sale
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆销售
- en: customer satisfaction survey
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户满意度调查
- en: We'll begin our columns grouping work by considering the `vehicle` table.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从考虑`vehicle`表开始进行列分组工作。
- en: Rules for Table Layout
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表布局规则
- en: 'There can be more than one correct solution, but any correct solution will
    tend to respect the following principles:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在多个正确解决方案，但任何正确解决方案都将倾向于遵循以下原则：
- en: each table has a primary key
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个表都有一个主键
- en: no redundant data is present when considering all tables as a whole
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当考虑所有表作为一个整体时，不存在冗余数据
- en: all columns in a table depend directly upon all segments of the primary key
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表中的所有列都直接依赖于主键的所有部分
- en: These principles will be studied in details in the following sections.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原则将在以下章节中详细研究。
- en: Primary Keys and Table Names
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主键和表名
- en: Let's start by defining the concept of a **unique key**. A column on which a
    unique key is defined cannot hold the same value more than once for this table.
    The **primary key** is composed of one or more columns, it is a value that can
    be used to identify a unique row in a table. Why do we need a primary key? MySQL
    itself does not force us to have a primary key, neither a unique key nor any other
    kind of key, for a specific table. Thus MySQL puts us under no obligation to follow
    Codd's rules. However, in practice it's important to have a primary key; experience
    acquired while building web interfaces and other applications shows that it's
    very useful to be able to refer to a key identifying a row in a unique way. In
    MySQL, a primary key is a unique key where all columns have to be defined as `NOT
    NULL`; the name of this key is `PRIMARY`. Choosing the primary key is done almost
    at the same time as choosing the table's name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来定义**唯一键**的概念。在定义了唯一键的列上，该表中不能有重复的值。**主键**由一个或多个列组成，它是可以用来唯一标识表中一行的值。为什么我们需要主键？MySQL本身并不强制要求特定表必须有主键，也不强制要求有唯一键或其他类型的键。因此，MySQL并不强制我们遵循Codd的规则。然而，在实践中拥有主键是很重要的；在构建Web界面和其他应用程序时获得的经验表明，能够通过一个唯一标识一行的键进行引用是非常有用的。在MySQL中，主键是一个所有列都必须定义为`NOT
    NULL`的唯一键；这个键的名称是`PRIMARY`。选择主键几乎与选择表名同时进行。
- en: Selecting the name of our tables is a delicate process. We have to be general
    enough to provide for future expansion—like the `vehicle` table instead of `car`
    and `truck`. At the same time, we try to avoid having holes—empty columns in our
    tables.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 选择表名是一个微妙的过程。我们必须足够通用，以便为将来的扩展提供空间——例如，选择`vehicle`表而不是`car`和`truck`。同时，我们试图避免出现空洞——即表中的空列。
- en: To decide if we should have a `vehicle` table or two separate tables, we look
    at the possible attributes for each kind of vehicle. Are they common enough? Both
    vehicle types have a color, a model, a year, a serial number, and an internal
    id number. Theoretically, the list of columns must be identical for us to decide
    that a group of columns will belong to a single table; but we can cheat a bit,
    if there are only a few attributes that are different.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了决定是否应该有一个`vehicle`表或两个单独的表，我们查看每种车辆的可能属性。它们是否足够常见？两种车辆类型都有颜色、型号、年份、序列号和内部编号。理论上，列的列表必须相同，我们才能决定一组列将属于单个表；但如果只有少数几个属性不同，我们可以稍微作弊。
- en: 'Let''s say we decide to have a `vehicle` table. For reasons explained earlier,
    we want to track a vehicle since the moment we order it—we''ll use its internal
    id number as the primary key. When designing this table, we ask ourselves whether
    this table can be used to store information about the vehicles we receive in exchange
    from the customer. The answer is *yes*, since describing a vehicle has nothing
    to do with the transactions that happen to it (new vehicle sold, used vehicle
    bought from the customer). The section *Validating the Structure* gives further
    examples that can help catching problems in the structure. Here is version 1 of
    the `vehicle` table, with column names and sample values—we mark the columns comprising
    the primary key with an asterisk:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定创建一个`vehicle`表。由于前面解释的原因，我们希望从订购车辆的那一刻起跟踪车辆——我们将使用其内部编号作为主键。在设计此表时，我们询问自己此表是否可以用于存储我们从客户那里交换得来的车辆信息。答案是*肯定*的，因为描述车辆与发生在车辆上的交易（新车销售、从客户那里购买的二手车）无关。*验证结构*部分提供了更多示例，可以帮助发现结构中的问题。以下是`vehicle`表的版本1，包含列名和示例值——我们用星号标记构成主键的列：
- en: '| table: vehicle | column name | sample value |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 表：车辆 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *internal_id | 123 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|   | *内部编号 | 123 |'
- en: '|   | serial_number | D8894JF |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|   | 序列号 | D8894JF |'
- en: '|   | brand | Licorne |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '|   | 品牌 | Licorne |'
- en: '|   | model | Gazelle |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|   | 型号 | 瞪羚 |'
- en: '|   | year | 2007 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '|   | 年份 | 2007 |'
- en: '|   | color | ocean blue |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '|   | 颜色 | 海洋蓝 |'
- en: '|   | condition | new |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '|   | 状况 | 全新 |'
- en: 'Should we include the sales info, for example, pricing and date of sale, in
    this table? We determine that the answer is *no* since a number of things can
    happen:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在此表中包含销售信息，例如定价和销售日期吗？我们确定答案是*否*，因为可能会发生多种情况：
- en: the vehicle can be resold
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆可以转售
- en: the table might be used to hold information about a vehicle received in exchange
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该表可能用于存储交换得来的车辆信息
- en: We now have to examine our work and verify that we have respected the principles.
    We have a primary key, but what about redundancy and dependency?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在必须检查我们的工作并验证我们是否遵守了原则。我们有一个主键，但冗余和依赖性呢？
- en: Data Redundancy and Dependency
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据冗余和依赖性
- en: 'Whenever possible, we should evacuate redundant data into lookup tables—also
    called reference tables and store only the value of the codes into our main tables.
    We don''t want to repeat "Licorne" into our vehicle table for each Licorne sold.
    Redundant data wastes disk space and increases processing time when doing database
    maintenance: if a modification need arises, all instances of the same data must
    be updated. Regarding the `vehicle` table, it would be redundant to store a full
    descriptive value in the `brand, model` and `color` columns—storing three codes
    will suffice.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我们应该将冗余数据迁移到查找表（也称为参考表），并将代码的值仅存储在我们的主表中。我们不希望在每售出一辆“Licorne”时都在车辆表中重复“Licorne”。冗余数据浪费磁盘空间，并在进行数据库维护时增加处理时间：如果需要进行修改，则必须更新同一数据的所有实例。关于`vehicle`表，在`品牌、型号`和`颜色`列中存储完整的描述性值将是多余的——存储三个代码就足够了。
- en: We have to be careful about evacuating redundant data. For example, we won't
    be coding the year; this would be too much coding for no saving—using A for 2006,
    B for 2007 makes no practical saving of space after a few thousand years! Even
    for a small number of years, the space saving would not be significant; beside,
    we would lose the ability to do computations on the year.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须小心处理冗余数据。例如，我们不会对年份进行编码；这样做没有节省——使用A代表2006年，B代表2007年，在几千年的情况下并没有实际的空间节省！即使对于少量年份，节省的空间也不会显著；此外，我们将失去对年份进行计算的能力。
- en: 'Next, we verify dependency. Each column must be dependent on the primary key.
    Is the condition new/used directly dependent on the vehicle? No, if we consider
    it over the time dimension. In theory, the dealer can sell a car, and then accept
    it later in exchange. The condition is related more to the transaction itself,
    for a specific date, so it really belongs to the `sale` table—shown here in a
    non-final state. We now have version 2:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们验证依赖性。每一列都必须直接依赖于主键。新/旧状态是否直接依赖于车辆？不，如果我们考虑时间维度。理论上，经销商可以出售一辆车，然后稍后接受它作为交换。条件更多地与特定日期的交易本身相关，因此它实际上属于`销售`表——此处显示为非最终状态。我们现在有了版本2：
- en: '| table: vehicle | column name | sample value |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 表: 车辆 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *internal_id | 123 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|   | *内部ID | 123 |'
- en: '|   | serial_number | D8894JF |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|   | 序列号 | D8894JF |'
- en: '|   | brand_code | L |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|   | 品牌代码 | L |'
- en: '|   | model_code | G |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|   | 模型代码 | G |'
- en: '|   | year | 2007 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|   | 年份 | 2007 |'
- en: '|   | color_code | 1A6 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   | 颜色代码 | 1A6 |'
- en: '| table: brand | column name | sample value |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 表: 品牌 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *code | L |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   | *代码 | L |'
- en: '|   | description | Licorne |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | Licorne |'
- en: '| table: model | column name | sample value |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 表: 模型 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *code | G |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '|   | *代码 | G |'
- en: '|   | description | Gazelle |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | Gazelle |'
- en: '| table: color | column name | sample value |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 表: 颜色 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *code | 1A6 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '|   | *代码 | 1A6 |'
- en: '|   | description | ocean blue |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | 海洋蓝 |'
- en: '| table: sale | column name | sample value |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 表: 销售 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *date | 2006-03-17 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|   | *日期 | 2006-03-17 |'
- en: '|   | *internal_id | 123 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|   | *内部ID | 123 |'
- en: '|   | condition_code | N |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|   | 条件代码 | N |'
- en: Composite Keys
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复合键
- en: A **composite key**, also called as compound key, is a key that consists of
    more than one column.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**复合键**，也称为组合键，是由多个列组成的一个键。'
- en: 'When laying out our code tables, we must verify that the data grouping principles
    are also respected on those tables. Using sample data, and also our imagination
    to supplement incomplete sample data, can help to uncover problems in this area.
    In our version 2, we overlooked one possibility. What if the companies marketing
    two different brands chose an identical color code 1A6 to represent different
    colors? The same could happen for model codes so we should refine the structure
    to include the brand code—which represents Fontax, Licorne or a future brand name—into
    the `model` and `color` tables. Thus version 3 displays the two tables that have
    changed from version 2:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局我们的代码表时，我们必须验证数据分组原则是否也在这些表上得到遵守。使用示例数据，并通过我们的想象力补充不完整的示例数据，可以帮助揭示此领域的问题。在我们的版本2中，我们忽略了一种可能性。如果营销两个不同品牌的公司选择相同的颜色代码1A6来代表不同的颜色怎么办？模型代码也可能发生同样的情况，因此我们应该改进结构，将品牌代码——代表Fontax、Licorne或未来品牌名称——纳入`模型`和`颜色`表中。因此，版本3展示了从版本2更改的两个表：
- en: '| table: model | column name | sample value |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 表: 模型 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *brand_code | L |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '|   | *品牌代码 | L |'
- en: '|   | *code | G |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '|   | *代码 | G |'
- en: '|   | description | Gazelle |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | Gazelle |'
- en: '| table: color | column name | sample value |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 表: 颜色 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *brand_code | L |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|   | *品牌代码 | L |'
- en: '|   | *code | 1A6 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|   | *代码 | 1A6 |'
- en: '|   | description | ocean blue |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | 海洋蓝 |'
- en: 'Both the `model` and `color` tables result in having a composite key. Another
    example of a composite key was seen in [Chapter 3](ch04.html "Chapter 3. Data
    Naming"): the `car_event` table—see the *Data as a Column''s or Table''s name*
    section. In these kinds of tables, the primary key is composed of more than one
    element. This happens when we have to describe data that relates to more than
    one table. Usually, the newly formed table for `car_event` containing the car
    internal number and the event code has further attributes like the date when a
    specific event occurs for a specific car.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是`模型`还是`颜色`表，最终都具有复合键。另一个复合键的例子是在[第3章](ch04.html "第3章. 数据命名")中看到的：`汽车事件`表——参见*数据作为列名或表名*部分。在这些类型的表中，主键由多个元素组成。当我们必须描述与多个表相关的数据时，就会发生这种情况。通常，新形成的`汽车事件`表包含汽车的内部编号和事件代码，还包含进一步的属性，如特定事件发生在特定汽车的日期。
- en: Another possibility for a composite key arises when we encounter subsets like
    a department of a company. Associating an employee id to just the company code
    or just the department code would not describe the situation correctly. An employee
    id is unique only when considering both the department and the company.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到诸如公司部门之类的子集时，另一种复合键的可能性出现。仅将员工ID与公司代码或部门代码关联，并不能正确描述情况。员工ID只有在同时考虑部门和公司时才是唯一的。
- en: We have to verify that all the non-key data elements of this table depend directly
    upon the key taken in its entirety. Here is a problematic case where the `company_name`
    column is misplaced because it's not related to `dept_code:`
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须验证此表中所有非键数据元素是否直接依赖于整个键。以下是一个有问题的案例，其中`company_name`列位置不当，因为它与`dept_code`无关：
- en: '| table: company_dept | column name | sample value |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 表：公司部门 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *company_code | 1 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '|   | *company_code | 1 |'
- en: '|   | *dept_code | 16 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '|   | *dept_code | 16 |'
- en: '|   | dept_name | Marketing |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '|   | dept_name | Marketing |'
- en: '|   | company_name | Fontax |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '|   | company_name | Fontax |'
- en: 'The previous example is non-optimal because the company name would be present
    in every row of a table intended to describe each department. The correct structure
    for the previous example implies the use of two tables:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的例子并不理想，因为公司名称会出现在旨在描述每个部门的表的每一行中。先前例子的正确结构意味着需要使用两个表：
- en: '| table: dept | column name | sample value |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 表：部门 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *company_code | 1 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|   | *company_code | 1 |'
- en: '|   | *code | 16 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '|   | *code | 16 |'
- en: '|   | name | Marketing |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|   | name | Marketing |'
- en: '| table: company | column name | sample value |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 表：公司 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *code | 1 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|   | *code | 1 |'
- en: '|   | name | Fontax |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '|   | name | Fontax |'
- en: Improving the Structure
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进结构
- en: Even when our table layout respects the rules, we can still refine it by looking
    at the following additional issues.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们的表布局遵循规则，我们仍可以通过关注以下额外问题来进一步优化它。
- en: Scalability over Time
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间上的可扩展性
- en: 'In [Chapter 3](ch04.html "Chapter 3. Data Naming") (section *Data that are
    Results*), we saw that we could avoid reserving a column for the tax amount, provided
    we have the exact tax rate in a reference table. However this rate could change
    so we need a more complete table that contains date ranges and the corresponding
    rate. This way, projecting the system over the time dimension, we can ensure that
    it will accommodate rate fluctuations. Note that the following `sale` table is
    not complete:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch04.html "第3章 数据命名")（*结果数据*节）中，我们了解到，只要在参考表中拥有确切的税率，就可以避免为税额预留一列。然而，此税率可能变动，因此我们需要一个更完整的表，其中包含日期范围及相应的税率。这样，在时间维度上对系统进行投影时，我们能确保其适应税率波动。请注意，下面的`sale`表并不完整：
- en: '| table: sale | column name | sample value |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 表：销售 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *date | 2006-03-17 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '|   | *date | 2006-03-17 |'
- en: '|   | *internal_id | 123 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|   | *internal_id | 123 |'
- en: '|   | condition_code | N |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '|   | condition_code | N |'
- en: '| table: condition | column name | sample value |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 表：条件 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *code | N |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '|   | *code | N |'
- en: '|   | description | New |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '|   | description | New |'
- en: 'Comparing the `date` column from the `sale` table with the `start_date` and
    `end_date` from the following `tax_rate` table, we can find the exact tax rate
    for the date of sale:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较`sale`表中的`date`列与以下`tax_rate`表中的`start_date`和`end_date`，我们可以找到销售日期的确切税率：
- en: '| table: tax_rate | column name | sample value |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 表：税率 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *start_date | 2006-01-01 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '|   | *start_date | 2006-01-01 |'
- en: '|   | *end_date | 2006-04-01 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '|   | *end_date | 2006-04-01 |'
- en: '|   | rate | .075 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '|   | rate | .075 |'
- en: In fact, all tables should be analysed to find whether the time factor has been
    considered. Another example would be the `color` table. Assuming we are using
    the color codes designed by each car manufacturer, does a manufacturer reuse color
    codes in a subsequent year for a different color? If this is the case, we would
    add a `year` column to the `color` table.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，所有表都应进行分析，以确定是否考虑了时间因素。另一个例子是`color`表。假设我们使用每个汽车制造商设计的颜色代码，制造商是否会在后续年份为不同颜色重复使用颜色代码？如果是这种情况，我们将在`color`表中添加一个`year`列。
- en: Empty Columns
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空列
- en: 'Although empty columns are not necessarily problematic, having some rows where
    one or many columns are empty can reveal a structural problem: two tables folded
    into one. Let''s consider the car movements. We built a structure having a car''s
    internal number, the code of the event, and the moment. But what if some events
    need more data to be described?'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管空列不一定有问题，但某些行中一个或多个列的空缺可能揭示了结构问题：两个表合并成了一个。让我们考虑汽车移动。我们构建了一个具有汽车内部编号、事件代码和时刻的结构。但如果某些事件需要更多数据来描述呢？
- en: In the paper forms, we discover that when a car is washed, the initials of the
    store assistant who did the washing appear on the form, and during the interviews,
    we learned that these initials are an important data element.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在纸质表格中，我们发现当汽车被清洗时，进行清洗的店员的首字母会出现在表格上，并且在采访中，我们了解到这些首字母是一个重要的数据元素。
- en: In this case, we can add employee information, the employee code, to the `car_event`
    table. This would have the benefit of enabling the system to identify which store
    assistant participated to any event occurring to a car, leading to better quality
    control.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以将员工信息，即员工代码，添加到 `car_event` 表中。这将使系统能够识别哪个店员参与了与汽车相关的任何事件，从而提高质量控制。
- en: 'Another issue that might arise is that for a specific event (say washing) we
    require more data more data like the quantity of cleaning product, and the amount
    of time used to wash. Of those two elements, one can be beneficial to improve
    our structure: storing the start and end time of the event. But adding a column
    like **quantity_cleaning_product** to the `car_event` table has to be analyzed
    carefully. For all events except washing, this column would remain empty, leading
    to exception treatment in the applications. The structure would only worsen if
    we added another column related to another special event.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能出现的问题是，对于特定事件（例如洗车），我们需要更多数据，如清洁产品的数量和洗车所用的时间。在这两个元素中，存储事件的开始和结束时间可能有助于改进我们的结构。但是，向
    `car_event` 表添加类似 **quantity_cleaning_product** 的列需要仔细分析。除洗车外的所有事件，此列都将保持空白，导致应用程序中需要进行异常处理。如果我们为另一个特殊事件添加另一个相关列，结构只会变得更糟。
- en: '![Empty Columns](img/1302_04_01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![空列](img/1302_04_01.jpg)'
- en: 'In this case, it''s better to create another table with the same keys and the
    additional columns. We cannot avoid having some data elements in this new table
    name: `car_washing_event`.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最好创建另一个具有相同键和附加列的表。我们无法避免在这个新表名 `car_washing_event` 中包含一些数据元素。
- en: '| table: car_washing_event | column name | sample value |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 表：car_washing_event | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *internal_number | 412 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '|   | *internal_number | 412 |'
- en: '|   | quantity_cleaning_product | 12 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '|   | quantity_cleaning_product | 12 |'
- en: Avoiding ENUM and SET
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用 ENUM 和 SET
- en: 'MySQL and SQL in general offer what looks like convenient data types: `ENUM`
    and `SET` types. Both types permit us to specify a list of possible values for
    a column, along with a default value; the difference being that a `SET` column
    can hold multiple values, whereas an `ENUM` can contain only one of the potential
    values.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 SQL 通常提供看似方便的数据类型：`ENUM` 和 `SET` 类型。这两种类型允许我们为列指定可能值列表，以及默认值；区别在于 `SET`
    列可以包含多个值，而 `ENUM` 只能包含其中一个潜在值。
- en: We see here a very small `sale` table with the `credit_rate` column being an
    `ENUM:`
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到一个非常小的 `sale` 表，其中 `credit_rate` 列是一个 `ENUM:`
- en: '[PRE0]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When a field is defined as ENUM or SET and we are using phpMyAdmin's insertion
    or data edit panels, a dropdown list of the values is displayed so it might be
    tempting to use those data types.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当字段定义为 ENUM 或 SET 时，如果我们使用 phpMyAdmin 的插入或数据编辑面板，会显示一个值的下拉列表，这可能会诱使我们使用这些数据类型。
- en: '![Avoiding ENUM and SET](img/1302_04_02.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![避免使用 ENUM 和 SET](img/1302_04_02.jpg)'
- en: 'Let''s examine the benefits of such types:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来审视这类数据类型的优势：
- en: Instead of storing the complete value, MySQL stores only an integer index, which
    uses one or two bytes, depending on the number of values in the list
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其存储完整值，MySQL 仅存储一个整数索引，该索引根据列表中的值数量使用一到两个字节。
- en: MySQL itself refuses any value that is not comprised in the list
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 本身拒绝任何不在列表中的值
- en: 'Even after considering these benefits, it is recommended not to use `ENUM`
    and `SET` types for the following reasons:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管考虑到了这些优势，但出于以下原因，仍建议不要使用 `ENUM` 和 `SET` 类型：
- en: Changing the list of possible values needs a developer action, such as a structure
    modification intervention
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改可能值列表需要开发人员操作，例如结构修改干预。
- en: 'There are limits for those types: 65535 possible values in the list; also a
    `SET` can have 64 active members, which are the chosen values in the set'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些类型有其限制：列表中最多可有65535种可能值；同时，一个`SET`可以有64个活跃成员，即集合中选定的值。
- en: It's better to keep the system more simple, because if in some cases we use
    lookup tables and in other cases `ENUM` or `SET` types, the program code is more
    complex to build and maintain
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持系统更简单为佳，因为如果在某些情况下我们使用查找表，而在其他情况下使用`ENUM`或`SET`类型，程序代码构建和维护起来会更加复杂。
- en: It could be argued that problem number one can be solved by including in the
    application some `ALTER TABLE` statements to change the list of values, but this
    does not seem the normal way to deal with this matter. `ALTER TABLE` is a data
    definition statement that should be used during system development, not at the
    application level.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会争辩说，问题一可以通过在应用程序中包含一些`ALTER TABLE`语句来改变值列表来解决，但这似乎不是处理此事的常规方式。`ALTER TABLE`是一个数据定义语句，应在系统开发期间使用，而不是在应用程序级别。
- en: So, an `ENUM` or `SET` column should become a separate table whose primary key
    is a code. Then, the table which refers to this code simply includes it as a foreign
    key. In the case of `SET` column, a distinct table would contain the key of the
    master table plus the key of the table which contains those `SET` values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`ENUM`或`SET`列应成为具有代码作为主键的单独表。然后，引用此代码的表只需将其作为外键包含。在`SET`列的情况下，一个独立的表将包含主表的键以及包含这些`SET`值的表的键。
- en: '| table: sale | column name | sample value |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 表：销售 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *internal_number | 122 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|   | *内部编号 | 122 |'
- en: '|   | *date | 2006-05-27 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '|   | *日期 | 2006-05-27 |'
- en: '|   | credit_rate_code | F |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '|   | 信用评级代码 | F |'
- en: '| table: credit_rate | column name | sample value |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 表：信用评级 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *code | F |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '|   | *代码 | F |'
- en: '|   | description | fixed |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | 固定 |'
- en: Proper validation in the application ensures that the inserted codes belong
    to the lookup tables.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的适当验证确保插入的代码属于查找表。
- en: Multilingual Planning
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多语言规划
- en: 'There is another benefit of using a code table: if we store the car condition
    new/used, it''s more complex to do a multi-lingual application. On the other hand,
    if we code the car''s condition, then we can have a `condition` table and a `language`
    table:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用代码表的另一个好处是：如果我们存储车辆状况为新/旧，那么开发多语言应用程序会更加复杂。另一方面，如果我们对车辆状况进行编码，那么我们可以有一个`condition`表和一个`language`表：
- en: '| table: condition | column name | sample value |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 表：条件 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | language_code | E |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '|   | 语言代码 | E |'
- en: '|   | condition_code | N |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '|   | 条件代码 | N |'
- en: '|   | description | new |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | 新 |'
- en: '| table: language | column name | sample value |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 表：语言 | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | language_code | E |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '|   | 语言代码 | E |'
- en: '|   | description | English |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '|   | 描述 | 英语 |'
- en: Validating the Structure
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证结构
- en: Validation is done by using precise examples, asking ourselves if we have a
    column to place all information, covering all cases. Maybe there will be exceptions—what
    to do with those? Should our structure handle them? We can assess the risk factor
    associated with those exceptions, versus the cost of handling them and the possible
    loss in performance for the queries.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 验证是通过使用精确的例子进行的，我们自问是否有列来放置所有信息，涵盖所有情况。也许会有例外——我们该如何处理这些？我们的结构应该处理它们吗？我们可以评估与这些例外相关的风险因素，与处理它们的成本以及查询性能可能的损失进行比较。
- en: 'An example of an exception: a customer buys two cars the same day—this could
    influence the choice of primary key, if a date is part of this key, it will be
    conducive to add a column to this key: the time of day for the sale.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一个异常情况的例子：一个顾客同一天购买了两辆车——这可能影响主键的选择，如果日期是该主键的一部分，那么添加一个列到该主键中将是有益的：销售当天的具体时间。
- en: The phpMyAdmin utility can prove useful here. Tables are easily built with this
    software, while its index management feature permits us to craft our primary keys.
    Then we can use the multi-table query generator to simulate various reports and
    what-ifs.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin工具在这里可能证明是有用的。使用此软件可以轻松构建表，而其索引管理功能允许我们设计主键。然后，我们可以使用多表查询生成器来模拟各种报告和假设情况。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have seen that our list of columns needs to be placed into appropriate tables,
    each having a primary key and respecting some rules for increased efficiency and
    clarity. We can also improve the model by looking at the scalability and multilingual
    issues; then we learned a way to validate this model.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，我们的列列表需要放置在适当的表格中，每个表格都有一个主键，并遵循一些规则以提高效率和清晰度。我们还可以通过考虑可扩展性和多语言问题来改进模型；然后我们学习了一种验证此模型的方法。
