- en: Chapter 5. Data Structure Tuning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 数据结构调优
- en: This chapter presents various techniques to improve our data structure in terms
    of security, performance, and documentation. We then present the final data structure
    for the car dealer's case study.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍各种技术以从安全性、性能和文档方面改进我们的数据结构。然后，我们展示汽车经销商案例研究的最终数据结构。
- en: Data Access Policies
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据访问政策
- en: We saw in [Chapter 1](ch02.html "Chapter 1. Introducing MySQL Design") that
    data is an important resource, so access to this resource must be controlled and
    clearly documented. As each piece of data originates, the responsibility for data
    entry must be clearly established. After the data has made its way into the database,
    policies must be in place to control access to it, and these policies are implemented
    by MySQL's privileges and the use of **views**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第一章](ch02.html "第一章 引入MySQL设计")中了解到，数据是一项重要资源，因此对该资源的访问必须受到控制并清晰记录。每条数据产生时，数据录入的责任必须明确确立。数据进入数据库后，必须有政策来控制对其的访问，这些政策通过MySQL的权限和使用**视图**来实施。
- en: Responsibility
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 责任
- en: We should determine who in the enterprise—in terms of a person's name or a function
    name—is responsible for each data element. This should then be documented and
    a good place to do so is directly in the database structure. An alternative would
    be to document data responsibility on paper, but information on paper can be easily
    lost and has a tendency to become obsolete quickly.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该确定企业中谁——以个人姓名或职能名称——负责每个数据元素。这应该被记录下来，一个好地方就是在数据库结构中直接记录。另一种选择是将数据责任记录在纸上，但纸质信息容易丢失，且有迅速过时的倾向。
- en: In some cases, there will be a primary source and an approbation-level source.
    Both should be documented this—helps for
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，会有一个主要来源和一个审批级别来源。两者都应这样记录——有助于
- en: application design, when screens have to reflect the chain of authority for
    data entry
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序设计中，当屏幕需要反映数据录入的权限链时
- en: privilege management, if direct MySQL data access is granted to end users
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限管理，如果直接向终端用户授予MySQL数据访问权限
- en: phpMyAdmin permits us to describe each column by adding comments to it. If the
    current MySQL version supports native comments, those will be used; otherwise,
    phpMyAdmin's linked-tables infrastructure has to be configured to enable the storage
    of column comments as meta-data. We will indicate responsibility details for this
    column in the corresponding column comment. To reach the page that permits us
    to enter comments in phpMyAdmin, we use the left navigation panel to open the
    database (here `marc`) then the table (here `car_event`). We then click on **Structure**
    and choose to edit a field's structure (here `event_code`) by clicking on the
    pencil icon.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin允许我们通过添加注释来描述每一列。如果当前的MySQL版本支持原生注释，则使用这些注释；否则，必须配置phpMyAdmin的链接表基础设施以启用将列注释作为元数据存储。我们将在相应的列注释中指出该列的责任细节。要访问允许我们在phpMyAdmin中输入注释的页面，我们使用左侧导航面板打开数据库（这里为`marc`），然后是表（这里为`car_event`）。然后我们点击**结构**并选择通过点击铅笔图标编辑字段结构（这里为`event_code`）。
- en: '![Responsibility](img/1302_05_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![责任](img/1302_05_01.jpg)'
- en: We can then use phpMyAdmin's **Print View** from the **Structure** page to obtain
    a listing of the table with comments.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从**结构**页面使用phpMyAdmin的**打印视图**来获取带有注释的表列表。
- en: '![Responsibility](img/1302_05_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![责任](img/1302_05_02.jpg)'
- en: Security and Privileges
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全和权限
- en: 'There are two ways of considering the security of our data. The first and most
    commonly implemented is at the application level. Normally, applications should
    ask for credentials: user name, password, and use these credentials to generate
    web pages or desktop screens that reflect the tasks permitted to this user. Note
    that the underlying application still connects to MySQL with all the privileges
    of a developer account but, of course, only shows appropriate data according to
    the user''s rights.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑数据安全的两种方式。最常见的是在应用程序层面实施。通常，应用程序应请求凭证：用户名、密码，并使用这些凭证生成反映该用户允许执行的任务的网页或桌面屏幕。请注意，底层应用程序仍以开发人员账户的所有权限连接到MySQL，但当然，仅根据用户的权利显示适当的数据。
- en: Another issue to consider is when a user has direct access to MySQL, either
    using a command-line utility or an interface like phpMyAdmin. This might be the
    case because the end-user application has been developed only to a certain point
    and does not permit maintenance of code tables, for example. In this case, special
    MySQL users should be created that have only the needed rights. MySQL supports
    an access matrix based on rights on databases, tables, columns, and views. This
    way, we could hide specific columns, like the selling price, to all unauthorized
    persons.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的问题是，当用户直接访问 MySQL 时，无论是使用命令行实用程序还是像 phpMyAdmin 这样的界面。这可能是因为最终用户应用程序仅开发到一定程度，并且不允许维护代码表，例如。在这种情况下，应创建具有所需权限的特殊
    MySQL 用户。MySQL 支持基于数据库、表、列和视图上的权限的访问矩阵。这样，我们可以向所有未经授权的人员隐藏特定列，例如销售价格。
- en: Views
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: 'Since MySQL 5.0, we can build views, which look like tables but are based on
    queries. These views can be used to:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自 MySQL 5.0 起，我们可以创建视图，这些视图看起来像表，但实际上是基于查询的。这些视图可用于：
- en: hide some columns
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏某些列
- en: generate modified information based on table columns and the use of expressions
    on them
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据表列和对其使用的表达式生成修改后的信息
- en: procure a shortcut for data access by joining many tables so as to make them
    appear as a single table
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接许多表来提供数据访问的快捷方式，使它们看起来像一个表
- en: Since we can associate privileges to these views without giving access to the
    underlying tables, views can prove handy to let users directly access MySQL and
    control their actions at the same time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们可以将权限关联到这些视图，而不授予对基础表的访问权限，因此视图可以证明在让用户直接访问 MySQL 并同时控制其操作方面很方便。
- en: 'Here is an example of a view showing the car events and their description—here,
    we want to hide the `event_code` column:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个视图示例，显示了汽车事件及其描述——这里，我们希望隐藏`event_code`列：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Browsing this view in phpMyAdmin displays the following report:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 phpMyAdmin 中浏览此视图会显示以下报告：
- en: '![Views](img/1302_05_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![视图](img/1302_05_03.jpg)'
- en: 'Asking a user to work with views does not mean that this user can only read
    this data. In many cases, views can be updated. For example, this statement is
    allowed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要求用户使用视图并不意味着该用户只能读取此数据。在许多情况下，视图可以更新。例如，允许以下语句：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Storage Engines
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储引擎
- en: MySQL is internally structured in such a way that the low-level tasks of storing
    and managing data are implemented by the **plugable storage engine architecture**.
    MySQL AB and other companies are active in R&D to improve the offer in the storage
    engines spectrum. For more information about the architecture itself, refer to
    [http://dev.mysql.com/tech-resources/articles/mysql_5.0_psea1.html](http://dev.mysql.com/tech-resources/articles/mysql_5.0_psea1.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 内部结构是这样的，存储和管理数据的低级任务由**可插拔存储引擎架构**实现。MySQL AB 和其他公司正在研发中，以改进存储引擎范围的供应。有关架构本身的更多信息，请参阅[http://dev.mysql.com/tech-resources/articles/mysql_5.0_psea1.html](http://dev.mysql.com/tech-resources/articles/mysql_5.0_psea1.html)。
- en: Every time we create a table, even if we don't notice it, we are asking the
    MySQL server (implicitly or explicitly) to use one of the available storage engines
    to store our data physically.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们创建表时，即使我们没有注意到，我们也在要求 MySQL 服务器（无论是隐式还是显式）使用可用的存储引擎之一来物理存储我们的数据。
- en: 'The default and traditional storage engine is named `MyISAM`. A whole chapter
    in the *MySQL Reference Manual* ([http://dev.mysql.com/doc/refman/5.0/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.0/en/storage-engines.html))
    describes the available engines. Our choice of storage engine can vary from table
    to table. There is no such thing as a perfect storage engine; we have to choose
    the best one according to our needs. Here are some points to consider when making
    a choice:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认和传统的存储引擎名为`MyISAM`。《*MySQL 参考手册*》（[http://dev.mysql.com/doc/refman/5.0/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.0/en/storage-engines.html)）中有一整章描述了可用的引擎。我们的存储引擎选择可以根据表的不同而变化。不存在完美的存储引擎；我们必须根据需求选择最佳的。以下是选择时需要考虑的一些要点：
- en: '`MyISAM` supports `FULLTEXT` indexes and compressed read-only storage, and
    uses about three times less disk space than `InnoDB` for the equivalent amount
    of data'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`支持`FULLTEXT`索引和压缩的只读存储，并且使用大约三分之一的磁盘空间比`InnoDB`少，用于等量的数据'
- en: '`InnoDB` offers foreign key constraints, multi-statement transactions with
    `ROLLBACK` support; also, due to its locking mechanism, it supports more concurrent
    `SELECT` queries than `MyISAM`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`提供外键约束，多语句事务支持`ROLLBACK`；此外，由于其锁定机制，它支持比`MyISAM`更多的并发`SELECT`查询'
- en: '`MEMORY` is of course very fast but the content (data) is not permanently stored
    on-disk, while the table definition itself is on-disk'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMORY`当然非常快，但内容（数据）并非永久存储在磁盘上，而表定义本身则存储在磁盘上'
- en: '`NDB` (Network DataBase), also called `MySQL Cluster`, offers synchronous replication
    between the servers—the recommended minimum number of servers in the cluster is
    four; thus there is no single point of failure in such a cluster'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NDB`（网络数据库），也称为`MySQL集群`，提供服务器间的同步复制——集群中推荐的最小服务器数量为四台；因此，这样的集群中没有单点故障'
- en: 'In short, here is a general guideline: if the application requires multi-statement
    transactions and foreign-key constraints, we should choose `InnoDB`; otherwise,
    `MyISAM`, the default storage engine, is suggested.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这里有一个通用指南：如果应用程序需要多语句事务和外键约束，我们应选择`InnoDB`；否则，默认存储引擎`MyISAM`是建议的选择。
- en: Foreign Key Constraints
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外键约束
- en: 'The `InnoDB` storage engine ([http://www.innodb.com](http://www.innodb.com)),
    which is included in MySQL offers a facility to describe foreign keys in the table''s
    structure. A **foreign key** is a column (or group of columns) that points to
    a key in a table. Usually, the key that is pointed to is located in another table
    and is a primary key of that other table. Foreign keys are commonly used as lookup
    tables. There are a number of benefits to describing these relations directly
    in the structure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎（[http://www.innodb.com](http://www.innodb.com)），包含在MySQL中，提供了一种在表结构中描述外键的机制。**外键**是一个列（或一组列），指向表中的一个键。通常，被指向的键位于另一个表中，并且是该表的主键。外键常用于查找表。在结构中直接描述这些关系有许多好处：'
- en: referential integrity of the tables is maintained by the engine—we cannot add
    an event code into the `car_event` table if the corresponding code is not already
    present in the `event` table, and we cannot remove a code from the `event` table
    if it's still referenced by a row in the `car_event` table
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表的参照完整性由引擎维护——如果`event`表中不存在对应的代码，我们就不能向`car_event`表添加事件代码，同样，如果`car_event`表中仍有行引用该代码，我们就不能从`event`表删除代码
- en: we can program actions that MySQL will accomplish in reaction to certain events;
    for example, what happens in the referencing table if the referenced code is updated
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以编程设定MySQL在特定事件发生时的反应；例如，如果被引用代码更新，引用表中会发生什么
- en: 'Let''s transpose our `car_event` example into `InnoDB`. Let''s first create
    and populate the referenced table, `event`—notice the `ENGINE=InnoDB` clause:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`car_event`示例转换为`InnoDB`。首先创建并填充被引用表`event`——注意`ENGINE=InnoDB`子句：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, the referencing table, `car_event:`
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，引用表`car_event`：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We must have an index on the `event_code` column to be able to use it in an
    `InnoDB` foreign key constraint, which is defined here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须为`event_code`列创建索引，以便能在`InnoDB`外键约束中使用它，该约束在此定义：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The foreign key in `car_event` can also be defined in the initial `CREATE TABLE`
    statement. The previous example was done using `ALTER TABLE` to show that foreign
    keys can be added later.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始的`CREATE TABLE`语句中也可以定义`car_event`中的外键。之前的示例使用`ALTER TABLE`来展示外键可以在之后添加。
- en: 'All these operations can be handled in a more visual way via phpMyAdmin. The
    **Operations** sub-page enables us to switch the engine to **InnoDB**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些操作都可以通过phpMyAdmin以更直观的方式处理。**操作**子页面允许我们将引擎切换到**InnoDB**：
- en: '![Foreign Key Constraints](img/1302_05_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![外键约束](img/1302_05_04.jpg)'
- en: 'Also, when the tables are under the `InnoDB` storage engine, phpMyAdmin''s
    **Relation view** enables us to define and modify the foreign key and related
    actions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当表处于`InnoDB`存储引擎下时，phpMyAdmin的**关系视图**使我们能够定义和修改外键及相关操作：
- en: '![Foreign Key Constraints](img/1302_05_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![外键约束](img/1302_05_05.jpg)'
- en: 'Having defined this `ON UPDATE CASCADE` clause, let''s see what happens when
    we modify a code value in the `event` table. We decide that the code for **washed**
    should be **10** instead of **1**:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`ON UPDATE CASCADE`子句后，让我们看看当我们在`event`表中修改代码值时会发生什么。我们决定将**washed**的代码从**1**改为**10**：
- en: '![Foreign Key Constraints](img/1302_05_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![外键约束](img/1302_05_06.jpg)'
- en: 'We now browse the `car_event` table; sure enough, the code for **washed** has
    been changed automatically to the value 10:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们浏览`car_event`表；果然，**washed**的代码已自动更改为值10：
- en: '![Foreign Key Constraints](img/1302_05_07.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![外键约束](img/1302_05_07.jpg)'
- en: Performance
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: A number of points must be examined if we want to improve our structure's efficiency
    in terms of access speed or disk space used.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想提高结构在访问速度或磁盘空间使用方面的效率，必须检查多个要点。
- en: Indexes
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引
- en: Adding indexes on columns that are used in a `WHERE` clause is a common way
    of speeding up the queries. Let's say that we intend to find all vehicles for
    a specific brand. The `vehicle` table has a `brand_id` column and we want to create
    an index on this column. In this case, the index won't be unique because each
    brand is represented by many vehicles.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`WHERE`子句中使用的列上添加索引是加快查询的常见方法。假设我们打算找到特定品牌的所有车辆。`vehicle`表有一个`brand_id`列，我们想在此列上创建索引。在这种情况下，索引不会是唯一的，因为每个品牌都由许多车辆代表。
- en: 'Using phpMyAdmin, there are two ways to create an index. First, if the index
    applies to a single column, we can open the **Structure** page for a table and
    click the index (flash) icon on the same line as the `brand_id` column:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用phpMyAdmin创建索引有两种方法。首先，如果索引适用于单个列，我们可以打开表的**结构**页面，并在`brand_id`列的同一行点击索引（闪烁）图标：
- en: '![Indexes](img/1302_05_08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![索引](img/1302_05_08.jpg)'
- en: 'This generates the following statement:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成以下语句：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We could also create an index on a composite key, for example `model_id` plus
    `year`. For this, we enter the number of columns for our index (two) on the **Structure**
    page and hit **Go**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在复合键上创建索引，例如`model_id`加上`year`。为此，我们在**结构**页面上输入索引的列数（两列），然后点击**Go**。
- en: '![Indexes](img/1302_05_09.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![索引](img/1302_05_09.jpg)'
- en: Next, on the index management page, we choose which columns will be part of
    the index; then we invent a name for this index (here **model-year**) and click
    **Go** to create it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在索引管理页面上，我们选择哪些列将成为索引的一部分；然后我们为此索引发明一个名称（这里为**model-year**），点击**Go**来创建它。
- en: '![Indexes](img/1302_05_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![索引](img/1302_05_10.jpg)'
- en: The related SQL command for this action is
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作相关的SQL命令是
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To ascertain which index are used on a particular query, we can prefix this
    query with the EXPLAIN keyword. For example, we issue this command in phpMyAdmin''s
    query box:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定特定查询使用了哪些索引，我们可以在查询前加上EXPLAIN关键字。例如，我们在phpMyAdmin的查询框中输入以下命令：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The results tell us that an index on the `brand_id` column is a possible key
    for retrieval:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果告诉我们，`brand_id`列上的索引可能是检索的关键：
- en: '![Indexes](img/1302_05_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![索引](img/1302_05_11.jpg)'
- en: 'Helping the Query Optimizer: Analyze Table'
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 帮助查询优化器：分析表
- en: When we send a query to the MySQL server, it uses its query optimizer to find
    the best way of retrieving the rows. We can help the query optimizer achieve better
    results by loading a table with data and then executing the `ANALYZE TABLE` statement
    on it. This statement asks MySQL to store the key distribution for a table, which
    means that it counts the number of keys for each index and stores this information
    for later reuse. For example, after the `ANALYZE TABLE` on the `vehicle` table,
    MySQL might notice that there are 12 different brands, 1000 different vehicles
    and 100 different model-years. This information will be used later if we ever
    send a query using one of these indexes. Thus, the `ANALYZE TABLE` should be executed
    periodically; the exact frequency depends on the number of updates for this table.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向MySQL服务器发送查询时，它会使用查询优化器来找到检索行的最佳方式。我们可以通过向表中加载数据，然后执行`ANALYZE TABLE`语句来帮助查询优化器获得更好的结果。此语句要求MySQL存储表的键分布，这意味着它会计算每个索引的键数，并将此信息存储以供后续重用。例如，在`vehicle`表上执行`ANALYZE
    TABLE`后，MySQL可能会注意到有12个不同的品牌，1000个不同的车辆和100个不同的车型年份。如果我们以后发送使用这些索引之一的查询，此信息将被使用。因此，`ANALYZE
    TABLE`应定期执行；确切的频率取决于此表的更新次数。
- en: Accessing Replication Slave Servers
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问复制从服务器
- en: MySQL supports a scheme where one-way, asynchronous replication of data occurs
    between a **master server** and one or more **slave servers**. Since normally,
    the majority of the requests sent to MySQL are `SELECT` queries, we can improve
    response time by sending those read requests to a slave server. This procures
    a load-balancing effect. Care must be taken to send write-type statements such
    as `INSERT, UPDATE` and `DELETE` to the master.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持一种模式，即数据在**主服务器**和一台或多台**从服务器**之间进行单向异步复制。由于通常情况下，发送到MySQL的大多数请求都是`SELECT`查询，我们可以通过将这些读请求发送到从服务器来提高响应时间。这会产生负载均衡的效果。必须注意将写类型语句，如`INSERT,
    UPDATE`和`DELETE`发送到主服务器。
- en: In current MySQL version (5.0.26), we have to choose the proper server at the
    application level to achieve this balancing; however, MySQL plans to offer a feature
    that would automatically send the `SELECT` queries to slaves.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的MySQL版本（5.0.26）中，我们必须选择适当的应用程序级服务器来实现这种平衡；然而，MySQL计划提供一个功能，该功能将自动将`SELECT`查询发送到从属服务器。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Replication is an advanced feature of MySQL that should be set up by a seasoned
    MySQL administrator.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 复制是MySQL的高级功能，应由经验丰富的MySQL管理员设置。
- en: Speed and Data Types
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速度与数据类型
- en: When creating a column, we have to specify a data type for it. Character data
    types (`CHAR, VARCHAR`) are very commonly used. For `CHAR`, we indicate the length
    of the column (0 to 255), and this column occupies a fixed amount of space. For
    `VARCHAR`, each value only takes the space it needs in the table; the indicated
    length is the maximum length—255 before MySQL 5.0.3 and 65532 since this version.
    Numeric types—like `INT, FLOAT`, and `DECIMAL` are fixed-length.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建列时，我们必须为其指定数据类型。字符数据类型（`CHAR, VARCHAR`）使用非常普遍。对于`CHAR`，我们指定了列的长度（0到255），并且该列占用固定数量的空间。对于`VARCHAR`，每个值仅占用表中所需的空间；指定的长度是最大长度——MySQL
    5.0.3之前为255，自此版本起为65532。数值类型——如`INT, FLOAT`和`DECIMAL`都是固定长度的。
- en: 'To summarize, here are some data types and information about how they are stored:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是一些数据类型及其存储方式的信息：
- en: '| Data type | Storage method |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 存储方式 |'
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| CHAR | fixed |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| CHAR | 固定 |'
- en: '| INT | fixed |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| INT | 固定 |'
- en: '| FLOAT | fixed |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| FLOAT | 固定 |'
- en: '| DECIMAL | fixed |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| DECIMAL | 固定 |'
- en: '| VARCHAR | variable |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| VARCHAR | 变长 |'
- en: 'We should be aware that MySQL can silently decide to convert a data type to
    another one. The reasons for this are explained in the MySQL manual: [http://dev.mysql.com/doc/refman/5.0/en/silent-column-changes.html](http://dev.mysql.com/doc/refman/5.0/en/silent-column-changes.html).
    This is why, after the table''s creation, we should re-examine its structure to
    verify that silent conversion has occurred.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该意识到MySQL可能会悄悄决定将一种数据类型转换为另一种。这样做的原因在MySQL手册中有解释：[http://dev.mysql.com/doc/refman/5.0/en/silent-column-changes.html](http://dev.mysql.com/doc/refman/5.0/en/silent-column-changes.html)。这就是为什么在表创建后，我们应该重新检查其结构以验证是否发生了静默转换。
- en: It might seem that we should always choose `VARCHAR` for character fields, since
    by using this data type, a shorter value takes less space but there is a reason
    to still want to use `CHAR:` speed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们似乎应该总是为字符字段选择`VARCHAR`，因为使用这种数据类型，较短的值占用较少的空间，但仍有理由想要使用`CHAR`：速度。
- en: In a table, when all fields are using non-variable data types, the `MyISAM`
    storage engine uses a **fixed** table format. In this format, MySQL can predict
    the size of each row and thus can easily find the distance from, say, one `first_name`
    column to the `first_name` column of the next row. This implies that queries on
    non-indexed columns are relatively quickly executed. On the contrary, when there
    is even one `VARCHAR` column in a table, this is no longer possible, as `MyISAM`
    uses **dynamic** table format in this case. Hence, a decision must be made between
    the speed of data retrieval and the space overhead of using fixed-length columns.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在表中，当所有字段都使用非变量数据类型时，`MyISAM`存储引擎使用**固定**表格式。在这种格式下，MySQL可以预测每行的大小，因此可以轻松找到从一个`first_name`列到下一行的`first_name`列的距离。这意味着对非索引列的查询执行得相对较快。相反，当表中有一个`VARCHAR`列时，这种情况就不再可能，因为`MyISAM`在这种情况下使用**动态**表格式。因此，必须在数据检索速度和使用固定长度列的空间开销之间做出决定。
- en: 'In phpMyAdmin, when looking at a table''s structure, the **Row Statistics**
    section informs us about the fixed or dynamic format:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在phpMyAdmin中查看表结构时，**行统计信息**部分会告诉我们格式是固定的还是动态的：
- en: '![Speed and Data Types](img/1302_05_12.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![速度与数据类型](img/1302_05_12.jpg)'
- en: There is another point in favor of using the fixed format. When rows are deleted,
    the space previously occupied by these—the holes in the table become available
    for future insertions so the table does not become physically fragmented.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用固定格式的另一个优点是，当行被删除时，这些行之前占用的空间——表中的空洞——可供未来的插入使用，因此表不会变得物理碎片化。
- en: '`BLOB` and `TEXT` data types are also variable in length. A `BLOB` is typically
    used to store binary data like a car''s or a customer''s photo. MySQL takes care
    internally to store these columns separately from the remainder of the table''s
    data, so the impact of having them in a table is not significant.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLOB`和`TEXT`数据类型也是可变长度的。`BLOB`通常用于存储汽车或客户照片等二进制数据。MySQL内部会负责将这些列与表的其余数据分开存储，因此它们对表的影响并不显著。'
- en: Table Size Reduction
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表大小缩减
- en: A utility, `myisampack`, can be used to transform a `MyISAM` table into a read-only
    one while compressing data. In some cases, the table's physical size could be
    reduced by 70%. This technique is only available if we have access to this command-line
    utility—there is no SQL query which we can send to achieve this result.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 实用工具`myisampack`可将`MyISAM`表转换为只读表并压缩数据。在某些情况下，表的物理大小可减少70%。此技术仅在我们有权访问此命令行工具时可用——没有SQL查询能发送以实现此结果。
- en: In-Column Data Encoding
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列内数据编码
- en: The situation I am about to describe happened while I was working on a search
    engine for bibliographic data but I am transposing it for the car dealer's system.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我即将描述的情况发生在我为书目数据开发搜索引擎时，但我将其转用于汽车经销商系统。
- en: 'When we have to migrate data from a pre-existing system into our newly-born
    data structure, we might encounter data that was formatted in a special way. For
    example, a list of possible colors for a car model could be expressed as a series
    of color codes, separated by semi-colons:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要将数据从原有系统迁移到我们新生的数据结构时，可能会遇到以特殊方式格式化的数据。例如，汽车型号可能的颜色列表可以表示为一系列用分号分隔的颜色代码：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Users of the pre-existing system are comfortable with this method of entering
    data in this format, and in the case I experienced, users refused to let go of
    this way of entering data—and they had direct access to the MySQL tables. From
    a developer's perspective, however, such format makes the task of query generation
    more complex. Finding the `1A6` color involves splitting the data element, and
    avoiding the `2T1A65` data element, which also has the `1A6` string.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 原有系统的用户习惯于以这种格式输入数据，在我经历的情况中，用户拒绝放弃这种数据录入方式——他们可以直接访问MySQL表。然而，从开发者的角度来看，这种格式使得查询生成的任务更为复杂。查找`1A6`颜色需要拆分数据元素，并避免包含`1A6`字符串的`2T1A65`数据元素。
- en: 'A proper structure for this case implies getting rid of the semicolon-based
    format completely and storing just the pure data in table format:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此案例的适当结构意味着完全摒弃基于分号的格式，并仅以表格形式存储纯数据：
- en: '| table: model_color | column name | sample value |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 表：model_color | 列名 | 示例值 |'
- en: '| --- | --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | *model | 1 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '|   | *model | 1 |'
- en: '|   | color_code | 1A6 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '|   | color_code | 1A6 |'
- en: 'Another case for which it''s even more complex to find coherent data with a
    query is when there is more than one element between the separators, such as a
    list of names:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当分隔符之间存在多个元素（如姓名列表）时，找到与查询一致的数据甚至更为复杂：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Special care must be taken to avoid matching this list of names when we search
    for `Murray, Paul` because `Murray` and `Paul` are present in the full string.
    This case only reinforces the case for moving away from such a format or at least—if
    we must keep this format due to political issues—for building an intermediary
    table, which will be used for searching. In this case, the special table must
    be synchronized whenever the main table's contents changes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索`Murray, Paul`时，必须特别小心以避免匹配此名称列表，因为`Murray`和`Paul`都出现在完整字符串中。这种情况仅加强了摆脱这种格式或至少——如果我们因政治问题必须保留此格式——建立一个中间表的必要性，该表将用于搜索。在这种情况下，每当主表内容发生变化时，特殊表必须同步。
- en: Case Study's Final Structure
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究的最终结构
- en: In this section we examine the final data structure for our case study. There
    are many ways to present this structure. First we'll see all the tables that are
    related to each other—almost all tables are—then we will examine group of related
    tables and their columns.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将审视案例研究的最终数据结构。有许多方式可以呈现此结构。首先，我们将看到所有相互关联的表——几乎所有表都如此——然后，我们将检查相关表组及其列。
- en: The following schema is produced by phpMyAdmin's PDF Page feature. To access
    this feature, we open a database and access the **Operations** sub-page. Then
    we click **Edit PDF pages**.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式由phpMyAdmin的PDF页面功能生成。要访问此功能，我们打开一个数据库并访问**操作**子页面。然后，我们点击**编辑PDF页面**。
- en: '![Case Study''s Final Structure](img/1302_05_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![案例研究的最终结构](img/1302_05_13.jpg)'
- en: 'When generating the PDF schema, we can also ask phpMyAdmin to produce a data
    dictionary. In order to do this, we click the **Data Dictionary** checkbox in
    the **Display PDF schema** dialog. Here is the page of this dictionary describing
    the `person` table:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成PDF架构时，我们还可以要求phpMyAdmin生成数据字典。为此，我们需在“显示PDF架构”对话框中勾选**数据字典**复选框。以下是描述`person`表的该字典页面：
- en: '![Case Study''s Final Structure](img/1302_05_14.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![案例研究的最终结构](img/1302_05_14.jpg)'
- en: 'This combined data dictionary/schema offers a noteworthy feature: we can click
    on a table name in the schema to reach the table''s description in the dictionary,
    and the other way around.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结合了数据字典和架构的功能有一个显著特点：我们可以在架构中点击表名以到达字典中该表的描述，反之亦然。
- en: The following `CREATE TABLE` commands come directly from the **Export** feature
    of phpMyAdmin. To access this feature, simply open a database and choose the **Export**
    menu, then select all the tables, click the **SQL** checkbox and hit **Go**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`CREATE TABLE`命令直接来自phpMyAdmin的**导出**功能。要访问此功能，只需打开一个数据库，选择**导出**菜单，然后选中所有表，点击**SQL**复选框并点击**执行**。
- en: '![Case Study''s Final Structure](img/1302_05_15.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![案例研究的最终结构](img/1302_05_15.jpg)'
- en: 'The commands have been grouped into smaller chunks of related tables, even
    if ultimately there are relations between the tables of those groups. You''ll
    notice that phpMyAdmin adds—in the form of comments in the export file—information
    about the relations with other tables. Another point to note: the primary key
    for most tables is `id`, an integer. Thus, a column pointing to the `id` column
    of table `brand` is named `brand_id`.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令被分组为相关表的小块，即使最终这些组内的表之间存在关联。你会注意到，phpMyAdmin在导出文件中以注释的形式添加了与其他表的关系信息。另一个需要注意的是：大多数表的主键是`id`，一个整数。因此，指向`brand`表的`id`列的列被命名为`brand_id`。
- en: Vehicle
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 车辆
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Person
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人员
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sale
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销售
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Other tables
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他表
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We improved our data structure's implementation by assessing the responsible
    person for each data element and by storing this information into column comments.
    We then saw how to use privileges and views to improve security, how to choose
    the best storage engine per table, and how to benefit from foreign key constraints.
    Performance issues were considered, and then we were presented with the final
    model for the car dealer's case study.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过评估每个数据元素的责任人并将此信息存储在列注释中来改进数据结构的实现。然后，我们看到了如何使用权限和视图来提高安全性，如何为每个表选择最佳存储引擎，以及如何利用外键约束。考虑了性能问题，然后我们被展示了汽车经销商案例研究的最终模型。
