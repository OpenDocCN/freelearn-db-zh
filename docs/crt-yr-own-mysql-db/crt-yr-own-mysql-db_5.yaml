- en: Chapter 5. Data Structure Tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presents various techniques to improve our data structure in terms
    of security, performance, and documentation. We then present the final data structure
    for the car dealer's case study.
  prefs: []
  type: TYPE_NORMAL
- en: Data Access Policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw in [Chapter 1](ch02.html "Chapter 1. Introducing MySQL Design") that
    data is an important resource, so access to this resource must be controlled and
    clearly documented. As each piece of data originates, the responsibility for data
    entry must be clearly established. After the data has made its way into the database,
    policies must be in place to control access to it, and these policies are implemented
    by MySQL's privileges and the use of **views**.
  prefs: []
  type: TYPE_NORMAL
- en: Responsibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should determine who in the enterprise—in terms of a person's name or a function
    name—is responsible for each data element. This should then be documented and
    a good place to do so is directly in the database structure. An alternative would
    be to document data responsibility on paper, but information on paper can be easily
    lost and has a tendency to become obsolete quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, there will be a primary source and an approbation-level source.
    Both should be documented this—helps for
  prefs: []
  type: TYPE_NORMAL
- en: application design, when screens have to reflect the chain of authority for
    data entry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: privilege management, if direct MySQL data access is granted to end users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: phpMyAdmin permits us to describe each column by adding comments to it. If the
    current MySQL version supports native comments, those will be used; otherwise,
    phpMyAdmin's linked-tables infrastructure has to be configured to enable the storage
    of column comments as meta-data. We will indicate responsibility details for this
    column in the corresponding column comment. To reach the page that permits us
    to enter comments in phpMyAdmin, we use the left navigation panel to open the
    database (here `marc`) then the table (here `car_event`). We then click on **Structure**
    and choose to edit a field's structure (here `event_code`) by clicking on the
    pencil icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsibility](img/1302_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can then use phpMyAdmin's **Print View** from the **Structure** page to obtain
    a listing of the table with comments.
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsibility](img/1302_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Security and Privileges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways of considering the security of our data. The first and most
    commonly implemented is at the application level. Normally, applications should
    ask for credentials: user name, password, and use these credentials to generate
    web pages or desktop screens that reflect the tasks permitted to this user. Note
    that the underlying application still connects to MySQL with all the privileges
    of a developer account but, of course, only shows appropriate data according to
    the user''s rights.'
  prefs: []
  type: TYPE_NORMAL
- en: Another issue to consider is when a user has direct access to MySQL, either
    using a command-line utility or an interface like phpMyAdmin. This might be the
    case because the end-user application has been developed only to a certain point
    and does not permit maintenance of code tables, for example. In this case, special
    MySQL users should be created that have only the needed rights. MySQL supports
    an access matrix based on rights on databases, tables, columns, and views. This
    way, we could hide specific columns, like the selling price, to all unauthorized
    persons.
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since MySQL 5.0, we can build views, which look like tables but are based on
    queries. These views can be used to:'
  prefs: []
  type: TYPE_NORMAL
- en: hide some columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: generate modified information based on table columns and the use of expressions
    on them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: procure a shortcut for data access by joining many tables so as to make them
    appear as a single table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we can associate privileges to these views without giving access to the
    underlying tables, views can prove handy to let users directly access MySQL and
    control their actions at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a view showing the car events and their description—here,
    we want to hide the `event_code` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Browsing this view in phpMyAdmin displays the following report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Views](img/1302_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Asking a user to work with views does not mean that this user can only read
    this data. In many cases, views can be updated. For example, this statement is
    allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Storage Engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL is internally structured in such a way that the low-level tasks of storing
    and managing data are implemented by the **plugable storage engine architecture**.
    MySQL AB and other companies are active in R&D to improve the offer in the storage
    engines spectrum. For more information about the architecture itself, refer to
    [http://dev.mysql.com/tech-resources/articles/mysql_5.0_psea1.html](http://dev.mysql.com/tech-resources/articles/mysql_5.0_psea1.html).
  prefs: []
  type: TYPE_NORMAL
- en: Every time we create a table, even if we don't notice it, we are asking the
    MySQL server (implicitly or explicitly) to use one of the available storage engines
    to store our data physically.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default and traditional storage engine is named `MyISAM`. A whole chapter
    in the *MySQL Reference Manual* ([http://dev.mysql.com/doc/refman/5.0/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.0/en/storage-engines.html))
    describes the available engines. Our choice of storage engine can vary from table
    to table. There is no such thing as a perfect storage engine; we have to choose
    the best one according to our needs. Here are some points to consider when making
    a choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MyISAM` supports `FULLTEXT` indexes and compressed read-only storage, and
    uses about three times less disk space than `InnoDB` for the equivalent amount
    of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InnoDB` offers foreign key constraints, multi-statement transactions with
    `ROLLBACK` support; also, due to its locking mechanism, it supports more concurrent
    `SELECT` queries than `MyISAM`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MEMORY` is of course very fast but the content (data) is not permanently stored
    on-disk, while the table definition itself is on-disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NDB` (Network DataBase), also called `MySQL Cluster`, offers synchronous replication
    between the servers—the recommended minimum number of servers in the cluster is
    four; thus there is no single point of failure in such a cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In short, here is a general guideline: if the application requires multi-statement
    transactions and foreign-key constraints, we should choose `InnoDB`; otherwise,
    `MyISAM`, the default storage engine, is suggested.'
  prefs: []
  type: TYPE_NORMAL
- en: Foreign Key Constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `InnoDB` storage engine ([http://www.innodb.com](http://www.innodb.com)),
    which is included in MySQL offers a facility to describe foreign keys in the table''s
    structure. A **foreign key** is a column (or group of columns) that points to
    a key in a table. Usually, the key that is pointed to is located in another table
    and is a primary key of that other table. Foreign keys are commonly used as lookup
    tables. There are a number of benefits to describing these relations directly
    in the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: referential integrity of the tables is maintained by the engine—we cannot add
    an event code into the `car_event` table if the corresponding code is not already
    present in the `event` table, and we cannot remove a code from the `event` table
    if it's still referenced by a row in the `car_event` table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we can program actions that MySQL will accomplish in reaction to certain events;
    for example, what happens in the referencing table if the referenced code is updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s transpose our `car_event` example into `InnoDB`. Let''s first create
    and populate the referenced table, `event`—notice the `ENGINE=InnoDB` clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, the referencing table, `car_event:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We must have an index on the `event_code` column to be able to use it in an
    `InnoDB` foreign key constraint, which is defined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The foreign key in `car_event` can also be defined in the initial `CREATE TABLE`
    statement. The previous example was done using `ALTER TABLE` to show that foreign
    keys can be added later.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these operations can be handled in a more visual way via phpMyAdmin. The
    **Operations** sub-page enables us to switch the engine to **InnoDB**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign Key Constraints](img/1302_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, when the tables are under the `InnoDB` storage engine, phpMyAdmin''s
    **Relation view** enables us to define and modify the foreign key and related
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign Key Constraints](img/1302_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having defined this `ON UPDATE CASCADE` clause, let''s see what happens when
    we modify a code value in the `event` table. We decide that the code for **washed**
    should be **10** instead of **1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign Key Constraints](img/1302_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now browse the `car_event` table; sure enough, the code for **washed** has
    been changed automatically to the value 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign Key Constraints](img/1302_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A number of points must be examined if we want to improve our structure's efficiency
    in terms of access speed or disk space used.
  prefs: []
  type: TYPE_NORMAL
- en: Indexes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding indexes on columns that are used in a `WHERE` clause is a common way
    of speeding up the queries. Let's say that we intend to find all vehicles for
    a specific brand. The `vehicle` table has a `brand_id` column and we want to create
    an index on this column. In this case, the index won't be unique because each
    brand is represented by many vehicles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using phpMyAdmin, there are two ways to create an index. First, if the index
    applies to a single column, we can open the **Structure** page for a table and
    click the index (flash) icon on the same line as the `brand_id` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Indexes](img/1302_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We could also create an index on a composite key, for example `model_id` plus
    `year`. For this, we enter the number of columns for our index (two) on the **Structure**
    page and hit **Go**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Indexes](img/1302_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, on the index management page, we choose which columns will be part of
    the index; then we invent a name for this index (here **model-year**) and click
    **Go** to create it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Indexes](img/1302_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The related SQL command for this action is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To ascertain which index are used on a particular query, we can prefix this
    query with the EXPLAIN keyword. For example, we issue this command in phpMyAdmin''s
    query box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The results tell us that an index on the `brand_id` column is a possible key
    for retrieval:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Indexes](img/1302_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Helping the Query Optimizer: Analyze Table'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we send a query to the MySQL server, it uses its query optimizer to find
    the best way of retrieving the rows. We can help the query optimizer achieve better
    results by loading a table with data and then executing the `ANALYZE TABLE` statement
    on it. This statement asks MySQL to store the key distribution for a table, which
    means that it counts the number of keys for each index and stores this information
    for later reuse. For example, after the `ANALYZE TABLE` on the `vehicle` table,
    MySQL might notice that there are 12 different brands, 1000 different vehicles
    and 100 different model-years. This information will be used later if we ever
    send a query using one of these indexes. Thus, the `ANALYZE TABLE` should be executed
    periodically; the exact frequency depends on the number of updates for this table.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Replication Slave Servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL supports a scheme where one-way, asynchronous replication of data occurs
    between a **master server** and one or more **slave servers**. Since normally,
    the majority of the requests sent to MySQL are `SELECT` queries, we can improve
    response time by sending those read requests to a slave server. This procures
    a load-balancing effect. Care must be taken to send write-type statements such
    as `INSERT, UPDATE` and `DELETE` to the master.
  prefs: []
  type: TYPE_NORMAL
- en: In current MySQL version (5.0.26), we have to choose the proper server at the
    application level to achieve this balancing; however, MySQL plans to offer a feature
    that would automatically send the `SELECT` queries to slaves.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Replication is an advanced feature of MySQL that should be set up by a seasoned
    MySQL administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Speed and Data Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a column, we have to specify a data type for it. Character data
    types (`CHAR, VARCHAR`) are very commonly used. For `CHAR`, we indicate the length
    of the column (0 to 255), and this column occupies a fixed amount of space. For
    `VARCHAR`, each value only takes the space it needs in the table; the indicated
    length is the maximum length—255 before MySQL 5.0.3 and 65532 since this version.
    Numeric types—like `INT, FLOAT`, and `DECIMAL` are fixed-length.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, here are some data types and information about how they are stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Data type | Storage method |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CHAR | fixed |'
  prefs: []
  type: TYPE_TB
- en: '| INT | fixed |'
  prefs: []
  type: TYPE_TB
- en: '| FLOAT | fixed |'
  prefs: []
  type: TYPE_TB
- en: '| DECIMAL | fixed |'
  prefs: []
  type: TYPE_TB
- en: '| VARCHAR | variable |'
  prefs: []
  type: TYPE_TB
- en: 'We should be aware that MySQL can silently decide to convert a data type to
    another one. The reasons for this are explained in the MySQL manual: [http://dev.mysql.com/doc/refman/5.0/en/silent-column-changes.html](http://dev.mysql.com/doc/refman/5.0/en/silent-column-changes.html).
    This is why, after the table''s creation, we should re-examine its structure to
    verify that silent conversion has occurred.'
  prefs: []
  type: TYPE_NORMAL
- en: It might seem that we should always choose `VARCHAR` for character fields, since
    by using this data type, a shorter value takes less space but there is a reason
    to still want to use `CHAR:` speed.
  prefs: []
  type: TYPE_NORMAL
- en: In a table, when all fields are using non-variable data types, the `MyISAM`
    storage engine uses a **fixed** table format. In this format, MySQL can predict
    the size of each row and thus can easily find the distance from, say, one `first_name`
    column to the `first_name` column of the next row. This implies that queries on
    non-indexed columns are relatively quickly executed. On the contrary, when there
    is even one `VARCHAR` column in a table, this is no longer possible, as `MyISAM`
    uses **dynamic** table format in this case. Hence, a decision must be made between
    the speed of data retrieval and the space overhead of using fixed-length columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In phpMyAdmin, when looking at a table''s structure, the **Row Statistics**
    section informs us about the fixed or dynamic format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Speed and Data Types](img/1302_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is another point in favor of using the fixed format. When rows are deleted,
    the space previously occupied by these—the holes in the table become available
    for future insertions so the table does not become physically fragmented.
  prefs: []
  type: TYPE_NORMAL
- en: '`BLOB` and `TEXT` data types are also variable in length. A `BLOB` is typically
    used to store binary data like a car''s or a customer''s photo. MySQL takes care
    internally to store these columns separately from the remainder of the table''s
    data, so the impact of having them in a table is not significant.'
  prefs: []
  type: TYPE_NORMAL
- en: Table Size Reduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A utility, `myisampack`, can be used to transform a `MyISAM` table into a read-only
    one while compressing data. In some cases, the table's physical size could be
    reduced by 70%. This technique is only available if we have access to this command-line
    utility—there is no SQL query which we can send to achieve this result.
  prefs: []
  type: TYPE_NORMAL
- en: In-Column Data Encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The situation I am about to describe happened while I was working on a search
    engine for bibliographic data but I am transposing it for the car dealer's system.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we have to migrate data from a pre-existing system into our newly-born
    data structure, we might encounter data that was formatted in a special way. For
    example, a list of possible colors for a car model could be expressed as a series
    of color codes, separated by semi-colons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Users of the pre-existing system are comfortable with this method of entering
    data in this format, and in the case I experienced, users refused to let go of
    this way of entering data—and they had direct access to the MySQL tables. From
    a developer's perspective, however, such format makes the task of query generation
    more complex. Finding the `1A6` color involves splitting the data element, and
    avoiding the `2T1A65` data element, which also has the `1A6` string.
  prefs: []
  type: TYPE_NORMAL
- en: 'A proper structure for this case implies getting rid of the semicolon-based
    format completely and storing just the pure data in table format:'
  prefs: []
  type: TYPE_NORMAL
- en: '| table: model_color | column name | sample value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   | *model | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|   | color_code | 1A6 |'
  prefs: []
  type: TYPE_TB
- en: 'Another case for which it''s even more complex to find coherent data with a
    query is when there is more than one element between the separators, such as a
    list of names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Special care must be taken to avoid matching this list of names when we search
    for `Murray, Paul` because `Murray` and `Paul` are present in the full string.
    This case only reinforces the case for moving away from such a format or at least—if
    we must keep this format due to political issues—for building an intermediary
    table, which will be used for searching. In this case, the special table must
    be synchronized whenever the main table's contents changes.
  prefs: []
  type: TYPE_NORMAL
- en: Case Study's Final Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we examine the final data structure for our case study. There
    are many ways to present this structure. First we'll see all the tables that are
    related to each other—almost all tables are—then we will examine group of related
    tables and their columns.
  prefs: []
  type: TYPE_NORMAL
- en: The following schema is produced by phpMyAdmin's PDF Page feature. To access
    this feature, we open a database and access the **Operations** sub-page. Then
    we click **Edit PDF pages**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Case Study''s Final Structure](img/1302_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When generating the PDF schema, we can also ask phpMyAdmin to produce a data
    dictionary. In order to do this, we click the **Data Dictionary** checkbox in
    the **Display PDF schema** dialog. Here is the page of this dictionary describing
    the `person` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Case Study''s Final Structure](img/1302_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This combined data dictionary/schema offers a noteworthy feature: we can click
    on a table name in the schema to reach the table''s description in the dictionary,
    and the other way around.'
  prefs: []
  type: TYPE_NORMAL
- en: The following `CREATE TABLE` commands come directly from the **Export** feature
    of phpMyAdmin. To access this feature, simply open a database and choose the **Export**
    menu, then select all the tables, click the **SQL** checkbox and hit **Go**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Case Study''s Final Structure](img/1302_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The commands have been grouped into smaller chunks of related tables, even
    if ultimately there are relations between the tables of those groups. You''ll
    notice that phpMyAdmin adds—in the form of comments in the export file—information
    about the relations with other tables. Another point to note: the primary key
    for most tables is `id`, an integer. Thus, a column pointing to the `id` column
    of table `brand` is named `brand_id`.'
  prefs: []
  type: TYPE_NORMAL
- en: Vehicle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Person
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Other tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We improved our data structure's implementation by assessing the responsible
    person for each data element and by storing this information into column comments.
    We then saw how to use privileges and views to improve security, how to choose
    the best storage engine per table, and how to benefit from foreign key constraints.
    Performance issues were considered, and then we were presented with the final
    model for the car dealer's case study.
  prefs: []
  type: TYPE_NORMAL
