["```go\nstruct sdshdr {\n            long len;\n           long free;\n              char buf[];\n          };\n```", "```go\npackage org.learningredis.chapter.three.datastruct;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\npublic class MyStringTest {\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) throws InterruptedException {\n    MyStringTest myStringTest  = new MyStringTest();\n    myStringTest.test();\n\n  }\n  private void test() throws InterruptedException {\n    Jedis jedis = this.getResource();\n    String commonkey = \"mykey\";\n    jedis.set(commonkey, \"Hello World\");\n    System.out.println(\"1) \"+jedis.get(\"mykey\"));\n    jedis.append(commonkey, \" and this is a bright sunny day \");\n    System.out.println(\"2) \"+jedis.get(\"mykey\"));\n    String substring=jedis.getrange(commonkey, 0 , 5);\n    System.out.println(\"3) \"+\"substring value = \"+substring);\n    String commonkey1 = \"mykey1\";\n    jedis.set(commonkey1, \"Let's learn redis\");\n    for(String value : jedis.mget(commonkey,commonkey1)){\n      System.out.println(\"4) \"+\" - \"+ value);\n    }\n    jedis.mset(\"mykey2\",\"let's start with string\",\"mykey3\",\"then we will learn other data types\");\n    for(String value : jedis.mget(commonkey,commonkey1,\"mykey2\",\"mykey3\")){\n      System.out.println(\"5) \"+\"   -- \"+ value);\n    }\n    jedis.msetnx(\"mykey4\",\"next in line is hashmaps\");\n    System.out.println(\"6) \"+jedis.get(\"mykey4\"));\n    jedis.msetnx(\"mykey4\",\"next in line is sorted sets\");\n    System.out.println(\"7) \"+jedis.get(\"mykey4\"));\n    jedis.psetex(\"mykey5\", 1000, \"this message will self destruct in 1000 milliseconds\");\n    System.out.println(\"8) \"+jedis.get(\"mykey5\"));\n    Thread.currentThread().sleep(1200);\n    System.out.println(\"8) \"+jedis.get(\"mykey5\"));\n    Long length=jedis.strlen(commonkey);\n    System.out.println(\"9) \"+\" the length of the string 'mykey' is \" + length);\n    this.setResource(jedis);\n  }\n}\n```", "```go\n  package org.learningredis.chapter.three.datastruct;\nimport java.util.HashMap;\nimport java.util.Map;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\npublic class MyHashesTest {\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) \nthrows InterruptedException  {\n    MyHashesTest myHashesTest  = new MyHashesTest();\n    myHashesTest.test();    \n  }\n  private void test() {\n    Jedis jedis = this.getResource();\n    String commonkey = \"learning redis\";\n    jedis.hset(commonkey, \"publisher\", \"Packt Publisher\");\n    jedis.hset(commonkey, \"author\", \"Vinoo Das\");\n    System.out.println(jedis.hgetAll(commonkey));\nMap<String,String> attributes = new HashMap<String,String>();\n    attributes.put(\"ISBN\", \"XX-XX-XX-XX\");\n    attributes.put(\"tags\", \"Redis,NoSQL\");\n    attributes.put(\"pages\", \"250\");\n    attributes.put(\"weight\", \"200.56\");\n    jedis.hmset(commonkey, attributes);\n    System.out.println(jedis.hgetAll(commonkey));\n    System.out.println(jedis.hget(commonkey,\"publisher\"));\n    System.out.println(jedis.hmget(commonkey,\"publisher\",\"author\"));\n    System.out.println(jedis.hvals(commonkey));\n    System.out.println(jedis.hget(commonkey,\"publisher\"));\n    System.out.println(jedis.hkeys(commonkey));\n    System.out.println(jedis.hexists(commonkey, \"cost\"));\n    System.out.println(jedis.hlen(commonkey));\n    System.out.println(jedis.hincrBy(commonkey,\"pages\",10));\n    System.out.println(jedis.hincrByFloat(commonkey,\"weight\",1.1) + \" gms\");\n    System.out.println(jedis.hdel(commonkey,\"weight-in-gms\"));\n    System.out.println(jedis.hgetAll(commonkey));\n    this.setResource(jedis);\n  }\n}\n```", "```go\npackage org.learningredis.chapter.three.datastruct;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.BinaryClient.LIST_POSITION;\npublic class MyListTest {\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) throws InterruptedException {\n    MyListTest myListTest  = new MyListTest();\n    myListTest.test();\n  }\n  private void test() {\n    Jedis jedis = this.getResource();\n    System.out.println(jedis.del(\"mykey4list\"));\n    String commonkey=\"mykey4list\";\n    String commonkey1=\"mykey4list1\";\n    for(int index=0;index<3;index++){\n      jedis.lpush(commonkey, \"Message - \" + index);\n    }\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    for(int index=3;index<6;index++){\n      jedis.rpush(commonkey, \"Message - \" + index);\n    }\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lindex(commonkey, 0));\n    System.out.println(jedis.linsert(commonkey,LIST_POSITION.AFTER,\"Message - 5\", \"Message - 7\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.linsert(commonkey,LIST_POSITION.BEFORE,\"Message - 7\", \"Message - 6\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.llen(commonkey));\n    System.out.println(jedis.lpop(commonkey));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lpush(commonkey,\"Message - 2\",\"Message -1.9\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lpushx(commonkey,\"Message - 1.8\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lrem(commonkey,0,\"Message - 1.8\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lrem(commonkey,-1,\"Message - 7\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lset(commonkey,7,\"Message - 7\"));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.ltrim(commonkey,2,-4));\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    jedis.rpoplpush(commonkey, commonkey1);\n    System.out.println(jedis.lrange(commonkey, 0, -1));\n    System.out.println(jedis.lrange(commonkey1, 0, -1));\n  }\n}\n```", "```go\npackage org.learningredis.chapter.three.datastruct;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\npublic class MySetTest {\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) {\n    MySetTest mySetTest = new MySetTest();\n    mySetTest.test();\n  }\n  private void test() {\n    Jedis jedis = this.getResource();\n    jedis.sadd(\"follow:cricket\", \"vinoo.das@junk-mail.com\",\"vinoo.das1@junk-mail.com\",\"vinoo.das3@junk-mail.com\");\n    System.out.println(jedis.smembers(\"follow:cricket\"));\n    System.out.println(jedis.scard(\"follow:cricket\"));\n    jedis.sadd(\"follow:redis\", \"vinoo.das1@junk-mail.com\",\"vinoo.das2@junk-mail.com\");\n    System.out.println(jedis.smembers(\"follow:redis\"));\n    System.out.println(jedis.scard(\"follow:redis\"));\n    // intersect the above sets to give name who is interested in cricket and redis\n    System.out.println(jedis.sinter(\"Cricket:followers\",\"follow:redis\"));\n    jedis.sinterstore(\"follow:redis+cricket\",\"follow:cricket\",\"follow:redis\");\n    System.out.println(jedis.smembers(\"follow:redis+cricket\"));\n    System.out.println(jedis.sismember(\"follow:redis+cricket\", \"vinoo.das@junk-mail.com\"));\n    System.out.println(jedis.sismember(\"follow:redis+cricket\", \"vinoo.das1@junk-mail.com\"));\n    jedis.smove(\"follow:cricket\", \"follow:redis\", \"vinoo.das3@junk-mail.com\");\n    System.out.println(jedis.smembers(\"follow:redis\"));\n    System.out.println(jedis.srandmember(\"follow:cricket\"));\n    System.out.println(jedis.spop(\"follow:cricket\"));\n    System.out.println(jedis.smembers(\"follow:cricket\"));\n    jedis.sadd(\"follow:cricket\",\"wrong-data@junk-mail.com\");\n    System.out.println(jedis.smembers(\"follow:cricket\"));\n    jedis.srem(\"follow:cricket\",\"wrong-data@junk-mail.com\");\n    System.out.println(jedis.smembers(\"follow:cricket\"));\n    System.out.println(jedis.sunion(\"follow:cricket\",\"follow:redis\"));\n    jedis.sunionstore(\"follow:cricket-or-redis\",\"follow:cricket\",\"follow:redis\");\n    System.out.println(jedis.smembers(\"follow:cricket-or-redis\"));\n    System.out.println(jedis.sdiff(\"follow:cricket\", \"follow:redis\"));\n  }\n}\n```", "```go\npackage org.learningredis.chapter.three.datastruct;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\npublic class MySortedSetTest {\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) {\n    MySortedSetTest mySortedSetTest = new MySortedSetTest();\n    mySortedSetTest.test();\n  }\n  private void test() {\n    Jedis jedis = this.getResource();\n    jedis.zadd(\"purchase\", 0, \"learning-redis\");\n    jedis.zadd(\"purchase\", 0, \"cassandra\");\n    jedis.zadd(\"purchase\", 0, \"hadoop\");\n    System.out.println(jedis.zcard(\"purchase\"));\n    // purchase a 4 books on redis\n    jedis.zincrby(\"purchase\", 1, \"learning-redis\");\n    jedis.zincrby(\"purchase\", 1, \"learning-redis\");\n    jedis.zincrby(\"purchase\", 1, \"learning-redis\");\n    jedis.zincrby(\"purchase\", 1, \"learning-redis\");\n    // purchase a 2 books on cassandra\n    jedis.zincrby(\"purchase\", 1, \"cassandra\");\n    jedis.zincrby(\"purchase\", 1, \"cassandra\");\n    // purchase a 1 book on hadoop\n    jedis.zincrby(\"purchase\", 1, \"hadoop\");\n    System.out.println(jedis.zcount(\"purchase\", 3, 4));\n    System.out.println(jedis.zrange(\"purchase\", 0, 2));\n    System.out.println(jedis.zrangeByScore(\"purchase\", 3, 4));\n    System.out.println(jedis.zrank(\"purchase\", \"learning-redis\"));\n    System.out.println(jedis.zrank(\"purchase\", \"cassandra\"));\n    System.out.println(jedis.zrank(\"purchase\", \"hadoop\"));\n    System.out.println(jedis.zrevrank(\"purchase\", \"learning-redis\"));\n    System.out.println(jedis.zrevrank(\"purchase\", \"cassandra\"));\n    System.out.println(jedis.zrevrank(\"purchase\", \"hadoop\"));\n    System.out.println(jedis.zscore(\"purchase\", \"learning-redis\"));\n    System.out.println(jedis.zscore(\"purchase\", \"cassandra\"));\n    System.out.println(jedis.zscore(\"purchase\", \"hadoop\"));\n    jedis.zunionstore(\"purchase:nosql\", \"purchase\");\n    System.out.println(\"-- \" + jedis.zrange(\"purchase:nosql\",0,-1));\n    System.out.println(\"-- \" + jedis.zrank(\"purchase:nosql\",\"learning-redis\"));\n    jedis.zrem(\"purchase:nosql\", \"hadoop\");\n    System.out.println(\"-- \" + jedis.zrange(\"purchase:nosql\",0,-1));\n    jedis.zremrangeByRank(\"purchase:nosql\", 0,0);\n    System.out.println(\"-- \" + jedis.zrange(\"purchase:nosql\",0,-1));\n    jedis.zremrangeByScore(\"purchase:nosql\", 3,4);\n    System.out.println(\"-- \" + jedis.zrange(\"purchase:nosql\",0,-1));\n    this.setResource(jedis);\n  }\n}\n```", "```go\n    package org.learningredis.chapter.three;\n    public interface ConnectionProperties {\n      public String host=\"localhost\";\n      public int   port =6379;\n    }\n    ```", "```go\n    package org.learningredis.chapter.three;\n    public class TestClient {\n      public void execute(Command command){\n          try{\n            /*Connects to server*/\n            command.excute();\n          }catch(Exception e){\n            e.printStackTrace();\n          }\n        }\n      public static void main(String... args) {\n        TestClient testclient = new TestClient();\n        SetCommand set = new  SetCommand(\"MSG\",\"Hello world : simple test client\");\n        testclient.execute(set);\n\n        GetCommand get = new GetCommand(\"MSG\");\n        testclient.execute(get);\n        }\n    }\n    ```", "```go\npackage org.learningredis.chapter.three;\npublic class TestClient {\n  public void execute(Command command){\n      try{\n        /*Connects to server*/\n        command.excute();\n      }catch(Exception e){\n        e.printStackTrace();\n      }\n    }\n  public static void main(String... args) {\n    TestClient testclient = new TestClient();\n    SetCommand set = new  SetCommand(\"MSG\",\"Hello world : simple test client\");\n    testclient.execute(set);\n\n    GetCommand get = new GetCommand(\"Wrong-key\");\n    testclient.execute(get);\n    }\n}\n```", "```go\n    package org.learningredis.chapter.three;\n    import java.io.IOException;\n    import java.net.Socket;\n    import java.util.ArrayList;\n    public abstract class Command {\n      protected Socket socket;\n      public Command() {\n        try {\n          socket = new Socket(ConnectionProperties.host,\n              ConnectionProperties.port);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    public String createPayload(ArrayList<String> \n    messageList) \n    {\n        int argumentSize = messageList.size();\n        StringBuffer payload = new StringBuffer();\n        payload.append('*');\n        payload.append(argumentSize);\n        payload.append(\"\\r\\n\");\n        for (int cursor = 0; cursor < messageList.size(); cursor++) {\n          payload.append(\"$\");\n          payload.append(messageList.get(cursor).length());\n          payload.append(\"\\r\\n\");\n          payload.append(messageList.get(cursor));\n          payload.append(\"\\r\\n\");\n        }\n        return payload.toString().trim();\n      }\n      public abstract String createPayload();\n      public abstract void execute() throws IOException;\n    }\n    ```", "```go\n    package org.learningredis.chapter.three;\n    import java.io.BufferedReader;\n    import java.io.IOException;\n    import java.io.InputStreamReader;\n    import java.io.PrintWriter;\n    import java.util.ArrayList;\n    public class GetCommand extends Command{\n      private String key;\n      public GetCommand(String key) {\n        this.key=key;\n      }\n      @Override\n      public String createPayload() {\n        ArrayList<String> messageList = new ArrayList<String>();\n        messageList.add(\"GET\");\n        messageList.add(key);\n        return super.createPayload(messageList);\n      }\n      @Override\n      public void excute() throws IOException  {\n        PrintWriter out = null;\n        BufferedReader in=null;\n        try {\n        out = new PrintWriter(super.socket.getOutputStream(),true);\n        out.println(this.createPayload());\n          //Reads from Redis server\n    in = new BufferedReader(new \n              InputStreamReader(socket.getInputStream()));\n              String msg=in.readLine();\n              if (! msg.contains(\"-1\")){\n                System.out.println(msg);\n                System.out.println(in.readLine());\n              }else{\n              // This will show the error message since the \n              // server has returned '-1'\n              System.out.println(\"This Key does not exist !\");\n          }\n        } catch (IOException e) {\n          e.printStackTrace();\n        }finally{\n          out.flush();\n          out.close();\n          in.close();\n          socket.close();\n        }\n      }\n    }\n    ```", "```go\n    package org.learningredis.chapter.three;\n    import java.io.BufferedReader;\n    import java.io.IOException;\n    import java.io.InputStreamReader;\n    import java.io.PrintWriter;\n    import java.util.ArrayList;\n    public class SetCommand extends Command{\n      private String key;\n      private String value;\n      public SetCommand(String key, String value) {\n        this.key=key;\n        this.value=value;\n      }\n      public String createPayload(){\n    ArrayList<String> messageList = new \n                      ArrayList<String>();\n        messageList.add(\"SET\");\n        messageList.add(key);\n        messageList.add(value);\n        return super.createPayload(messageList);\n      }\n      @Override\n      public void excute() throws IOException  {\n        PrintWriter    out = null;\n        BufferedReader in = null;\n        try {\n          out = new\n    PrintWriter(super.socket.getOutputStream (), true);\n          out.println(this.createPayload());\n          //Reads from Redis server\n          in = new BufferedReader(new \n          InputStreamReader(socket.getInputStream()));  \n          // This is going to be a single line reply..\n          System.out.println(in.readLine());\n        } catch (IOException e) {\n          e.printStackTrace();\n        }finally{\n          in.close();\n          out.flush();\n          out.close();\n          socket.close();\n        }\n      }\n    }\n    ```"]