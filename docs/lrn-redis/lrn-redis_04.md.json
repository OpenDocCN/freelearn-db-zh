["```go\npackage org.learningRedis.chapter.four.pubsub;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisPool;\nimport Redis.clients.jedis.JedisPoolConfig;\npublic class SubscriberProcessor implements Runnable{\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  private Subscriber subscriber = new Subscriber();\n  private Thread simpleThread;\n  private Jedis jedis = getResource();\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  @SuppressWarnings(\"static-access\")\n  public static void main(String[] args) {\n    SubscriberProcessor test = new SubscriberProcessor();\n    test.subscriberProcessor();\n    try {\n      Thread.currentThread().sleep(10000);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    test.unsubscribe();\n  }\n  private void unsubscribe() {\n    simpleThread.interrupt();\n    if(subscriber.isSubscribed()){\n      subscriber.unsubscribe();\n  }\n  }\n  private void subscriberProcessor() {\n    simpleThread = new Thread(this);\n    simpleThread.start();\n  }\n  @Override\n  public void run() {\n    while (!Thread.currentThread().isInterrupted()) {\n      jedis.subscribe(subscriber, \"news\");\n      //jedis.psubscribe(subscriber, \"news.*\");\n    }\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.pubsub;\nimport Redis.clients.jedis.JedisPubSub;\npublic class Subscriber extends  JedisPubSub{\n  @Override\n  public void onMessage(String arg0, String arg1) {\n    System.out.println(\"on message : \" + arg0 + \" value = \" + arg1);\n  }\n  @Override\n  public void onPMessage(String arg0, String arg1, String arg2) {\n    System.out.println(\"on pattern message : \" + arg0 + \" channel = \" + arg1 + \" message =\" + arg2);\n  }\n  @Override\n  public void onPSubscribe(String arg0, int arg1) {\n    System.out.println(\"on pattern subscribe : \" + arg0 + \" value = \" + arg1);\n  }\n  @Override\n  public void onPUnsubscribe(String arg0, int arg1) {\n    System.out.println(\"on pattern unsubscribe : \" + arg0 + \" value = \" + arg1);\n  }\n  @Override\n  public void onSubscribe(String arg0, int arg1) {\n    System.out.println(\"on subscribe : \" + arg0 + \" value = \" + arg1);\n  }\n  @Override\n  public void onUnsubscribe(String arg0, int arg1) {\n    System.out.println(\"on un-subscribe : \" + arg0 + \" value = \" + arg1);\n  }\n}\n```", "```go\npackage org.learningredis.chapter.four.pipelineandtx;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\npublic class ConnectionManager {\n  private static JedisPool jedisPool = new JedisPool(\"localhost\");\n  public static Jedis get(){\n    return jedisPool.getResource();\n  }\n  public static void set(Jedis jedis){\n    jedisPool.returnResource(jedis);\n  }\n  public static void close(){\n    jedisPool.destroy();\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.pubsub;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisPool;\nimport Redis.clients.jedis.JedisPoolConfig;\npublic class Publisher {\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  private void publisher() {\n    Jedis jedis = this.getResource();\n    jedis.publish(\"news\", \"Houstan calling texas... message published !!\");\n  }\n  public static void main(String[] args) {\n    Publisher test = new Publisher();\n    test.publisher();\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.simplepipeline;\nimport java.util.List;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.Pipeline;\npublic class PipelineCommandTest {\n  Jedis jedis = ConnectionManager.get();\n  long starttime_withoutpipeline = 0;\n  long starttime_withpipeline = 0;\n  long endtime_withoutpipeline = 0;\n  long endtime_withpipeline = 0;\n  public static void main(String[] args) throws InterruptedException {\n    PipelineCommandTest test = new PipelineCommandTest();\n    test.checkWithoutPipeline();\n    Thread.currentThread().sleep(1000);\n    test.checkWithPipeline();\n    Thread.currentThread().sleep(1000);\n    test.getStats();\n  }\n  private void getStats() {\n    System.out.println(\" time taken for test without pipeline \"+ (endtime_withoutpipeline - starttime_withoutpipeline ));\n    System.out.println(\" time taken for test with    pipeline \"+ (endtime_withpipeline - starttime_withpipeline ));\n  }\n  private void checkWithoutPipeline() {\n    starttime_withoutpipeline = System.currentTimeMillis();\n    for(int keys=0;keys<10;keys++){\n      for(int nv=0;nv<100;nv++){\n        jedis.hset(\"keys-\"+keys, \"name\"+nv, \"value\"+nv);\n      }\n      for(int nv=0;nv<100;nv++){\n        jedis.hget(\"keys-\"+keys, \"name\"+nv);\n      }\n    }\n    endtime_withoutpipeline = System.currentTimeMillis();\n    // this will delete all the data.\n    jedis.flushDB();\n  }\n  private void checkWithPipeline() {\n    starttime_withpipeline = System.currentTimeMillis();\n    for(int keys=0;keys<10;keys++){\n      Pipeline commandpipe = jedis.pipelined();\n      for(int nv=0;nv<100;nv++){\n        commandpipe.hset(\"keys-\"+keys, \"name\"+nv, \"value\"+nv);\n      }\n      List<Object> results = commandpipe.syncAndReturnAll();\n      for(int nv=0;nv<results.size();nv++){\n        results.get(nv);\n      }\n    }\n    endtime_withpipeline = System.currentTimeMillis();\n    jedis.flushDB();\n  }\n}\n```", "```go\ntime taken for test without pipeline 4015\ntime taken for test with    pipeline 250\n```", "```go\npackage org.learningRedis.chapter.four.pipelineandtx;\npublic class MultiThreadedPipelineCommandTest {\n  public static void main(String[] args) throws InterruptedException {\n    Thread pipelineClient = new Thread(new PipelineCommand());\n    Thread singleCommandClient = new Thread(new SingleCommand());\n    pipelineClient.start();\n    Thread.currentThread().sleep(50);\n    singleCommandClient.start();\n  }\n}\nThe code for the client which is going to fire the pipeline commands is as follows:\npackage org.learningRedis.chapter.four.pipelineandtx;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.Pipeline;\npublic class PipelineCommand implements Runnable{\n  Jedis jedis = ConnectionManager.get();\n  @Override\n  public void run() {\n      long start = System.currentTimeMillis();\n      Pipeline commandpipe = jedis.pipelined();\n      for(int nv=0;nv<300000;nv++){\n        commandpipe.sadd(\"keys-1\", \"name\"+nv);\n      }\n      commandpipe.sync();\n      Set<String> data= jedis.smembers(\"keys-1\");\n      System.out.println(\"The return value of nv1 after pipeline [ \" + data.size() + \" ]\");\n    System.out.println(\"The time taken for executing client(Thread-1) \"+ (System.currentTimeMillis()-start));\n    ConnectionManager.set(jedis);\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.pipelineandtx;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\npublic class SingleCommand implements Runnable {\n  Jedis jedis = ConnectionManager.get();\n  @Override\n  public void run() {\n    Set<String> data= jedis.smembers(\"keys-1\");\n    System.out.println(\"The return value of nv1 is [ \" + data.size() + \" ]\");\n    ConnectionManager.set(jedis);\n  }\n}\n```", "```go\nThe return value of nv1 is [ 3508 ]\nThe return value of nv1 after pipeline [ 300000 ]\nThe time taken for executing client(Thread-1) 3718\n```", "```go\npackage org.learningRedis.chapter.four.pipelineandtx;\npublic class MultiThreadedTransactionCommandTest {\n  public static void main(String[] args) throws InterruptedException {\n    Thread transactionClient = new Thread(new TransactionCommand());\n    Thread singleCommandClient = new Thread(new SingleCommand());\n    transactionClient.start();\n    Thread.currentThread().sleep(30);\n    singleCommandClient.start();\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.pipelineandtx;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\npublic class SingleCommand implements Runnable {\n  Jedis jedis = ConnectionManager.get();\n  @Override\n  public void run() {\n    Set<String> data= jedis.smembers(\"keys-1\");\n    System.out.println(\"The return value of nv1 is [ \" + data.size() + \" ]\");\n    ConnectionManager.set(jedis);\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.pipelineandtx;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.Transaction;\nimport chapter.four.pubsub.ConnectionManager;\npublic class TransactionCommand implements Runnable {\n  Jedis jedis = ConnectionManager.get();\n  @Override\n  public void run() {\n      long start = System.currentTimeMillis();\n      Transaction transactionableCommands = jedis.multi();\n      for(int nv=0;nv<300000;nv++){\n        transactionableCommands.sadd(\"keys-1\", \"name\"+nv);\n      }\n      transactionableCommands.exec();\n      Set<String> data= jedis.smembers(\"keys-1\");\n      System.out.println(\"The return value nv1 after tx [ \" + data.size() + \" ]\");\n    System.out.println(\"The time taken for executing client(Thread-1) \"+ (System.currentTimeMillis()-start));\n    ConnectionManager.set(jedis);\n  }\n}\n```", "```go\nThe return code is [ 1 ]\nThe return value of nv1 is [ null ]\nThe return value nv1 after tx [ 300000 ]\nThe time taken for executing client(Thread-1) 7078\n```", "```go\nThe return value of nv1 is [ 3508 ]\n```", "```go\n  The return value of nv1 after tx [0] or\n  The return value of nv1 after tx [300000] \n```", "```go\n    local  myvariable = 4\n    local  myothervariable = 5\n    if myvariable >  myothervariable then\n      print(\"4 is greater than 5\"..\"Please add 2 dots to concatenate strings\")\n    else\n      print(\"4 is not greater than 5\"..\"Please add 2 dots to concatenate strings\")\n    end\n    ```", "```go\n    local index=1\n    while index <= 5 do\n      print(\"Looping done interation \"..index)\n      index=index+1\n    end\n    ```", "```go\n    local index=1\n    repeat\n      print(\"Looping done interation \"..index)\n      index=index+1\n    until index==5 \n    ```", "```go\n    for i=1,3 do\n      print(\"Looping in for loop \")\n    end\n    ```", "```go\nfunction greaterThanFunction( i , j )\n  if i >  j then\n    print(i..\" is greater than\"..j)\n    return true\n  else\n    print(i..\" is lesser than\"..j)\n    return false\n  end\nend\nprint(greaterThanFunction(4,5))\n```", "```go\nlocal mylist={\"start\",\"pause\",\"stop\",\"resume\"}\nfunction parseList ( k )\n  for i=1,#mylist do\n    if mylist[i] == \"stop\" then break end\n    print(mylist[i])\n  end\nend\nprint(parseList(mylist))\n```", "```go\npackage org.learningRedis.chapter.four.luascripting;\nimport java.util.Arrays;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisPool;\nimport Redis.clients.jedis.JedisPoolConfig;\npublic class TestLuaScript {\n  public String luaScript = Reader.read(\"D:\\\\path\\\\of\\\\file\\\\location\\\\LuaScript.txt\");\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) {\n    TestLuaScript test = new TestLuaScript();\n    test.luaScript();\n  }\n  private void luaScript() {\n    Jedis jedis = this.getResource();\n    String result = (String) jedis.eval(luaScript,Arrays.asList(\"msg\"),\n        Arrays.asList(\"Learning Redis\",\n            \"Now I am learning Lua for Redis\",\n            \"prepare for the test again\"));\n    System.out.println(result);\n    this.setResource(jedis);\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.luascripting;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\npublic class Reader {\n  public static String read(String filepath) {\n    StringBuffer string = new StringBuffer();\n    try (BufferedReader br = new BufferedReader(new FileReader(filepath)))\n    {\n      String currentline;\n      while ((currentline = br.readLine()) != null) {\n        string.append(currentline);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } \n    return string.toString();\n  }\n}\n```", "```go\nlocal data= Redis.call('GET',KEYS[1])\nif data==ARGV[1] then \n  Redis.call('SET',KEYS[1],ARGV[2])\n  return \"The value that got sent is = \"..ARGV[2]\nelse\n  Redis.call('SET',KEYS[1],ARGV[3])\n  return \"The value that got sent is = \"..ARGV[3]\nend\n```", "```go\nThe value that got sent is = Now I am learning Lua for Redis\n```", "```go\nThe value that got sent is = prepare for the test again\n```", "```go\npackage org.learningRedis.chapter.four.pubsub.reliable;\nimport java.util.Arrays;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisPool;\nimport Redis.clients.jedis.JedisPoolConfig;\nimport org.learningRedis.chapter.four.luascripting.Reader;\npublic class Publisher {\n  public String luaScript = Reader.read(\"D:\\\\pathtoscript \\\\RELIABLE-MSGING.txt\");\n  private JedisPool pool = new JedisPool(new JedisPoolConfig(), \"localhost\");\n  Jedis jedis = null;\n  public Jedis getResource() {\n    jedis = pool.getResource();\n    return jedis;\n  }\n  public void setResource(Jedis jedis){\n    pool.returnResource(jedis);\n  }\n  public static void main(String[] args) {\n    Publisher test = new Publisher();\n    test.sendingAreliableMessages();\n  }\n  private void sendingAreliableMessages() {\n    Jedis jedis = this.getResource();\n    String result = (String) jedis.eval(luaScript,Arrays.asList(\"\"),\n        Arrays.asList(\"{type='channel',publishto='client1',msg='\"+System.currentTimeMillis()+\"'}\"));\n    System.out.println(result);\n    this.setResource(jedis);\n  }\n}\n```", "```go\nlocal payload = loadstring(\"return\"..ARGV[1])()\nlocal result = Redis.call(\"PUBLISH\",payload.publishto,payload.msg)\nif result==0 then\n  Redis.call('SADD','MSGBOX',payload.msg)\n  return 'stored messages:  '..ARGV[1]\nelse\n  return 'consumed messages:  '..ARGV[1]\nend\n```", "```go\npackage org.learningRedis.chapter.four.pubsub.reliable;\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\nimport org.learningRedis.chapter.four.luascripting.Reader;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisPubSub;\nimport chapter.four.pubsub.ConnectionManager;\npublic class SimpleMsgSubscriber {\n  static Thread lostMsgWorker;\n  static Thread msgWorker;\n  public static void main(String[] args) {\n    SimpleMsgSubscriber source = new SimpleMsgSubscriber();\n  msgWorker = new Thread(source.new MsgProcessor());\nlostMsgWorker = new Thread(source.new LostMsgProcessor());\n  msgWorker.start();\nlostMsgWorker.start();\n  }\npublic class MsgProcessor extends JedisPubSub implements Runnable {\nJedis jedis = ConnectionManager.get();\n@Override\npublic void run() {\n  jedis.subscribe(this, \"client1\");\n}\n@Override\npublic void onMessage(String arg0, String arg1) {\n  System.out.println(\"processing the msg = \" + arg1);\n}\n@Override\npublic void onPMessage(String arg0, String arg1, String arg2) {\n    }\n@Override\npublic void onPSubscribe(String arg0, int arg1) {\n    }\n@Override\npublic void onPUnsubscribe(String arg0, int arg1) {\n     }\n@Override\npublic void onSubscribe(String arg0, int arg1) {\n    }\n@Override\npublic void onUnsubscribe(String arg0, int arg1) {\n    }\n  }\npublic class LostMsgProcessor implements Runnable {\n    Jedis jedis = ConnectionManager.get();\n    @Override\n    public void run() {\n      String event;\n      Jedis jedis = ConnectionManager.get();\n      String msg;\n      while((msg=jedis.spop(\"MSGBOX\")) != null){\n        MessageHandler.push(msg);\n      }\n    }\n  }\n  public static class MessageHandler {\n    static Jedis jedis = ConnectionManager.get();\n        public static void push(String msg)\n        {\n            String luaScript = \"\";\n            try\n            {\n                luaScript = read(\"D:\\\\path\\\\to\\\\file\\\\RELIABLE-MSGING.txt\");\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n            String result = (String) jedis.eval(luaScript, Arrays.asList(\"\"), Arrays.asList(\"{type='channel',publishto='client1',msg='\" + msg + \"'}\"));\n        }\n        private static String read(String luaScriptPath) throws IOException\n        {\n            Path file = Paths.get(luaScriptPath);\n            BufferedReader reader = Files.newBufferedReader(file, Charset.defaultCharset());\n            StringBuilder content = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null)\n            {\n                content.append(line).append(\"/n\");\n            }\n            System.out.println(\"Content: \" + content.toString());\n            return content.toString();\n        }\n  }\n}\n```", "```go\n    package org.learningRedis.chapter.four.auth;\n    import Redis.clients.jedis.Jedis;\n    public class TestingPassword {\n      public static void main(String[] args) {\n        TestingPassword test = new TestingPassword();\n        test.authentication();\n      }\n      private void authentication() {\n        Jedis jedis = new Jedis(\"localhost\");\n        jedis.set(\"foo\", \"bar\");\n        System.out.println(jedis.get(\"foo\"));\n      }\n    }\n    ```", "```go\n    package org.learningRedis.chapter.four.auth;\n    import Redis.clients.jedis.Jedis;\n    public class TestingPassword {\n      public static void main(String[] args) {\n        TestingPassword test = new TestingPassword();\n        test.authentication();\n      }\n      private void authentication() {\n        Jedis jedis = new Jedis(\"localhost\");\n        jedis.auth(\"Learning Redis\");\n        jedis.set(\"foo\", \"bar\");\n        System.out.println(jedis.get(\"foo\"));\n      }\n    }\n    ```", "```go\npackage org.learningRedis.chapter.four.selectdb;\nimport Redis.clients.jedis.Jedis;\npublic class TestSelectingDB {\n  public static void main(String[] args) {\n    TestSelectingDB test = new TestSelectingDB();\n    test.commandSelect();\n  }\n  private void commandSelect() {\n    Jedis jedis = new Jedis(\"localhost\");\n    jedis.select(1);\n    jedis.set(\"msg\", \"Hello world\");\n    System.out.println(jedis.get(\"msg\"));\n    jedis.select(2);\n    System.out.println(jedis.get(\"msg\"));\n  }\n}\n```", "```go\nHello world\nnull\n```", "```go\nPONG in 47 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 0 milliseconds\n```", "```go\nPONG in 16 milliseconds\nhi Redis  in 16 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 15 milliseconds\nPONG in 16 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 15 milliseconds\n```", "```go\nPONG in 15 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 16 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 16 milliseconds\nhi Redis  in 0 milliseconds\nPONG in 0 milliseconds\nhi Redis  in 15 milliseconds\n```", "```go\npackage org.learningRedis.chapter.four.echoandping;\nimport Redis.clients.jedis.Jedis;\npublic class TestEchoAndPing {\n  public static void main(String[] args) throws InterruptedException {\n    TestEchoAndPing echoAndPing = new TestEchoAndPing();\n    Thread thread = new Thread(new LoadGenerator());\n    thread.start();\n    while(true){\n      Thread.currentThread().sleep(1000);\n      echoAndPing.testPing();\n      echoAndPing.testEcho();\n    }\n  }\n  private void testPing() {\n    long start = System.currentTimeMillis();\n    Jedis jedis = new Jedis(\"localhost\");\n    System.out.println(jedis.ping() + \" in \" + (System.currentTimeMillis()-start) + \" milliseconds\");\n  }\n  private void testEcho() {\n    long start = System.currentTimeMillis();\n    Jedis jedis = new Jedis(\"localhost\");\n    System.out.println(jedis.echo(\"hi Redis \") + \" in \" + (System.currentTimeMillis()-start) + \" milliseconds\");\n  }\n}\n```", "```go\npackage org.learningRedis.chapter.four.echoandping;\nimport java.util.ArrayList;\nimport java.util.List;\nimport Redis.clients.jedis.Jedis;\npublic class LoadGenerator implements Runnable{\n  List<Thread> clients = new ArrayList<Thread>();\n  public LoadGenerator() {\n    for(int i=0;i<50;i++){\n      clients.add(new Thread(new Sample()));\n    }\n  }\n  @Override\n  public void run() {\n    for(int i=0;i<50;i++){\n      clients.get(i).start();\n    }\n  }\n  public class Sample implements Runnable{\n    Jedis jedis = new Jedis(\"localhost\");\n    @Override\n    public void run() {\n      int x=0;\n      while(!Thread.currentThread().isInterrupted()){\n        jedis.sadd(Thread.currentThread().getName(), \"Some text\"+new Integer(x).toString());\n        x++;\n      }\n    }\n  }\n}\n```"]