["```go\n        package org.learningRedis.chapter.five;\n        import Redis.clients.jedis.Jedis;\n        import Redis.clients.jedis.Pipeline;\n        public class PushDataMaster {\n                  public static void main(String[] args) {\n                    PushDataMaster test = new PushDataMaster();\n                    test.pushData();\n                  }\n                  private void pushData() {\n                    Jedis jedis = new Jedis(\"localhost\",6379);\n                    Pipeline pipeline = jedis.pipelined();\n        for(int nv=0;nv<900000;nv++){\n                      pipeline.sadd(\"MSG\", \",data-\"+nv);\n                    }\n                    pipeline.sync();\n                  }\n        }\n        ```", "```go\n        package org.learningRedis.chapter.five.masterslave;\n        import Redis.clients.jedis.Jedis;\n        public class MasterSlaveTest {\n          public static void main(String[] args) throws InterruptedException {\n            MasterSlaveTest test = new MasterSlaveTest();\n            test.masterslave();\n          }\n          private void masterslave() throws InterruptedException {\n            Jedis master = new Jedis(\"localhost\",6379);\n            Jedis slave = new Jedis(\"localhost\",6380);\n            master.append(\"msg\", \"Learning Redis\");\n            System.out.println(\"Getting message from master: \" + master.get(\"msg\"));\n            System.out.println(\"Getting message from slave : \" + slave.get(\"msg\"));\n            master.shutdown();\n            slave.slaveofNoOne();\n            slave.append(\"msg\", \" slave becomes the master\");\n            System.out.println(\"Getting message from slave turned master : \" + slave.get(\"msg\"));\n            Thread.currentThread().sleep(20000);\n            master = new Jedis(\"localhost\",6379);\n            master.slaveof(\"localhost\", 6380);\n            Thread.currentThread().sleep(20000);\n            System.out.println(\"Getting message from master turned slave : \" + master.get(\"msg\"));\n            master.append(\"msg\", \"throw some exceptions !!\");\n          }\n        }\n        ```", "```go\n        package org.learningRedis.chapter.five.highreads;\n        import java.util.ArrayList;\n        import java.util.List;\n        import Redis.clients.jedis.Jedis;\n        public class MasterSlaveLoadTest {\n          private List<Thread> threadList = new ArrayList<Thread>();\n          public static void main(String[] args) throws InterruptedException {\n            MasterSlaveLoadTest test = new MasterSlaveLoadTest();\n            test.setup();\n        //make it sleep so that the master finishes writing the //values in the datastore otherwise reads will have either //null values\n        //Or old values.\n            Thread.currentThread().sleep(40000); \n            test.readFromMasterNode();\n            test.readFromSlaveNodes();\n          }\n          private void setup() {\n            Thread pumpData = new Thread(new PumpData());\n            pumpData.start();\n          }\n          private void readFromMasterNode() {\n            long starttime = System.currentTimeMillis();\n            for(int number=1;number<11;number++){\n              Thread thread = new Thread(new FetchData(number,starttime,\"localhost\",6379));\n              threadList.add(thread);\n            }\n            for(int number=0;number<10;number++){\n              Thread thread =threadList.get(number);\n              thread.start();\n            }\n          }\n          private void readFromSlaveNodes() {\n            long starttime0 = System.currentTimeMillis();\n            for(int number=1;number<6;number++){\n              Thread thread = new Thread(new FetchData(number,starttime0,\"localhost\",6381));\n              threadList.add(thread);\n            }\n            long starttime1 = System.currentTimeMillis();\n            for(int number=6;number<11;number++){\n              Thread thread = new Thread(new FetchData(number,starttime1,\"localhost\",6380));\n              threadList.add(thread);\n            }\n            for(int number=0;number<10;number++){\n              Thread thread =threadList.get(number);\n              thread.start();\n            }\n          }\n        }\n        ```", "```go\n        package org.learningRedis.chapter.five.highreads;\n        import Redis.clients.jedis.Jedis;\n        public class PumpData implements Runnable {\n          @Override\n          public void run() {\n            Jedis jedis = new Jedis(\"localhost\",6379);\n            for(int index=1;index<1000000;index++){\n              jedis.append(\"mesasge-\"+index, \"my dumb value \"+ index);\n            }\n          }\n        }\n        ```", "```go\n        package org.learningRedis.chapter.five.highreads;\n        import Redis.clients.jedis.Jedis;\n        import Redis.clients.jedis.JedisPool;\n        public class FetchData implements Runnable {\n          int endnumber  = 0;\n          int startnumber= 0;\n          JedisPool jedisPool = null;\n          long starttime=0;\n          public FetchData(int number, long starttime, String localhost, int port) {\n            endnumber   = number*100000;\n            startnumber = endnumber-100000;\n            this.starttime = starttime;\n            jedisPool = new JedisPool(localhost,port);\n          }\n          @Override\n          public void run() {\n            Jedis jedis = jedisPool.getResource();\n            for(int index=startnumber;index<endnumber;index++){\n              System.out.println(\"printing values for index = message\"+index+\" = \"+jedis.get(\"mesasge-\"+index));\n              long endtime = System.currentTimeMillis();\n              System.out.println(\"TOTAL TIME\" + (endtime-starttime));\n            }\n          }\n        }\n        ```", "```go\npackage org.learningRedis.chapter.five.sharding;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.commons.pool.impl.GenericObjectPool.Config;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisSentinelPool;\nimport Redis.clients.jedis.JedisShardInfo;\nimport Redis.clients.jedis.ShardedJedis;\nimport Redis.clients.jedis.ShardedJedisPool;\npublic class MyShards {\n  List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();\n  public static void main(String[] args) {\n    MyShards test = new MyShards();\n    test.setup();\n    test.putdata();\n  }\n  private void setup() {\n    JedisShardInfo master0 = new JedisShardInfo(\"localhost\", 6379);\n    JedisShardInfo master1 = new JedisShardInfo(\"localhost\", 6369);\n    shards.add(master0);\n    shards.add(master1);\n  }\n  private void putdata() {\n    ShardedJedisPool pool = new ShardedJedisPool(new Config(), shards);\n    for(int index=0;index<10;index++){\n      ShardedJedis jedis = pool.getResource();\n      jedis.set(\"mykey\"+index, \"my value is \" + index);\n      pool.returnResource(jedis);\n    }\n    for(int index=0;index<10;index++){\n      ShardedJedis jedis = pool.getResource();\n      System.out.println(\"The value for the key is \"+ jedis.get(\"mykey\"+index));\n      System.out.println(\"The following information is from master running on port : \" + jedis.getShardInfo(\"mykey\"+index).getPort());\n      pool.returnResource(jedis);\n    }\n  }\n}\n```", "```go\n        package org.learningRedis.chapter.five;\n        import Redis.clients.jedis.Jedis;\n        public class PushLotsOfData {\n          public static void main(String[] args) {\n            PushLotsOfData test = new PushLotsOfData();\n            test.pushData();\n          }\n          private void pushData() {\n            Jedis jedis = new Jedis(\"localhost\",6379);\n            for(int nv=0;nv<900000;nv++){\n              jedis.sadd(\"MSG-0\", \",data-\"+nv);\n            }\n          }\n        }\n        ```"]