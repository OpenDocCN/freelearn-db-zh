["```go\n    package org.learningRedis.web;\n    import org.learningRedis.web.util.Argument;\n    public abstract class Commands {\n      private Argument argument;\n      public Commands(Argument argument) {\n        this.argument = argument;\n      }\n      public abstract String execute();\n      public Argument getArgument() {\n        return argument;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web;\n    import org.learningRedis.web.util.Argument;\n    public class DefaultCommand extends Commands {\n      public DefaultCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        return \"Command Not Recognized !!\";\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.util;\n    import java.util.HashMap;\n    import java.util.Map;\n    public class Argument {\n      Map<String, String> argumentMap = new HashMap<String, String>();\n      public Argument(String args) {\n        String[] arguments = args.split(\":\");\n        for (String argument : arguments) {\n          String key = argument.split(\"=\")[0];\n          String value = argument.split(\"=\")[1];\n          argumentMap.put(key, value);\n        }\n      }\n      public String getValue(String key) {\n        return argumentMap.get(key);\n      }\n      public Map<String, String> getAttributes() {\n        return argumentMap;\n      }\n    }\n    ```", "```go\npackage org.learningRedis.web;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.learningRedis.web.analytics.commands.PurchasesCommand;\nimport org.learningRedis.web.analytics.commands.VisitTodayCommand;\nimport org.learningRedis.web.productmgmt.commands.CommissionProductCommand;\nimport org.learningRedis.web.productmgmt.commands.DisplayTagCommand;\nimport org.learningRedis.web.productmgmt.commands.DisplayCommand;\nimport org.learningRedis.web.productmgmt.commands.TagHistoryCommand;\nimport org.learningRedis.web.productmgmt.commands.UpdateTagCommand;\nimport org.learningRedis.web.util.Argument;\npublic class ProductApp extends HttpServlet {\n  public ProductApp() {\n    super();\n  }\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String command = request.getParameter(\"command\");\n    Argument argument = new Argument(request.getParameter(\"args\"));\n    PrintWriter out = response.getWriter();\n    switch (command.toLowerCase()) {\n    case \"commission\":\n      Commands commission = new CommissionProductCommand(argument);\n      out.println(commission.execute());\n      break;\n    case \"display\":\n      Commands display = new DisplayCommand(argument);\n      out.println(display.execute());\n      break;\n    case \"displaytag\":\n      Commands displaytag = new DisplayTagCommand(argument);\n      out.println(displaytag.execute());\n      break;\n    case \"updatetag\":\n      Commands updatetag = new UpdateTagCommand(argument);\n      out.println(updatetag.execute());\n      break;\n    case \"visitstoday\":\n      Commands visittoday = new VisitTodayCommand(argument);\n      out.println(visittoday.execute());\n      break;\n    case \"purchasestoday\":\n      Commands purchasestoday = new PurchasesTodayCommand (argument);\n      out.println(purchasestoday.execute());\n      break;\n    case \"taghistory\":\n      Commands taghistory = new TagHistoryCommand(argument);\n      out.println(taghistory.execute());\n      break;\n    default:\n      Commands defaultUC = new DefaultCommand(argument);\n      out.println(defaultUC.execute());\n      break;\n    }\n  }\n}\n```", "```go\n    package org.learningRedis.web.productmgmt.commands;\n    import java.util.Map;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class CommissionProductCommand extends Commands {\n        public CommissionProductCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        Map<String, String> productAttributes = this.getArgument().getAttributes();\n        boolean commisioning_result = ProductDBManager.singleton.commisionProduct(productAttributes);\n        boolean tagging_result = ProductDBManager.singleton.enterTagEntries(productAttributes.get(\"name\"),\n            productAttributes.get(\"tags\"));\n        if (commisioning_result & tagging_result) {\n          return \"commisioning successful\";\n        } else {\n          return \"commisioning not successful\";\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.productmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class DisplayCommand extends Commands {\n      public DisplayCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        String display = ProductDBManager.singleton.getProductInfo(this.getArgument().getValue(\"name\"));\n        return display;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.productmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class DisplayTagCommand extends Commands {\n      public DisplayTagCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String tagName = this.getArgument().getValue(\"tagname\");\n        String details = ProductDBManager.singleton.getTagValues(tagName);\n        return details;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.productmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class UpdateTagCommand extends Commands {\n      public UpdateTagCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        String productname = this.getArgument().getValue(\"productname\");\n        String details = this.getArgument().getValue(\"details\");\n        String actionType = this.getArgument().getValue(\"action\");\n        switch (actionType.toLowerCase()) {\n        case \"browse\":\n          if (productname != null & ProductDBManager.singleton.keyExist(productname)) {\n            AnalyticsDBManager.singleton.updateRatingInTag(productname, 1);\n            AnalyticsDBManager.singleton.updateProductVisit(sessionid, productname);\n          }\n          break;\n        case \"buy\":\n          System.out.println(\"Buying the products in the shopping cart !! \");\n          String[] products = details.split(\",\");\n          for (String product : products) {\n            if (product != null & !product.trim().equals(\"\")) {\n              AnalyticsDBManager.singleton.updateRatingInTag(product, 10);\n              AnalyticsDBManager.singleton.updateProductPurchase(sessionid, product);\n            }\n          }\n          break;\n        default:\n          System.out.println(\"The URL cannot be acted uppon  \");\n          break;\n        }\n        return \"\";\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.analytics.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    public class VisitTodayCommand extends Commands {\n      public VisitTodayCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \"Entering the execute function\");\n        String productName = this.getArgument().getValue(\"productname\");\n        Integer visitCount = AnalyticsDBManager.singleton.getVisitToday(productName);\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \"Printing the result for execute function\");\n        System.out.println(\"Result = \" + \"Total Unique Visitors are: \" + visitCount.toString());\n        return \"Total Unique Visitors are: \" + visitCount.toString();\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.analytics.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class PurchasesTodayCommand extends Commands {\n      public PurchasesTodayCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \"Entering the execute function\");\n        String productName = this.getArgument().getValue(\"productname\");\n        Integer purchaseCount = ProductDBManager.singleton.getPurchaseToday(productName);\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \"Printing the result for execute function\");\n        System.out.println(\"Result = \" + \"Total Unique Customers are: \" + purchaseCount.toString());\n        return \"Total Unique Customers are: \" + purchaseCount.toString();\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.productmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    public class TagHistoryCommand extends Commands {\n      public TagHistoryCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        String tagname = this.getArgument().getValue(\"tagname\");\n        String tagHistory = AnalyticsDBManager.singleton.getTagHistory(tagname);\n        return tagHistory;\n        }\n        }\n    ```", "```go\npackage org.learningRedis.web;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.learningRedis.web.analytics.commands.MyStatusCommand;\nimport org.learningRedis.web.analytics.commands.RecomendByProduct;\nimport org.learningRedis.web.sessionmgmt.commands.Add2CartCommand;\nimport org.learningRedis.web.sessionmgmt.commands.BrowseCommand;\nimport org.learningRedis.web.sessionmgmt.commands.BuyCommand;\nimport org.learningRedis.web.sessionmgmt.commands.EditCartCommand;\nimport org.learningRedis.web.sessionmgmt.commands.EditMyDataCommand;\nimport org.learningRedis.web.sessionmgmt.commands.LoginCommand;\nimport org.learningRedis.web.sessionmgmt.commands.LogoutCommand;\nimport org.learningRedis.web.sessionmgmt.commands.MyDataCommand;\nimport org.learningRedis.web.sessionmgmt.commands.MyPurchaseHistory;\nimport org.learningRedis.web.sessionmgmt.commands.RegistrationCommand;\nimport org.learningRedis.web.sessionmgmt.commands.ReloginCommand;\nimport org.learningRedis.web.sessionmgmt.commands.ShowMyCartCommand;\nimport org.learningRedis.web.util.Argument;\npublic class UserApp extends HttpServlet {\n  private static final long serialVersionUID = 1L;\n  public UserApp() {\n    super();\n  }\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String command = request.getParameter(\"command\");\n    Argument argument = new Argument(request.getParameter(\"args\"));\n    PrintWriter out = response.getWriter();\n    switch (command.toLowerCase()) {\n    case \"register\":\n      Commands register = new RegistrationCommand(argument);\n      out.println(register.execute());\n      break;\n    case \"login\":\n      Commands login = new LoginCommand(argument);\n      out.println(login.execute());\n      break;\n    case \"mydata\":\n      Commands mydata = new MyDataCommand(argument);\n      out.println(mydata.execute());\n      break;\n    case \"editmydata\":\n      Commands editMyData = new EditMyDataCommand(argument);\n      out.println(editMyData.execute());\n      break;\n    case \"recommendbyproduct\":\n      Commands recommendbyproduct = new RecomendByProductCommand (argument);\n      String recommendbyproducts = recommendbyproduct.execute();\n      out.println(recommendbyproducts);\n      break;\n    case \"browse\":\n      Commands browse = new BrowseCommand(argument);\n      String result = browse.execute();\n      out.println(result);\n      String productname = argument.getValue(\"browse\");\n      String sessionid = argument.getValue(\"sessionid\");\n      request.getRequestDispatcher(\n          \"/productApp?command=updatetag&args=sessionid=\" + sessionid + \":productname=\" + productname\n              + \":action=browse\").include(request, response);\n      break;\n    case \"buy\":\n      Commands buy = new BuyCommand(argument);\n      String[] details = buy.execute().split(\"#\");\n      out.println(details[0]);\n      String sessionID = argument.getValue(\"sessionid\");\n      request.getRequestDispatcher(\n          \"/productApp?command=updatetag&args=sessionid=\" + sessionID + \":action=buy:details=\" + details[1])\n          .include(request, response);\n      break;\n    case \"stats\":\n      Commands stats = new MyStatusCommand(argument);\n      out.println(stats.execute());\n      break;\n    case \"add2cart\":\n      Commands add2cart = new Add2CartCommand(argument);\n      out.println(add2cart.execute());\n      break;\n    case \"showmycart\":\n      Commands showmycart = new ShowMyCartCommand(argument);\n      out.println(showmycart.execute());\n      break;\n    case \"editcart\":\n      Commands editCard = new EditCartCommand(argument);\n      out.println(editCard.execute());\n      break;\n    case \"relogin\":\n      Commands relogin = new ReloginCommand(argument);\n      out.println(relogin.execute());\n      break;\n    case \"logout\":\n      Commands logout = new LogoutCommand(argument);\n      out.println(logout.execute());\n      break;\n    case \"mypurchasehistory\":\n      Commands mypurchasehistory = new MyPurchaseHistoryCommand (argument);\n      out.println(mypurchasehistory.execute());\n      break;\n    default:\n      Commands defaultUC = new DefaultCommand(argument);\n      out.println(defaultUC.execute());\n      break;\n    }\n  }\n}\n```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.UserDBManager;\n    public class RegistrationCommand extends Commands {\n      public RegistrationCommand(Argument argument) {\n        super(argument);\n      }\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String name = this.getArgument().getValue(\"name\");\n        if (!UserDBManager.singleton.doesUserExist(name)) {\n          UserDBManager.singleton.createUser(this.getArgument().getAttributes());\n        } else {\n          return \"user already registered in \";\n        }\n        return \"successful registeration  -> \" + name;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.HashMap;\n    import java.util.Map;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    import org.learningRedis.web.util.UserDBManager;\n    public class LoginCommand extends Commands {\n      public LoginCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String name = this.getArgument().getValue(\"name\");\n        String password = this.getArgument().getValue(\"password\");\n        if (UserDBManager.singleton.doesUserExist(name)) {\n          if (UserDBManager.singleton.getUserPassword(name).equals(password)\n              & UserDBManager.singleton.getUserSessionId(name).equals(\"null\")) {\n            String sessionID = ProductDBManager.getRandomSessionID();\n            UserDBManager.singleton.login(sessionID, name);\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"sessionID\", sessionID);\n            UserDBManager.singleton.setRegistrationMap(name, map);\n            System.out.println(\"login map : \" + map);\n            AnalyticsDBManager.singleton.registerInSessionTracker(sessionID);\n            return \"Login successful \\n\" + name + \" \\n use the following session id : \" + sessionID;\n          } else if (UserDBManager.singleton.getUserPassword(name).equals(password)\n              & !UserDBManager.singleton.getUserSessionId(name).equals(\"null\")) {\n            return \" Login failed ...u r already logged in \\n please logout to login again \\n or try relogin command \";\n          } else {\n            return \" Login failed ...invalid password \";\n          }\n        } else {\n          return \" please register before executing command for login \";\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.Map;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.UserDBManager;\n    public class MyDataCommand extends Commands {\n      public MyDataCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        String name = UserDBManager.singleton.getUserName(sessionid);\n        Map<String, String> map = UserDBManager.singleton.getRegistrationMap(name);\n        return map.toString();\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.Map;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.UserDBManager;\n    public class EditMyDataCommand extends Commands {\n      public EditMyDataCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        Map<String, String> editMap = this.getArgument().getAttributes();\n        boolean result = UserDBManager.singleton.editRegistrationMap(editMap);\n        if (result) {\n          return \"Edit is Done....\";\n        } else {\n          return \"Edit not Done.... please check sessionid and name combination\";\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class BrowseCommand extends Commands {\n      public BrowseCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String productname = this.getArgument().getValue(\"browse\");\n        if (ProductDBManager.singleton.keyExist(productname)) {\n          AnalyticsDBManager.singleton.updateBrowsingHistory(this.getArgument().getValue(\"sessionid\"), productname);\n          StringBuffer stringBuffer = new StringBuffer();\n          stringBuffer.append(\"You are browsing the following product = \" + productname + \"\\n\");\n          stringBuffer.append(ProductDBManager.singleton.getProductInfo(productname));\n          return stringBuffer.toString();\n        } else {\n          return \"Error: The product you are trying to browse does not exist i.e. \" + productname;\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.analytics.commands;\n    import java.util.List;\n    import java.util.Map;\n    import java.util.Set;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ProductDBManager;\n    public class RecomendByProductCommand extends Commands {\n      int totalrecomendations = 10;\n      public RecomendByProductCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        StringBuffer buffer = new StringBuffer();\n        String productname = this.getArgument().getValue(\"productname\");\n        buffer.append(\"If you are lookinging into \" + productname + \" you might also find the following \\n\");\n        buffer.append(\"products interseting... \\n\");\n        Map<String, Integer> tags = ProductDBManager.singleton.getProductTags(productname);\n        // Lets get total sum of weights\n        int totalweight = 0;\n        Set<String> keys = tags.keySet();\n        for (String key : keys) {\n          totalweight = totalweight + tags.get(key);\n        }\n        for (String key : keys) {\n          int slotfortag = Math.round(totalrecomendations * tags.get(key) / totalweight);\n          List<String> productnames = AnalyticsDBManager.singleton.getTopProducts(slotfortag, key);\n          for (String product : productnames) {\n            if (!product.equals(productname)) {\n              buffer.append(\"For tag = \" + key + \" the recomended product is \" + product);\n              buffer.append(\"\\n\");\n            }\n          }\n        }\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \"Printing the result for execute function\");\n        System.out.println(\"Result = \" + buffer.toString());\n        return buffer.toString();\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.HashMap;\n    import java.util.Map;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ShoppingCartDBManager;\n    import org.learningRedis.web.util.UserDBManager;\n    public class Add2CartCommand extends Commands {\n      public Add2CartCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String result = \"did not update the shopping cart\";\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        String product = this.getArgument().getValue(\"product\");\n        String[] productList = product.split(\",\");\n        Map<String, String> productQtyMap = new HashMap<String, String>();\n        for (String _product : productList) {\n          String[] nameQty = _product.split(\"@\");\n          productQtyMap.put(nameQty[0], nameQty[1]);\n        }\n        if (UserDBManager.singleton.doesSessionExist(sessionid)) {\n          result = ShoppingCartDBManager.singleton.addToShoppingCart(sessionid, productQtyMap);\n        }\n        return \"Result : \" + result;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.Map;\n    import java.util.Set;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ShoppingCartDBManager;\n    public class ShowMyCartCommand extends Commands {\n      public ShowMyCartCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        Map<String, String> productMap = ShoppingCartDBManager.singleton.myCartInfo(sessionid);\n        StringBuffer stringBuffer = new StringBuffer();\n        if (!productMap.isEmpty()) {\n          stringBuffer.append(\"Your shopping cart contains the following : \");\n          stringBuffer.append(\"\\n\");\n          Set<String> set = productMap.keySet();\n          int i = 1;\n          for (String str : set) {\n            stringBuffer.append(\"[\" + i + \"] product name = \" + str + \" Qty = \" + productMap.get(str) + \"\\n\");\n            i++;\n          }\n          return stringBuffer.toString();\n        } else {\n          return \" your shopping cart is empty.\";\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.HashMap;\n    import java.util.Map;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ShoppingCartDBManager;\n    import org.learningRedis.web.util.UserDBManager;\n    public class EditCartCommand extends Commands {\n      public EditCartCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String result = \"did not edit the shopping cart\";\n        String sessionID = this.getArgument().getValue(\"sessionid\");\n        String product = this.getArgument().getValue(\"product\");\n        String[] productList = product.split(\",\");\n        Map<String, String> productQtyMap = new HashMap<String, String>();\n        for (String _product : productList) {\n          String[] nameQty = _product.split(\"@\");\n          productQtyMap.put(nameQty[0], nameQty[1]);\n        }\n        if (UserDBManager.singleton.doesSessionExist(sessionID)) {\n          result = ShoppingCartDBManager.singleton.editMyCart(sessionID, productQtyMap);\n        }\n        return \"result : \" + result;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.ShoppingCartDBManager;\n    public class BuyCommand extends Commands {\n      public BuyCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        String shoppingdetails = ShoppingCartDBManager.singleton.buyItemsInTheShoppingCart(sessionid);\n        return shoppingdetails;\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.analytics.commands;\n    import java.util.Iterator;\n    import java.util.Set;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.UserDBManager;\n    public class MyStatusCommand extends Commands {\n      public MyStatusCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \"Entering the execute function\");\n        String sessionID = this.getArgument().getValue(\"sessionid\");\n        if (UserDBManager.singleton.doesSessionExist(sessionID)) {\n          Set<String> browsingHistory = AnalyticsDBManager.singleton.getBrowsingHistory(sessionID);\n          StringBuffer buffer = new StringBuffer();\n          buffer.append(\" View your browsing history where the one on top is the least visited product\");\n          buffer.append(\"\\n and the product at the bottom is the most frequented product \");\n          buffer.append(\"\\n\");\n          Iterator<String> iterator = browsingHistory.iterator();\n          int i = 1;\n          while (iterator.hasNext()) {\n            buffer.append(\"[\" + i + \"] \" + iterator.next() + \"\\n\");\n            i++;\n          }\n          System.out.println(this.getClass().getSimpleName() + \":  \" + \"Printing the result for execute function\");\n          System.out.println(\"Result = \" + buffer.toString());\n          return buffer.toString();\n        } else {\n          return \"history is not available\";\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import java.util.List;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.AnalyticsDBManager;\n    import org.learningRedis.web.util.Argument;\n    public class MyPurchaseHistoryCommand extends Commands {\n      public MyPurchaseHistoryCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        StringBuffer report = new StringBuffer();\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        List<String> purchasehistory = AnalyticsDBManager.singleton.getMyPurchaseHistory(sessionid);\n        report.append(\"Your purchase history is as follows : \\n\");\n        int i = 0;\n        for (String purchase : purchasehistory) {\n          report.append(\"[\" + i + \"] You purchased \" + purchase);\n          report.append(\"\\n\");\n          i++;\n        }\n        return report.toString();\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.UserDBManager;\n    public class ReloginCommand extends Commands {\n      public ReloginCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String name = this.getArgument().getValue(\"name\");\n        String password = this.getArgument().getValue(\"password\");\n        if (UserDBManager.singleton.doesUserExist(name)) {\n          if (UserDBManager.singleton.getUserPassword(name).equals(password)) {\n            String sessionID = UserDBManager.singleton.getUserSessionId(name);\n            return \"ReLogin successful \\n\" + name + \" \\n use the following session id : \" + sessionID;\n          } else {\n            return \" ReLogin failed ...invalid password \";\n          }\n        } else {\n          return \" please register before executing command for login \";\n        }\n      }\n    }\n    ```", "```go\n    package org.learningRedis.web.sessionmgmt.commands;\n    import org.learningRedis.web.Commands;\n    import org.learningRedis.web.util.Argument;\n    import org.learningRedis.web.util.UserDBManager;\n    public class LogoutCommand extends Commands {\n      public LogoutCommand(Argument argument) {\n        super(argument);\n      }\n      @Override\n      public String execute() {\n        System.out.println(this.getClass().getSimpleName() + \":  \" + \" Entering the execute function\");\n        String sessionid = this.getArgument().getValue(\"sessionid\");\n        if (UserDBManager.singleton.expireSession(sessionid)) {\n          return \"logout was clean\";\n        } else {\n          return \"logout was not clean\";\n        }\n      }\n    }\n    ```", "```go\npackage org.learningRedis.web.util;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport Redis.clients.jedis.Jedis;\nimport Redis.clients.jedis.JedisPool;\npublic class RedisDBManager {\n  private static Date date = new Date();\n  private static int minimum = 1;\n  private static int maximum = 100000000;\n  // going with the default pool.\n  private static JedisPool connectionPool = new JedisPool(\"localhost\", 6379);\n  public Jedis getConnection() {\n    return connectionPool.getResource();\n  }\n  public void returnConnection(Jedis jedis) {\n    connectionPool.returnResource(jedis);\n  }\n  public static String getDate() {\n    DateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\n    String dateValue = dateFormat.format(date);\n    return dateValue;\n  }\n  public static String getRandomSessionID() {\n    int randomNum = minimum + (int) (Math.random() * maximum);\n    return new Integer(randomNum).toString();\n  }\n}\n```", "```go\npackage org.learningRedis.web.util;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\npublic class ProductDBManager extends RedisDBManager {\n  private ProductDBManager() {\n  }\n  public static ProductDBManager singleton = new ProductDBManager();\n  public boolean commisionProduct(Map<String, String> productAttributes) {\n    Jedis jedis = this.getConnection();\n    String productCreationResult = jedis.hmset(productAttributes.get(\"name\"), productAttributes);\n    if (productCreationResult.toLowerCase().equals(\"ok\")) {\n      this.returnConnection(jedis);\n      return true;\n    } else {\n      this.returnConnection(jedis);\n      return false;\n    }\n  }\n  public boolean enterTagEntries(String name, String string) {\n    Jedis jedis = this.getConnection();\n    String[] tags = string.split(\",\");\n    boolean boolResult = false;\n    List<String> tagList = new ArrayList<String>();\n    for (String tag : tags) {\n      String[] tagAndRating = tag.split(\"@\");\n      tagList.add(tagAndRating[0]);\n    }\n    for (String tag : tagList) {\n      long result = jedis.zadd(tag.toLowerCase(), 0, name);\n      if (result == 0) {\n        break;\n      } else {\n        boolResult = true;\n      }\n    }\n    this.returnConnection(jedis);\n    return boolResult;\n  }\n  public String getProductInfo(String name) {\n    Jedis jedis = this.getConnection();\n    Map<String, String> map = jedis.hgetAll(name);\n    StringBuffer stringBuffer = new StringBuffer();\n    stringBuffer.append(\"Following are the product attributes for  \" + name);\n    stringBuffer.append(\"\\n\");\n    Set<String> keys = map.keySet();\n    int i = 1;\n    for (String key : keys) {\n      stringBuffer.append(\"[\" + i + \"] . \" + key + \" value : \" + map.get(key));\n      stringBuffer.append(\"\\n\");\n      i++;\n    }\n    this.returnConnection(jedis);\n    return stringBuffer.toString();\n  }\n  public String getTagValues(String tagName) {\n    Jedis jedis = this.getConnection();\n    StringBuffer stringBuffer = new StringBuffer();\n    Set<String> sortedTagList = jedis.zrange(tagName.toLowerCase(), 0, 10000);\n    stringBuffer.append(\"The following products are listed as per the hit rate \\n\");\n    int i = 1;\n    for (String tagname : sortedTagList) {\n      stringBuffer.append(\" [\" + i + \"] \" + tagname + \"\\n\");\n      i++;\n    }\n    this.returnConnection(jedis);\n    return stringBuffer.toString();\n  }\n  public boolean keyExist(String keyName) {\n    Jedis jedis = this.getConnection();\n    boolean result = jedis.exists(keyName);\n    this.returnConnection(jedis);\n    return result;\n  }\n  public int getPurchaseToday(String productName) {\n    Jedis jedis = this.getConnection();\n    if (jedis.get(productName + \"@purchase:\" + getDate()) != null) {\n      BitSet users = BitSet.valueOf(jedis.get(productName + \"@purchase:\" + getDate()).getBytes());\n      this.returnConnection(jedis);\n      return users.cardinality();\n    } else {\n      this.returnConnection(jedis);\n      return 0;\n    }\n  }\n  public Map<String, Integer> getProductTags(String productname) {\n    Jedis jedis = this.getConnection();\n    String producttags = jedis.hget(productname, \"tags\");\n    Map<String, Integer> map = new HashMap<String, Integer>();\n    String[] tagAndweights = producttags.split(\",\");\n    for (String tagAndWeight : tagAndweights) {\n      map.put(tagAndWeight.split(\"@\")[0], new Integer(tagAndWeight.split(\"@\")[1]));\n    }\n    this.returnConnection(jedis);\n    return map;\n  }\n}\n```", "```go\npackage org.learningRedis.web.util;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\npublic class AnalyticsDBManager extends RedisDBManager {\n  private AnalyticsDBManager() {\n  }\n  public static AnalyticsDBManager singleton = new AnalyticsDBManager();\n  public void registerInSessionTracker(String sessionID) {\n    Jedis jedis = this.getConnection();\n    Long sessionvalue = new Long(sessionID);\n    jedis.setbit(\"sessionIdTracker\", sessionvalue, true);\n    this.returnConnection(jedis);\n  }\n  public void updateBrowsingHistory(String sessionID, String productname) {\n    Jedis jedis = this.getConnection();\n    jedis.zincrby(sessionID + \"@browsinghistory\", 1.0, productname);\n    this.returnConnection(jedis);\n  }\n  public Set<String> getBrowsingHistory(String sessionID) {\n    Jedis jedis = this.getConnection();\n    Set<String> range = jedis.zrange(sessionID + \"@browsinghistory\", 0, 1000000);\n    this.returnConnection(jedis);\n    return range;\n  }\n  public int getVisitToday(String productName) {\n    Jedis jedis = this.getConnection();\n    if (jedis.get(productName + \"@visit:\" + getDate()) != null) {\n      BitSet users = BitSet.valueOf(jedis.get(productName + \"@visit:\" + getDate()).getBytes());\n      this.returnConnection(jedis);\n      return users.cardinality();\n    } else {\n      this.returnConnection(jedis);\n      return 0;\n    }\n  }\n  public void updateProductVisit(String sessionid, String productName) {\n    Jedis jedis = this.getConnection();\n    jedis.setbit(productName + \"@visit:\" + getDate(), new Long(sessionid), true);\n    this.returnConnection(jedis);\n  }\n  public void updateProductPurchase(String sessionid, String productName) {\n    Jedis jedis = this.getConnection();\n    jedis.setbit(productName + \"@purchase:\" + getDate(), new Long(sessionid), true);\n    this.returnConnection(jedis);\n  }\n  public void updateRatingInTag(String productname, double rating) {\n    Jedis jedis = this.getConnection();\n    String string = jedis.hget(productname, \"tags\");\n    String[] tags = string.split(\",\");\n    List<String> tagList = new ArrayList<String>();\n    for (String tag : tags) {\n      String[] tagAndRating = tag.split(\"@\");\n      tagList.add(tagAndRating[0]);\n    }\n    for (String tag : tagList) {\n      jedis.zincrby(tag.toLowerCase(), rating, productname);\n    }\n    this.returnConnection(jedis);\n  }\n  public List<String> getMyPurchaseHistory(String sessionid) {\n    Jedis jedis = this.getConnection();\n    String name = jedis.hget(sessionid + \"@sessiondata\", \"name\");\n    List<String> purchaseHistory = jedis.lrange(name + \"@purchasehistory\", 0, 100);\n    this.returnConnection(jedis);\n    return purchaseHistory;\n  }\n  public String getTagHistory(String tagname) {\n    Jedis jedis = this.getConnection();\n    Set<String> sortedProductList = jedis.zrange(tagname.toLowerCase(), 0, 10000);\n    StringBuffer stringBuffer = new StringBuffer();\n    stringBuffer.append(\"The following products are listed as per the hit rate \\n\");\n    int i = 1;\n    for (String productname : sortedProductList) {\n      stringBuffer.append(\" [\" + i + \"] \" + productname + \" and the score is \"\n          + jedis.zscore(tagname.toLowerCase(), productname) + \"\\n\");\n      i++;\n    }\n    this.returnConnection(jedis);\n    return stringBuffer.toString();\n  }\n  public List<String> getTopProducts(int slotfortag, String tag) {\n    Jedis jedis = this.getConnection();\n    Set<String> sortedProductList = jedis.zrevrange(tag.toLowerCase(), 0, 100000000);\n    List<String> topproducts = new ArrayList<String>();\n    Iterator<String> iterator = sortedProductList.iterator();\n    int index = 0;\n    while (iterator.hasNext()) {\n      if (index <= slotfortag) {\n        topproducts.add(iterator.next());\n        index++;\n      } else {\n        break;\n      }\n    }\n    this.returnConnection(jedis);\n    return topproducts;\n  }\n}\n```", "```go\npackage org.learningRedis.web.util;\nimport java.util.Map;\nimport java.util.Set;\nimport Redis.clients.jedis.Jedis;\npublic class ShoppingCartDBManager extends RedisDBManager {\n  private ShoppingCartDBManager() {\n  }\n  public static ShoppingCartDBManager singleton = new ShoppingCartDBManager();\n  public String addToShoppingCart(String sessionid, Map<String, String> productQtyMap) {\n    Jedis jedis = this.getConnection();\n    String result = jedis.hmset(sessionid + \"@shoppingcart\", productQtyMap);\n    this.returnConnection(jedis);\n    return result;\n  }\n  public Map<String, String> myCartInfo(String sessionid) {\n    Jedis jedis = this.getConnection();\n    Map<String, String> shoppingcart = jedis.hgetAll(sessionid + \"@shoppingcart\");\n    this.returnConnection(jedis);\n    return shoppingcart;\n  }\n  public String editMyCart(String sessionID, Map<String, String> productQtyMap) {\n    Jedis jedis = this.getConnection();\n    String result = \"\";\n    if (jedis.exists(sessionID + \"@shoppingcart\")) {\n      Set<String> keySet = productQtyMap.keySet();\n      for (String key : keySet) {\n        if (jedis.hexists(sessionID + \"@shoppingcart\", key)) {\n          Integer intValue = new Integer(productQtyMap.get(key)).intValue();\n          if (intValue == 0) {\n            jedis.hdel(sessionID + \"@shoppingcart\", key);\n          } else if (intValue > 0) {\n            jedis.hset(sessionID + \"@shoppingcart\", key, productQtyMap.get(key));\n          }\n        }\n      }\n      result = \"Updated the shopping cart for user\";\n    } else {\n      result = \"Could not update the shopping cart for the user !! \";\n    }\n    this.returnConnection(jedis);\n    return result;\n  }\n  public String buyItemsInTheShoppingCart(String sessionid) {\n    Jedis jedis = this.getConnection();\n    Map<String, String> cartInfo = jedis.hgetAll(sessionid + \"@shoppingcart\");\n    Set<String> procductNameList = cartInfo.keySet();\n    StringBuffer stringBuffer = new StringBuffer();\n    stringBuffer.append(\"RECEIPT: You have purchased the following \\n\");\n    stringBuffer.append(\"-----------------------------------\" + \"\\n\");\n    int i = 1;\n    for (String productname : procductNameList) {\n      String unitCost = jedis.hget(productname, \"cost\");\n      int unitCostValue = new Integer(unitCost).intValue();\n      String quantity = cartInfo.get(productname);\n      int quantityValue = new Integer(quantity).intValue();\n      stringBuffer.append(\"[\" + i + \"] Name of item : \" + productname + \" and quantity was : \" + quantity\n          + \" the total cost is = \" + quantityValue * unitCostValue + \"\\n\");\n      i++;\n    }\n    stringBuffer.append(\"-----------------------------------------\");\n    stringBuffer.append(\"#\");\n    for (String productname : procductNameList) {\n      stringBuffer.append(productname);\n      stringBuffer.append(\",\");\n    }\n    // Update the user purchase history:\n    String name = jedis.hget(sessionid + \"@sessiondata\", \"name\");\n    for (String productname : procductNameList) {\n      jedis.lpush(name + \"@purchasehistory\", productname + \" on \" + getDate());\n    }\n    this.returnConnection(jedis);\n    return stringBuffer.toString();\n  }\n}\n```", "```go\npackage org.learningRedis.web.util;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport Redis.clients.jedis.Jedis;\npublic class UserDBManager extends RedisDBManager {\n  private UserDBManager() {\n  }\n  public static UserDBManager singleton = new UserDBManager();\n  public String getUserName(String sessionID) {\n    Jedis jedis = this.getConnection();\n    String name = jedis.hget(sessionID + \"@sessiondata\", \"name\");\n    this.returnConnection(jedis);\n    return name;\n  }\n  public void createUser(Map<String, String> attriuteMap) {\n    Jedis jedis = this.getConnection();\n    Map<String, String> map = attriuteMap;\n    map.put(\"creation-time\", new Date().toString());\n    map.put(\"sessionID\", \"null\");\n    jedis.hmset(attriuteMap.get(\"name\") + \"@userdata\", map);\n    this.returnConnection(jedis);\n  }\n  public Map<String, String> getRegistrationMap(String name) {\n    Jedis jedis = this.getConnection();\n    Map<String, String> attributeMap = new HashMap<String, String>();\n    attributeMap = jedis.hgetAll(name + \"@userdata\");\n    this.returnConnection(jedis);\n    return attributeMap;\n  }\n  public boolean doesUserExist(String name) {\n    Jedis jedis = this.getConnection();\n    String value = jedis.hget(name + \"@userdata\", \"name\");\n    this.returnConnection(jedis);\n    if (value == null) {\n      return false;\n    } else if (value != null & value.equals(name)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  public void setRegistrationMap(String name, Map<String, String> attributeMap) {\n    Jedis jedis = this.getConnection();\n    jedis.hmset(name + \"@userdata\", attributeMap);\n    this.returnConnection(jedis);\n  }\n  public String getUserPassword(String name) {\n    Jedis jedis = this.getConnection();\n    String password = jedis.hget(name + \"@userdata\", \"password\");\n    this.returnConnection(jedis);\n    return password;\n  }\n  public void login(String sessionID, String name) {\n    Jedis jedis = this.getConnection();\n    Map<String, String> loginMap = new HashMap<String, String>();\n    loginMap.put(\"LastLogin\", new Date().toString());\n    loginMap.put(\"loginstatus\", \"LoggedIn\");\n    loginMap.put(\"sessionID\", sessionID);\n    loginMap.put(\"name\", name);\n    jedis.hmset(sessionID + \"@sessiondata\", loginMap);\n    this.returnConnection(jedis);\n  }\n  public boolean editRegistrationMap(Map<String, String> editMap) {\n    Jedis jedis = this.getConnection();\n    if (jedis.hget(editMap.get(\"name\") + \"@userdata\", \"sessionID\").equals(editMap.get(\"sessionid\"))) {\n      jedis.hmset(editMap.get(\"name\") + \"@userdata\", editMap);\n      this.returnConnection(jedis);\n      return true;\n    } else {\n      this.returnConnection(jedis);\n      return false;\n    }\n  }\n  public String getUserSessionId(String name) {\n    Jedis jedis = this.getConnection();\n    String sessionID = jedis.hget(name + \"@userdata\", \"sessionID\");\n    this.returnConnection(jedis);\n    return sessionID;\n  }\n  public boolean expireSession(String sessionid) {\n    // Get name from session data structure\n    Jedis jedis = this.getConnection();\n    String name = jedis.hget(sessionid + \"@sessiondata\", \"name\");\n    // remove session id from userdata\n    if (name != null) {\n      Long sessionvalue = new Long(jedis.hget(name + \"@userdata\", \"sessionID\"));\n      jedis.hset(name + \"@userdata\", \"sessionID\", \"null\");\n      // remove session data : use TTL\n      if (jedis.exists(sessionid + \"@sessiondata\")) {\n        jedis.expire(sessionid + \"@sessiondata\", 1);\n      }\n      // remove browsing history : use TTL\n      if (jedis.exists(sessionid + \"@browsinghistory\")) {\n        jedis.expire(sessionid + \"@browsinghistory\", 1);\n      }\n      // remove shopping cart : use TTL\n      if (jedis.exists(sessionid + \"@shoppingcart\")) {\n        jedis.expire(sessionid + \"@shoppingcart\", 1);\n      }\n      // make the value at offset as '0'\n      jedis.setbit(\"sessionIdTracker\", sessionvalue, false);\n      this.returnConnection(jedis);\n      return true;\n    } else {\n      this.returnConnection(jedis);\n      return false;\n    }\n  }\n  public boolean doesSessionExist(String sessionid) {\n    Jedis jedis = this.getConnection();\n    if (jedis.hexists(sessionid + \"@sessiondata\", \"name\")) {\n      this.returnConnection(jedis);\n      return true;\n    } else {\n      this.returnConnection(jedis);\n      return false;\n    }\n  }\n}\n```"]