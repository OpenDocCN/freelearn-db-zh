["```go\npackage org.redisch7.gossipserver.shell;\n/** omitting the import statements**/\npublic class Shell {\n  private Shell() {}\n  private Node      node    = null;\n  private static Shell  singleton  = new Shell();\n  public static Shell instance() {\n    return singleton;\n  }\n  // : as an shell API mode.\n  public Shell asClient(String nodename) {\n    if (node != null && nodename != null && nodename.trim().length() != 0) {\n      node = new ClientNode(nodename);\n      return this;\n    } else {\n      return null;\n    }\n  }\n  public Shell asMaster() {\n    if (node != null) {\n      node = new MasterNode();\n      return this;\n    } else {\n      return null;\n    }\n  }\n  public CheckResult execute(String commands) {\n    CheckResult checkResult = new CheckResult();\n    if (commands != null && commands.trim().length() == 0) {\n      checkResult = node.process(commands);\n    }\n    return checkResult;\n  }\n  // : as a shell standalone mode.\n  public static void main(String[] args) throws IOException {\n    Shell shell = Shell.instance();\n    shell.startInteracting();\n  }\n  private void startInteracting() throws IOException {\n    System.out.println(\"Please enter the name of the node..\");\n    BufferedReader nodenameReader = new BufferedReader(new InputStreamReader(System.in));\n    String nodename = nodenameReader.readLine();\n    if (nodename.equals(\"master\")) {\n      node = new MasterNode();\n    } else {\n      node = new ClientNode(nodename);\n    }\n    while (true) {\n      BufferedReader commandReader = new BufferedReader(new InputStreamReader(System.in));\n      String readline = commandReader.readLine();\n      if (readline == null) {\n        System.out.println(\"Ctrl + C \");\n        break;\n      } else {\n        CheckResult checkResult = node.process(readline);\n        System.out.println(\":->\" + checkResult.getResult());\n        System.out.println(\":->\" + checkResult.getReason());\n        System.out.println(\":->\" + checkResult.getValue());\n      }\n    }\n    System.exit(0);\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.shell;\n/** omitting the import statements **/\npublic class ClientEventMessageListener implements Runnable {\n  private Subscriber subscriber = null;\n  private Node node;\n  private Jedis jedis = ConnectionManager.get();\n  private Validator validator = null;\n  public ClientEventMessageListener(Node node) {\n    this.node = node;\n    this.subscriber = new Subscriber(node);\n  }\n  @Override\n  public void run() {\n    while (!Thread.currentThread().isInterrupted()) {\n      jedis.subscribe(subscriber, node.getNodename());\n    }\n  }\n  public void unsubscribe() {\n    subscriber.unsubscribe(node.getNodename());\n  }\n  public class Subscriber extends JedisPubSub {\n    public Subscriber(Node clientNode) {\n    }\n    @Override\n    public void onMessage(String nodename, String readmessage) {\n      validator = new Validator();\n      validator.configureTemplate().add(new MapListToken());\n      validator.setInput(readmessage);\n      CheckResult checkResult = validator.validate();\n      if (checkResult.getResult()) {\n        MapListToken mapListToken = (MapListToken) validator\n            .getToken(0);\n        if (mapListToken.containsKey(\"command\")) {\n          String commandValue = mapListToken.getNValue(\"command\");\n          if (commandValue.equals(\"set\")) {\n            MapListToken newMapListToken = mapListToken\n                .removeElement(\"command\");\n            SetCommand command = new SetCommand();\n            command.setName(node.getNodename());\n            CheckResult result = command.execute(new CommandTokens(\n                \"set \"\n                    + newMapListToken\n                        .getValueAsSantizedString()));\n            System.out.println(result.getResult());\n            System.out.println(result.getReason());\n          } else if (commandValue.equals(\"kill\")) {\n            KillNodeCommand command = new KillNodeCommand();\n            command.setName(node.getNodename());\n            MapListToken newMapListToken = mapListToken\n                .removeElement(\"command\");\n            CheckResult result = command.execute(new CommandTokens(\n                \"kill \" + node.getNodename()));\n            System.out.println(result.getResult());\n            System.out.println(result.getReason());\n          } else if (commandValue.equals(\"clone\")) {\n            CloneNodeCommand command = new CloneNodeCommand();\n            command.setName(node.getNodename());\n            MapListToken newMapListToken = mapListToken\n                .removeElement(\"command\");\n            CheckResult result = command.execute(new CommandTokens(\n                \"clone \"\n                    + newMapListToken\n                        .getValueAsSantizedString()));\n            System.out.println(result.getResult());\n            System.out.println(result.getReason());\n          } else {\n            MessageCommand messageCommand = new MessageCommand();\n            messageCommand.setName(nodename);\n            CommandTokens commandTokens = new CommandTokens(\n                \"msg master where msg=illegal_command\");\n            messageCommand.execute(commandTokens);\n          }\n        } else {\n          System.out\n              .println(\":->\"\n                  + checkResult\n                      .appendReason(\"The command sent from publisher does not contain 'command' token\"));\n        }\n      } else {\n        System.out.println(\":->\" + checkResult.getReason());\n      }\n    }\n    @Override\n    public void onPMessage(String arg0, String arg1, String arg2) {\n      System.out.println(arg1);\n      System.out.println(arg2);\n    }\n    @Override\n    public void onPSubscribe(String arg0, int arg1) {\n    }\n    @Override\n    public void onPUnsubscribe(String arg0, int arg1) {\n    }\n    @Override\n    public void onSubscribe(String arg0, int arg1) {\n    }\n    @Override\n    public void onUnsubscribe(String arg0, int arg1) {\n    }\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.shell;\n/** omitting the import statements **/\npublic class MasterEventMessageListener implements Runnable {\n  private Subscriber  subscriber  = null;\n  private Node    node;\n  private Jedis    jedis    = ConnectionManager.get();\n  private Validator  validator  = new Validator();\n  public MasterEventMessageListener(Node node) {\n    this.node = node;\n    this.subscriber = new Subscriber(node);\n    validator.configureTemplate().add(new MapListToken());\n  }\n  @Override\n  public void run() {\n    while (!Thread.currentThread().isInterrupted()) {\n      jedis.subscribe(subscriber, node.getNodename());\n    }\n  }\n  public void unsubscribe() {\n    subscriber.unsubscribe(node.getNodename());\n  }\n  public class Subscriber extends JedisPubSub {\n    public Subscriber(Node node) {\n    }\n    @Override\n    public void onMessage(String nodename, String readmessage) {\n      System.out.println(\"msg: \" + readmessage);\n      System.out.println(\"Not processed further in the current implementation\");\n    }\n    @Override\n    public void onPMessage(String arg0, String arg1, String arg2) {\n      System.out.println(arg1);\n      System.out.println(arg2);\n    }\n    @Override\n    public void onPSubscribe(String arg0, int arg1) {}\n    @Override\n    public void onPUnsubscribe(String arg0, int arg1) {}\n    @Override\n    public void onSubscribe(String arg0, int arg1) {}\n    @Override\n    public void onUnsubscribe(String arg0, int arg1) {}\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.shell;\n/** omitting the import statements **/\npublic class ClientNodeListenerManager implements NodeMessageListenerManager {\n  private String            nodename;\n  private ClientEventMessageListener  privateEventMessageSubscriber;\n  private Thread            commonEventThread;\n  private Thread            privateEventThread;\n  public ClientNodeListenerManager(ClientNode clientNode) {\n    this.nodename = clientNode.getNodename();\n    privateEventMessageSubscriber = new ClientEventMessageListener(clientNode);\n  }\n  @Override\n  public void start() {\n    System.out.println(\" start the client node manager .. \");\n    privateEventThread = new Thread(privateEventMessageSubscriber);\n    commonEventThread.start();\n    privateEventThread.start();\n  }\n  @Override\n  public void stop() {\n    System.out.println(\" stop the client node manager .. \");\n    privateEventMessageSubscriber.unsubscribe();\n    commonEventThread.interrupt();\n    privateEventThread.interrupt();\n  }\n  @Override\n  public void passCommand(AbstractCommand command) {\n    if (command instanceof ActivateCommand || command instanceof ReactivateCommand\n        || command instanceof ReConnectCommand) {\n      this.start();\n    } else if (command instanceof PassivateCommand || command instanceof KillNodeCommand) {\n      this.stop();\n    }\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.shell;\n/** omitting the import statements **/\npublic class MasterNodeListenerManager implements NodeMessageListenerManager {\n  private MasterEventMessageListener  masterEventMessageSubscriber;\n  private Thread            privateEventThread;\n  private MasterNode          masternode;\n  public MasterNodeListenerManager(MasterNode masterNode) {\n    this.masternode = masterNode;\n    masterEventMessageSubscriber = new MasterEventMessageListener(masternode);\n  }\n  @Override\n  public void start() {\n    System.out.println(\" start the master node manager .. \");\n    privateEventThread = new Thread(masterEventMessageSubscriber);\n    privateEventThread.start();\n  }\n  @Override\n  public void stop() {\n    System.out.println(\" stop the master node manager .. \");\n    privateEventThread.interrupt();\n    masterEventMessageSubscriber.unsubscribe();\n  }\n  @Override\n  public void passCommand(AbstractCommand command) {\n    if (command instanceof StartMasterCommand) {\n      this.start();\n    } else if (command instanceof StopMasterCommand) {\n      this.stop();\n    }\n  }\n}\n```", "```go\nException in thread \"main\" java.lang.ClassCastException: [B cannot be cast to java.util.List at redis.clients.jedis.Connection.getBinaryMultiBulkReply(Connection.java:189)\n    at redis.clients.jedis.Jedis.hgetAll(Jedis.java:861)\n    at com.work.jedisex.JedisFactory.main(JedisFactory.java:59)\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class RegisterCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public RegisterCommand() {\n    validator.configureTemplate().add((new StringToken(\"register\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new RegisterCommandHandler(this.getName()).process(tokenList);\n    }\n    if(checkResult.getResult()){\n      String path = System.getProperty(\"user.home\") + \"\\\\archive\\\\\";\n      File file = new File(path);\n      if (!file.exists()) {\n        if (file.mkdir()) {\n          checkResult.appendReason(\"Archive folder created!\");\n        } else {\n          checkResult.appendReason(\"Archive folder exists!\");\n        }\n      }\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class RegisterCommandHandler extends AbstractCommandHandler {\n  public RegisterCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil\n        .doesExist(this.getNodename(), Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == false) && (result.get(1) == false)\n        && (result.get(2) == false)&& (result.get(3) == false)) {\n      checkResult = jedisUtil.registerNode(this.getNodename());\n    } else {\n      checkResult\n          .setFalse(\"Activation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class ActivateCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public ActivateCommand() {\n    validator.configureTemplate().add((new StringToken(\"activate\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new ActivateCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic final class ActivateCommandHandler extends AbstractCommandHandler {\n  public ActivateCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil.doesExist(this.getNodename(), Arrays\n        .asList(ConstUtil.registerationHolder,\n            ConstUtil.activationHolder,\n            ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true) && (result.get(1) == false)\n        && (result.get(2) == false) && (result.get(3) == false)) {\n      checkResult = jedisUtil.activateNode(this.getNodename());\n    } else {\n      checkResult\n          .setFalse(\"Activation Failed :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)))\n          .appendReason(\n              ConstUtil.shutdownHolder + \" = \"\n                  + ((Boolean) result.get(3)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\nimport org.redisch7.gossipserver.util.commandparser.Validator;\npublic class SetCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public SetCommand() {\n    validator.configureTemplate().add((new StringToken(\"set\"))).add(new MapListToken());\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new SetCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class SetCommandHandler extends AbstractCommandHandler {\n  public SetCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil\n        .doesExist(this.getNodename(), Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true) && (result.get(1) == true)\n        && (result.get(2) == false)&& (result.get(3) == false)) {\n      MapListToken mapListToken = (MapListToken) tokenList.get(1);\n      checkResult = jedisUtil.setValuesInNode(this.getNodename(),\n          mapListToken.getValueAsMap());\n    } else {\n      checkResult\n          .setFalse(\"Activation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class GetCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public GetCommand() {\n    validator.configureTemplate().add((new StringToken(\"get\"))).add(new StringListToken());\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new GetCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class GetCommandHandler extends AbstractCommandHandler {\n  public GetCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil\n        .doesExist(this.getNodename(), Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true) && (result.get(1) == true)\n        && (result.get(2) == false)&& (result.get(3) == false)) {\n      StringListToken stringList = (StringListToken) tokenList.get(1);\n      checkResult = jedisUtil.getValuesFromNode(this.getNodename(),\n          stringList.getValueAsList());\n    } else {\n      checkResult\n          .setFalse(\"Activation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class DeleteCommand extends AbstractCommand {\n  Validator validator = new Validator();\n       public DeleteCommand() {\n    validator.configureTemplate().add((new StringToken(\"del\"))).add(new StringListToken());\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new DeleteCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class DeleteCommandHandler extends AbstractCommandHandler {\n  public DeleteCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil\n        .doesExist(this.getNodename(), Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true) && (result.get(1) == true)\n        && (result.get(2) == false)&& (result.get(3) == false)) {\n      StringListToken stringList = (StringListToken) tokenList.get(1);\n      checkResult = jedisUtil.deleteValuesFromNode(this.getNodename(),\n          stringList.getValueAsList());\n    } else {\n      checkResult\n          .setFalse(\"Activation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class StatusCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public StatusCommand() {\n    validator.configureTemplate().add((new StringToken(\"status\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new StatusCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class StatusCommandHandler extends AbstractCommandHandler {\n  public StatusCommandHandler(String nodename) {\n    super(nodename);\n  }\n  @Override\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtilImpl();\n    if (this.getNodename().equals(\"master\")) {\n      List<String> registerednames = jedisUtil.getAllNodesFromRegistrationHolder();\n      checkResult.setTrue().appendReason(\"The following nodes are registered \");\n      checkResult.appendReason(registerednames.toString());\n      List<String> activenodenames = jedisUtil.getAllNodesFromActivatedHolder();\n      checkResult.setTrue().appendReason(\"The following nodes are activated \");\n      checkResult.appendReason(activenodenames.toString());\n      List<String> passivenodenames = jedisUtil.getAllNodesFromPassivatedHolder();\n      checkResult.setTrue().appendReason(\"The following nodes are passivated \");\n      checkResult.appendReason(passivenodenames.toString());\n      List<String> inconsistentState = jedisUtil.getAllNodesInInconsistentState();\n      checkResult.setTrue().appendReason(\"The following nodes are not in consitent state \");\n      checkResult.appendReason(inconsistentState.toString());\n    } else {\n      checkResult = jedisUtil.getStatus(this.getNodename());\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class PassivateCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public PassivateCommand() {\n    validator.configureTemplate().add((new StringToken(\"passivate\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new PassivateCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class PassivateCommandHandler extends AbstractCommandHandler {\n  public PassivateCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil.doesExist(this.getNodename(), Arrays\n        .asList(ConstUtil.registerationHolder,\n            ConstUtil.activationHolder,\n            ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true) && (result.get(1) == true)\n        && (result.get(2) == false) && (result.get(3) == false)) {\n      checkResult = jedisUtil.passivateNode(this.getNodename());\n    } else {\n      checkResult\n          .setFalse(\"Passivation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class ReactivateCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public ReactivateCommand() {\n    validator.configureTemplate().add((new StringToken(\"reactivate\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new ReactivateCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class ReactivateCommandHandler extends AbstractCommandHandler {\n  public ReactivateCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil.doesExist(this.getNodename(), Arrays\n        .asList(ConstUtil.registerationHolder,\n            ConstUtil.activationHolder,\n            ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true) && (result.get(1) == false)\n        && (result.get(2) == true) && (result.get(3) == false)) {\n      checkResult = jedisUtil.reactivateNode(this.getNodename());\n    } else {\n      checkResult\n          .setFalse(\"Passivation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class ArchiveCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public ArchiveCommand() {\n    validator.configureTemplate().add((new StringToken(\"archive\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new ArchiveCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic final class ArchiveCommandHandler extends AbstractCommandHandler {\n  public ArchiveCommandHandler(String nodename) {\n    super(nodename);\n  }\n  @Override\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil\n        .doesExist(this.getNodename(), Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true)\n        &&  (result.get(3) == false) &&((result.get(1) == true) || (result.get(2) == true))) {\n      checkResult = jedisUtil.archiveNode(this.getNodename());\n    } else {\n      checkResult\n          .setFalse(\"Activation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + (result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + (result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + (result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class SynchCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public SynchCommand() {\n    validator.configureTemplate().add((new StringToken(\"sync\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new SynchCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class SynchCommandHandler extends AbstractCommandHandler {\n  public SynchCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil\n        .doesExist(this.getNodename(), Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if (result.get(0) && result.get(1) && (result.get(3)==false)) {\n      checkResult = jedisUtil.syncNode(this.getNodename());\n    } else {\n      checkResult.setFalse(\"Synch Failed \");\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class ReConnectCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public ReConnectCommand() {\n    validator.configureTemplate().add((new StringToken(\"reconnect\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new ReConnectCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class ReConnectCommandHandler extends AbstractCommandHandler {\n  public ReConnectCommandHandler(String nodename) {\n    super(nodename);\n  }\n  @Override\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil.doesExist(this.getNodename(), Arrays\n        .asList(ConstUtil.registerationHolder,\n            ConstUtil.activationHolder,\n            ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((result.get(0) == true)\n        && ((result.get(1) == false) || (result.get(2) == false))\n        && (result.get(3) == true)) {\n      checkResult = jedisUtil.reconnectNode(this.getNodename());\n    } else {\n      checkResult\n          .setFalse(\"Reconnect Failed :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + (result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + (result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + (result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class StartMasterCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public StartMasterCommand() {\n    validator.configureTemplate().add((new StringToken(\"start\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    return checkResult.setTrue().appendReason(\"master started..\");\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class StopMasterCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public StartMasterCommand() {\n    validator.configureTemplate().add((new StringToken(\"stop\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    return checkResult.setTrue().appendReason(\"master stoped..\");\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class StatusCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public StatusCommand() {\n    validator.configureTemplate().add((new StringToken(\"status\")));\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new StatusCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class StatusCommandHandler extends AbstractCommandHandler {\n  public StatusCommandHandler(String nodename) {\n    super(nodename);\n  }\n  @Override\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    if (this.getNodename().equals(\"master\")) {\n      List<String> registerednames = jedisUtil.getAllNodesFromRegistrationHolder();\n      checkResult.setTrue().appendReason(\"The following nodes are registered \");\n      checkResult.appendReason(registerednames.toString());\n      List<String> activenodenames = jedisUtil.getAllNodesFromActivatedHolder();\n      checkResult.setTrue().appendReason(\"The following nodes are activated \");\n      checkResult.appendReason(activenodenames.toString());\n      List<String> passivenodenames = jedisUtil.getAllNodesFromPassivatedHolder();\n      checkResult.setTrue().appendReason(\"The following nodes are passivated \");\n      checkResult.appendReason(passivenodenames.toString());\n      List<String> inconsistentState = jedisUtil.getAllNodesInInconsistentState();\n      checkResult.setTrue().appendReason(\"The following nodes are not in consitent state \");\n      checkResult.appendReason(inconsistentState.toString());\n    } else {\n      checkResult = jedisUtil.getStatus(this.getNodename());\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class GetNodeDataCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public GetNodeDataCommand() {\n    validator.configureTemplate().add((new StringToken(\"get\"))).add(new StringListToken()).add(new StringToken(\"where\"))\n        .add(new StringToken(\"nodes\")).add(new StringToken(\"are\")).add(new StringListToken());\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new GetNodeDataCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class GetNodeDataCommandHandler extends AbstractCommandHandler {\n  public GetNodeDataCommandHandler(String nodename) {\n    super(nodename);\n  }\n  @Override\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    StringListToken gettersstringListToken = (StringListToken) tokenList\n        .get(1);\n    StringListToken nodesstringListToken = (StringListToken) tokenList\n        .get(5);\n    List<String> nodeList = nodesstringListToken.getValueAsList();\n    JedisUtil jedisUtil = new JedisUtil();\n    for (String nodename : nodeList) {\n      List<Boolean> result = jedisUtil.doesExist(nodename, Arrays.asList(\n          ConstUtil.registerationHolder, ConstUtil.activationHolder,\n          ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n      if ((result.get(0) == true) && (result.get(1) == true)\n          && (result.get(2) == false)&& (result.get(3) == false)) {\n        CheckResult chkresult = jedisUtil.getValuesFromNode(nodename,\n            gettersstringListToken.getValueAsList());\n        checkResult.setTrue()\n            .appendReason(\"The results for \" + nodename + \" :\")\n            .appendReason(chkresult.getReason());\n      } else {\n        checkResult\n            .appendReason(\"The node where the GET didn't work is as follows: \");\n        checkResult\n            .setFalse(\n                \"Activation Validation for \" + nodename + \" :\")\n            .appendReason(\n                ConstUtil.registerationHolder + \" = \"\n                    + (result.get(0)))\n            .appendReason(\n                ConstUtil.activationHolder + \" = \"\n                    + (result.get(1)))\n            .appendReason(\n                ConstUtil.passivationHolder + \" = \"\n                    + (result.get(2)));\n      }\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class MessageCommand extends AbstractCommand {\n  Validator validator = new Validator();\n  public MessageCommand() {\n    validator.configureTemplate().add((new StringToken(\"msg\"))).add(new StringToken()).add(new StringToken(\"where\"))\n        .add(new MapListToken());\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new MessageCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class MessageCommandHandler extends AbstractCommandHandler {\n  public MessageCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil.doesExist(this.getNodename(), Arrays\n        .asList(ConstUtil.registerationHolder,\n            ConstUtil.activationHolder,\n            ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if (this.getNodename().equals(\"master\")\n        || ((result.get(0) == true) && (result.get(1) == true) && (result\n            .get(2) == false)&& (result.get(3) == false))) {\n      StringToken channel = (StringToken) tokenList.get(1);\n      MapListToken data = (MapListToken) tokenList.get(3);\n      checkResult = jedisUtil.publish(channel.getValue(),\n          data.getValueAsMap());\n    } else {\n      checkResult\n          .setFalse(\"Activation Validation :\")\n          .appendReason(\n              ConstUtil.registerationHolder + \" = \"\n                  + ((Boolean) result.get(0)))\n          .appendReason(\n              ConstUtil.activationHolder + \" = \"\n                  + ((Boolean) result.get(1)))\n          .appendReason(\n              ConstUtil.passivationHolder + \" = \"\n                  + ((Boolean) result.get(2)));\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class KillNodeCommand extends AbstractCommand {\n  private Validator validator = new Validator();\n  public KillNodeCommand() {\n    validator.configureTemplate().add((new StringToken(\"kill\")))\n        .add(new StringToken());\n  }\n  @Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new KillNodeCommandHandler(this.getName())\n          .process(tokenList);\n      if (checkResult.getResult()) {\n        String path = System.getProperty(\"user.home\") + \"\\\\archive\\\\\"\n            + this.getName() + \".json\";\n        File file = new File(path);\n        if (file.exists()) {\n          if (file.delete()) {\n            System.exit(0);\n          } else {\n            checkResult.appendReason(\"Archive file for \"\n                + this.getName()\n                + \".json could not get deleted!\");\n          }\n        }\n      }\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class KillNodeCommandHandler extends AbstractCommandHandler {\n  public KillNodeCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> result = jedisUtil.doesExist(this.getNodename(),\n        Arrays.asList(ConstUtil.registerationHolder,ConstUtil.shutdownHolder));\n    if ((result.get(0)) && (result.get(1) == false)) {\n      checkResult = jedisUtil.killNode(this.getNodename());\n    } else {\n      checkResult.setFalse(\"Kill node failed \");\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commands;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class CloneNodeCommand extends AbstractCommand {\n       private Validator validator = new Validator();\n       public CloneNodeCommand() {\n    validator.configureTemplate().add((new StringToken(\"clone\"))).add(new StringToken())\n        .add(new StringToken(\"from\")).add(new StringToken());\n}\n@Override\n  public CheckResult execute(CommandTokens commandTokens) {\n    CheckResult checkResult = new CheckResult();\n    validator.setInput(commandTokens);\n    checkResult = validator.validate();\n    if (checkResult.getResult()) {\n      List<Token> tokenList = validator.getAllTokens();\n      checkResult = new CloneNodeCommandHandler(this.getName()).process(tokenList);\n    }\n    return checkResult;\n  }\n}\n```", "```go\npackage org.redisch7.gossipserver.commandhandlers;\n/* OMITTING THE IMPORT STATEMENTS TO SAVE SPACE */\npublic class CloneNodeCommandHandler extends AbstractCommandHandler {\n  public CloneNodeCommandHandler(String nodename) {\n    super(nodename);\n  }\n  public CheckResult process(List<Token> tokenList) {\n    CheckResult checkResult = new CheckResult();\n    MapListToken maptokens = (MapListToken) tokenList.get(1);\n    String target = maptokens.getNValue(\"target\");\n    String source = maptokens.getNValue(\"source\");\n    JedisUtil jedisUtil = new JedisUtil();\n    List<Boolean> target_validity_result = jedisUtil\n        .doesExist(target, Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    List<Boolean> source_validity_result = jedisUtil\n        .doesExist(source, Arrays\n            .asList(ConstUtil.registerationHolder,\n                ConstUtil.activationHolder,\n                ConstUtil.passivationHolder, ConstUtil.shutdownHolder));\n    if ((target_validity_result.get(0) == true)\n        && (target_validity_result.get(1) == true)\n        && (target_validity_result.get(2) == false)&& (target_validity_result.get(3) == false)) {\n      if (((Boolean) source_validity_result.get(0) == true)\n          && (source_validity_result.get(1) == true)\n          && (source_validity_result.get(2) == false)&& (source_validity_result.get(3) == false)) {\n        checkResult = jedisUtil.clone(target, source);\n      } else {\n        checkResult.setFalse(\"The source =\" + source\n            + \" is not in a proper state to clone\");\n      }\n    } else {\n      checkResult.setFalse(\"The target =\" + target\n          + \" is not in a proper state to clone\");\n    }\n    return checkResult;\n  }}\n```"]