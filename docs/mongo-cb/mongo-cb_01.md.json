["```go\n    > mongod --dbpath  /data/mongo/db\n\n    ```", "```go\n[initandlisten] waiting for connections on port 27017\n\n```", "```go\n    > mongod --port 27000 --dbpath /data/mongo/db \u2013logpath /logs/mongo.log --smallfiles\n\n    ```", "```go\n    port = 27000\n    dbpath = /data/mongo/db\n    logpath = /logs/mongo.log\n    smallfiles = true\n    ```", "```go\n    > mongod --config  /config/mongo.conf\n\n    ```", "```go\n    function sayHello(name) {\n      print('Hello ' + name + ', how are you?')\n    }\n    ```", "```go\n    > mongo --shell /mongo/scripts/hello.js\n\n    ```", "```go\n    MongoDB shell version: 3.0.2\n    connecting to: test\n    >\n\n    ```", "```go\n    > db\n\n    ```", "```go\n    > sayHello('Fred')\n\n    ```", "```go\n    Hello Fred, how are you?\n\n    ```", "```go\nmongo <options> <db address> <.js files>\n\n```", "```go\n    > mvn -version\n\n    ```", "```go\n          Mongo Java      \n          +--src  \n          |     +main\n          |         +java\n          |--pom.xml\n    ```", "```go\n    <project>\n      <modelVersion>4.0.0</modelVersion>\n      <name>Mongo Java</name>\n      <groupId>com.packtpub</groupId>\n      <artifactId>mongo-cookbook-java</artifactId>\n      <version>1.0</version>    <packaging>jar</packaging>\n      <dependencies>\n        <dependency>\n          <groupId>org.mongodb</groupId>\n          <artifactId>mongo-java-driver</artifactId>\n          <version>3.0.1</version>\n        </dependency>\n      </dependencies>\n    </project>\n    ```", "```go\n    package com.packtpub.mongo.cookbook;\n\n    import com.mongodb.BasicDBObject;\n    import com.mongodb.DB;\n    import com.mongodb.DBCollection;\n    import com.mongodb.DBObject;\n    import com.mongodb.MongoClient;\n\n    import java.net.UnknownHostException;\n    import java.util.List;\n\n    /**\n     * Simple Mongo Java client\n     *\n     */\n    public class FirstMongoClient {\n\n        /**\n         * Main method for the First Mongo Client. Here we shall be connecting to a mongo\n         * instance running on localhost and port 27017.\n         *\n         * @param args\n         */\n        public static final void main(String[] args) \n    throws UnknownHostException {\n            MongoClient client = new MongoClient(\"localhost\", 27017);\n            DB testDB = client.getDB(\"test\");\n            System.out.println(\"Dropping person collection in test database\");\n            DBCollection collection = testDB.getCollection(\"person\");\n            collection.drop();\n            System.out.println(\"Adding a person document in the person collection of test database\");\n            DBObject person = \n    new BasicDBObject(\"name\", \"Fred\").append(\"age\", 30);\n            collection.insert(person);\n            System.out.println(\"Now finding a person using findOne\");\n            person = collection.findOne();\n            if(person != null) {\n                System.out.printf(\"Person found, name is %s and age is %d\\n\", person.get(\"name\"), person.get(\"age\"));\n            }\n            List<String> databases = client.getDatabaseNames();\n            System.out.println(\"Database names are\");\n            int i = 1;\n            for(String database : databases) {\n                System.out.println(i++ + \": \" + database);\n            }\n      System.out.println(\"Closing client\");\n            client.close();\n        }\n    }\n    ```", "```go\n    mvn compile exec:java -Dexec.mainClass=com.packtpub.mongo.cookbook.FirstMongoClient\n\n    ```", "```go\nMongoClient client = new MongoClient(\"localhost\", 27017);\n```", "```go\nDB testDB = client.getDB(\"test\");\nDBCollection collection = testDB.getCollection(\"person\");\n```", "```go\nDBObject person = new BasicDBObject(\"name\", \"Fred\").append(\"age\", 30);\ncollection.insert(person);\n```", "```go\n[INFO] [exec:java {execution: default-cli}]\n--snip--\nDropping person collection in test database\nAdding a person document in the person collection of test database\nNow finding a person using findOne\nPerson found, name is Fred and age is 30\nDatabase names are\n1: local\n2: test\nINFO: Closed connection [connectionId{localValue:2, serverValue:2}] to localhost:27017 because the pool has been closed.\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3 seconds\n[INFO] Finished at: Tue May 12 07:33:00 UTC 2015\n[INFO] Final Memory: 22M/53M\n[INFO] ------------------------------------------------------------------------ \n\n```", "```go\n    > apt-get install python-pip\n\n    ```", "```go\n    > pip install pymongo\n\n    ```", "```go\n    from __future__ import print_function\n    import pymongo\n\n    # Connect to server\n    client = pymongo.MongoClient('localhost', 27017)\n\n    # Select the database\n    testdb = client.test\n\n    # Drop collection\n    print('Dropping collection person')\n    testdb.person.drop()\n\n    # Add a person\n    print('Adding a person to collection person')\n    employee = dict(name='Fred', age=30)\n    testdb.person.insert(employee)\n\n    # Fetch the first entry from collection\n    person = testdb.person.find_one()\n    if person:\n        print('Name: %s, Age: %s' % (person['name'], person['age']))\n\n    # Fetch list of all databases\n    print('DB\\'s present on the system:')\n    for db in client.database_names():\n        print('    %s' % db)\n\n    # Close connection\n    print('Closing client connection')\n    client.close()\n    ```", "```go\n    > python my_client.py\n\n    ```", "```go\n    $ mongod --replSet repSetTest --dbpath /data/n1 --logpath /logs/n1.log --port 27000 --smallfiles --oplogSize 128 --fork\n    $ mongod --replSet repSetTest --dbpath /data/n2 --logpath /logs/n2.log --port 27001 --smallfiles --oplogSize 128 --fork\n    $ mongod --replSet repSetTest --dbpath /data/n3 --logpath /logs/n3.log --port 27002 --smallfiles --oplogSize 128 \u2013fork\n\n    ```", "```go\n    $ mongo localhost:27000\n\n    ```", "```go\n    > db.person.insert({name:'Fred', age:35})\n\n    ```", "```go\n    cfg = {\n      '_id':'repSetTest', 'members':[ {'_id':0, 'host': 'localhost:27000'}, {'_id':1, 'host': 'localhost:27001'}, {'_id':2, 'host': 'localhost:27002'} ]\n    }\n    ```", "```go\n    > rs.initiate(cfg)\n\n    ```", "```go\n[rsStart] replSet can't get local.system.replset config from self or any seed (EMPTYCONFIG)\n[rsStart] replSet info you may need to run replSetInitiate -- rs.initiate() in the shell -- if that is not already done\n\n```", "```go\ncfg = {\n  '_id':'repSetTest', 'members':[ {'_id':0, 'host': 'localhost:27000'}, {'_id':1, 'host': 'localhost:27001'}, {'_id':2, 'host': 'localhost:27002'} ]\n}\n```", "```go\n> rs.initiate(cfg)\n\n```", "```go\n{\n \"ok\" : 0,\n \"errmsg\" : \"couldn't initiate : set name does not match the set name host Amol-PC:27000 expects\"\n}\n\n```", "```go\n{\"ok\" : 1}\n\n```", "```go\nrepSetTest:PRIMARY>\n\n```", "```go\n    > mongo localhost:27000\n\n    ```", "```go\n    repSetTest:PRIMARY> db.replTest.insert({_id:1, value:'abc'})\n\n    ```", "```go\n    repSetTest:PRIMARY> db.replTest.findOne()\n    { \"_id\" : 1, \"value\" : \"abc\" }\n\n    ```", "```go\n    repSetTest:SECONDARY> db.replTest.findOne()\n\n    ```", "```go\n     { \"$err\" : \"not master and slaveOk=false\", \"code\" : 13435 }\n\n    ```", "```go\n    repSetTest:SECONDARY>  rs.slaveOk(true)\n\n    ```", "```go\n    repSetTest:SECONDARY>db.replTest.findOne()\n    { \"_id\" : 1, \"value\" : \"abc\" }\n\n    ```", "```go\n    repSetTest:SECONDARY> db.replTest.insert({_id:1, value:'abc'})\n    not master\n\n    ```", "```go\n    package com.packtpub.mongo.cookbook;\n\n    import com.mongodb.BasicDBObject;\n    import com.mongodb.DB;\n    import com.mongodb.DBCollection;\n    import com.mongodb.DBObject;\n    import com.mongodb.MongoClient;\n    import com.mongodb.ServerAddress;\n\n    import java.util.Arrays;\n\n    /**\n     *\n     */\n    public class ReplicaSetMongoClient {\n\n      /**\n      * Main method for the test client connecting to the replica set.\n       * @param args\n      */\n      public static final void main(String[] args) throws Exception {\n        MongoClient client = new MongoClient(\n          Arrays.asList(\n            new ServerAddress(\"localhost\", 27000), new ServerAddress(\"localhost\", 27001), new ServerAddress(\"localhost\", 27002)\n          )\n        );\n        DB testDB = client.getDB(\"test\");\n        System.out.println(\"Dropping replTest collection\");\n        DBCollection collection = testDB.getCollection(\"replTest\");\n        collection.drop();\n        DBObject object = new BasicDBObject(\"_id\", 1).append(\"value\", \"abc\");\n        System.out.println(\"Adding a test document to replica set\");\n        collection.insert(object);\n        System.out.println(\"Retrieving document from the collection, this one comes from primary node\");\n        DBObject doc = collection.findOne();\n        showDocumentDetails(doc);\n        System.out.println(\"Now Retrieving documents in a loop from the collection.\");\n        System.out.println(\"Stop the primary instance after few iterations \");\n        for(int i = 0 ; i < 10; i++) {\n          try {\n            doc = collection.findOne();\n            showDocumentDetails(doc);\n          }\n          catch (Exception e) {\n            //Ignoring or log a message\n          }\n          Thread.sleep(5000);\n        }\n      }\n\n      /**\n      *\n      * @param obj\n      */\n      private static void showDocumentDetails(DBObject obj) {\n        System.out.printf(\"_id: %d, value is %s\\n\", obj.get(\"_id\"), obj.get(\"value\"));\n      }\n    }\n    ```", "```go\n    repSetTest:PRIMARY>use admin\n\n    ```", "```go\n    $ mvn compile exec:java -Dexec.mainClass=com.packtpub.mongo.cookbook.ReplicaSetMongoClient\n\n    ```", "```go\n    repSetTest:PRIMARY> db.shutdownServer()\n\n    ```", "```go\n  MongoClient client = new MongoClient(Arrays.asList(new ServerAddress(\"localhost\", 27000), new ServerAddress(\"localhost\", 27001), new ServerAddress(\"localhost\", 27002)));\n```", "```go\n_id: 1, value is abc\nNow Retrieving documents in a loop from the collection.\nStop the primary instance manually after few iterations\n_id: 1, value is abc\n_id: 1, value is abc\nNov 03, 2013 5:21:57 PM com.mongodb.ConnectionStatus$UpdatableNode update\nWARNING: Server seen down: Amol-PC/192.168.1.171:27002\njava.net.SocketException: Software caused connection abort: recv failed\n at java.net.SocketInputStream.socketRead0(Native Method)\n at java.net.SocketInputStream.read(SocketInputStream.java:150)\n \u2026\nWARNING: Primary switching from Amol-PC/192.168.1.171:27002 to Amol-PC/192.168.1.171:27001\n_id: 1, value is abc\n\n```", "```go\n    from __future__ import print_function\n    import pymongo\n    import time\n\n    # Instantiate MongoClient with a list of server addresses\n    client = pymongo.MongoClient(['localhost:27002', 'localhost:27001', 'localhost:27000'], replicaSet='repSetTest')\n\n    # Select the collection and drop it before using\n    collection = client.test.repTest\n    collection.drop()\n\n    #insert a record in\n    collection.insert_one(dict(name='Foo', age='30'))\n\n    for x in range(5):\n        try:\n            print('Fetching record: %s' % collection.find_one())\n        except Exception as e:\n            print('Could not connect to primary')\n        time.sleep(3)\n    ```", "```go\n    > repSetTest:PRIMARY>use admin\n\n    ```", "```go\n    $ python replicaset_client.py\n\n    ```", "```go\n    > repSetTest:PRIMARY> db.shutdownServer()\n\n    ```", "```go\nFetching record: {u'age': u'30', u'_id': ObjectId('5558bfaa0640fd1923fce1a1'), u'name': u'Foo'}\nFetching record: {u'age': u'30', u'_id': ObjectId('5558bfaa0640fd1923fce1a1'), u'name': u'Foo'}\nFetching record: {u'age': u'30', u'_id': ObjectId('5558bfaa0640fd1923fce1a1'), u'name': u'Foo'}\nCould not connect to primary\nFetching record: {u'age': u'30', u'_id': ObjectId('5558bfaa0640fd1923fce1a1'), u'name': u'Foo'}\n\n```", "```go\n    $ mongod --shardsvr --dbpath  /data/s1/db --port 27000 --logpath /logs/s1.log --smallfiles --oplogSize 128 --fork\n    $ mongod --shardsvr --dbpath  /data/s2/db --port 27001 --logpath /logs/s2.log --smallfiles --oplogSize 128 --fork\n    $ mongod --configsvr --dbpath  /data/con1/db --port 25000 --logpath  /logs/config.log --fork\n    $ mongos --configdb localhost:25000 --logpath  /logs/mongos.log --fork\n\n    ```", "```go\n    $ mongo\n    MongoDB shell version: 3.0.2\n    connecting to: test\n    mongos>\n\n    ```", "```go\n    mongos> sh.addShard(\"localhost:27000\")\n    mongos> sh.addShard(\"localhost:27001\")\n\n    ```", "```go\n    { \"shardAdded\" : \"shard0000\", \"ok\" : 1 }\n\n    ```", "```go\nnames = [\n  {name:'James Smith', age:30},\n  {name:'Robert Johnson', age:22},\n\u2026\n]\n```", "```go\n    mongo --shell names.js\n    MongoDB shell version: 3.0.2\n    connecting to: test\n    mongos>\n\n    ```", "```go\n    mongos> use shardDB\n\n    ```", "```go\n    mongos> sh.enableSharding(\"shardDB\")\n\n    ```", "```go\n    mongos>sh.shardCollection(\"shardDB.person\", {name: \"hashed\"}, false)\n\n    ```", "```go\n    mongos> for(i = 1; i <= 300000 ; i++) {\n    ... person = names[Math.round(Math.random() * 100) % 20]\n    ... doc = {_id:i, name:person.name, age:person.age}\n    ... db.person.insert(doc)\n    }\n\n    ```", "```go\n    mongos> db.person.getShardDistribution()\n\n    ```", "```go\nShard shard0000 at localhost:27000\n data : 15.99MiB docs : 149715 chunks : 2\n estimated data per chunk : 7.99MiB\n estimated docs per chunk : 74857\n\nShard shard0001 at localhost:27001\n data : 16.05MiB docs : 150285 chunks : 2\n estimated data per chunk : 8.02MiB\n estimated docs per chunk : 75142\n\nTotals\n data : 32.04MiB docs : 300000 chunks : 4\n Shard shard0000 contains 49.9% data, 49.9% docs in cluster, avg obj size on shard : 112B\n Shard shard0001 contains 50.09% data, 50.09% docs in cluster, avg obj size on shard : 112B\n\n```"]