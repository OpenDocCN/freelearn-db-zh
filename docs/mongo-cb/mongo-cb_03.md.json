["```go\n    $ python\n    Python 2.7.6 (default, Mar 22 2014, 22:59:56)\n    [GCC 4.8.2] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>>\n\n    ```", "```go\n    >>> import pymongo\n    >>> client = pymongo.MongoClient('localhost', 27017)\n    The following is an alternative way to connect\n    >>> client = pymongo.MongoClient('mongodb://localhost:27017')\n\n    ```", "```go\n    >>> db = client.test\n    Another alternative is \n    >>> db = client['test']\n\n    ```", "```go\n    >>> postCodes = db.postalCodes.find().limit(10)\n\n    ```", "```go\n    >>> for postCode in postCodes:\n     print 'City: ', postCode['city'], ', State: ', postCode['state'], ', Pin Code: ', postCode['pincode']\n\n    ```", "```go\n    >>> postCode = db.postalCodes.find_one()\n\n    ```", "```go\n    >>> print 'City: ', postCode['city'], ', State: ', postCode['state'], ', Pin Code: ', postCode['pincode']\n\n    ```", "```go\n    >>> cursor = db.postalCodes.find({'state':'Gujarat'}, {'_id':0, 'city':1, 'state':1, 'pincode':1}).sort('city', pymongo.ASCENDING).limit(10)\n\n    ```", "```go\n    >>> city = db.postalCodes.find().sort([('state', pymongo.DESCENDING),('city',pymongo.ASCENDING)]).limit(5)\n\n    ```", "```go\n    >>> for i in range(1, 21):\n     db.pymongoTest.insert_one({'i':i})\n\n    ```", "```go\n    >>> db.pythonTest.insert_many([{'name':'John'}, {'name':'Mark'}])\n\n    ```", "```go\nsort(sort_field, sort_direction)\nsort([(sort_field, sort_direction)\u2026(sort_field, sort_direction)])\n```", "```go\n>>> db.contOnError.drop()\n>>> db.contOnError.insert([{'_id':1}, {'_id':1}, {'_id':2}, {'_id':2}])\n>>> db.contOnError.count()\n\n```", "```go\n>>> db.contOnError.drop()\n>>> db.contOnError.insert([{'_id':1}, {'_id':1}, {'_id':2}, {'_id':2}], continue_on_error=True)\n>>> db.contOnError.count()\n\n```", "```go\n>>> def showResults(cursor):\n if cursor.count() != 0:\n for e in cursor:\n print e\n else:\n print 'No documents found'\n\n```", "```go\n>>> showResults(db.pymongoTest.find())\n\n```", "```go\n    >>>result = db.pymongoTest.update_one({'i':{'$gt':10}}, {'$set':{'gtTen':True}})\n    >>> print result.raw_result\n    {u'n': 1, u'nModified': 0, u'ok': 1, 'updatedExisting': True}\n\n    ```", "```go\n    >>> showResults(db.pymongoTest.find())\n\n    ```", "```go\n    >>> result = db.pymongoTest.update_many({'i':{'$gt':10}},{'$set':{'gtTen':True}})\n    print result.raw_result\n    {u'n': 10, u'nModified': 9, u'ok': 1, 'updatedExisting': True}\n\n    ```", "```go\n    >>> db.pymongoTest.update_one({'i':21},{'$set':{'gtTen':True}})\n\n    ```", "```go\n    >>>result = db.pymongoTest.update_one({'i':21},{'$set':{'gtTen':True}}, upsert=True)\n    >>> print result.raw_result\n    {u'n': 1,\n     u'nModified': 0,\n     u'ok': 1,\n     'updatedExisting': False,\n     u'upserted': ObjectId('557bd3a618292418c38b046d')}\n\n    ```", "```go\n    >>>result = db.pymongoTest.delete_one({'i':21})\n    >>> print result.raw_result\n    {u'n': 1, u'ok': 1}\n\n    ```", "```go\n    >>>result = db.pymongoTest.delete_many({'i':{'$gt': 10}})\n    >>> print result.raw_result\n    {u'n': 10, u'ok': 1}\n\n    ```", "```go\n    >>> db.pymongoTest.find_one_and_update({'i':20}, {'$set':{'inWords':'Twenty'}})\n    {u'_id': ObjectId('557bdb070640fd0a0a935c22'), u'i': 20}\n\n    ```", "```go\n    >>> db.pymongoTest.find_one({'i':20})\n    {u'i': 20, u'_id': ObjectId('557bdb070640fd0a0a935c22'), u'inWords': u'Twenty'}\n\n    ```", "```go\n    >>> db.pymongoTest.find_one_and_update({'i':19}, {'$set':{'inWords':'Nineteen'}}, new=True)\n    {u'_id': ObjectId('557bdb070640fd0a0a935c21'), u'i': 19, u'inWords': u'Nineteen'}\n\n    ```", "```go\n    db.postalCode.find(..).limit(..).sort(..)\n\n    ```", "```go\n    >>>cursor = db.postalCodes.find({'state':'Gujarat'}, {'_id':0, 'city':1, 'state':1, 'pincode':1}, limit=10, sort=[('city', pymongo.ASCENDING)])\n\n    ```", "```go\n>>> db.pymongoTest.update_one(spec={'i':{'$gt':10}},document= {'$set':{'gtTen':True}})\n\n```", "```go\n>> client = pymongo.MongoClient('localhost', 27017, readPreference='secondaryPreferred')\n>> print cl.read_preference\nSecondaryPreferred(tag_sets=None)\n\n```", "```go\n>>> db = client.test\n>>> db.read_preference\nPrimary()\n>>>\n\n```", "```go\n>>>db =  client.get_database('test', read_preference=ReadPreference.SECONDARY)\n\n```", "```go\n>>> client.database_names()\n[u'local', u'test']\n\n```", "```go\n>>> db.collection_names()\n[u'system.indexes', u'writeConcernTest', u'pymongoTest']\n\n```", "```go\n>>> db.pymongoTest.index_information()\n{u'_id_': {u'key': [(u'_id', 1)], u'ns': u'test.pymongoTest', u'v': 1}}\n\n```", "```go\n>>>from pymongo import IndexModel, ASCENDING\n>>> myindex = IndexModel([(\"x\", ASCENDING)], name='Index_on_X')\n>>>db.pymongoTest.create_indexes([myindex])\n ['Index_on_X']\n\n```", "```go\n>>> db.pymongoTest.index_information()\n{u'Index_on_X': {u'key': [(u'x', 1)], u'ns': u'test.pymongoTest', u'v': 1},\n u'_id_': {u'key': [(u'_id', 1)], u'ns': u'test.pymongoTest', u'v': 1}}\n\n```", "```go\ndb.pymongoTest.drop_index('Index_on_X')\n\n```", "```go\n    $ Python\n\n    ```", "```go\n    >>> import pymongo\n\n    ```", "```go\n    >>> client = pymongo.MongoClient('mongodb://localhost:27017')\n\n    ```", "```go\n    >>> db = client.test\n\n    ```", "```go\n    result = db.postalCodes.aggregate(\n     [\n     {'$project':{'state':1, '_id':0}},\n     {'$group':{'_id':'$state', 'count':{'$sum':1}}},\n     {'$sort':{'count':-1}},\n     {'$limit':5}\n     ]\n     )\n\n    ```", "```go\n    >>>for r in result:\n    print r\n    {u'count': 6446, u'_id': u'Maharashtra'}\n    {u'count': 4684, u'_id': u'Kerala'}\n    {u'count': 3784, u'_id': u'Tamil Nadu'}\n    {u'count': 3550, u'_id': u'Andhra Pradesh'}\n    {u'count': 3204, u'_id': u'Karnataka'}\n\n    ```", "```go\n    >>>python\n\n    ```", "```go\n    >>> import bson\n\n    ```", "```go\n    >>> import pymongo\n\n    ```", "```go\n    >>> client = pymongo.MongoClient('mongodb://localhost:27017')\n\n    ```", "```go\n    >>> db = client.test\n\n    ```", "```go\n    >>>  mapper = bson.Code('''function() {emit(this.state, 1)}''')\n\n    ```", "```go\n    >>>  reducer = bson.Code('''function(key, values){return Array.sum(values)}''')\n\n    ```", "```go\n    >>>  db.postalCodes.map_reduce(map=mapper, reduce=reducer, out='pymr_out')\n\n    ```", "```go\n    >>>  c = db.pymr_out.find(sort=[('value', pymongo.DESCENDING)], limit=5)\n    >>> for elem in c:\n    ...     print elem\n    ...\n    {u'_id': u'Maharashtra', u'value': 6446.0}\n    {u'_id': u'Kerala', u'value': 4684.0}\n    {u'_id': u'Tamil Nadu', u'value': 3784.0}\n    {u'_id': u'Andhra Pradesh', u'value': 3550.0}\n    {u'_id': u'Karnataka', u'value': 3204.0}\n    >>>\n\n    ```", "```go\n> db.postalCodes.count({state:'Maharashtra'})\n6446\n\n```", "```go\n    $ mvn -Dtest=com.packtpub.mongo.cookbook.MongoDriverQueryAndInsertTest test\n\n    ```", "```go\nMongoClient client = new MongoClient(\"localhost:27017\");\n```", "```go\ngetClient().getDB(\"javaDriverTest\");\n```", "```go\ngetJavaDriverTestDatabase().getCollection(\"javaTest\")\n```", "```go\nwhile(cursor.hasNext()) {\n  DBObject object = cursor.next();\n  //Some operation on the returned object to get the fields and\n  //values in the document\n}\n```", "```go\nDBCursor cursor = collection\n        .find(null)\n        .sort(new BasicDBObject(\"_id\", -1))\n        .limit(2)\n        .skip(1);\n```", "```go\nDBCursor cursor = collection\n      .find(null, new BasicDBObject(\"value\", 1).append(\"_id\", 0))\n      .sort(new BasicDBObject(\"_id\", 1));\n```", "```go\ncollection.insert(new BasicDBObject(\"value\", \"Hello World\"));\n\ncollection.insert(new BasicDBObject(\"value\", \"Hello World\"), WriteConcern.JOURNALED);\n```", "```go\n    $ mvn -Dtest=com.packtpub.mongo.cookbook.MongoDriverUpdateAndDeleteTest test\n\n    ```", "```go\ncollection.update(\n  new BasicDBObject(\"i\", new BasicDBObject(\"$gt\", 10)),\n  new BasicDBObject(\"$set\", new BasicDBObject(\"gtTen\", true)));\n```", "```go\ncollection.updateMulti(new BasicDBObject(\"i\",\n    new BasicDBObject(\"$gt\", 10)),\n    new BasicDBObject(\"$set\", new BasicDBObject(\"gtTen\", true)));\n```", "```go\ncollection.remove(new BasicDBObject(\n      \"i\", new BasicDBObject(\"$gt\", 10)),\n      WriteConcern.JOURNALED);\n```", "```go\ncom.mongodb.CommandFailureException: { \"serverUsed\" : \"localhost/127.0.0.1:27017\" , \"connectionId\" : 5 , \"n\" : 0 , \"badGLE\" : { \"getlasterror\" : 1 , \"j\" : true} , \"ok\" : 0.0 , \"errmsg\" : \"cannot use 'j' option when a host does not have journaling enabled\" , \"code\" : 2}\n\n```", "```go\nDBObject old = collection.findAndModify(\n    new BasicDBObject(\"i\", 10),\n    new BasicDBObject(\"i\", 100));\n```", "```go\nDBObject findAndModify(DBObject query, DBObject fields, DBObject sort,boolean remove, DBObject update, boolean returnNew, boolean upsert)\n\n```", "```go\n    DBObject query = new BasicDBObject(\"$and\",\n      new BasicDBObject[] {\n        new BasicDBObject(\"i\", new BasicDBObject(\"$gt\", 10)),\n        new BasicDBObject(\"i\", new BasicDBObject(\"$lt\", 15))\n      });\n```", "```go\nDBObject query = QueryBuilder.start(\"i\").greaterThan(10).and(\"i\").lessThan(15).get();\n```", "```go\n    $ mvn -Dtest=com.packtpub.mongo.cookbook.MongoAggregationTesttest\n\n    ```", "```go\nAggregationOutput aggregate(firstOp, additionalOps)\n```", "```go\nAggregationOutput output = collection.aggregate(\n    //{'$project':{'state':1, '_id':0}},\n    new BasicDBObject(\"$project\", new BasicDBObject(\"state\", 1).append(\"_id\", 0)),\n    //{'$group':{'_id':'$state', 'count':{'$sum':1}}}\n    new BasicDBObject(\"$group\", new BasicDBObject(\"_id\", \"$state\")\n      .append(\"count\", new BasicDBObject(\"$sum\", 1))),\n    //{'$sort':{'count':-1}}\n    new BasicDBObject(\"$sort\", new BasicDBObject(\"count\", -1)),\n    //{'$limit':5}\n    new BasicDBObject(\"$limit\", 5)\n);\n```", "```go\n    $ mvn -Dtest=com.packtpub.mongo.cookbook.MongoMapReduceTesttest\n\n    ```", "```go\n> db.postalCodes.count({state:'Maharashtra'})\n6446\n\n```"]