["```go\n    > mongo\n\n    ```", "```go\n    sloppyNamedCollection.\n    > for(i = 0 ; i < 10 ; i++) { db.sloppyNamedCollection.insert({'i':i}) };\n\n    ```", "```go\n    > db.sloppyNamedCollection.renameCollection('neatNamedCollection')\n    { \"ok\" : 1 }\n\n    ```", "```go\n    > show collections\n\n    ```", "```go\n    > db.neatNamedCollection.find()\n\n    ```", "```go\n> db.<collection to rename>.renameCollection('<target name of the collection>', <drop target if exists>)\n\n```", "```go\n> db.sloppyNamedCollection.renameCollection('neatNamedCollection', true)\n\n```", "```go\n> db.runCommand({ renameCollection: \"<source_namespace>\", to: \"<target_namespace>\", dropTarget: <true|false> });\n\n```", "```go\n> db.runCommand({ renameCollection: \"test.sloppyNamedCollection \", to: \" newDatabase.neatNamedCollection\", dropTarget: true });\n\n```", "```go\n    $ mongo\n\n    ```", "```go\n    > db.postalCodes.ensureIndex({'pincode':1})\n\n    ```", "```go\n    > db.postalCodes.stats()\n\n    ```", "```go\n    > db.postalCodes.stats(1024)\n\n    ```", "```go\n> db.postalCodes.stats(1024)\n{\n \"ns\" : \"test.postalCodes\",\n \"count\" : 39732,\n \"size\" : 9312,\n \"avgObjSize\" : 240,\n \"numExtents\" : 6,\n \"storageSize\" : 10920,\n \"lastExtentSize\" : 8192,\n \"paddingFactor\" : 1,\n \"paddingFactorNote\" : \"paddingFactor is unused and unmaintained in 3.0\\. It remains hard coded to 1.0 for compatibility only.\",\n \"userFlags\" : 1,\n \"capped\" : false,\n \"nindexes\" : 2,\n \"totalIndexSize\" : 2243,\n \"indexSizes\" : {\n \"_id_\" : 1261,\n \"pincode_1\" : 982\n },\n \"ok\" : 1\n}\n\n```", "```go\n    $ mongo\n\n    ```", "```go\n    > db.stats()\n\n    ```", "```go\n    > db.stats(1024)\n\n    ```", "```go\n> db.stats(1024)\n{\n \"db\" : \"test\",\n \"collections\" : 3,\n \"objects\" : 39738,\n \"avgObjSize\" : 143.32699179626553,\n \"dataSize\" : 5562,\n \"storageSize\" : 16388,\n \"numExtents\" : 8,\n \"indexes\" : 2,\n \"indexSize\" : 2243,\n \"fileSize\" : 196608,\n \"nsSizeMB\" : 16,\n\"extentFreeList\" : {\n \"num\" : 4,\n \"totalSize\" : 2696\n },\n\"dataFileVersion\" : {\n \"major\" : 4,\n \"minor\" : 5\n },\n \"ok\" : 1 \n}\n\n```", "```go\n    function padDocument(doc) {\n      doc.padField = []\n      for(i = 0 ; i < 20 ; i++) {\n        doc.padField[i] = 'Dummy'\n      }\n    }\n    ```", "```go\n    function insert(collection, doc) {\n       //1\\. Pad the document with the padField\n      padDocument(doc);\n       //2\\. Create or store the _id field that would be used later\n      if(typeof(doc._id) == 'undefined') {\n        _id = ObjectId()\n        doc._id = _id\n      }\n      else {\n        _id = doc._id\n      }\n       //3\\. Insert the document with the padded field\n      collection.insert(doc)\n    //4\\. Remove the padded field, use the saved _id to find the document to be updated.\n    collection.update({'_id':_id}, {$unset:{'padField':1}})\n    }\n    ```", "```go\n    insert(db.testCol, {i:1})\n    ```", "```go\n    > db.testCol.findOne({i:1})\n\n    ```", "```go\n> db.manualPadTest.drop()\n> db.manualPadTest.insert({i:1})\n> db.manualPadTest.insert({i:2})\n> db.manualPadTest.stats()\n\n```", "```go\n> db.manualPadTest.drop()\n> insert(db.manualPadTest , {i:1})\n> insert(db.manualPadTest , {i:2})\n> db.manualPadTest.stats()\n\n```", "```go\n    $ mongo KeepServerBusy.js \u2013quiet\n\n    ```", "```go\n    $ mongostat\n\n    ```", "```go\n    $ mongotop\n\n    ```", "```go\nmongostat\nconnected to: 127.0.0.1\ninsert query update delete getmore command flushes mapped vsize   res faults idx miss % qr|qw ar|aw netIn netOut conn     time\n 1000     1    950   1000       1     1|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|1  431k   238k    2 08:59:21\n 1000     1   1159   1000       1     1|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|0  468k   252k    2 08:59:22\n 1000     1    984   1000       1     1|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|1  437k   240k    2 08:59:23\n 1000     1   1066   1000       1     1|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|1  452k   246k    2 08:59:24\n 1000     1    944   1000       1     2|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|1  431k   237k    2 08:59:25\n 1000     1   1149   1000       1     1|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|1  466k   252k    2 08:59:26\n 1000     2   1015   1053       2     1|0       0 624.0M  1.4G 50.0M      0          0   0|0   0|0  450k   293k    2 08:59:27\n\n```", "```go\n$>mongotop\nconnected to: 127.0.0.1\n ns           total          read         write\n2014-01-15T17:55:13\n test.monitoringTest         899ms           1ms         898ms\n test.system.users             0ms           0ms           0ms\n test.system.namespaces           0ms           0ms           0ms\n test.system.js             0ms           0ms           0ms\n test.system.indexes           0ms           0ms           0ms\n\n ns           total          read         write\n2014-01-15T17:55:14\n test.monitoringTest         959ms           0ms         959ms\n test.system.users             0ms           0ms           0ms\n test.system.namespaces           0ms           0ms           0ms\n test.system.js             0ms           0ms           0ms\n test.system.indexes           0ms           0ms           0ms\n ns           total          read         write\n2014-01-15T17:55:15\n test.monitoringTest         954ms           1ms         953ms\n test.system.users             0ms           0ms           0ms\n test.system.namespaces           0ms           0ms           0ms\n test.system.js             0ms           0ms           0ms\n test.system.indexes           0ms           0ms           0ms\n\n```", "```go\n$ mongotop 5\n\n```", "```go\n    > db.currentOpTest.drop()\n    > for(i = 1 ; i < 10000000 ; i++) { db.currentOpTest.insert({'i':i})}\n\n    ```", "```go\n    > db.currentOpTest.ensureIndex({i:1}, {background:1})\n\n    ```", "```go\n    > db.currentOp().inprog\n\n    ```", "```go\n    > db.killOp(11587458)\n\n    ```", "```go\n{\n        \"desc\" : \"conn12\",\n        \"threadId\" : \"0x3be96c0\",\n        \"connectionId\" : 12,\n        \"opid\" : 3212789,\n        \"active\" : true,\n        \"secs_running\" : 1,\n        \"microsecs_running\" : NumberLong(729029),\n        \"op\" : \"query\",\n        \"ns\" : \"test.$cmd\",\n        \"query\" : {\n            \"createIndexes\" : \"currentOpTest\",\n            \"indexes\" : [\n                {\n                    \"key\" : {\n                        \"i\" : 1\n                    },\n                    \"name\" : \"i_1\",\n                    \"background\" : 1\n                }\n            ]\n        },\n        \"client\" : \"127.0.0.1:36542\",\n        \"msg\" : \"Index Build (background) Index Build (background): 384120/1000000 38%\",\n        \"progress\" : {\n            \"done\" : 384120,\n            \"total\" : 1000000\n        },\n        \"numYields\" : 3003,\n        \"locks\" : {\n            \"Global\" : \"w\",\n            \"MMAPV1Journal\" : \"w\",\n            \"Database\" : \"w\",\n            \"Collection\" : \"W\"\n  \"waitingForLock\" : true,\n        \"lockStats\" : {\n            \"Global\" : {\n                \"acquireCount\" : {\n                    \"w\" : NumberLong(3004)\n                }\n            },\n            \"MMAPV1Journal\" : {\n                \"acquireCount\" : {\n                    \"w\" : NumberLong(387127)\n                },\n                \"acquireWaitCount\" : {\n                    \"w\" : NumberLong(9)\n                },\n                \"timeAcquiringMicros\" : {\n                    \"w\" : NumberLong(60025)\n                }\n            },\n            \"Database\" : {\n                \"acquireCount\" : {\n                    \"w\" : NumberLong(3004),\n                    \"W\" : NumberLong(1)\n                }\n            },\n            \"Collection\" : {\n                \"acquireCount\" : {\n                    \"W\" : NumberLong(3004)\n                },\n                \"acquireWaitCount\" : {\n                    \"W\" : NumberLong(1)\n                },\n                \"timeAcquiringMicros\" : {\n                    \"W\" : NumberLong(66)\n                }\n            },\n            \"Metadata\" : {\n                \"acquireCount\" : {\n                    \"W\" : NumberLong(4)\n                }\n            }\n        }\n    }\n```", "```go\n    > db.currentOp(true)\n\n    ```", "```go\n    > db.killOp(<operation id>)\n\n    ```", "```go\n    > db.killOp(11587458)\n\n    ```", "```go\n    { \"info\" : \"attempting to kill op\" }\n\n    ```", "```go\n    > db.currentOpTest.find({$where:'sleep(100000)'})\n\n    ```", "```go\n    > db.getProfilingLevel()\n\n    ```", "```go\n    > db.setProfilingLevel(1, 50)\n\n    ```", "```go\n    > db.profilingTest.insert({i:1})\n    > db.profilingTest.find()\n    > db.profilingTest.find({$where:'sleep(70)'})\n\n    ```", "```go\n    > db.system.profile.find().pretty()\n\n    ```", "```go\n{\"name\":\"test.system.profile\", \"options\":{\"capped\":true, \"size\":1048576 }}\n\n```", "```go\ndb.createCollection('system.profile', {capped:1, size: 1048576})\n\n```", "```go\n{\n        \"op\" : \"query\",\n        \"ns\" : \"test.profilingTest\",\n        \"query\" : {\n                \"$where\" : \"sleep(70)\"\n        },\n        \"ntoreturn\" : 0,\n        \"ntoskip\" : 0,\n        \"nscanned\" : 1,\n        \"keyUpdates\" : 0,\n        \"numYield\" : 0,\n        \"lockStats\" : {\n                \u2026<<<<snip>>>\n       },\n        \"nreturned\" : 0,\n        \"responseLength\" : 20,\n        \"millis\" : 188,\n        \"ts\" : ISODate(\"2014-01-27T17:37:02.482Z\"),\n        \"client\" : \"127.0.0.1\",\n        \"allUsers\" : [ ],\n        \"user\" : \"\"\n}\n```", "```go\n    > use admin\n    > db.createUser({\n     user:'admin', pwd:'admin',\n     customData:{desc:'The admin user for admin db'},\n     roles:['readWrite', 'dbAdmin', 'clusterAdmin']\n     })\n\n    ```", "```go\n    > use test\n    > db.createUser({\n     user:'read_user', pwd:'read_user',\n     customData:{desc:'The read only user for test database'},\n     roles:['read']\n     }\n    )\n    > db.createUser({\n     user:'write_user', pwd:'write_user',\n     customData:{desc:'The read write user for test database'}, \n     roles:['readWrite']\n     }\n    )\n\n    ```", "```go\n    $ mongod .. <other options as provided earlier> --auth\n\n    ```", "```go\n    > db.testAuth.find()\n\n    ```", "```go\n    > db.auth('read_user', 'read_user')\n\n    ```", "```go\n    > db.testAuth.find()\n\n    ```", "```go\n    > db.testAuth.insert({i:1})\n\n    ```", "```go\n    > db.logout()\n    > db.auth({user:'write_user', pwd:'write_user'})\n    Now to execute the insert again as follows, this time around it should work\n    > db.testAuth.insert({i:1})\n\n    ```", "```go\n    > db.serverStatus()\n\n    ```", "```go\n    > use admin\n    > show collections\n\n    ```", "```go\n    $ mongo -u admin -p admin admin\n\n    ```", "```go\n    > show collections\n\n    ```", "```go\n    > db.serverStatus()\n\n    ```", "```go\n{\n  'user' : <user name>,\n  'pwd' : <password>,\n  'customData': {<JSON document providing any user specific data>}\n  'roles':[<roles of the user>]\n}\n```", "```go\n[{'role' : 'read',  'db':'reports'}, 'readWrite']\n\n```", "```go\n> use test\n> db.createUser({\n user:'test', pwd:'test',\n customData:{desc:'read access on reports and readWrite access on test'},\n roles:[\n {role:'read', db : 'reports'},\n 'readWrite'\n ]\n }\n)\n\n```", "```go\n    $ openssl rand \u2013base64 500 > keyfile\n\n    ```", "```go\n    $ chmod 400 keyfile\n\n    ```", "```go\n    somecontentaddedtothekeyfilefromtheeditorwithoutspaces\n    ```", "```go\n    C:\\>mongod --dbpath c:\\MongoDB\\data\\c1 --port 27000 --auth --keyFile c:\\MongoDB\\keyfile --replSet secureSet --smallfiles --oplogSize 100\n\n    ```", "```go\n    C:\\>mongod --dbpath c:\\MongoDB\\data\\c2 --port 27001 --auth --keyFile c:\\MongoDB\\keyfile --replSet secureSet --smallfiles --oplogSize 100\n\n    ```", "```go\n    C:\\>mongod --dbpath c:\\MongoDB\\data\\c3 --port 27002 --replSet secureSet --smallfiles --oplogSize 100\n\n    ```", "```go\n    > rs.initiate()\n\n    ```", "```go\n    > rs.add({_id:1, host:'Amol-PC:27001'})\n\n    ```", "```go\n    > rs.add({_id:2, host:'Amol-PC:27002'})\n\n    ```", "```go\n    C:\\>mongod --dbpath c:\\MongoDB\\data\\c3 --port 27002 --replSet secureSet --smallfiles --oplogSize 100 --auth --keyFile c:\\MongoDB\\keyfile\n\n    ```", "```go\n    > db.ttlTest.getIndexes()\n\n    ```", "```go\n    > db.runCommand({collMod: 'ttlTest', index: {keyPattern: {createDate:1}, expireAfterSeconds:800}})\n\n    ```", "```go\n{index: {keyPattern: <the field on which the index was originally created>, expireAfterSeconds:<new time to be used for TTL of the index>}}\n\n```", "```go\n{ \"expireAfterSeconds_old\" : 300, \"expireAfterSeconds_new\" : 800, \"ok\" : 1 }\n\n```", "```go\n    port = 27000\n    dbpath = c:\\data\\mongo\\db\n    logpath = c:\\logs\\mongo.log\n\n    ```", "```go\n    C:\\>mongod --config c:\\conf\\mongo.conf \u2013install\n\n    ```", "```go\n    C:\\>net start MongoDB\n\n    ```", "```go\n    C:\\>net stop MongoDB\n\n    ```", "```go\n    C:\\>mongod --remove\n\n    ```", "```go\n    C:\\> mongod --help\n\n    ```", "```go\n{\n        \"_id\" : \"replSet\",\n        \"members\" : [\n                {\n                        \"_id\" : 0,\n                        \"host\" : \"Amol-PC:27000\"\n                },\n                {\n                        \"_id\" : 1,\n                        \"host\" : \"Amol-PC:27001\"\n                },\n                {\n                        \"_id\" : 2,\n                        \"host\" : \"Amol-PC:27002\"\n                }\n        ]\n}\n```", "```go\n{\n      \"_id\" : 2,\n      \"host\" : \"Amol-PC:27002\"\n      \"arbiterOnly\" : true\n}\n```", "```go\n    > var conf = rs.conf()\n\n    ```", "```go\n    > conf.members[2].votes = 2\n\n    ```", "```go\n    > rs.reconfig(conf)\n\n    ```", "```go\n    > rs.initiate (conf)\n\n    ```", "```go\n    {_id: ... , 'arbiterOnly': true }\n\n    ```", "```go\n    > rs.addArb('Amol-PC:27004')\n\n    ```", "```go\n    {_id: ... , 'votes': <0 or 1>}\n\n    ```", "```go\n    {_id: ... , 'priority': <priority number>}\n\n    ```", "```go\n    {_id: ... , 'hidden': <true/false>}\n\n    ```", "```go\n    {_id: ... , 'slaveDelay': <number of seconds to lag>}\n\n    ```", "```go\n    {_id: ... , 'buildIndexes': <true/false>}\n\n    ```", "```go\n    > rs.status()\n\n    ```", "```go\n    > rs.stepDown()\n\n    ```", "```go\n    > rs.status()\n\n    ```", "```go\n    > use local\n    switched to db local\n    > show collections\n\n    ```", "```go\n    >db.me.findOne()\n\n    ```", "```go\n    > use local\n    switched to db local\n    > db.replset.minvalid.find()\n\n    ```", "```go\n    > use test\n    switched to db test\n    > db.replTest.insert({i:1})\n\n    ```", "```go\n    > db.replset.minvalid.find()\n\n    ```", "```go\n    > db.system.replset.find().pretty()\n\n    ```", "```go\n    db.getSisterDB(\"local\").system.replset.findOne()\n\n    ```", "```go\n    > use test\n    > local = db.getSisterDB('local')\n    > var cutoff = local.oplog.rs.find().sort({ts:-1}).limit(1).next().ts\n\n    ```", "```go\n    > local.system.namespaces.findOne({name:'local.oplog.rs'})\n\n    ```", "```go\n    > for(i = 0; i < 10; i++) db.oplogTest.insert({'i':i})\n\n    ```", "```go\n    > db.oplogTest.update({i:{$gt:5}}, {$set:{val:'str'}}, false, true)\n\n    ```", "```go\n    > db.oplogTest.ensureIndex({i:1}, {background:1})\n\n    ```", "```go\n    > local.oplog.rs.find({ts:{$gt:cutoff}}).pretty()\n\n    ```", "```go\n{\n        \"ts\" : Timestamp(1392402144, 1),\n        \"h\" : NumberLong(\"-4661965417977826137\"),\n        \"v\" : 2,        \"op\" : \"i\",\n        \"ns\" : \"test.oplogTest\",\n        \"o\" : {\n                \"_id\" : ObjectId(\"52fe5edfd473d2f623718f51\"),\n                \"i\" : 0\n        }\n}\n```", "```go\n{\n    \"ts\" : Timestamp(1392402620, 1),\n    \"h\" : NumberLong(\"-7543933489976433166\"),\n    \"v\" : 2,\n    \"op\" : \"u\",\n    \"ns\" : \"test.oplogTest\",\n    \"o2\" : {\n            \"_id\" : ObjectId(\"52fe5edfd473d2f623718f57\")\n    },\n    \"o\" : {\n            \"$set\" : {\n                    \"val\" : \"str\"\n            }\n    }\n}\n```", "```go\n> db.oplogTest.update({i:9}, {$inc:{i:1}})\n\n```", "```go\n\"o\" : {\n    \"$set\" : {\n           \"i\" : 10\n     }\n}\n```", "```go\n    > var conf = rs.conf()\n    > conf.members[0].tags = {'datacentre': 'dc1', 'rack': 'rack-dc1-1'}\n    > conf.members[1].tags = {'datacentre': 'dc1', 'rack': 'rack-dc1-2'}\n    > conf.members[2].priority = 0\n    > conf.members[2].tags = {'datacentre': 'dc2', 'rack': 'rack-dc2-1'}\n\n    ```", "```go\n    > conf.settings = {'getLastErrorModes' : {'MultiDC':{datacentre : 2}}}\n    > rs.reconfig(conf)\n\n    ```", "```go\n    >>> import pymongo\n    >>> client = pymongo.MongoClient('localhost:27000,localhost:27001', replicaSet='replSetTest')\n    >>> db = client.test\n\n    ```", "```go\n    >>>db.multiDCTest.insert({'i':1}, w='MultiDC', wtimeout=5000)\n\n    ```", "```go\n    >>>db.multiDCTest.insert({'i':2}, w='MultiDC', wtimeout=5000)\n\n    ```", "```go\n    {'MultiRack':{rack : 2}}\n\n    ```", "```go\n    {\n       'getLastErrorModes' : {\n               'MultiDC':{datacentre : 2}, \n               'MultiRack':{rack : 2}\n       }\n    }\n    ```", "```go\n    > var conf = rs.conf()\n    > conf.members[2].tags.type = 'reports'\n    > rs.reconfig(conf)\n\n    ```", "```go\n    >>> curs = db.multiDCTest.find(read_preference=pymongo.ReadPreference.SECONDARY,\n     tag_sets=[{'type':'reports'}])\n    >>> curs.next()\n\n    ```", "```go\n    >>> curs = db.multiDCTest.find(read_preference=pymongo.ReadPreference.SECONDARY,\n     tag_sets=[{'type':'reports'}])\n    >>> curs.next()\n\n    ```", "```go\nmongos> use test\nmongos> sh.enableSharding('test')\n\n```", "```go\n    mongos> db.testCol.insert({i : 1})\n    mongos> sh.status()\n\n    ```", "```go\n    databases:\n     {  \"_id\" : \"admin\",  \"partitioned\" : false,  \"primary\" : \"config\" }\n     {  \"_id\" : \"test\",  \"partitioned\" : true,  \"primary\" : \"shard0000\" }\n\n    ```", "```go\n    > db.testCol.find()\n\n    ```", "```go\n    > db.testCol.find()\n\n    ```", "```go\n    mongos> use admin\n    mongos> db.runCommand({movePrimary:'test', to:'shard0001'})\n\n    ```", "```go\n    mongos> sh.status()\n\n    ```", "```go\n    > db.testCol.find()\n\n    ```", "```go\ndb.runCommand({movePrimary:'<database whose primary shard is to be changed>', to:'<target shard>'})\n\n```", "```go\n    > sh.enableSharding('test')\n    > sh.shardCollection('test.splitAndMoveTest', {_id:1}, false)\n\n    ```", "```go\n    > for(i = 1; i <= 10000 ; i++) db.splitAndMoveTest.insert({_id : i})\n\n    ```", "```go\n    > db. splitAndMoveTest.find().explain()\n\n    ```", "```go\n    > config = db.getSisterDB('config')\n    > config.chunks.find({ns:'test.splitAndMoveTest'}).pretty()\n\n    ```", "```go\n    > sh.splitAt('test.splitAndMoveTest', {_id:5000})\n\n    ```", "```go\n    > config.chunks.find({ns:'test.splitAndMoveTest'}).pretty()\n\n    ```", "```go\n    > sh.moveChunk('test.splitAndMoveTest', {_id:5001}, 'shard0001')\n\n    ```", "```go\n    > config.chunks.find({ns:'test.splitAndMoveTest'}).pretty()\n\n    ```", "```go\n    > db. splitAndMoveTest.find().explain()\n\n    ```", "```go\n    mongos> sh.addShardTag('shard0000', 'Mumbai')\n    mongos> sh.addShardTag('shard0001', 'Mumbai')\n    mongos> sh.addShardTag('shard0002', 'Pune')\n\n    ```", "```go\n    mongos> sh.addTagRange('test.userAddress', {pincode:400001}, {pincode:400999}, 'Mumbai')\n    mongos> sh.addTagRange('test.userAddress', {pincode:411001}, {pincode:411999}, 'Pune')\n\n    ```", "```go\n    mongos> sh.enableSharding('test')\n    mongos> sh.shardCollection('test.userAddress', {pincode:1})\n\n    ```", "```go\n    mongos> db.userAddress.insert({_id:1, name: 'Varad', city: 'Pune', pincode: 411001})\n    mongos> db.userAddress.insert({_id:2, name: 'Rajesh', city: 'Mumbai', pincode: 400067})\n    mongos> db.userAddress.insert({_id:3, name: 'Ashish', city: 'Mumbai', pincode: 400101})\n\n    ```", "```go\n    mongos> db.userAddress.find({city:'Pune'}).explain()\n    mongos> db.userAddress.find({city:'Mumbai'}).explain()\n\n    ```", "```go\n    mongos> use config\n    mongos>show collections\n\n    ```", "```go\n    mongos> db.databases.find()\n\n    ```", "```go\n    mongos> db.collections.find().pretty()\n\n    ```", "```go\n    mongos> db.chunks.find().pretty()\n\n    ```", "```go\n    mongos> db.tags.find().pretty()\n\n    ```", "```go\n    mongos> db.mongos.find().pretty()\n\n    ```", "```go\n    mongos>db.getCollection('version').findOne()\n\n    ```", "```go\n{\n        \"_id\" : \"test.userAddress-pincode_400001.0\",\n        \"lastmod\" : Timestamp(1, 3),\n        \"lastmodEpoch\" : ObjectId(\"53026514c902396300fd4812\"),\n        \"ns\" : \"test.userAddress\",\n        \"min\" : {\n                \"pincode\" : 400001\n        },\n        \"max\" : {\n                \"pincode\" : 411001\n        },\n        \"shard\" : \"shard0000\"\n}\n```"]