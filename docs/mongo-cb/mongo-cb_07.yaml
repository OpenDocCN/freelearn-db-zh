- en: Chapter 7. Deploying MongoDB on the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 在云上部署MongoDB
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Setting up and managing the MongoLab account
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和管理MongoLab账户
- en: Setting up a sandbox MongoDB instance on MongoLab
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MongoLab上设置沙箱MongoDB实例
- en: Performing operations on MongoDB from MongoLab GUI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MongoLab GUI上操作MongoDB
- en: Setting up MongoDB on Amazon EC2 without AMI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Amazon EC2上设置MongoDB而不使用AMI
- en: Setting up MongoDB using the Docker containers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker容器设置MongoDB
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Though explaining cloud computing is not in the scope for this book, I will
    explain it in just one paragraph. Any business, big or small, needs hardware infrastructure
    with different software installed on it. An operating system is the basic software
    needed along with different servers (from the software perspective) for storage,
    mail, web, database, DNS, and so on. The list of software frameworks/platforms
    that are needed would end up being large. The point of interest here is that the
    initial budget for this hardware and software platform is high, and so we are
    not even considering the real estate needed to host it. This is where cloud computing
    providers such as Amazon, Rackspace, Google, and Microsoft come into play. They
    have hosted the high-end hardware and software in different data centers across
    the globe and let us choose from different configurations to start an instance.
    This is then accessed remotely over the public network for management purposes.
    Literally, all our setting up is done in the cloud provider's data center and
    we just pay as we use. Shut down the instance and you stop paying for it. Not
    only small start-ups, but large enterprises often temporarily fall back to cloud
    servers for temporary rise in the computing resource demands. The prices offered
    by the providers are very competitive too, particularly AWS, and its popularity
    says it all.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然解释云计算不在本书的范围内，但我将在一段话中解释一下。任何规模的企业都需要硬件基础设施，并在其上安装不同的软件。操作系统是基本软件，还需要不同的服务器（从软件角度）用于存储、邮件、网络、数据库、DNS等。所需的软件框架/平台列表将变得很长。这里的重点是，这些硬件和软件平台的初始预算很高，所以我们甚至没有考虑托管它所需的房地产。这就是亚马逊、Rackspace、Google和微软等云计算提供商的作用所在。他们在全球不同的数据中心托管了高端硬件和软件，并让我们从不同的配置中选择开始一个实例。然后通过公共网络远程访问以进行管理。我们所有的设置都是在云提供商的数据中心中完成的，我们只是按需付费。关闭实例，停止付费。不仅是小型初创企业，大型企业也经常暂时转向云服务器以满足临时的计算资源需求。提供商提供的价格也非常有竞争力，特别是AWS，其受欢迎程度说明了一切。
- en: The wiki page, [http://en.wikipedia.org/wiki/Cloud_computing](http://en.wikipedia.org/wiki/Cloud_computing),
    has a lot of details, perhaps a bit too much for someone new to the concept, but
    is a good read nevertheless. The article at [http://computer.howstuffworks.com/cloud-computing/cloud-computing.htm](http://computer.howstuffworks.com/cloud-computing/cloud-computing.htm)
    is pretty good and also recommended for you to read if you are not aware of the
    concept of cloud computing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 维基页面[http://en.wikipedia.org/wiki/Cloud_computing](http://en.wikipedia.org/wiki/Cloud_computing)有很多细节，对于新概念的人来说可能有点太多，但仍然是一篇不错的阅读。[http://computer.howstuffworks.com/cloud-computing/cloud-computing.htm](http://computer.howstuffworks.com/cloud-computing/cloud-computing.htm)上的文章也很不错，如果你对云计算的概念不熟悉，也建议你阅读一下。
- en: In this chapter, we will set up MongoDB instances on the cloud using MongoDB
    service providers and then by ourselves on **Amazon Web Service** (**AWS**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用MongoDB服务提供商在云上设置MongoDB实例，然后在**亚马逊网络服务**（**AWS**）上自己设置。
- en: Setting up and managing the MongoLab account
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和管理MongoLab账户
- en: In this recipe, we will evaluate one of the vendors, MongoLab, that provides
    MongoDB as a service. This introductory recipe will introduce to you what MongoDB
    as a service is and then will demonstrate how to set up and manage an account
    in MongoLab ([https://mongolab.com/](https://mongolab.com/)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将评估MongoLab这样的供应商，他们提供MongoDB作为一项服务。这个介绍性的配方将向你介绍MongoDB作为一项服务是什么，然后演示如何在MongoLab([https://mongolab.com/](https://mongolab.com/))中设置和管理一个账户。
- en: In all the recipes in the book so far, we have covered setting up, administering,
    monitoring, and developing the instances of MongoDB in the organizational/personal
    premises. This not only needs manpower with the appropriate skill set to manage
    the deployments, but also appropriate hardware to install and run Mongo servers.
    This needs large investments up front that might not be a viable solution for
    start-ups or even organizations who are not clear on adopting or migrating to
    this technology. They might want to evaluate it and see how it goes before moving
    full-fledged to this solution. What would be ideal is to have a service provider
    who takes care of hosting the MongoDB deployments, managing and monitoring the
    deployments, and providing support. The organizations opting for these services
    need not invest up front to set up the servers or recruit or outsource to consultants
    for the administration and monitoring of the instances. All that one needs to
    do is choose the hardware and software platforms and configurations and an appropriate
    MongoDB version, and then set up an environment from a user-friendly GUI. It even
    gives you an option to use your existing cloud provider's servers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书中的所有配方都涵盖了在组织/个人场所设置、管理、监控和开发MongoDB实例。这不仅需要具有适当技能的人手来管理部署，还需要适当的硬件来安装和运行Mongo服务器。这需要大量的前期投资，这对于初创企业甚至对于尚不确定是否要采用或迁移到这项技术的组织来说可能不是一个可行的解决方案。他们可能希望评估一下，看看情况如何，然后再全面转向这个解决方案。理想的情况是有一个服务提供商来负责托管MongoDB部署、管理和监控部署，并提供支持。选择这些服务的组织无需事先投资来设置服务器或招聘或外包顾问来管理和监控实例。你需要做的就是选择硬件和软件平台和配置以及适当的MongoDB版本，然后从用户友好的GUI中设置环境。它甚至给了你一个选项来使用你现有的云提供商的服务器。
- en: We saw in brief what these vendor hosting services do and why they are needed;
    we will start this recipe by setting up an account with MongoLab and see some
    basic user and account management. MongoLab is by no means the only hosting provider
    for MongoDB. You can also look at [http://www.mongohq.com/](http://www.mongohq.com/)
    and [http://www.objectrocket.com/](http://www.objectrocket.com/). At the time
    of writing this book, MongoDB themselves started providing MongoDB as a service
    on the Azure cloud and is currently in the beta phase.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要地看到了这些供应商托管服务的作用以及它们为什么是必要的；我们将通过在MongoLab上设置帐户并查看一些基本用户和帐户管理来开始这个配方。MongoLab绝不是MongoDB的唯一托管提供商。您还可以查看[http://www.mongohq.com/](http://www.mongohq.com/)和[http://www.objectrocket.com/](http://www.objectrocket.com/)。在撰写本书时，MongoDB自己开始在Azure云上提供MongoDB作为服务，目前处于测试阶段。
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Visit [https://mongolab.com/signup/](https://mongolab.com/signup/) to sign up
    if you don't have an account created; just fill in the relevant details and create
    one account.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未创建帐户，请访问[https://mongolab.com/signup/](https://mongolab.com/signup/)进行注册；只需填写相关详细信息并创建一个帐户。
- en: Once the account has been created, click on the **Account** link in the top
    right corner:![How to do it…](img/B04831_07_02.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建帐户后，单击右上角的“帐户”链接：![如何操作…](img/B04831_07_02.jpg)
- en: Click on the **Account Users** tab at the top; it should be selected by default:![How
    to do it…](img/B04831_07_03.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部单击“帐户用户”选项卡；它应该是默认选中的：![如何操作…](img/B04831_07_03.jpg)
- en: To add a new account, click on the **+ Add account user** button. One pop-up
    window will ask for the username, e-mail ID, and password. Enter the relevant
    details and click on the **Add** button.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加新帐户，请单击“+添加帐户用户”按钮。一个弹出窗口将要求输入用户名、电子邮件ID和密码。输入相关详细信息，然后单击“添加”按钮。
- en: Click on the user, and you should be navigated to a page where you can change
    the username, e-mail ID, and password. You can transfer the administrative rights
    to the user by clicking on the **Change to admin** button on this screen.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击用户，您应该被导航到一个页面，您可以在该页面更改用户名、电子邮件ID和密码。您可以通过在此屏幕上单击“更改为管理员”按钮将管理权限转移给用户。
- en: Similarly, by clicking on your own user details, you have the option to change
    the username, e-mail ID, and password.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，通过单击自己的用户详细信息，您可以选择更改用户名、电子邮件ID和密码。
- en: Click on the **Set up two-factor authentication** button to activate the multifactor
    authentication using Google Authenticator. You need to have the Google Authenticator
    installed on your Android, iOS, or BlackBerry phone to proceed with the setting
    up of multifactor authentication.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“设置双因素身份验证”按钮以激活使用Google Authenticator的多因素身份验证。您需要在Android、iOS或BlackBerry手机上安装Google
    Authenticator才能继续设置多因素身份验证。
- en: On clicking the button, we should see the QR code that can be scanned using
    Google Authenticator or, if scanning is not possible, click on the URL underneath
    the QR code, which should show the code. Set up a time-based account in the Google
    Authenticator manually. There are two types of Google Authenticator accounts,
    time-based and counter-based.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击按钮后，我们应该看到可以使用Google Authenticator扫描的QR码，或者如果无法扫描，可以单击QR码下面的URL，这将显示代码。在Google
    Authenticator中手动设置基于时间的帐户。Google Authenticator有两种类型的帐户，基于时间和基于计数器。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Refer to [http://en.wikipedia.org/wiki/Google_Authenticator](http://en.wikipedia.org/wiki/Google_Authenticator)
    for more details.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[http://en.wikipedia.org/wiki/Google_Authenticator](http://en.wikipedia.org/wiki/Google_Authenticator)获取更多详细信息。
- en: Similarly, you can delete users from the accounts page by clicking on the cross
    next to the user's row in **Account Users**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，您可以通过单击“帐户用户”中用户行旁边的叉号来从帐户页面中删除用户。
- en: How it works…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: There is not much to explain in this section. The setup process and user administration
    is pretty simple. Note that the users that we added here are not database users.
    These are the users that have access to the MongoLab account. **Account** can
    be the name of the organization and can be seen at the top of the screen. The
    multifactor authentication account setup in the Google Authenticator software
    on the handheld device should not be deleted as whenever the user logs in to the
    MongoLab account from the browser, he will be asked to enter the Google Authenticator
    account to continue.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分没有太多需要解释的。设置过程和用户管理非常简单。请注意，我们在这里添加的用户不是数据库用户。这些是可以访问MongoLab帐户的用户。**帐户**可以是组织的名称，并且可以在屏幕顶部看到。在手持设备上Google
    Authenticator软件中设置的多因素身份验证帐户不应被删除，因为每当用户从浏览器登录到MongoLab帐户时，他将被要求输入Google Authenticator帐户以继续。
- en: Setting up a sandbox MongoDB instance on MongoLab
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MongoLab上设置沙箱MongoDB实例
- en: In the previous recipe, we saw how to set up an account on MongoLab and add
    users to the account. We still haven't seen how to fire up an instance on the
    cloud and use it to perform some simple operations. In this recipe, this is exactly
    what we will do.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我们看到了如何在MongoLab上设置帐户并向帐户添加用户。我们还没有看到如何在云上启动实例并使用它执行一些简单的操作。在这个配方中，这正是我们要做的事情。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the previous recipe, *Setting up and managing MongoLab account*, to
    set up an account with MongoLab. We will set up a free sandbox instance. We will
    require some way to connect to this started `mongo` instance and thus will need
    a mongo shell that comes only with the complete mongo installation or you can
    choose to use a programming language of your choice in order to connect to the
    started `mongo` instance. Refer to [Chapter 3](ch03.html "Chapter 3. Programming
    Language Drivers"), *Programming Language Drivers* for recipes on connecting and
    performing operations using a Java or Python client.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考前一篇文章，“设置和管理MongoLab帐户”，以在MongoLab上设置帐户。我们将设置一个免费的沙箱实例。我们将需要一种连接到这个已启动的`mongo`实例的方法，因此将需要一个仅随完整的mongo安装一起提供的mongo
    shell，或者您可以选择使用您选择的编程语言来连接到已启动的`mongo`实例以执行操作。请参阅[第3章](ch03.html "第3章。编程语言驱动程序")，“编程语言驱动程序”中有关使用Java或Python客户端连接和执行操作的配方。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Go to the home page, [https://mongolab.com/home](https://mongolab.com/home),
    and click on the **Create new** button.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到主页，[https://mongolab.com/home](https://mongolab.com/home)，然后点击**创建新**按钮。
- en: Select a cloud provider, for this example, we choose Amazon Web Services (AWS):![How
    to do it…](img/B04831_07_04.jpg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择云提供商，例如，我们选择亚马逊网络服务（AWS）：![操作步骤…](img/B04831_07_04.jpg)
- en: Click on the **Single-node (development)** and then, the **Sandbox** options.
    Do not change the location of the cloud server as the free sandbox instance is
    not available in all data centers. As this is a sandbox, we are okay with any
    location.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**单节点（开发）**，然后选择**沙盒**选项。不要更改云服务器的位置，因为免费沙盒实例并非在所有数据中心都可用。由于这是一个沙盒，我们可以接受任何位置。
- en: Add any name for your database; the name that I chose is `mongolab-test`. Click
    on **Create new MongoDB deployment** after entering the name.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的数据库添加任何名称；我选择的名称是`mongolab-test`。在输入名称后，点击**创建新的MongoDB部署**。
- en: This should take you to the home page, and the database should now be visible.
    Click on the instance name. The page here shows the details of the MongoDB instance
    selected. The instruction to connect in the shell or programming language is given
    at the top of the page along with the public hostname of the started instance.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您到主页，现在应该可以看到数据库。点击实例名称。此页面显示所选的MongoDB实例的详细信息。在页面顶部提供了在shell或编程语言中连接的指示，以及已启动实例的公共主机名。
- en: Click on the **Users** tab and then the **Add database user** button. In the
    pop-up window, add the username and password as `testUser` and `testUser`, respectively
    (or any of your choice).![How to do it…](img/B04831_07_05.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**用户**选项卡，然后点击**添加数据库用户**按钮。在弹出窗口中，分别添加用户名和密码为`testUser`和`testUser`（或者您自己选择的任何用户名和密码）。![操作步骤…](img/B04831_07_05.jpg)
- en: 'With the user added, start the mongo shell as follows, assuming that the name
    of the database is `mongolab-test` and the username and password is `testUser`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加用户后，按照以下步骤启动mongo shell，假设数据库名称为`mongolab-test`，用户名和密码为`testUser`：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On connecting, execute the following in the shell and check whether the database
    name is `mongolab-test`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 连接后，在shell中执行以下操作，并检查数据库名称是否为`mongolab-test`：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Insert one document in a collection as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式向集合中插入一个文档：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Query the collection as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式查询集合：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The steps executed are very simple, and we created one shared sandbox instance
    in the cloud. MongoLab themselves do not host the instances but use one of the
    cloud providers to do the hosting. MongoLab does not support sandbox instances
    for all providers. The storage with the sandbox instance is 0.5 GB and is shared
    with other instances on the same machine. Shared instances are cheaper than running
    on a dedicated instance but the price is paid in performance. The CPU and IO is
    shared with other instances and thus the performance of our shared instance is
    not necessarily in our control. For a production use case, a shared instance is
    not a recommended option. Similarly, we need to set up a replica set when running
    in production. If we look at the image in step 2, then we see another tab next
    to the **Single-node (development)** option. This is where you can choose the
    configuration for the machine in terms of RAM and disk capacity (and the price
    as well) and set up a replica set.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的步骤非常简单，我们在云中创建了一个共享的沙盒实例。MongoLab本身不托管实例，而是使用云提供商之一来托管。MongoLab并不支持所有提供商的沙盒实例。沙盒实例的存储空间为0.5
    GB，并与同一台机器上的其他实例共享。共享实例比在专用实例上运行要便宜，但性能方面要付出代价。CPU和IO与其他实例共享，因此我们共享实例的性能并不一定在我们的控制之下。对于生产用例，共享实例不是一个推荐的选项。同样，当在生产环境中运行时，我们需要设置一个副本集。如果我们看一下步骤2中的图像，我们会看到**单节点（开发）**选项旁边还有另一个选项卡。在这里，您可以选择机器的配置，包括RAM和磁盘容量（以及价格），并设置一个副本集。
- en: '![How it works…](img/B04831_07_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/B04831_07_06.jpg)'
- en: As you can see, you get to choose the version of MongoDB to use. Even if a new
    version of MongoDB gets released, MongoLab will not start supporting it immediately
    as they usually wait for a few minor versions to be rolled out before supporting
    them for production users. Additionally, when we choose a configuration, the default
    available option is two data nodes and one arbiter, which is sufficient for a
    majority of use cases.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您可以选择要使用的MongoDB版本。即使MongoDB发布了新版本，MongoLab也不会立即开始支持，因为他们通常会等待几个次要版本的发布，然后才支持生产用户。此外，当我们选择配置时，默认可用的选项是两个数据节点和一个仲裁者，这对于大多数用例来说已经足够了。
- en: The RAM and disk chosen depend completely on the nature of the data and how
    query- intensive or write-intensive it is. This sizing is something that we do
    irrespective of whether we are deploying on our own infrastructure or the cloud.
    The working set is something that is important to be known before we choose the
    RAM of the hardware. Proofing of concepts and experiments are done to deal with
    a subset of data and then the estimation can be done for the entire dataset. If
    IO activity is high and low IO latency is desired, you can even opt for SSD, as
    shown in the preceding image. Standalone instances are as good as replica sets
    in terms of scalability except for availability. Thus, we can choose standalone
    instances for such estimation and development purposes. Shared instances, both
    free and paid, are good candidates for development purposes. Note that shared
    instances cannot be restarted on demand as we can for dedicated instances.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所选择的RAM和磁盘完全取决于数据的性质以及查询密集程度或写入密集程度。这种大小选择是我们无论是在自己的基础设施上部署还是在云上部署都需要做的。工作集是在选择硬件的RAM之前必须了解的重要内容。概念验证和实验是为了处理数据的一个子集，然后可以对整个数据集进行估算。如果IO活动很高并且需要低IO延迟，您甚至可以选择SSD，就像前面的图像中所示的那样。独立实例在可伸缩性方面与副本集一样好，除了可用性。因此，我们可以选择独立实例进行此类估算和开发目的。共享实例，无论是免费还是付费，都是开发目的的良好选择。请注意，与专用实例一样，共享实例不能按需重新启动。
- en: What cloud provider do we choose? If you already have your application servers
    deployed in the cloud, then obviously it has to be the same vendor as your existing
    vendor. It is recommended that you use the same cloud vendor for the application
    server and database, and see that they are both deployed on the same location
    in order to minimize latency and improve on performance. If you are starting fresh,
    then invest some time in choosing the cloud provider. Look at all the other services
    that the application would need, such as the storage, compute, other services
    such as mail, notification services, and so on. All this analysis is outside the
    scope of this book, but once you are done with this and finalized with a provider,
    you can choose the provider to use accordingly in MongoLab. As far as the pricing
    goes, all the leading providers offer competitive pricing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择哪个云服务提供商？如果您已经在云中部署了应用服务器，那么显然必须与您现有的供应商相同。建议您为应用服务器和数据库使用相同的云供应商，并确保它们都部署在同一位置，以最小化延迟并提高性能。如果您是从头开始的，那么请花些时间选择云服务提供商。查看应用程序所需的所有其他服务，例如存储、计算、其他服务（如邮件、通知服务等）。所有这些分析都超出了本书的范围，但一旦完成并确定了供应商，您可以相应地在MongoLab中选择要使用的供应商。就定价而言，所有主要供应商都提供有竞争力的定价。
- en: Performing operations on MongoDB from MongoLab GUI
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从MongoLab GUI对MongoDB执行操作
- en: In the previous recipe, we saw how to set up a simple sandbox instance for MongoDB
    in the cloud using MongoLab. In this recipe, we build on it and see what services
    MongoLab provides you with, from the management, administrative, monitoring, and
    backups perspectives.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个步骤中，我们看到了如何在云中使用MongoLab为MongoDB设置一个简单的沙箱实例。在本步骤中，我们将在此基础上构建，并查看MongoLab从管理、管理、监控和备份的角度为您提供了哪些服务。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Refer to the previous recipe, *Setting up a sandbox MongoDB instance on MongoLab*,
    on how to set up a sandbox instance in the cloud using MongoLab.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅上一个步骤，*在MongoLab上设置沙箱MongoDB实例*，了解如何在云中使用MongoLab设置沙箱实例。
- en: How to do it…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Go to [https://mongolab.com/home](https://mongolab.com/home); you should see
    the list of databases, servers, and clusters. If you have followed the last recipe,
    you should see one standalone database, `mongolab-test` (or whatever name you
    chose for the database). Click on the database name, which should take you to
    the database details page.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://mongolab.com/home](https://mongolab.com/home)；您应该看到数据库、服务器和集群的列表。如果您遵循了上一个步骤，您应该会看到一个独立的数据库，`mongolab-test`（或者您为数据库选择的任何名称）。单击数据库名称，这应该会带您到数据库详细信息页面。
- en: After clicking on the **Collections** tab, which should be selected by default,
    we should see the list of collections present in the database. If the previous
    recipe was executed before this one, you should see one collection, messages,
    in the database.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**集合**选项卡后，应该默认选择，我们应该看到数据库中存在的集合列表。如果在执行本步骤之前执行了上一个步骤，您应该会在数据库中看到一个名为messages的集合。
- en: Click on the name of the collection and we should get navigated to the collection
    details page as follows:![How to do it…](img/B04831_07_07.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击集合的名称，我们应该会被导航到集合详细信息页面，如下所示：![如何做…](img/B04831_07_07.jpg)
- en: Click on the **Stats** option to view the stats of the collection.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**统计**选项以查看集合的统计信息。
- en: In the **Documents** tab, we can query the collection. By default, we see all
    the documents with 10 documents shown per page, which can be changed from the
    records/page drop-down menu. A maximum value of 100 can be chosen.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文档**选项卡中，我们可以查询集合。默认情况下，我们看到每页显示10个文档的所有文档，可以从每页记录下拉菜单中进行更改。可以选择的最大值为100。
- en: 'There is another way to view the documents, as a table. Click on the **table**
    radio button in the **Display** mode and click on the link to create/edit table
    view. In the popup that is shown, enter the following document for the messages
    collection and click on **Submit**:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有另一种查看文档的方法，即作为表格。单击**显示**模式中的**表格**单选按钮，并单击链接以创建/编辑表视图。在显示的弹出窗口中，输入以下消息集合的文档，然后单击**提交**：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On doing this, the display will change as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做的情况下，显示将会按以下方式更改：
- en: '![How to do it…](img/B04831_07_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/B04831_07_08.jpg)'
- en: From the **--Start new search--** dropdown, select the **[new search]** option,
    as shown in the following image:![How to do it…](img/B04831_07_09.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**--开始新搜索--**下拉菜单中，选择**[新搜索]**选项，如下图所示：![如何做…](img/B04831_07_09.jpg)
- en: With the new query, we see the following fields that let us enter the query
    string, sort order, and projections. Enter the query as `{"_id":1}` and fields
    as `{"message":1, "_id":0}`:![How to do it…](img/B04831_07_10.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新查询，我们看到以下字段，让我们输入查询字符串、排序顺序和投影。将查询输入为`{"_id":1}`，字段输入为`{"message":1, "_id":0}`：![如何做…](img/B04831_07_10.jpg)
- en: You can choose to save the query by clicking on the **Save this search** button
    and giving a name to the query to be saved.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择通过单击**保存此搜索**按钮并为要保存的查询命名来保存查询。
- en: Individual documents can be deleted by clicking on the cross next to each record.
    Similarly, the **Delete all** button at the top will delete all the contents of
    the collection.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过单击每条记录旁边的叉号来删除单个文档。同样，顶部的**删除全部**按钮将删除集合的所有内容。
- en: Similarly, clicking on **+ Add document** will pop up an editor to type in the
    document that would be inserted into the collection. As MongoDB is schemaless,
    the document need not have a fixed set of fields; the application should make
    sense out of it.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，单击**+添加文档**将弹出一个编辑器，用于输入要插入集合的文档。由于MongoDB是无模式的，文档不需要具有固定的字段集；应用程序应该能够理解它。
- en: Go to `https://mongolab.com/databases/<your database name> (mongolab-test`,
    in this case), which can also be reached by clicking on the database name from
    the home page.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`https://mongolab.com/databases/<your database name>（在本例中为mongolab-test）`，也可以通过从主页单击数据库名称来到达。
- en: Click on the **Stats** tab next to the **Users** tab. The content shown here
    in the table is the result of the `db.stats()` command.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**统计**选项卡旁边的**用户**选项卡。在表中显示的内容是`db.stats()`命令的结果。
- en: Similarly, click on the **Backups** tab at the top next to the **Stats** tab.
    Here, we have options to take a recurring or one-time backup.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，单击**备份**选项卡，位于**统计**选项卡旁边的顶部。在这里，我们可以选择定期备份或一次性备份。
- en: When you click on **Schedule recurring backup**, you get a pop-up window that
    lets you enter the details of the scheduling, such as the frequency of the backup,
    time of the day when the backup needs to be taken, and the number of backups to
    keep.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您单击**计划定期备份**时，会弹出一个窗口，让您输入调度的详细信息，例如备份的频率，需要进行备份的时间以及要保留的备份数量。
- en: The backup location can be chosen as either MongoLab's own S3 bucket or the
    Rackspace cloud file. You can choose to use your own account's storage, in which
    case you will have to share the AWS access key/secret key or UserID/API key in
    case of Rackspace.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 备份位置可以选择为MongoLab自己的S3存储桶或Rackspace云文件。您可以选择使用自己帐户的存储空间，在这种情况下，您将不得不共享AWS访问密钥/秘密密钥或Rackspace的UserID/API密钥。
- en: How it works…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Steps 1 to 5 are pretty straightforward. In step 6, we provided a JSON document
    to show the results in a tabular format. The format of the document is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1到5非常简单。在第6步，我们提供了一个JSON文档，以表格格式显示结果。文档的格式如下：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The key is the name of the column to display and the value of the name of the
    field in the actual document whose value will be shown as the value of this column.
    To get a clear understanding, look at the document defined for the messages collection,
    and then take a look at the displayed tabular data. The following is the JSON
    document that we provided, which states the name of the column as the value of
    the key and the actual field in the document as the value of the column:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 键是要显示的列的名称，值是实际文档中字段的名称，其值将显示为此列的值。为了更清楚地理解，请查看为消息集合定义的文档，然后查看显示的表格数据。以下是我们提供的JSON文档，其中将列的名称作为键的值，并将文档中的实际字段作为列的值：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the field name and values of the JSON documents here are enclosed
    in quotes. The Mongo shell is lenient in this sense, where it allows us to give
    field names without quotes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里的JSON文档的字段名称和值都用引号括起来。Mongo shell在这方面很宽松，允许我们在不使用引号的情况下给出字段名称。
- en: If we visit step 16 about backups, we see that the backups are stored either
    in MongoLab's AWS S3/Rackspace cloud file or your custom AWS S3 bucket /Rackspace
    cloud files. In the latter cases, you need to share your AWS/Rackspace credentials
    with MongoLab. If this is a concern and the credentials can potentially be used
    to access other resources, it is recommended that you create a separate account
    and use it for backup purposes from MongoLab. You can also use the backup created
    to create a new MongoDB server instance from MongoLab. Needless to say, if you
    have used your own AWS S3 bucket/Rackspace cloud files, storage charges are additional
    as they are not a part of MongoLab's charges.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问关于备份的第16步，我们会发现备份要么存储在MongoLab的AWS S3/Rackspace云文件中，要么存储在您自定义的AWS S3存储桶/Rackspace云文件中。在后一种情况下，您需要与MongoLab共享您的AWS/Rackspace凭据。如果这是一个问题，并且凭据可能被用来访问其他资源，建议您创建一个单独的帐户，并将其用于从MongoLab进行备份。您还可以使用创建的备份来从MongoLab创建一个新的MongoDB服务器实例。不用说，如果您使用自己的AWS
    S3存储桶/Rackspace云文件，存储费用是额外的，因为它们不是MongoLab费用的一部分。
- en: There are some important points worth mentioning. MongoLab provides a REST API
    for various operations. The REST API can be used in place of the standard drivers
    to perform CRUD operations; however, using MongoDB client libraries is the recommended
    approach. One good reason to use the REST API right now over a language driver
    is if the client is connecting to the MongoDB server over a public network. The
    shell that we started on our local machine connecting to the MongoDB server on
    the cloud sends unencrypted data to the server, which makes it vulnerable. On
    the other hand, if REST APIs are used, the traffic is sent over a secure channel
    as HTTPS is used. MongoLab plans to support a secure channel for the communication
    between the client and server in future, but as of the writing of this book, this
    is not available. If the application and database are in the same data center
    of the cloud provider, you are safe and can depend on the security provided by
    the cloud provider for their local network, which generally is not a concern.
    However, there is nothing that you can do for secure communication other than
    ensuring that your data doesn't go over public networks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些值得一提的重要点。MongoLab为各种操作提供了REST API。 REST API可以用来代替标准驱动程序执行CRUD操作；但是，使用MongoDB客户端库是推荐的方法。现在使用REST
    API而不是语言驱动程序的一个很好的理由是，如果客户端通过公共网络连接到MongoDB服务器。我们在本地机器上启动的shell连接到云上的MongoDB服务器会将未加密的数据发送到服务器，这使其容易受到攻击。另一方面，如果使用REST
    API，流量将通过安全通道发送，因为使用了HTTPS。MongoLab计划在未来支持客户端和服务器之间通信的安全通道，但在撰写本书时，这是不可用的。如果应用程序和数据库位于云提供商的同一数据中心，则您是安全的，并且可以依赖云提供商为其本地网络提供的安全性，这通常不是一个问题。但是，除了确保您的数据不通过公共网络传输之外，您无法做任何安全通信的事情。
- en: One more scenario where MongoLab doesn't work is when you want the instances
    to be running on your own instance of a virtual machine rather than one chosen
    by MongoLab or we want the application to be in a virtual private cloud. Cloud
    providers do provide services such as Amazon VPC, where part of the AWS cloud
    can be treated as a part of your network. If you intend to deploy your MongoDB
    instance in such an environment, MongoLab cannot be used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种情况是MongoLab无法使用的，那就是当您希望实例在您自己的虚拟机实例上运行，而不是由MongoLab选择的实例，或者当我们希望应用程序在虚拟专用云中。云提供商确实提供诸如Amazon
    VPC之类的服务，其中AWS云的一部分可以被视为您网络的一部分。如果您打算在这样的环境中部署MongoDB实例，那么MongoLab将无法使用。
- en: Setting up MongoDB on Amazon EC2 manually
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Amazon EC2上手动设置MongoDB
- en: In the previous few recipes, we saw how to start MongoDB in the cloud using
    a hosted service provided by MongoLab that gave an alternative to set up MongoDB
    on all the leading cloud vendors. However, if we plan to host and monitor the
    instance ourselves for greater control or set up within our own virtual private
    cloud, we can do it ourselves. Though the procedure varies from cloud provider
    to provider, we will be demonstrating it using AWS. There are a couple of ways
    to do it, but in this recipe, we will use **Amazon Machine Image** (**AMI**).
    AMI is a template containing details such as the operating system, software that
    would be available on the started virtual machine, and so on. All this information
    would be used while booting up a new virtual machine instance on the cloud. To
    know more about AMI, refer to [http://en.wikipedia.org/wiki/Amazon_Machine_Image](http://en.wikipedia.org/wiki/Amazon_Machine_Image).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的几个配方中，我们看到了如何使用MongoLab提供的托管服务在云中启动MongoDB，该服务为我们提供了在所有主要云供应商上设置MongoDB的替代方案。但是，如果我们计划自己托管和监控实例以获得更大的控制权，或者在我们自己的虚拟私有云中设置，我们可以自己做。虽然各个云供应商的流程有所不同，但我们将使用AWS进行演示。有几种方法可以做到这一点，但在这个配方中，我们将使用**Amazon
    Machine Image**（**AMI**）。AMI是一个模板，包含了启动云上新虚拟机实例时将使用的操作系统、软件等详细信息。要了解更多关于AMI的信息，请参考[http://en.wikipedia.org/wiki/Amazon_Machine_Image](http://en.wikipedia.org/wiki/Amazon_Machine_Image)。
- en: Talking about AWS EC2, which stands for Elastic Cloud Compute, it is a service
    that lets you create, start, and stop servers of different configurations in the
    cloud running on operating systems of your choice. (The prices differ accordingly.)
    Similarly, Amazon **Elastic Block Store** (**EBS**) is a service that provides
    persistent block storage with high availability and low latency. Initially, each
    instance has a store known as an ephemeral store attached to it. This is a temporary
    store and the data might be lost when the instance restarts. The EBS block storage
    is thus attached to the EC2 instance to maintain persistence even when the instance
    is stopped and then restarted. Standard EBS does not provide guaranteed minimum
    **IO operations per second** (**IOPS**). For a moderate workload, the default
    of about 100 IOPS is okay. However, for a high performance IO, EBS blocks with
    guaranteed IOPS are also available. The pricing is more as compared to the standard
    EBS block but is a good option to opt for if a low IO rate can be a bottleneck
    in the performance of the system.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到AWS EC2，它代表弹性云计算，是一个让您在云中创建、启动和停止不同配置的服务器的服务，运行您选择的操作系统。（价格也相应不同。）同样，亚马逊**弹性块存储**（**EBS**）是一个提供高可用性和低延迟的持久块存储的服务。初始时，每个实例都附有一个称为临时存储的存储。这是一个临时存储，当实例重新启动时，数据可能会丢失。因此，EBS块存储被附加到EC2实例上，以保持持久性，即使实例停止然后重新启动。标准EBS不提供每秒保证的最小**IO操作**（**IOPS**）。对于中等工作负载，大约100
    IOPS的默认值是可以的。但是，对于高性能IO，也可以使用具有保证IOPS的EBS块。与标准EBS块相比，价格更高，但如果低IO速率可能成为系统性能瓶颈的话，这是一个不错的选择。
- en: In this recipe, we will set up a small micro instance that is good enough as
    a sandbox instance with one EBS block volume attached.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将设置一个小型微实例，作为一个足够好的沙盒实例，并附加一个EBS块卷。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The first thing that you need to do is sign up for an AWS account. Visit [http://aws.amazon.com/](http://aws.amazon.com/)
    and click on **Sign up**. Log in if you have an Amazon account, or else, create
    a new one. You will have to give your credit card details although the recipes
    that we have here will use the free micro instance unless we explicitly mention
    otherwise. We will connect to the instance on the cloud using Putty. You can download
    Putty and install it on your machine if it is not already installed. It can be
    downloaded from [http://www.putty.org/](http://www.putty.org/).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要做的是注册一个AWS账户。访问[http://aws.amazon.com/](http://aws.amazon.com/)，然后点击**注册**。如果您有亚马逊账户，请登录，否则，请创建一个新账户。尽管我们这里使用的配方将使用免费的微实例，但您仍需要提供信用卡信息，除非我们另有明确说明。我们将使用Putty连接到云上的实例。如果您的机器上尚未安装Putty，可以下载并安装。下载地址为[http://www.putty.org/](http://www.putty.org/)。
- en: For this specific recipe for the installation using AMI, we cannot use the micro
    instance and will have to use the Standard Large. You can get more details about
    the pricing of the EC2 instances in different regions at [https://aws.amazon.com/ec2/pricing/](https://aws.amazon.com/ec2/pricing/).
    Choose the appropriate region based on the geographical and financial factors.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用AMI进行安装的特定配方，我们不能使用微实例，而必须使用标准大型实例。您可以在[https://aws.amazon.com/ec2/pricing/](https://aws.amazon.com/ec2/pricing/)上获取不同地区EC2实例定价的更多详细信息。根据地理和财务因素选择适当的地区。
- en: The first thing that you need to do is create a key pair in case you have not
    created one already. The following steps from 1 to 5 are only to create the key
    pair. This key pair will be used to log in to the Unix instance started in the
    cloud from the Putty client. Skip to step 6 if the key pair has already been created
    and the `.pem` file is available for you.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要做的是创建一个密钥对，以防您尚未创建。从1到5的以下步骤仅用于创建密钥对。此密钥对将用于从Putty客户端登录到云中启动的Unix实例。如果密钥对已经创建并且`.pem`文件对您可用，请跳到第6步。
- en: Go to [https://console.aws.amazon.com/ec2/](https://console.aws.amazon.com/ec2/)
    and make sure that the region you have on the top right (as shown in the following
    image) is the same as the one in which you are planning to set up the instance.![Getting
    ready](img/B04831_07_15.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://console.aws.amazon.com/ec2/](https://console.aws.amazon.com/ec2/)，确保右上角显示的地区（如下图所示）与您计划设置实例的地区相同。![准备工作](img/B04831_07_15.jpg)
- en: Once the region is selected, the page with the **Resources** heading will show
    you all the instances, key pairs, IP addresses, and so on for this region. Click
    on the **Key Pairs** link, which should direct you to the page where all the existing
    key pairs will be shown and you can create new ones.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择区域后，**资源**标题的页面将显示该区域的所有实例、密钥对、IP地址等。单击**密钥对**链接，这将引导您到显示所有现有密钥对并且您可以创建新密钥对的页面。
- en: Click on the **Create Key Pair** button, and in the pop-up window, type any
    name of your choice. Let's say that we call it `EC2 Test Key Pair`, and then click
    on **Create**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**创建密钥对**按钮，在弹出窗口中输入您选择的任何名称。假设我们称之为`EC2测试密钥对`，然后单击**创建**。
- en: Once created, a `.pem` file will be generated. Ensure that the file is saved
    as this would be needed for subsequent access to the machine.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建后，将生成一个`.pem`文件。确保保存该文件，因为随后需要访问该机器。
- en: We will next convert this `.pem` file to a `.ppk` file to be used with Putty.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把这个`.pem`文件转换为一个`.ppk`文件，以便与Putty一起使用。
- en: Start puttygen; if it is not available already, it can be downloaded from [http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开puttygen；如果尚未提供，可以从[http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html)下载。
- en: 'You should see the following on the screen:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在屏幕上看到以下内容：
- en: '![Getting ready](img/B04831_07_16.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/B04831_07_16.jpg)'
- en: Select the **SSH-2 RSA** option and click on the **Load** button. In the file
    dialog, select **All files** and then select the `.pem` file that was downloaded
    with the key pair, which was generated in the EC2 console.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**SSH-2 RSA**选项，然后单击**加载**按钮。在文件对话框中，选择**所有文件**，然后选择与在EC2控制台中生成的密钥对一起下载的`.pem`文件。
- en: Once the `.pem` file is imported, click the **Save private key** option and
    save the file with any name; the file this time is a `.ppk` file. Save this file
    for future logging in to the EC2 instance from putty.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦导入了`.pem`文件，单击**保存私钥**选项，并使用任何名称保存文件；这次文件是`.ppk`文件。将此文件保存以便将来从putty登录到EC2实例。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Mac OS X or Linux, you can use the `ssh-keygen` utility to
    generate the SSH keys.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Mac OS X或Linux，可以使用`ssh-keygen`实用程序生成SSH密钥。
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Go to [https://console.aws.amazon.com/ec2/](https://console.aws.amazon.com/ec2/)
    and click on the **Instances** option on the left and then the **Launch Instance**
    button:![How to do it…](img/B04831_07_21.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://console.aws.amazon.com/ec2/](https://console.aws.amazon.com/ec2/)，然后单击左侧的**实例**选项，然后单击**启动实例**按钮：![如何操作…](img/B04831_07_21.jpg)
- en: As we want to start a free micro instance, check the **Free tier only** checkbox
    on the left. On the right-hand side, select the instance that we want to set up.
    We choose to use the **Ubuntu server**. Click on **Select** to navigate to the
    next window.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们想要启动一个免费的微实例，在左侧勾选**仅限免费套餐**复选框。在右侧，选择我们想要设置的实例。我们选择使用**Ubuntu服务器**。单击**选择**以导航到下一个窗口。
- en: Choose the micro instance and click on **Review and Launch**. Ignore the security
    warning; the default security group that you will have is the one that will accept
    connections over port 22 from all the hosts on a public network.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择微实例，然后单击**审阅和启动**。忽略安全警告；您将拥有的默认安全组将接受来自公共网络上所有主机的端口22的连接。
- en: Without editing any default settings, click on **Launch**. Upon launch, a popup
    will appear that lets you choose an existing key pair. If you proceed without
    a key pair, you will need the password or need to create a new key pair. In the
    previous recipe, we already created a key pair, which is what we will use here.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不更改任何默认设置，单击**启动**。启动后，将弹出一个窗口，让您选择现有的密钥对。如果您继续没有密钥对，您将需要密码或需要创建一个新的密钥对。在上一篇文章中，我们已经创建了一个密钥对，这就是我们将在这里使用的内容。
- en: Click on **Launch Instance** to start the new micro instance.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**启动实例**以启动新的微实例。
- en: Refer to steps 9 to 12 in the previous recipe on how to connect to the started
    instance using Putty. Note that we will be using the Ubuntu user instead of `ec2-user`,
    which we used in the last recipe, as this time, we are using Ubuntu instead of
    Amazon Linux.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考上一篇文章中第9至12步，了解如何使用Putty连接到已启动的实例。请注意，这次我们将使用Ubuntu用户，而不是上一篇文章中使用的`ec2-user`，因为这次我们使用的是Ubuntu而不是Amazon
    Linux。
- en: 'Before we add a MongoDB repository, we need to import the MongoDB public key
    as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加MongoDB存储库之前，我们需要按照以下步骤导入MongoDB公钥：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Execute the following command in the operating system shell:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作系统shell中执行以下命令：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Load the local database by executing the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令加载本地数据库：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Execute the following command to create the required directories:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以创建所需的目录：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start the `mongod` process as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤启动`mongod`进程：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To ensure that the server process is up and running, execute the following
    command in the shell and we should see the following in the log:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保服务器进程正在运行，执行以下命令，并且我们应该在日志中看到以下内容：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the mongo shell as follows and execute the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤启动mongo shell并执行以下命令：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: A lot of steps are self-explanatory. It is recommended that you at least go
    through the previous recipe as a lot of concepts are explained there. Most concepts
    explained in the preceding recipe apply here. A few things that are different
    are explained in this section. For the installation, we chose Ubuntu as against
    Amazon Linux, which is the standard when you set up the server using AMI. Different
    operating systems have different steps for installation. Refer to [http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)
    for steps on how to install MongoDB on different platforms. Steps 7 to 9 in this
    recipe are specific for the installation of MongoDB on Ubuntu. Refer to [https://help.ubuntu.com/12.04/serverguide/apt-get.html](https://help.ubuntu.com/12.04/serverguide/apt-get.html)
    for more details on the `apt-get` command that we executed here to install MongoDB.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 许多步骤都是不言自明的。建议您至少阅读前一篇文章，因为那里解释了许多概念。在前一篇文章中解释的大多数概念也适用于这里。这一节中解释了一些不同的地方。对于安装，我们选择了Ubuntu，而不是使用AMI设置服务器时的标准Amazon
    Linux。不同的操作系统在安装方面有不同的步骤。请参阅[http://docs.mongodb.org/manual/installation/](http://docs.mongodb.org/manual/installation/)，了解如何在不同平台上安装MongoDB的步骤。本文中步骤7至9是特定于在Ubuntu上安装MongoDB的。请参阅[https://help.ubuntu.com/12.04/serverguide/apt-get.html](https://help.ubuntu.com/12.04/serverguide/apt-get.html)，了解我们在这里执行的`apt-get`命令的更多细节，以安装MongoDB。
- en: In our case, we chose to have the data, journal, and log folder on the same
    EBS volume. This is because what we set up is a `dev` instance. In case of a `prod`
    instance, there are different EBS volumes with provisioned IOPS for optimum performance.
    This setup allows us to gain advantage of the fact that these different volumes
    have different controllers and thus concurrent write operations are possible.
    EBS volumes with provisioned volumes are backed by the SSD drives. The production
    deployment notes at [http://docs.mongodb.org/manual/administration/production-notes/](http://docs.mongodb.org/manual/administration/production-notes/)
    states that MongoDB deployment should be backed by the RAID-10 disks. When deploying
    on AWS, prefer PIOPS over RAID-10\. For instance, if 4000 IOPS is desired, then
    choose an EBS volume with 4000 IOPS rather than a RAID-10 setup with a 2 X 2000
    IOPS or 4 X 1000 IOPS setup. This not only eliminates unnecessary complexity,
    but also makes snapshotting a single disk possible as against dealing with multiple
    disks in a RAID-10 setup. Speaking of snapshotting, the journal log and data are
    written to separate volumes in majority of the production deployments. This is
    the scenario where snapshotting doesn't work. We need to flush the DB writes,
    lock the data for further writes until the backup is complete, and then release
    the lock. Refer to [http://docs.mongodb.org/manual/tutorial/backup-with-filesystem-snapshots/](http://docs.mongodb.org/manual/tutorial/backup-with-filesystem-snapshots/)
    for more details on snapshottiing and backups.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们选择将数据、日志和日志文件夹放在同一个EBS卷上。这是因为我们设置的是一个`dev`实例。在`prod`实例的情况下，有不同的EBS卷，为了最佳性能，有预留的IOPS。这种设置使我们能够利用这样一个事实，即这些不同的卷有不同的控制器，因此可以进行并发写操作。预留IOPS的EBS卷由SSD驱动器支持。[http://docs.mongodb.org/manual/administration/production-notes/](http://docs.mongodb.org/manual/administration/production-notes/)上的生产部署说明指出，MongoDB部署应该由RAID-10磁盘支持。在AWS上部署时，优先选择PIOPS而不是RAID-10。例如，如果需要4000
    IOPS，则选择具有4000 IOPS的EBS卷，而不是具有2 X 2000 IOPS或4 X 1000 IOPS设置的RAID-10设置。这不仅消除了不必要的复杂性，而且使得可以对单个磁盘进行快照，而不是处理RAID-10设置中的多个磁盘。谈到快照，大多数生产部署中的日志和数据是写入到不同的卷中的。这是快照无法工作的情况。我们需要刷新DB写入，锁定数据以进行进一步的写入，直到备份完成，然后释放锁定。有关快照和备份的更多详细信息，请参阅[http://docs.mongodb.org/manual/tutorial/backup-with-filesystem-snapshots/](http://docs.mongodb.org/manual/tutorial/backup-with-filesystem-snapshots/)。
- en: Refer to [http://docs.mongodb.org/ecosystem/platforms/](http://docs.mongodb.org/ecosystem/platforms/)
    for more details on deployment on different cloud providers. There is a section
    specifically for backups on the Amazon EC2 instances. Prefer using AMIs to set
    up the MongoDB instances for production deployments as demonstrated in the previous
    recipe over manually setting up the instances. A manual setup is okay for small
    development purposes, where a large instance with EBS volumes with provisioned
    IOPS is an overkill.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[http://docs.mongodb.org/ecosystem/platforms/](http://docs.mongodb.org/ecosystem/platforms/)，了解在不同云提供商上部署的更多详细信息。有一个专门针对Amazon
    EC2实例备份的部分。在生产部署中，最好使用AMI来设置MongoDB实例，就像在前一篇文章中演示的那样，而不是手动设置实例。手动设置适用于小型开发目的，而具有预留IOPS的EBS卷的大型实例则过于复杂。
- en: See also
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Cloud formation is a way where you can define templates and automate your instance
    creation for the EC2 instances. You can know more what cloud formation is at [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)
    and refer to [https://mongodb-documentation.readthedocs.org/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html](https://mongodb-documentation.readthedocs.org/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html).
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云形成是一种可以定义模板并自动化EC2实例创建的方式。您可以在[https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)了解更多云形成是什么，并参考[https://mongodb-documentation.readthedocs.org/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html](https://mongodb-documentation.readthedocs.org/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html)。
- en: 'Another alternative is using Mongo''s cloud service: [https://docs.cloud.mongodb.com/tutorial/nav/add-servers-through-aws-integration/](https://docs.cloud.mongodb.com/tutorial/nav/add-servers-through-aws-integration/).'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种选择是使用Mongo的云服务：[https://docs.cloud.mongodb.com/tutorial/nav/add-servers-through-aws-integration/](https://docs.cloud.mongodb.com/tutorial/nav/add-servers-through-aws-integration/)。
- en: 'You can know more on RAID by referring to these two URLs on Wikipedia: [http://en.wikipedia.org/wiki/Standard_RAID_levels](http://en.wikipedia.org/wiki/Standard_RAID_levels)
    and [http://en.wikipedia.org/wiki/Nested_RAID_levels](http://en.wikipedia.org/wiki/Nested_RAID_levels).
    The description given here is quite comprehensive.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过参考维基百科上的这两个URL了解有关RAID的更多信息：[http://en.wikipedia.org/wiki/Standard_RAID_levels](http://en.wikipedia.org/wiki/Standard_RAID_levels)和[http://en.wikipedia.org/wiki/Nested_RAID_levels](http://en.wikipedia.org/wiki/Nested_RAID_levels)。这里给出的描述非常全面。
- en: Setting up MongoDB using the Docker containers
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker容器设置MongoDB
- en: The container movement, as I like to call it, has touched almost all the aspects
    of information technology. Docker, being the tool of choice, is integral to the
    creating and managing of containers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 容器移动，我喜欢称之为，已经触及了信息技术的几乎所有方面。作为首选工具的Docker对于创建和管理容器至关重要。
- en: In this recipe, we will install Docker on the Ubuntu (14.04) server and run
    MongoDB in a container.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将在Ubuntu（14.04）服务器上安装Docker并在容器中运行MongoDB。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, we need to install Docker on our Ubuntu server, which can be done by
    running this command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的Ubuntu服务器上安装Docker，可以通过运行此命令来完成：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Start the Docker service:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Docker服务：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Confirm that Docker is running as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认Docker是否正在运行如下：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch the default MongoDB image from Docker Hub as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Docker Hub获取默认的MongoDB图像如下：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s confirm that the images are installed with the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们确认图像是否已安装以下命令：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Start the MongoDB server:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MongoDB服务器：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Alternately, you can also run the `docker ps` command to check the list of running
    containers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以运行`docker ps`命令来检查正在运行的容器列表。
- en: 'Fetch the IP of this container:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取此容器的IP：
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Connect to our new container using the mongo client:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用mongo客户端连接到我们的新容器：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a directory on the server:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器上创建一个目录：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start a new MongoDB container:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个新的MongoDB容器：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Fetch the IP of this new container as mentioned in Step 4, and connect using
    the Mongo client:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取此新容器的IP，如第4步所述，并使用Mongo客户端进行连接：
- en: '[PRE24]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s make another directory for our final container:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的最终容器创建另一个目录：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Start a new MongoDB container:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个新的MongoDB容器：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s connect to this container via localhost:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过localhost连接到这个容器：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We start by downloading the default MongoDB image from DockerHub ([https://hub.docker.com/_/mongo/](https://hub.docker.com/_/mongo/)).
    A Docker image is a self-sustaining OS image that is customized for the application
    that it is supposed to run. All Docker containers are isolated executions of these
    images. This is very similar to how an OS template is used to create virtual machines.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从DockerHub（[https://hub.docker.com/_/mongo/](https://hub.docker.com/_/mongo/)）下载默认的MongoDB图像。Docker图像是为其应用程序定制的自持续OS图像。所有Docker容器都是这些图像的隔离执行。这与使用OS模板创建虚拟机非常相似。
- en: The image download operation defaults to fetching the latest stable MongoDB
    image, but you can specify your version of choice by mentioning the tag, for example,
    `docker pull mongo:2.8`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图像下载操作默认为获取最新的稳定的MongoDB图像，但您可以通过提及标签来指定您选择的版本，例如`docker pull mongo:2.8`。
- en: We verify that the image was downloaded by running the `docker images` command,
    which will list all the images installed on the server. In step 3, we start a
    container in the detached (`-d`) mode with the name, `mongo-server-1`, using our
    mongo image. Describing the container internals may be out of the scope of this
    cookbook, but, in short, we now have an isolated `docker pseudo-sever` running
    inside our Ubuntu machine.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过运行`docker images`命令来验证图像是否已下载，该命令将列出服务器上安装的所有图像。在第3步，我们使用名称`mongo-server-1`在分离（-d）模式下启动容器，使用我们的mongo图像。描述容器内部可能超出了本教程的范围，但简而言之，我们现在在我们的Ubuntu机器内部运行一个隔离的`docker伪服务器`。
- en: By default, each Docker container gets an RFC 1918 (non-routable) IP address
    space assigned by the docker server. In order to connect to this container, we
    fetch the IP address in step 4 and connect to the `mongodb` instance in step 5.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个Docker容器都会被docker服务器分配一个RFC 1918（不可路由）的IP地址空间。为了连接到这个容器，我们在第4步获取IP地址，并在第5步连接到`mongodb`实例。
- en: However, each Docker container is ephemeral and hence, destroying the container
    would mean losing the data. In step 6, we create a local directory that can be
    used to store our mongo database. We start a new container in step 7; it is similar
    to our earlier command with the addition of the Volumes (`-v`) switch. In our
    example, we are exposing the `/data/db2` directory to the mongo container namespace
    as `/data/db`. This is similar to NFS-like file mounting but within the confines
    of the kernel namespace.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，每个Docker容器都是短暂的，因此销毁容器意味着丢失数据。在第6步，我们创建一个本地目录，用于存储我们的mongo数据库。在第7步中启动一个新的容器；它类似于我们之前的命令，但增加了Volumes（-v）开关。在我们的示例中，我们将`/data/db2`目录暴露给mongo容器命名空间作为`/data/db`。这类似于NFS样的文件挂载，但在内核命名空间的限制内。
- en: Finally, if we want external systems to connect to this container, we bind the
    container's ports to that of the host machine. In step 9, we use the Port (-p)
    switch to bind the TCP `9999` port on the Ubuntu server to TCP `27017` of this
    container. This ensures that any external systems connecting to the server's port
    `9999` will be routed to this particular container.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们希望外部系统连接到此容器，我们将容器的端口绑定到主机的端口。在第9步，我们使用端口（-p）开关将Ubuntu服务器上的TCP `9999`端口绑定到此容器的TCP
    `27017`端口。这确保任何连接到服务器端口`9999`的外部系统将被路由到这个特定的容器。
- en: See also
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can also try to link two containers using the Link (`-l`) command line parameter
    of the docker command.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以尝试使用docker命令的Link（-l）命令行参数链接两个容器。
- en: For more information visit [http://docs.docker.com/userguide/dockerlinks/](http://docs.docker.com/userguide/dockerlinks/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请访问[http://docs.docker.com/userguide/dockerlinks/](http://docs.docker.com/userguide/dockerlinks/)。
