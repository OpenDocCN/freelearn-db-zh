["```go\n    $ javac \u2013version\n\n    ```", "```go\n    $ sudo apt-get install default-jdk\n\n    ```", "```go\n    $ tar \u2013xvzf <name of the downloaded .tar.gz file>\n    $ cd <extracted directory>\n\n    ```", "```go\n    $git clone https://github.com/mongodb/mongo-hadoop.git\n    $cd mongo-hadoop \n\n    ```", "```go\n    $ln \u2013s <hadoop installation directory> ~/hadoop-binaries\n\n    ```", "```go\n    $ln \u2013s ~/hadoop-2.4.0 ~/hadoop-binaries\n\n    ```", "```go\n    $./gradlew jar \u2013Phadoop_version='2.4'\n\n    ```", "```go\n    $ mongoimport -c yield_historical.in -d mongo_hadoop --drop examples/treasury_yield/src/main/resources/yield_historical_in.json\n\n    ```", "```go\n    $ wget http://repo1.maven.org/maven2/org/mongodb/mongo-java-driver/2.12.0/mongo-java-driver-2.12.0.jar\n    $ cp core/build/libs/mongo-hadoop-core-1.2.1-SNAPSHOT-hadoop_2.4.jar ~/hadoop-binaries/hadoop-2.4.0/lib/\n    $ mv mongo-java-driver-2.12.0.jar ~/hadoop-binaries/hadoop-2.4.0/lib\n\n    ```", "```go\n     ~/hadoop-binaries/hadoop-2.4.0/bin/hadoop     jar     examples/treasury_yield/build/libs/treasury_yield-1.2.1-SNAPSHOT-hadoop_2.4.jar  \\com.mongodb.hadoop.examples.treasury.TreasuryYieldXMLConfig  \\-Dmongo.input.split_size=8     -Dmongo.job.verbose=true  \\-Dmongo.input.uri=mongodb://localhost:27017/mongo_hadoop.yield_historical.in  \\-Dmongo.output.uri=mongodb://localhost:27017/mongo_hadoop.yield_historical.out\n\n    ```", "```go\n     14/05/11 21:38:54 INFO mapreduce.Job: Job job_local1226390512_0001 completed successfully\n\n    ```", "```go\n    $ mongo\n    > use mongo_hadoop\n    switched to db mongo_hadoop\n    > db.yield_historical.out.find()\n\n    ```", "```go\n<configuration>\n  <property>\n    <name>{property name}</name> \n    <value>{property value}</value>\n  </property>\n  ...\n</configuration>\n```", "```go\npublic class TreasuryYieldMapper\n    extends Mapper<Object, BSONObject, IntWritable, DoubleWritable> {\n\n    @Override\n    public void map(final Object pKey,\n                    final BSONObject pValue,\n                    final Context pContext)\n        throws IOException, InterruptedException {\n        final int year = ((Date) pValue.get(\"_id\")).getYear() + 1900;\n        double bid10Year = ((Number) pValue.get(\"bc10Year\")).doubleValue();\n        pContext.write(new IntWritable(year), new DoubleWritable(bid10Year));\n    }\n}\n```", "```go\npublic class TreasuryYieldReducer extends Reducer<IntWritable, DoubleWritable, IntWritable, BSONWritable> {\n\n    @Override\n    public void reduce(final IntWritable pKey, final Iterable<DoubleWritable> pValues, final Context pContext)throws IOException, InterruptedException {\n      int count = 0;\n      double sum = 0;\n      for (final DoubleWritable value : pValues) {\n        sum += value.get();\n        count++;\n      }\n      final double avg = sum / count;\n      BasicBSONObject output = new BasicBSONObject();\n      output.put(\"count\", count);\n      output.put(\"avg\", avg);\n      output.put(\"sum\", sum);\n      pContext.write(pKey, new BSONWritable(output));\n    }\n}\n```", "```go\n$ sudo apt-get install maven\n\n```", "```go\n    $ mvn clean package\n\n    ```", "```go\n    ~/hadoop-binaries/hadoop-2.4.0/bin/hadoop \\\n     jar target/mongo-hadoop-mapreduce-test-1.0.jar \\\n     com.packtpub.mongo.cookbook.TopStateMapReduceEntrypoint \\\n     -Dmongo.input.split_size=8 \\\n    -Dmongo.job.verbose=true \\\n    -Dmongo.input.uri=mongodb://localhost:27017/test.postalCodes \\\n    -Dmongo.output.uri=mongodb://localhost:27017/test.postalCodesHadoopmrOut\n\n    ```", "```go\n    $ mongo\n    > db.postalCodesHadoopmrOut.find().sort({count:-1}).limit(5)\n\n    ```", "```go\ncontext.write(new Text((String)value.get(\"state\")), new IntWritable(1));\n```", "```go\nint sum = 0;\nfor(IntWritable value : values) {\n  sum += value.get();\n}\nBSONObject object = new BasicBSONObject();\nobject.put(\"count\", sum);\ncontext.write(text, new BSONWritable(object));\n```", "```go\n> db. postalCodesHadoopmrOut.find().sort({count:-1}).limit(5)\n{ \"_id\" : \"Maharashtra\", \"count\" : 6446 }\n{ \"_id\" : \"Kerala\", \"count\" : 4684 }\n{ \"_id\" : \"Tamil Nadu\", \"count\" : 3784 }\n{ \"_id\" : \"Andhra Pradesh\", \"count\" : 3550 }\n{ \"_id\" : \"Karnataka\", \"count\" : 3204 }\n\n```", "```go\nConfiguration conf = new Configuration();\nMongoConfig config = new MongoConfig(conf);\nconfig.setInputFormat(MongoInputFormat.class);\nconfig.setMapperOutputKey(Text.class);\nconfig.setMapperOutputValue(IntWritable.class);\nconfig.setMapper(TopStatesMapper.class);\nconfig.setOutputFormat(MongoOutputFormat.class);\nconfig.setOutputKey(Text.class);\nconfig.setOutputValue(BSONWritable.class);\nconfig.setReducer(TopStateReducer.class);\nToolRunner.run(conf, new TopStateMapReduceEntrypoint(), args);\n```", "```go\n    $ cd streaming/language_support/python\n    $ sudo python setup.py install\n\n    ```", "```go\n    $ sudo pip install pymongo_hadoop\n\n    ```", "```go\n    #!/usr/bin/env python\n\n    import sys\n    from pymongo_hadoop import BSONMapper\n    def mapper(documents):\n      print >> sys.stderr, 'Starting mapper'\n      for doc in documents:\n        yield {'_id' : doc['state'], 'count' : 1}\n      print >> sys.stderr, 'Mapper completed'\n\n    BSONMapper(mapper)\n    ```", "```go\n    #!/usr/bin/env python\n\n    import sys\n    from pymongo_hadoop import BSONReducer\n    def reducer(key, documents):\n      print >> sys.stderr, 'Invoked reducer for key \"', key, '\"'\n      count = 0\n      for doc in documents:\n        count += 1\n      return {'_id' : key, 'count' : count}\n\n    BSONReducer(reducer)\n    ```", "```go\n    $HADOOP_HOME/bin/hadoop jar \\\n    $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming* \\\n    -libjars $HADOOP_CONNECTOR_HOME/streaming/build/libs/mongo-hadoop-streaming-1.2.1-SNAPSHOT-hadoop_2.4.jar \\\n    -input /tmp/in \\\n    -output /tmp/out \\\n    -inputformat com.mongodb.hadoop.mapred.MongoInputFormat \\\n    -outputformat com.mongodb.hadoop.mapred.MongoOutputFormat \\\n    -io mongodb \\\n    -jobconf mongo.input.uri=mongodb://127.0.0.1:27017/test.postalCodes \\\n    -jobconf mongo.output.uri=mongodb://127.0.0.1:27017/test.pyMRStreamTest \\\n    -jobconf stream.io.identifier.resolver.class=com.mongodb.hadoop.streaming.io.MongoIdentifierResolver \\\n    -mapper mapper.py \\\n    -reducer reducer.py\n\n    ```", "```go\n    $ mongo\n    > db.pyMRStreamTest.find().sort({count:-1}).limit(5)\n\n    ```", "```go\n    $ mongorestore part-r-00000.bson -d test -c mongoEMRResults\n\n    ```", "```go\n    > db.mongoEMRResults.find().sort({count:-1}).limit(5)\n\n    ```", "```go\n    { \"_id\" : \"Maharashtra\", \"count\" : 6446 }\n    { \"_id\" : \"Kerala\", \"count\" : 4684 }\n    { \"_id\" : \"Tamil Nadu\", \"count\" : 3784 }\n    { \"_id\" : \"Andhra Pradesh\", \"count\" : 3550 }\n    { \"_id\" : \"Karnataka\", \"count\" : 3204 }\n\n    ```"]