["```go\nmvn compile exec:java -Dexec.mainClass=com.packtpub.mongo.cookbook.FirstMongoClient\n\n```", "```go\n    cfg = {\n     _id:'repSetTest',\n     members:[\n     {_id:0, host:'localhost:27000'},\n     {_id:1, host:'localhost:27001'},\n     {_id:2, host:'localhost:27002', slaveDelay:5, priority:0}\n     ]\n    }\n\n    ```", "```go\n    mvn compile exec:java -Dexec.mainClass=com.packtpub.mongo.cookbook.WriteConcernTests\n\n    ```", "```go\n[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ mongo-cookbook-wctest ---\nTrying to connect to server running on port 20000\nTrying to write data in the collection with write concern {w:-1}\nError returned in the WriteResult is NETWORK ERROR\nTrying to write data in the collection with write concern {w:0}\nCaught MongoException.Network trying to write to collection, message is Write operation to server localhost/127.0.0.1:20000 failed on database test\nConnected to replica set with one node listening on port 27000 locally\n\nInserting duplicate keys with {w:0}\nNo exception caught while inserting data with duplicate _id\nNow inserting the same data with {w:1}\nCaught Duplicate Exception, exception message is { \"serverUsed\" : \"localhost/127.0.0.1:27000\" , \"err\" : \"E11000 duplicate key error index: test.writeConcernTest.$_id_  dup key: { : \\\"a\\\" }\" , \"code\" : 11000 , \"n\" : 0 , \"lastOp\" : { \"$ts\" :1386009990 , \"$inc\" : 2} , \"connectionId\" : 157 , \"ok\" : 1.0}\nAverage running time with WriteConcern {w:1, fsync:false, j:false} is 0 ms\nAverage running time with WriteConcern {w:2, fsync:false, j:false} is 12 ms\nAverage running time with WriteConcern {w:1, fsync:false, j:true} is 40 ms\nAverage running time with WriteConcern {w:1, fsync:true, j:false} is 44 ms\nAverage running time with WriteConcern {w:3, fsync:false, j:false} is 5128 ms\nCaught WriteConcern exception for {w:5}, with following message { \"serverUsed\" : \"localhost/127.0.0.1:27000\" , \"n\" : 0 , \"lastOp\" : { \"$ts\" : 1386009991 , \"$inc\" : 18} , \"connectionId\" : 157 , \"wtimeout\" : true , \"waited\" : 1004 , \"writtenTo\" : [ { \"_id\" : 0 , \"host\" : \"localhost:27000\"} , { \"_id\" : 1 , \"host\" : \"localhost:27001\"}] , \"err\" : \"timeout\" , \"ok\" : 1.0}\n [INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 36.671s\n[INFO] Finished at: Tue Dec 03 00:16:57 IST 2013\n[INFO] Final Memory: 13M/33M\n[INFO] ------------------------------------------------------------------------\n\n```", "```go\n{ \"serverUsed\" : \"localhost/127.0.0.1:27000\" , \"n\" : 0 , \"lastOp\" : { \"$ts\" : 1386015030 , \"$inc\" : 1} , \"connectionId\" : 507 , \"wtimeout\" : true , \"waited\" : 1000 , \"writtenTo\" : [ { \"_id\" : 0 , \"host\" : \"localhost:27000\"} , { \"_id\" : 1 , \"host\" : \"localhost:27001\"}] , \"err\" : \"timeout\" , \"ok\" : 1.0}\n\n```", "```go\n@Override\nReplicaSetStatus.ReplicaSetNode getNode(ReplicaSetStatus.ReplicaSet set) {\n  if (_tags.isEmpty())\n    return set.getAMember();\n\n  for (DBObject curTagSet : _tags) {\n    List<ReplicaSetStatus.Tag> tagList = getTagListFromDBObject(curTagSet);\n    ReplicaSetStatus.ReplicaSetNode node = set.getAMember(tagList);\n    if (node != null) {\n      return node;\n    }\n  }\n  return null;\n}\n```", "```go\npublic ReplicaSetNode getAMember() {\n  checkStatus();\n  if (acceptableMembers.isEmpty()) {\n    return null;\n  }\n  return acceptableMembers.get(random.nextInt(acceptableMembers.size()));\n}\n```", "```go\nthis.acceptableMembers =Collections.unmodifiableList(calculateGoodMembers(all, calculateBestPingTime(all, true),acceptableLatencyMS, true));\n```", "```go\nslaveAcceptableLatencyMS = Integer.parseInt(System.getProperty(\"com.mongodb.slaveAcceptableLatencyMS\", \"15\"));\n```", "```go\nlong start = System.nanoTime();\nCommandResult res = _port.runCommand(_mongo.getDB(\"admin\"), isMasterCmd);\nlong end = System.nanoTime()\n```"]