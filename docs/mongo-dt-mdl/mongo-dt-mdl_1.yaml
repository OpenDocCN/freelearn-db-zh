- en: Chapter 1. Introducing Data Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍数据建模
- en: Data modeling is a subject that has been discussed for a long time. Hence, various
    authors on the subject might have different views. Not so long ago, when the main
    discussions were focused on relational databases, data modeling was part of the
    process of data discovery and analysis in a domain. It was a holistic vision,
    where the final goal was to have a robust database able to support any kind of
    application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据建模是一个长期讨论的话题。因此，该领域的各种作者可能有不同的观点。不久前，当主要讨论集中在关系数据库上时，数据建模是领域中数据发现和分析过程的一部分。这是一个整体的视野，最终目标是拥有一个能够支持任何类型应用的强大数据库。
- en: Due to the flexibility of NoSQL databases, data modeling has been an inside
    out process, where you need to have previously understood an application's needs
    or performance characteristics to have a good data model at the end.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NoSQL数据库的灵活性，数据建模已经成为一个内部过程，您需要事先了解应用程序的需求或性能特征，才能最终得到一个良好的数据模型。
- en: 'In this chapter, we will provide a brief history of the data modeling process
    over the years, showing you important concepts. We are going to cover the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍多年来数据建模过程的历史，向您展示重要的概念。我们将涵盖以下主题：
- en: The relationship between MongoDB and NoSQL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB和NoSQL的关系
- en: Introducing NoSQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍NoSQL
- en: Database design
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库设计
- en: The relationship between MongoDB and NoSQL
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB和NoSQL的关系
- en: If you search on Google for MongoDB, you will find about 10,900,000 results.
    In a similar manner, if you check Google for NoSQL, no fewer than 13,000,000 results
    will come to you.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Google上搜索MongoDB，你会找到大约10,900,000个结果。同样，如果你在Google上搜索NoSQL，你会得到不少于13,000,000个结果。
- en: 'Now, on Google Trends, a tool that shows how often a term is searched relative
    to all searched terms globally, we can see that the growth of interest in both
    subjects is quite similar:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Google趋势上，这是一个显示一个术语相对于全球所有搜索术语的搜索频率的工具，我们可以看到对这两个主题的兴趣增长是相当相似的：
- en: '![The relationship between MongoDB and NoSQL](img/B04075_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![MongoDB和NoSQL之间的关系](img/B04075_01_01.jpg)'
- en: Google Trends search comparison between NoSQL and MongoDB terms since 2009
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自2009年以来，NoSQL和MongoDB术语的Google趋势搜索比较
- en: But, what actually exists in this relationship, besides the fact that MongoDB
    is a NoSQL database?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，除了MongoDB是一个NoSQL数据库之外，这种关系实际上存在什么？
- en: Since the first open source release in 2009, by a company named 10gen, MongoDB
    was the choice for many players on the Web and accordingly DB-Engines ([http://db-engines.com/en/](http://db-engines.com/en/))
    became the fourth most popular database, and the most popular NoSQL database system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自2009年首次开源发布以来，由一家名为10gen的公司发布，MongoDB成为了Web上许多玩家的选择，因此DB-Engines（[http://db-engines.com/en/](http://db-engines.com/en/)）成为了第四受欢迎的数据库，也是最受欢迎的NoSQL数据库系统。
- en: 10gen converted to MongoDB Inc. on August 27, 2013, showing that all eyes were
    on MongoDB and its ecosystem. The shift to an open source project was crucial
    in this change process. Especially, since the community adoption has been tremendous.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 10gen于2013年8月27日转变为MongoDB Inc.，显示所有人的目光都集中在MongoDB及其生态系统上。向开源项目的转变对这一变化过程至关重要。特别是因为社区的采用量是巨大的。
- en: 'According to Dwight Merriman, the current chairman and co-founder of MongoDB:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据MongoDB的现任主席兼联合创始人Dwight Merriman：
- en: '*"Our open source platform has resulted in MongoDB being downloaded 8 million
    times within the five years since the project has been available—that''s an extremely
    fast pace for community adoption."*'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我们的开源平台导致MongoDB在项目推出后的五年内被下载了800万次，这对于社区采用来说是一个非常快的速度。”
- en: 'Furthermore, MongoDB Inc. launched products and services to support this community
    and enrich the MongoDB ecosystem. Among them are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，MongoDB Inc.推出了产品和服务，以支持这个社区并丰富MongoDB生态系统。其中包括：
- en: '**MongoDB Enterprise**: A commercial support for MongoDB'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB企业**：MongoDB的商业支持'
- en: '**MongoDB Management Service**: A SaaS monitoring tool'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB管理服务**：一种SaaS监控工具'
- en: '**MongoDB University**: An EdX partnership that offers free—yes, it''s free—online
    training'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB大学**：EdX合作伙伴，提供免费的在线培训'
- en: In the same way the NoSQL movement followed the growth of MongoDB, to meet both
    the challenges and opportunities of what might be referred to as Web 2.0, the
    NoSQL movement has grown substantially.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与NoSQL运动一样，MongoDB的发展也遵循了Web 2.0的挑战和机遇，NoSQL运动已经有了很大的发展。
- en: Introducing NoSQL (Not Only SQL)
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍NoSQL（不仅仅是SQL）
- en: Although the concept is new, NoSQL is a highly controversial subject. If you
    search widely, you may find many different explanations. As we do not have any
    intention of creating a new one, let's take a look at the most commonly-used explanation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个概念是新的，但NoSQL是一个备受争议的话题。如果你进行广泛搜索，你可能会找到许多不同的解释。由于我们没有任何意图创造一个新的解释，让我们来看一下最常用的解释。
- en: The term NoSQL, as we know today, was introduced by Eric Evans, after a meet
    up, organized by Johan Oskarsson from Last.fm.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们今天所知的，NoSQL这个术语是由Eric Evans引入的，是在Last.fm的Johan Oskarsson组织的一次见面会后引入的。
- en: Indeed, Oskarsson and everyone else who joined that historical meeting in San
    Francisco, on June 11, 2009, were already discussing many of the databases that
    today we call NoSQL databases, such as Cassandra, HBase, and CouchDB. As Oskarsson
    had described, the meeting was about open source, distributed, non-relational
    databases, for anyone who had "… run into limitations with traditional relational
    databases…," with the aim of "… figuring out why these newfangled Dynamo clones
    and BigTables have become so popular lately."
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Oskarsson和其他参加2009年6月11日在旧金山举行的历史性会议的人已经讨论了许多今天我们称之为NoSQL数据库的数据库，比如Cassandra、HBase和CouchDB。正如Oskarsson所描述的，会议是关于开源、分布式、非关系型数据库的，针对那些“…在传统关系数据库方面遇到了限制…”的人，目的是“…弄清楚为什么这些新潮的Dynamo克隆和BigTables最近变得如此受欢迎。”
- en: Four months later, Evans wrote in his weblog that, besides the growth of the
    NoSQL movement and everything that was being discussed, he thought they were going
    nowhere. However, Emil Eifren, the Neo4J founder and CEO, was right in naming
    the term as "Not Only SQL."
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 四个月后，Evans在他的博客中写道，除了NoSQL运动的增长和正在讨论的一切，他认为它们毫无意义。然而，Neo4J的创始人兼CEO Emil Eifren在将术语命名为“Not
    Only SQL”时是正确的。
- en: '![Introducing NoSQL (Not Only SQL)](img/B04075_01_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![介绍NoSQL（不仅仅是SQL）](img/B04075_01_02.jpg)'
- en: Emil Eifrem post on Twitter introducing the term "Not Only SQL"
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Emil Eifrem在Twitter上发布了介绍术语“Not Only SQL”的帖子
- en: More important than giving a definition to the term NoSQL, all these events
    were a starting point from which to discuss what NoSQL really is. Nowadays, there
    seems to be a general understanding that NoSQL was born as a response to every
    subject that relational databases were not designed to address.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 比起给NoSQL这个术语下一个定义，所有这些事件更重要的是作为讨论NoSQL真正含义的起点。如今，人们似乎普遍认为NoSQL是作为对关系数据库无法解决的问题的回应而诞生的。
- en: Notably, we can now distinguish the problems that information systems must solve
    from the 70's up until today. At that time, monolithic architectures were enough
    to supply demand, unlike what we observe nowadays.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们现在可以区分信息系统从70年代到今天必须解决的问题。那时，单片架构足以满足需求，与我们现在观察到的情况不同。
- en: Have you ever stopped to think how many websites, such as social networks, e-mail
    providers, streaming services, and online games, you already have an account with?
    And, how many devices inside your house are connected to the Internet right now?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有想过你已经在多少网站上拥有账户，比如社交网络、电子邮件提供商、流媒体服务和在线游戏？还有，你家里有多少设备现在连接到互联网？
- en: Do not worry if you cannot answer the preceding questions precisely. You are
    not alone. With each new research project, the number of users with Internet access
    around the globe increases, and the share that represents mobile internet access
    is more significant too.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心如果你不能准确回答上面的问题。你并不孤单。随着每一个新的研究项目，全球范围内拥有互联网访问权限的用户数量增加，移动互联网访问所占的份额也越来越重要。
- en: This means that a large volume of unstructured or semi-structured data is generated
    every second, everywhere. The amount of data cannot be estimated, since the user
    is the main source of information. Thus, it is getting more and more difficult
    to predict when or why this volume will vary. It's just a matter of an unpredictable
    event happening somewhere in the world—such as a goal score, a general strike,
    a mass demonstration, or a plane crash—to have a variation on traffic, and consequently
    a growth of content generated by users.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每一秒都在世界各地产生大量的非结构化或半结构化数据。数据量无法估计，因为用户是信息的主要来源。因此，越来越难以预测这种数据量何时或为何会发生变化。这只是世界上某个地方发生了不可预测的事件，比如进球、大罢工、大规模示威或飞机失事，就会导致交通变化，从而用户生成的内容增加。
- en: In response to this, the development of NoSQL technology brought a variety of
    different approaches.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对此的回应，NoSQL技术的发展带来了各种不同的方法。
- en: NoSQL databases types
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL数据库类型
- en: 'As previously stated, Amazon Inc. and Google are at the forefront of NoSQL
    development with the help of Amazon DynamoDB and Google BigTable. Because of the
    diversity of styles, we have new types of NoSQL databases that are developed all
    the time. However, four basic types, based on data model, are known: key-value
    stores, wide-column stores, document databases, and graph databases, which are
    explained as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所述，亚马逊和谷歌在NoSQL的发展方面处于前沿地位，借助Amazon DynamoDB和Google BigTable。由于风格的多样性，我们不断开发新类型的NoSQL数据库。然而，基于数据模型，已知有四种基本类型：键值存储、宽列存储、文档数据库和图数据库，下面对它们进行了解释：
- en: '**Key-value stores**: The key-value is one of the most simple and straightforward
    data models, where each record is stored as a key together with its value. Examples
    of key-value stores are Amazon Dynamo, Riak, and Redis.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键值存储**：键值是最简单和直接的数据模型之一，每个记录都存储为一个键和它的值。键值存储的例子有Amazon Dynamo、Riak和Redis。'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Redis can be described as an advanced key-value cache and store. Since its keys
    can store many different data types and run atomic operations on these types,
    we may assume Redis to be a data structure server.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Redis可以被描述为一个高级的键值缓存和存储。由于它的键可以存储许多不同的数据类型并对这些类型运行原子操作，我们可以假设Redis是一个数据结构服务器。
- en: '**Wide-column stores**: Conceptually, the closest to relational databases,
    since its data is represented in a table. Nevertheless, the database stores columns
    of data instead of rows. Examples of wide-column stores are Google BigTable, Cassandra,
    and HBase.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽列存储**：在概念上，最接近关系数据库，因为它的数据是以表格形式表示的。然而，数据库存储的是数据列而不是行。宽列存储的例子有Google BigTable、Cassandra和HBase。'
- en: '**Document databases**: As its name suggests, the data model of this database
    has as a main concept, the document. Documents are complex structures that store
    data as key-values, and can contain many key-value pairs, key-array pairs, or
    even nested documents. Examples of document databases are MongoDB, Apache CouchDB,
    and Amazon SimpleDB.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档数据库**：顾名思义，这个数据库的数据模型以文档为主要概念。文档是存储数据的复杂结构，可以包含许多键值对、键数组对，甚至是嵌套文档。文档数据库的例子有MongoDB、Apache
    CouchDB和Amazon SimpleDB。'
- en: '**Graph databases**: Graph databases are the best way to store items of data
    whose relationships are best represented as graphs, such as network topologies
    and social networks. Nodes, edges, and properties are the structure of stored
    data. Examples of graph databases are Neo4J and HyperGraphDB.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图数据库**：图数据库是存储关系最适合表示为图的数据项的最佳方式，比如网络拓扑和社交网络。节点、边和属性是存储数据的结构。图数据库的例子有Neo4J和HyperGraphDB。'
- en: Dynamic schema, scalability, and redundancy
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态模式、可扩展性和冗余
- en: Although, as explained earlier, NoSQL database types are based on different
    data models, they have some common features.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如前所述，NoSQL数据库类型基于不同的数据模型，但它们有一些共同的特点。
- en: In order to support unstructured or semi-structured data, NoSQL databases have
    no predefined schema. The dynamic schema makes real-time changes simpler when
    inserting new data, and more cost-effective when data migration is needed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持非结构化或半结构化数据，NoSQL数据库没有预定义的模式。动态模式使得在插入新数据时更容易进行实时更改，并且在需要数据迁移时更具成本效益。
- en: To handle an unpredictable, large volume of data, NoSQL databases use auto-sharding
    to scale horizontally and ensure continuous availability of data. Auto-sharding
    allows users to automatically spread data and traffic across a number of servers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理不可预测的大量数据，NoSQL数据库使用自动分片进行水平扩展，并确保数据的持续可用性。自动分片允许用户自动将数据和流量分布到多台服务器上。
- en: NoSQL databases also support replication natively, which gives you high availability
    and recovery in a quick and easy way. As we distribute our data more and our recovery
    strategies change, we may fine-tune our consistency levels.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库也支持本地复制，这使得您可以以快速简便的方式实现高可用性和恢复。随着我们分发数据的方式越来越多，我们的恢复策略也在改变，我们可能需要微调我们的一致性级别。
- en: Database design and data modeling
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库设计和数据建模
- en: Before I started to write this chapter (or maybe before beginning to write this
    book) I thought about how to deal with this subject. Firstly, because I would
    guess this was one of your expectations. Secondly, because this is a subject that
    is present in almost every literature, and I do not want to (and do not intend
    to) inflame this discussion.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始写这一章之前（或者也许是在开始写这本书之前），我考虑过如何处理这个主题。首先，因为我猜想这是你的期望之一。其次，因为这是几乎每一本文献中都存在的一个主题，我不想（也不打算）引发这场讨论。
- en: The truth is that the discussion towards the theory versus practice, and until
    now in my life, I have favored the practical side. Therefore, I investigated,
    searched many different sources where I could read more about the subject, and
    maybe bring to this book a summary of everything that has been written until now
    on this subject.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，关于理论与实践的讨论，直到现在，我更倾向于实践方面。因此，我调查了许多不同的来源，希望能够阅读更多关于这个主题的内容，并可能在这本书中总结到目前为止关于这个主题的所有内容。
- en: Much that I have found at the beginning of my research showed me a clear separation
    between database design and data modeling. However, in the end, my conclusion
    was that both concepts have more similarities than divergences. And, to reach
    this conclusion, I had as stating point a fact mentioned by C.J. Date in *An Introduction
    to Database Systems*, *Pearson Education*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我在研究初期发现的许多内容都显示了数据库设计和数据建模之间的明显分离。然而，最终我的结论是，这两个概念之间的相似性要大于分歧。为了得出这个结论，我以C.J.
    Date在*数据库系统导论*中提到的一个事实为出发点，*Pearson Education*。
- en: In it, C.J. Date says that he prefers not to use the term data modeling because
    it could be refer to the term data model, and this relation may cause a little
    confusion. C.J. Date reminds us that the term data model has two meanings in the
    literature. The first is that a data model is a model of data in general, the
    second is that a data model is a model of persistent data relating to a specific
    enterprise. Date has chosen the first definition in his book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，C.J. Date说他更喜欢不使用术语数据建模，因为它可能指的是数据模型这个术语，这种关系可能会引起一些混淆。C.J. Date提醒我们，在文献中术语数据模型有两个含义。第一个是数据模型是一般数据的模型，第二个是数据模型是与特定企业相关的持久数据的模型。Date在他的书中选择了第一个定义。
- en: 'As C.J. Date stated:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如C.J. Date所说：
- en: '*"We believe that the right way to do database design in a nonrelational system
    is to do a clean relation design first, and then, as a separate and subsequent
    step, to map that relational design into whatever nonrelational structures (for
    example. hierarchies) the target DBMS happens to support."*'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"我们相信，在非关系型系统中进行数据库设计的正确方法是首先进行清晰的关系设计，然后，作为一个单独的后续步骤，将该关系设计映射到目标DBMS支持的任何非关系型结构（例如层次结构）中。"*'
- en: Therefore, talking about database design is a good start. So, C.J. Date adopted
    the term semantic modeling, or conceptual modeling, and defined this activity
    as an aid in the process of database design.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，谈论数据库设计是一个很好的开始。因此，C.J. Date采用了语义建模或概念建模这个术语，并将这一活动定义为数据库设计过程中的一种辅助。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to know more, you can find it in *An Introduction to Database Systems,
    8th Edition*, *Chapter 14*, *page 410*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多，你可以在*数据库系统导论，第8版*，*第14章*，*第410页*中找到。
- en: 'Another important source that I found, which in some way complements the C.J.
    Date argumentation, is publications made by Graeme Simsion on *The Data Administration
    Newsletter*, [http://www.tdan.com](http://www.tdan.com) and in the book *Data
    Modeling: Theory and Practice*, *Technics Publications LLC*. Graeme Simsion is
    a data modeler, author of two data modeling books, and a researcher at Melbourne
    University.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现的另一个重要来源，以某种方式补充了C.J. Date的论点，是Graeme Simsion在*数据管理通讯*上发表的出版物，[http://www.tdan.com](http://www.tdan.com)以及他在书籍*数据建模：理论与实践*中的出版物，*Technics
    Publications LLC*。Graeme Simsion是一位数据建模师，撰写了两本数据建模书籍，并且是墨尔本大学的研究员。
- en: In the vast majority of publications Simsion addresses the database design and
    data modeling subjects and concludes that data modeling is a discipline of database
    design and, consequently, the data model is the single and most important component
    of the design.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数出版物中，Simsion都在讨论数据库设计和数据建模的主题，并得出结论，数据建模是数据库设计的一门学科，因此数据模型是设计的单一和最重要的组成部分。
- en: We notice that, unlike C.J. Date, Graeme Simsion uses the term data modeling.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，与C.J. Date不同，Graeme Simsion使用了数据建模这个术语。
- en: In one of this publications, Simsion brings us an important fact regarding the
    data modeling concepts as a part of the process of database design. He talks about
    the stages of database design and tries to explain it by using some historic facts,
    and by a research with people who are directly involved with data modeling.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中一篇出版物中，Simsion给我们带来了一个关于数据建模概念作为数据库设计过程的一部分的重要事实。他通过一些历史事实和与直接参与数据建模的人进行的研究来解释这一点。
- en: From the historic point of view, he mentioned the importance of 3-schema architecture
    on the evolution of data modeling concepts.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史的角度来看，他提到了3模式架构对数据建模概念演变的重要性。
- en: To understand this evolution, we have to go back in time to 1975\. In that year,
    the Standards Planning and Requirements Committee of the American National Standards
    Institute also known as ANSI/SPARC/X3 Study Group on Data Base Management Systems,
    led by Charles Bachman, published a report proposing a DBMS architecture.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这一演变，我们必须回到1975年。在那一年，美国国家标准协会的标准规划和需求委员会，也被称为ANSI/SPARC/X3数据管理系统研究小组，由查尔斯·巴赫曼领导，发表了一份报告，提出了一个DBMS架构。
- en: This report introduced an abstract architecture of DBMS that would be applicable
    for any data model—that is, a way that multiples the user's views and perceives
    the data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这份报告介绍了一个抽象的DBMS架构，适用于任何数据模型，即一种方式，可以多重用户视图并感知数据。
- en: The 3-schema architecture was developed to describe a final product, a database,
    not the process to design one. However, as previously mentioned, the 3-schema
    architecture introduced concepts that directly impact on the database design process
    including data modeling. In the next section we will go through the 3-schema architecture
    concepts to better understand data modeling concepts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 3模式架构是为了描述最终产品——数据库，而不是设计过程。然而，正如前面提到的，3模式架构引入了直接影响数据库设计过程的概念，包括数据建模。在接下来的部分中，我们将通过3模式架构的概念来更好地理解数据建模概念。
- en: The ANSI-SPARC architecture
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ANSI-SPARC架构
- en: 'The ANSI-SPARC architecture proposed using three views (or three schemas) in
    order to:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI-SPARC架构建议使用三个视图（或三个模式）来：
- en: Hide the physical storage implementation from the user
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏用户对物理存储实现的细节
- en: Ensure that the DBMS will give users access to the same data consistently, which
    means all users have with their own view
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保DBMS将为用户提供一致的数据访问，这意味着所有用户都有自己的视图
- en: Allow the database administrator to change something in the physical level without
    affecting the user's view
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许数据库管理员在不影响用户视图的情况下在物理级别上进行更改
- en: The external level
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部级别
- en: The external level, also known as the user view, details how each particular
    user sees the database. This level allows each user to view the data in a different
    way. For that reason, it is also the appropriate level to keep information about
    a user's specific requirements. The external schema describes how a database is
    structured for different user views. So, we can have many external schemas for
    a database.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 外部级别，也称为用户视图，详细说明了每个特定用户如何看待数据库。这个级别允许每个用户以不同的方式查看数据。因此，这也是保留用户特定要求信息的适当级别。外部模式描述了数据库为不同用户视图而结构化的方式。因此，我们可以为一个数据库拥有许多外部模式。
- en: The conceptual level
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 概念级别
- en: The conceptual level, despite being considered by many as the most important
    level, was the last level to arise in the architecture. This level aims to show
    how a database is logically structured. We can say that it is an abstract view
    of the data stored within the database.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管被许多人认为是最重要的级别，概念级别是架构中最后出现的级别。这个级别旨在展示数据库的逻辑结构。我们可以说这是数据库中存储的数据的一个抽象视图。
- en: The conceptual level acts as a layer between the user view and the database
    implementation. Therefore, in this level, details about the physical implementation
    and particularities about user views are not considered.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 概念级别充当用户视图和数据库实现之间的层。因此，在这个级别上，不考虑有关物理实现和用户视图的细节和特殊性。
- en: Once conceptual level is here, the database administrator has an important role
    in this architecture level where we have a database global view. It is their responsibility
    to define the logical structure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦概念级别到位，数据库管理员在这个架构级别中扮演着重要的角色，我们有一个数据库的全局视图。他们有责任定义逻辑结构。
- en: A very interesting thing about the conceptual level is that we have to keep
    in mind that this level is independent from hardware or software. The conceptual
    schema defines the logical data structure as well as the relationships between
    the data in the database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 关于概念级别非常有趣的一点是，我们必须记住这个级别与硬件或软件是独立的。概念模式定义了逻辑数据结构以及数据库中数据之间的关系。
- en: The internal level
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部级别
- en: The internal level represents how the data is stored. This schema defines physical
    storage structures such as indexes, data fields, and representations. There is
    only one internal schema for a database, but it is possible that there are many
    internal schemas for a conceptual schema.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 内部级别表示数据的存储方式。该模式定义了物理存储结构，如索引、数据字段和表示。数据库只有一个内部模式，但可能有多个概念模式的内部模式。
- en: '![The internal level](img/B04075_01_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![内部级别](img/B04075_01_03.jpg)'
- en: The ANSI/SPARC/X3 database architecture
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI/SPARC/X3数据库架构
- en: The introduction of the concepts demonstrated by Charles Bachman and the ANSI/SPARC/X3
    members were very meaningful. They brought a new way to see the database and introduced
    concepts that helped to develop the data modeling discipline.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 查尔斯·巴赫曼和ANSI/SPARC/X3成员所展示的概念的引入非常有意义。他们带来了一种看待数据库的新方式，并引入了有助于发展数据建模学科的概念。
- en: Data modeling
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据建模
- en: As we stated before, data modeling can no longer be seen as a separate process.
    It is a stage in the database design process and a step that has to be done together
    with a business analysis. As the final result of the modeling process, we should
    have the logical data model.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所述，数据建模不再被视为一个独立的过程。它是数据库设计过程中的一个阶段，必须与业务分析一起完成的步骤。作为建模过程的最终结果，我们应该有逻辑数据模型。
- en: This modeling process raises the controversial question of which approach we
    use. The core of this discussion deals with what is academic or what we see in
    practice.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个建模过程引发了一个有争议的问题，即我们使用哪种方法。这个讨论的核心是什么是学术的，或者我们在实践中看到的。
- en: 'To Matthew West and Julian Fowler, one way to see the modeling process is shown
    in the following diagram:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Matthew West和Julian Fowler来说，看建模过程的一种方式如下图所示：
- en: '![Data modeling](img/B04075_01_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![数据建模](img/B04075_01_04.jpg)'
- en: The data modeling process
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 数据建模过程
- en: Graeme Simsion has an entire article about this discussion. The article shows
    how the academic view of the modeling process is different than the real-life
    view. Both give names to the modeling stages, which are quite different.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Graeme Simsion有一整篇关于这个讨论的文章。这篇文章展示了学术视角与现实视角对建模过程的不同看法。两者都给建模阶段起了名字，这些名字是完全不同的。
- en: During the writing process of this chapter, I am trying to present not only
    the Simsion research but also everything I have been through since I started working
    with information systems, in conjunction with extensive research about the modeling
    concepts, along with the countless views that I saw in many other sources.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本章的过程中，我试图呈现的不仅是Simsion的研究，还有自从我开始与信息系统一起工作以来所经历的一切，以及对建模概念的广泛研究，以及我在许多其他来源中看到的无数观点。
- en: Moreover, as previously stated, and also observed by Simsion, the three schema
    ANSI-SPARC architecture played a key role in the formation of the base concepts
    we have today. With the dissemination of the relational model and the DBMS based
    on it, the need to support old database architectures such as hierarchical and
    network-based has passed. Nevertheless, the way we divide the modeling process
    in two stages, one reflecting concepts very close to user views and followed by
    an automatic translation to a conceptual schema, remained.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如之前所述，并且Simsion所观察到的，三模式ANSI-SPARC架构在形成我们今天拥有的基本概念方面发挥了关键作用。随着关系模型和基于它的数据库管理系统的传播，支持旧的数据库架构，如分层和基于网络的架构的需求已经过去。然而，我们将建模过程分为两个阶段的方式仍然保留，一个阶段反映了与用户观点非常接近的概念，然后是自动转换为概念模式。
- en: We can say that the stages of the data modeling process we know nowadays came
    from the 3-schema architecture. Not only on the concepts, but also the names we
    use to noun each stage.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，我们现在所知道的数据建模过程的阶段来自于3模式架构。不仅是概念，我们用来命名每个阶段的名字也是如此。
- en: 'Hence, we most commonly find three types of data models: the conceptual model,
    logical model, and physical model.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们最常见的是三种数据模型：概念模型、逻辑模型和物理模型。
- en: The conceptual model
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 概念模型
- en: The conceptual model is a map of the entities and relationships with some attributes
    to illustrate. This is a high-level, abstract view, with the objective of identifying
    the fundamental concepts, very close to how users perceive the data, not focusing
    on a particular idea of the business.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 概念模型是一个实体和关系的地图，带有一些属性来说明。这是一个高层次的、抽象的视图，其目的是识别基本概念，非常接近用户感知数据的方式，而不是专注于业务的特定想法。
- en: If our audience is the business guys, that is the right model. It is frequently
    used to describe universal domain concepts, and should be DBMS-independent. For
    instance, we can mention entities such as person, store, product, instructor,
    student, and course.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的受众是商业人士，那就是正确的模型。它经常用于描述通用领域概念，并且应该是与DBMS无关的。例如，我们可以提到实体，如人员、商店、产品、讲师、学生和课程。
- en: Both in academic literature and in practice, the use of a relational notation
    is widely used to represent the conceptual model, even though the target implementation
    is not a relational DBMS. Indeed, this is a good approach to follow, as C.J. Date
    stated.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在学术文献和实践中，广泛使用关系符号来表示概念模型，即使目标实现不是关系型数据库管理系统。事实上，这是一个很好的方法，正如C.J. Date所说。
- en: A common graphical representation of the conceptual model is the popular "crow's
    foot notation".
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 概念模型的常见图形表示是流行的“鸦脚符号”。
- en: '![The conceptual model](img/B04075_01_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![概念模型](img/B04075_01_05.jpg)'
- en: Crow's foot notation
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 鸦脚符号
- en: It is often said that it is best practice to limit the conceptual model to printing
    on one page. The conceptual model can be a diagram or just a document describing
    everything you have identified.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 人们常说，将概念模型限制在一页打印上是最佳实践。概念模型可以是一个图表，也可以是描述您已经确定的一切的文件。
- en: The logical model
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑模型
- en: The logical model is the one that will be more business-friendly. This model
    should also be DBMS-independent, and is derived from the conceptual model.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑模型是更加符合业务的模型。这个模型也应该是与DBMS无关的，并且是从概念模型中派生出来的。
- en: It is common to describe business requirements in this model. Consequently,
    at this time, the data modeler will focus more on the project's scope. Details
    such as cardinality and nullability of relationship attributes with data types
    and constraints are mapped on this model too. As well as the conceptual model,
    is common to use a relational notation to represent the logical model. A data
    modeler has to work more on the logical model. This is because the logical model
    is where the modeler will explore all his possibilities and different ideas.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中描述业务需求是很常见的。因此，在这个时候，数据建模者将更多地关注项目的范围。关系属性的基数和可空性以及数据类型和约束等细节也在这个模型中映射。与概念模型一样，通常使用关系符号来表示逻辑模型。数据建模者必须更多地在逻辑模型上工作。这是因为逻辑模型是建模者将探索所有可能性和不同想法的地方。
- en: Generally, the logical model is a graphical presentation. The most widely used
    is the **entity-relationship** (**ER**) model, presented by Peter Chen in 1976\.
    The ER model has a graphical notation that fits all the needs of a logical model.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，逻辑模型是一个图形表示。最广泛使用的是1976年由Peter Chen提出的**实体-关系**（**ER**）模型。ER模型具有符合逻辑模型所有需求的图形符号。
- en: '![The logical model](img/B04075_01_06.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![逻辑模型](img/B04075_01_06.jpg)'
- en: An entity-relationship diagram
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 实体-关系图
- en: The physical model
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物理模型
- en: The physical model is a model where we have more detailed and less generic information
    about the data. In this model, we should know which technology should be used.
    Here, we can include tables, column names, keys, indexes, security roles, validation
    rules, and whatever detail you as a data modeler think is necessary.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 物理模型是一个更详细、不太通用的数据模型。在这个模型中，我们应该知道应该使用哪种技术。在这里，我们可以包括表、列名、键、索引、安全角色、验证规则，以及您作为数据建模者认为必要的任何细节。
- en: Just to make the connection to the three-schema architecture clear, the physical
    model is in some way linked to the internal level on the architecture because
    it is in this level that we deal with how the stored data is represented to the
    user. The goal of this stage is to have an implemented database.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰地将三级架构与物理模型联系起来，物理模型在某种程度上与架构的内部层级相关，因为在这个层级上，我们处理存储的数据如何呈现给用户。这个阶段的目标是拥有一个已实施的数据库。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Data modeling is an important step in the database design process. There are
    many ways to ensure high quality in this process by involving all stakeholders.
    You will probably have a better knowledge of your data after modeling it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数据建模是数据库设计过程中的重要步骤。通过让所有利益相关者参与，有许多方法可以确保这个过程的高质量。在对数据进行建模后，您可能会对自己的数据有更好的了解。
- en: That being said, we should always think about our data, and use a technique
    to model it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们应该始终考虑我们的数据，并使用一种技术来对其进行建模。
- en: In this chapter, you saw the history of NoSQL and also explored database designs
    and data modeling as a whole. We reviewed database architectures and you also
    learned about conceptual, logical, and physical models.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了NoSQL的历史，并全面探讨了数据库设计和数据建模。我们回顾了数据库架构，您也学习了概念、逻辑和物理模型。
- en: Now that you know more about data modeling, we will go through the MongoDB data
    model and the application of these concepts in the next chapter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对数据建模有了更多了解，我们将在下一章中深入了解MongoDB数据模型及这些概念的应用。
