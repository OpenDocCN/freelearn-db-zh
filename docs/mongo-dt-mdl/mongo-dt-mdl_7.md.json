["```go\nmongod --fork --configsvr --dbpath /data/configdb --logpath /log/configdb.log\n\n```", "```go\nmongos --fork --configdb localhost --logpath /log/router.log\n\n```", "```go\nmongod --fork --dbpath /data/mongod1 --port 27001 --logpath /log/mongod1.log\nmongod --fork --dbpath /data/mongod2 --port 27002 --logpath /log/mongod2.log\n\n```", "```go\nmongo localhost:27017\n\n```", "```go\nmongos> sh.addShard(\"localhost:27001\")\nmongos> sh.addShard(\"localhost:27002\")\n\n```", "```go\nmongos> sh.status()\n--- Sharding Status --- \n sharding version: {\n \"_id\" : 1,\n \"minCompatibleVersion\" : 5,\n \"currentVersion\" : 6,\n \"clusterId\" : ObjectId(\"54d9dc74fadbfe60ef7b394e\")\n}\n shards:\n {  \"_id\" : \"shard0000\",  \"host\" : \"localhost:27001\" }\n {  \"_id\" : \"shard0001\",  \"host\" : \"localhost:27002\" }\n databases:\n {  \"_id\" : \"admin\",  \"partitioned\" : false,  \"primary\" : \"config\" }\n\n```", "```go\nmongos> sh.enableSharding(\"ecommerce\")\n\n```", "```go\nmongos> sh.status()\n--- Sharding Status --- \n sharding version: {\n \"_id\" : 1,\n \"minCompatibleVersion\" : 5,\n \"currentVersion\" : 6,\n \"clusterId\" : ObjectId(\"54d9dc74fadbfe60ef7b394e\")\n}\n shards:\n {  \"_id\" : \"shard0000\",  \"host\" : \"172.17.0.23:27017\" }\n {  \"_id\" : \"shard0001\",  \"host\" : \"172.17.0.24:27017\" }\n databases:\n {  \"_id\" : \"admin\",  \"partitioned\" : false,  \"primary\" : \"config\" }\n {  \"_id\" : \"ecommerce\",  \"partitioned\" : true,  \"primary\" : \"shard0000\" }\n\n```", "```go\n{\n \"_id\" : ObjectId(\"54fb7110e7084a229a66eda2\"),\n \"isActive\" : true,\n \"age\" : 28,\n \"name\" : \"Paige Johnson\",\n \"gender\" : \"female\",\n \"email\" : \"paigejohnson@combot.com\",\n \"phone\" : \"+1 (830) 484-2397\",\n \"address\" : {\n \"city\" : \"Dennard\",\n \"state\" : \"Kansas\",\n \"zip\" : 2492,\n \"latitude\" : -56.564242,\n \"longitude\" : -160.872178,\n \"street\" : \"998 Boerum Place\"\n },\n \"registered\" : ISODate(\"2013-10-14T14:44:34.853Z\"),\n \"friends\" : [\n {\n \"id\" : 0,\n \"name\" : \"Katelyn Barrett\"\n },\n {\n \"id\" : 1,\n \"name\" : \"Weeks Valentine\"\n },\n {\n \"id\" : 2,\n \"name\" : \"Wright Jensen\"\n }\n ]\n}\n\n```", "```go\nmongos> sh.shardCollection(\"ecommerce.customers\", {\"address.zip\": 1, \"registered\": 1})\n{\n \"proposedKey\" : {\n \"address.zip\" : 1,\n \"registered\" : 1\n },\n \"curIndexes\" : [\n {\n \"v\" : 1,\n \"key\" : {\n \"_id\" : 1\n },\n \"name\" : \"_id_\",\n \"ns\" : \"ecommerce.customers\"\n }\n ],\n \"ok\" : 0,\n \"errmsg\" : \"please create an index that starts with the shard key before sharding.\"\n}\n\n```", "```go\nmongos> db.customers.createIndex({\"address.zip\": 1, \"registered\": 1})\nmongos> sh.shardCollection(\"ecommerce.customers\", {\"address.zip\": 1, \"registered\": 1})\n{ \"collectionsharded\" : \"ecommerce.customers\", \"ok\" : 1 }\n\n```", "```go\n{\nfrom: \"John\", \nto: [\"Mike\", \"Billie\"], \nsent: new Date(), \nmessage: \"Hey Mike, Billie\"\n}\n\n```", "```go\nmongos> sh.enableSharding(\"social\")\n\n```", "```go\nmongos> sh.shardCollection(\"social.inbox\", {from: 1})\n\n```", "```go\nmongos> db.inbox.createIndex({to: 1, sent: 1})\n\n```", "```go\nmongos> var msg = {\nfrom: \"John\", \nto: [\"Mike\", \"Billie\"], \nsent: new Date(), \nmessage: \"Hey Mike, Billie\"\n}; // this command creates a msg variable and stores a message json as a value\nmongos> db.inbox.insert(msg); // this command inserts the message on the inbox collection\n\n```", "```go\nmongos> db.inbox.find({to: \"Mike\"}).sort({sent: -1})\n\n```", "```go\nmongos> sh.shardCollection(\"social.inbox\", {recipient: 1, sent: 1})\n\n```", "```go\nmongos> var msg = {\n \"from\": \"John\",\n \"to\": [\"Mike\", \"Billie\"], // recipients\n \"sent\": new Date(),\n \"message\": \"Hey Mike, Billie\"\n}\n\nmongos> for(recipient in msg.to){ // iterate though recipients\nmsg.recipient = msg.to[recipient]; // creates a recipient field on the message and stores the recipient of the message\ndb.inbox.insert(msg); // inserts the msg document for every recipient\n}\n\n```", "```go\n    var msg = {\n     \"from\": \"John\",\n     \"to\": [\"Mike\", \"Billie\"], // recipients\n     \"sent\": new Date(),\n     \"message\": \"Hey Mike, Billie\"\n    }\n\n    ```", "```go\n    for(recipient in msg.to){\n    msg.recipient = msg.to[recipient];\n\n    ```", "```go\n    db.inbox.insert(msg); \n    }\n\n    ```", "```go\nmongos> db.inbox.find ({recipient: \"Mike\"}).sort({ sent:-1})\n{\n \"_id\": ObjectId(\"54fe6319b40b90bd157eb0b8\"),\n \"from\": \"John\",\n \"to\": [\n \"Mike\",\n \"Billie\"\n ],\n \"sent\": ISODate(\"2015-03-10T03:20:03.597Z\"),\n \"message\": \"Hey Mike, Billie\",\n \"recipient\": \"Mike\"\n}\n\n```", "```go\nmongos> db.inbox.find ({recipient: \"Billie\"}).sort({ sent:-1})\n{\n \"_id\": ObjectId(\"54fe6319b40b90bd157eb0b9\"),\n \"from\": \"John\",\n \"to\": [\n \"Mike\",\n \"Billie\"\n ],\n \"sent\": ISODate(\"2015-03-10T03:20:03.597Z\"),\n \"message\": \"Hey Mike, Billie\",\n \"recipient\": \"Billie\"\n}\n\n```", "```go\nmongos> sh.enableSharding(\"social\")\nmongos> sh.shardCollection(\"social.inbox\", {owner: 1, sequence: 1})\n\n```", "```go\nmongos> sh.shardCollection(\"social.users\", {user_name: 1})\n\n```", "```go\nmongos> var msg = { \n \"from\": \"John\",\n \"to\": [\"Mike\", \"Billie\"], //recipients\n \"sent\": new Date(),\n \"message\": \"Hey Mike, Billie\"\n}\n\nmongos> for(recipient in msg.to) {\n\nvar count = db.users.findAndModify({\n query: {user_name: msg.to[recipient]},\n update:{\"$inc\":{\"msg_count\":1}},\n upsert: true,\n new: true}).msg_count;\n\n var sequence = Math.floor(count/50);\n\n db.inbox.update({\n owner: msg.to[recipient], sequence: sequence},\n {$push:{\"messages\":msg}},\n {upsert: true});\n}\n\n```"]