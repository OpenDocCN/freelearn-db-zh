["```go\n191.32.254.162 - - [29/Mar/2015:16:04:08 -0400] \"GET /admin HTTP/1.1\" 200 2529 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.104 Safari/537.36\"\n\n```", "```go\n$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"\n\n```", "```go\n$remote_addr [$time_local] \"$request\" $status $request_time $request_length\n\n```", "```go\n    log_format custom_format '$remote_addr [$time_local] \"$request\" $status $request_time $request_length';\n    ```", "```go\n    access_log /var/log/nginx/custom_access.log custom_format;\n    ```", "```go\n    /usr/sbin/nginx reload\n\n    ```", "```go\n    191.32.254.162 [29/Mar/2015:18:35:26 -0400] \"GET / HTTP/1.1\" 200 0.755 802\n    ```", "```go\n{\n\n \"_id\" : ObjectId(\"5518ce5c322fa17f4243f85f\"),\n \"request_line\" : \"191.32.254.162 [29/Mar/2015:18:35:26 -0400] \\\"GET /media/catalog/product/image/2.jpg HTTP/1.1\\\" 200 0.000 867\"\n\n}\n\n```", "```go\ndb.events.find({}).count()\n\n```", "```go\n{\n\n \"_id\" : ObjectId(\"5518ce5c322fa17f4243f85f\"),\n \"request_line\" : \"191.32.254.162 [29/Mar/2015:18:35:26 -0400] \\\"GET /media/catalog/product/image/2.jpg HTTP/1.1\\\" 0.000 867\",\n \"date_created\" : ISODate(\"2015-03-30T04:17:32.246Z\")\n\n}\n\n```", "```go\ndb.events.aggregate(\n{\n $group: {\n _id: {\n request_time: {\n month: {\n $month: \"$date_created\"\n },\n day: {\n $dayOfMonth: \"$date_created\"\n },\n year: {\n $year: \"$date_created\"\n },\n hour: {\n $hour: \"$date_created\"\n },\n min: {\n $minute: \"$date_created\"\n }\n }\n },\n count: {\n $sum: 1\n }\n }\n})\n\n```", "```go\n{\n \"_id\": {\n \"request_time\": {\n \"month\": 3,\n \"day\": 30,\n \"year\": 2015,\n \"hour\": 4,\n \"min\": 48\n }\n },\n \"count\": 50\n}\n{\n \"_id\": {\n \"request_time\": {\n \"month\": 3,\n \"day\": 30,\n \"year\": 2015,\n \"hour\": 4,\n \"min\": 38\n }\n },\n \"count\": 13\n}\n{\n \"_id\": {\n \"request_time\": {\n \"month\": 3,\n \"day\": 30,\n \"year\": 2015,\n \"hour\": 4,\n \"min\": 17\n }\n },\n \"count\": 26\n}\n\n```", "```go\n{\n \"_id\" : ObjectId(\"5519baca82d8285709606ce9\"),\n \"remote_address\" : \"191.32.254.162\",\n \"date_created\" : ISODate(\"2015-03-29T18:35:25Z\"),\n \"http_method\" : \"GET\",\n \"resource\" : \"/media/catalog/product/cache/1/image/200x267/9df78eab33525d08d6e5fb8d27136e95/2/_/2.jpg\",\n \"http_version\" : \"HTTP/1.1\",\n \"status\": 200,\n \"request_time\" : 0,\n \"request_length\" : 867\n}\n\n```", "```go\ndb.events.aggregate([\n {\n $group: {\n _id: \"$resource\",\n hits: {\n $sum: 1\n }\n }\n },\n {\n $project: {\n _id: 0,\n resource: \"$_id\",\n throughput: {\n $divide: [\n \"$hits\",\n 1440\n ]\n }\n }\n },\n {\n $sort: {\n throughput: -1\n }\n }\n])\n\n```", "```go\ndb.events.aggregate([{$group: {_id: \"$resource\", hits: {$sum: 1}}}])\n\n```", "```go\n{ \"_id\" : \"/\", \"hits\" : 5201 }\n{ \"_id\" : \"/legal/faq\", \"hits\" : 1332 }\n{ \"_id\" : \"/legal/terms\", \"hits\" : 3512 }\n\n```", "```go\ndb.documents.aggregate([\n {\n $group: {\n _id: \"$resource\",\n hits: {\n $sum: 1\n }\n }\n },\n {\n $project: {\n _id: 0,\n resource: \"$_id\",\n throughput: {\n $divide: [\n \"$hits\",\n 1440\n ]\n }\n }\n }\n])\n\n```", "```go\n{ \"resource\" : \"/\", \"throughput\" : 3.6118055555555557 }\n{ \"resource\" : \"/legal/faq\", \"throughput\" : 0.925 }\n{ \"resource\" : \"/legal/terms\", \"throughput\" : 2.438888888888889 }\n\n```", "```go\ndb.documents.aggregate([\n {\n $group: {\n _id: \"$resource\",\n hits: {\n $sum: 1\n }\n }\n },\n {\n $project: {\n _id: 0,\n resource: \"$_id\",\n throughput: {\n $divide: [\n \"$hits\",\n 1440\n ]\n }\n }\n },\n {\n $sort: {\n throughput: -1\n }\n }\n])\n\n```", "```go\n{ \"resource\" : \"/\", \"throughput\" : 3.6118055555555557 }\n{ \"resource\" : \"/legal/terms\", \"throughput\" : 2.438888888888889 }\n{ \"resource\" : \"/legal/faq\", \"throughput\" : 0.925 }\n\n```", "```go\n{\n \"_id\" : ObjectId(\"552005f5e2202a2f6001d7b0\"),\n \"resource\" : \"/\",\n \"date\" : ISODate(\"2015-05-02T03:00:00Z\"),\n \"daily\" : 215840,\n \"minute\" : {\n \"0\" : 90,\n\n \"1\" : 150,\n \"2\" : 143,\n ...\n \"1349\": 210\n }\n}\n\n```", "```go\nmkdir throughput_project\n\n```", "```go\ncd throughput_project\nnpm init\n\n```", "```go\nnpm install mongodb --save\n\n```", "```go\n{\n  \"name\": \"throughput_project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Wilson da Rocha Fran\u00e7a\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mongodb\": \"^2.0.25\"\n  }\n}\n```", "```go\nvar fs = require('fs');\nvar util = require('util');\nvar mongo = require('mongodb').MongoClient;\nvar assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://127.0.0.1:27017/monitoring;\n// Create the date object and set hours, minutes,\n// seconds and milliseconds to 00:00:00.000\nvar today = new Date();\ntoday.setHours(0, 0, 0, 0);\n\nvar logDailyHit = function(db, resource, callback){\n // Get the events collection\n  var collection = db.collection('events');\n // Update daily stats\n  collection.update({resource: resource, date: today},\n    {$inc : {daily: 1}}, {upsert: true},\n    function(error, result){\n      assert.equal(error, null);\n      assert.equal(1, result.result.n);\n      console.log(\"Daily Hit logged\");\n      callback(result);\n  });\n}\n\nvar logMinuteHit = function(db, resource, callback) {\n // Get the events collection\n  var collection = db.collection('events');\n // Get current minute to update\n  var currentDate = new Date();\n  var minute = currentDate.getMinutes();\n  var hour = currentDate.getHours();\n // We calculate the minute of the day\n  var minuteOfDay = minute + (hour * 60);\n  var minuteField = util.format('minute.%s', minuteOfDay);\n // Create a update object\n  var update = {};\n  var inc = {};\n  inc[minuteField] = 1;\n  update['$inc'] = inc;\n\n // Update minute stats\n  collection.update({resource: resource, date: today},\n    update, {upsert: true}, function(error, result){\n      assert.equal(error, null);\n      assert.equal(1, result.result.n);\n      console.log(\"Minute Hit logged\");\n      callback(result);\n  });\n}\n\n// Connect to MongoDB and log\nmongo.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected to server\");\n  var resource = \"/\";\n  logDailyHit(db, resource, function() {\n    logMinuteHit(db, resource, function(){\n      db.close();\n      console.log(\"Disconnected from server\")\n      });\n    });\n});\n```", "```go\nnode app.js\n\n```", "```go\nConnected to server\nDaily Hit logged\nMinute Hit logged\nDisconnected from server\n\n```", "```go\ndb.events.findOne()\n{\n \"_id\" : ObjectId(\"5520ade00175e1fb3361b860\"),\n \"resource\" : \"/\",\n \"date\" : ISODate(\"2015-04-04T03:00:00Z\"),\n \"daily\" : 383,\n \"minute\" : {\n \"0\" : 90,\n \"1\" : 150,\n \"2\" : 143\n }\n}\n\n```", "```go\nvar fs = require('fs');\nvar util = require('util');\nvar mongo = require('mongodb').MongoClient;\nvar assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://127.0.0.1:27017/monitoring';\n\nvar preAllocate = function(db, resource, callback){\n // Get the events collection\n var collection = db.collection('events');\n var now = new Date();\n now.setHours(0,0,0,0);\n // Create the minute document\n var minuteDoc = {};\n for(i = 0; i < 1440; i++){\n minuteDoc[i] = 0;\n }\n // Update minute stats\n collection.update(\n {resource: resource,\n date: now,\n daily: 0},\n {$set: {minute: minuteDoc}},\n {upsert: true}, function(error, result){\n assert.equal(error, null);\n assert.equal(1, result.result.n);\n console.log(\"Pre-allocated successfully!\");\n callback(result);\n });\n}\n\n// Connect to MongoDB and log\nmongo.connect(url, function(err, db) {\n assert.equal(null, err);\n console.log(\"Connected to server\");\n var resource = \"/\";\n preAllocate(db, resource, function(){\n db.close();\n console.log(\"Disconnected from server\")\n });\n});\n\n```", "```go\nnode app.js\n\n```", "```go\nConnected to server\nPre-allocated successfully!\nDisconnected from server\n\n```", "```go\ndb.events.findOne();\n{\n \"_id\" : ObjectId(\"551fd893eb6efdc4e71260a0\"),\n \"daily\" : 0,\n \"date\" : ISODate(\"2015-04-06T03:00:00Z\"),\n \"resource\" : \"/\",\n \"minute\" : {\n \"0\" : 0,\n \"1\" : 0,\n \"2\" : 0,\n \"3\" : 0,\n ...\n \"1439\" : 0,\n }\n}\n\n```", "```go\ndb.monitoring.createIndex({date: 1}, {expireAfterSeconds: 31556926})\n\n```", "```go\n{\n \"createdCollectionAutomatically\" : false,\n \"numIndexesBefore\" : 1,\n \"numIndexesAfter\" : 2,\n \"ok\" : 1\n}\n\n```", "```go\nmongos> sh.shardCollection(\"monitoring.events\", {resource: 1, date: 1})\n\n```", "```go\n{ \"collectionsharded\" : \"monitoring.events\", \"ok\" : 1 }\n\n```", "```go\ndb.monitoring.createIndex({resource: 1, date: 1})\n```", "```go\nvar fs = require('fs');\nvar util = require('util');\nvar mongo = require('mongodb').MongoClient;\nvar assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://127.0.0.1:27017/monitoring';\n\nvar getCurrentDayhitStats = function(db, resource, callback){\n // Get the events collection\n  var collection = db.collection('events');\n  var now = new Date();\n  now.setHours(0,0,0,0);\n  collection.findOne({resource: \"/\", date: now},\n    {daily: 1}, function(err, doc) {\n    assert.equal(err, null);\n    console.log(\"Document found.\");\n    console.dir(doc);\n    callback(doc);\n  });\n}\n\nvar getCurrentMinuteStats = function(db, resource, callback){\n // Get the events collection\n  var collection = db.collection('events');\n  var now = new Date();\n // get hours and minutes and hold\n  var hour = now.getHours()\n  var minute = now.getMinutes();\n // calculate minute of the day to create field name\n  var minuteOfDay = minute + (hour * 60);\n  var minuteField = util.format('minute.%s', minuteOfDay);\n // set hour to zero to put on criteria\n  now.setHours(0, 0, 0, 0);\n // create the project object and set minute of the day value\n  var project = {};\n  project[minuteField] = 1;\n  collection.findOne({resource: \"/\", date: now},\n    project, function(err, doc) {\n    assert.equal(err, null);\n    console.log(\"Document found.\");\n    console.dir(doc);\n    callback(doc);\n  });\n}\n\n// Connect to MongoDB and log\nmongo.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected to server\");\n  var resource = \"/\";\n  getCurrentDayhitStats(db, resource, function(){\n    getCurrentMinuteStats(db, resource, function(){\n      db.close();\n      console.log(\"Disconnected from server\");\n    });\n  });\n});\n```", "```go\nnode app.js\n\n```", "```go\nConnected to server\nDocument found.\n{ _id: 551fdacdeb6efdc4e71260a2, daily: 27450 }\nDocument found.\n{ _id: 551fdacdeb6efdc4e71260a2, minute: { '183': 142 } }\nDisconnected from server\n\n```", "```go\nvar fs = require('fs');\nvar util = require('util');\nvar mongo = require('mongodb').MongoClient;\nvar assert = require('assert');\n\n// Connection URL\nvar url = 'mongodb://127.0.0.1:27017/monitoring';\n\nvar getAverageRequestPerMinuteStats = function(db, resource, callback){\n // Get the events collection\n  var collection = db.collection('events');\n  var now = new Date();\n // get hours and minutes and hold\n  var hour = now.getHours()\n  var minute = now.getMinutes();\n // calculate minute of the day to get the avg\n  var minuteOfDay = minute + (hour * 60);\n // set hour to zero to put on criteria\n  now.setHours(0, 0, 0, 0);\n // create the project object and set minute of the day value\n  collection.findOne({resource: resource, date: now},\n    {daily: 1}, function(err, doc) {\n    assert.equal(err, null);\n    console.log(\"The avg rpm is: \"+doc.daily / minuteOfDay);\n    console.dir(doc);\n    callback(doc);\n  });\n}\n\nvar getBetweenDatesDailyStats = function(db, resource, dtFrom, dtTo, callback){\n // Get the events collection\n  var collection = db.collection('events');\n // set hours for date parameters\n  dtFrom.setHours(0,0,0,0);\n  dtTo.setHours(0,0,0,0);\n  collection.find({date:{$gte: dtFrom, $lte: dtTo}, resource: resource},\n  {date: 1, daily: 1},{sort: [['date', 1]]}).toArray(function(err, docs) {\n    assert.equal(err, null);\n    console.log(\"Documents founded.\");\n    console.dir(docs);\n    callback(docs);\n  });\n}\n\n// Connect to MongoDB and log\nmongo.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected to server\");\n  var resource = \"/\";\n  getAverageRequestPerMinuteStats(db, resource, function(){\n    var now = new Date();\n    var yesterday = new Date(now.getTime());\n    yesterday.setDate(now.getDate() -1);\n    getBetweenDatesDailyStats(db, resource, yesterday, now, function(){\n      db.close();\n      console.log(\"Disconnected from server\");\n    });\n\n  });\n});\n```"]