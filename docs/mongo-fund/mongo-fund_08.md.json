["```js\n// 1_Hello_World.js\nvar message = \"Hello, Node!\";\nconsole.log(message);\n```", "```js\n> node 1_Hello_World.js\n```", "```js\nSection1> node 1_Hello_World.js\nHello, Node!\nSection1>\n```", "```js\n// 1_Hello_World.js\nconst message = \"Hello, Node!\";\nconsole.log(message);\n```", "```js\nvar printHello = function(parameter) {\n    console.log(\"Hello, \" + parameter);\n}\nprintHello(\"World\")\n```", "```js\n// 3_Full_Example.js\nconst Mongo = require('mongodb').MongoClient;\nconst server = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test?retryWrites=true&w=majority'\nconst myDB   = 'sample_mflix'\nconst myColl = 'movies';\nconst mongo = new Mongo(server);\nmongo.connect(function(err) {\n    console.log('Our driver has connected to MongoDB!');\n    const database = mongo.db(myDB);\n    const collection = database.collection(myColl);\n    collection.find({title: 'Blacksmith Scene'}).each(function(err, doc) {\n        if(doc) {\n            console.log('Doc returned: ')\n            console.log(doc);\n        } else {\n            mongo.close();\n            return false;\n        }\n    })\n})\n```", "```js\n// 4_Define_Function.js\nconst newFunction = function(parameter1, parameter2) {\n    // Function logic goes here.\n    console.log(parameter1);\n    console.log(parameter2);\n}\n```", "```js\n> npm install mongo --save\n```", "```js\n// First load the Driver module.\nconst Mongo = require('MongoDB').MongoClient;\n// Then define our server.\nconst server = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test?retryWrites=true&w=majority';\n// Create a new client.\nconst mongo = new Mongo(server);\n// Connect to our server.\nmongo.connect(function(err) {\n    // Inside this block we are connected to MongoDB.\nmongo.close(); // Close our connection at the end.\n})\n```", "```js\n…\nmongo.connect(function(err) {\n    // Inside this block we are connected to MongoDB.\n    // Create our database object.\n    const database = mongo.db(«sample_mflix»);\n    mongo.close(); // Close our connection at the end.\n})\n…\n```", "```js\n…\nmongo.connect(function(err) {\n    // Inside this block we are connected to MongoDB.\n    // Create our database object.\n    const database = mongo.db(\"sample_mflix\");\n    // Create our collection object\n    const collection = database.collection(\"movies\");\n    mongo.close(); // Close our connection at the end.\n})\n…\n```", "```js\nconst serverURL = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\nconst mongo = new Mongo(serverURL);\nmongo.connect(function(err) {\n    // Inside this block we are connected to MongoDB.\nmongo.close(); // Close our connection at the end.\n})\n```", "```js\ncallback. We will cover these in detail later in this chapter. For now, it is enough to use this pattern without having a more in-depth understanding.\n```", "```js\nconst serverURL = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test?retryWrites=true&w=majority';\n```", "```js\nconst mongo = new Mongo(serverURL, {\n     sslValidate: false\n});\nmongo.connect(function(err) {\n     // Inside this block we are connected to MongoDB.\nmongo.close(); // Close our connection at the end.\n})\n```", "```js\n    > node Exercise8.01.js\n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    ```", "```js\n    const url = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\n    ```", "```js\n    const client = new MongoClient(url);\n    ```", "```js\n    client.connect(function(err) {\n         …\n    })\n    ```", "```js\n    console.log('Connected to MongoDB with NodeJS!');\n    ```", "```js\n    client.close(); // Close our connection at the end.\n    ```", "```js\n    // Import MongoDB Driver module.\n    const MongoClient = require('mongodb').MongoClient;\n    // Create a new url variable.\n    const url = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\n    // Create a new MongoClient.\n    const client = new MongoClient(url);\n    // Open the connection using the .connect function.\n    client.connect(function(err) {\n        // Within the connection block, add a console.log to confirm the       connection\n        console.log('Connected to MongoDB with NodeJS!');\n        client.close(); // Close our connection at the end.\n    })\n    ```", "```js\n    Chapter8> node Excercise8.01.js\n    Connected to MongoDB with NodeJS!\n    Chapter8>\n    ```", "```js\ndb.movies.findOne({})\n```", "```js\ncollection.find({title: 'Blacksmith Scene'}).each(function(err, doc) { … }\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n// Replace this variable with the connection string for your server, provided by   MongoDB Atlas.\nconst url = 'mongodb+srv://username:password@server-abcdef.gcp.mongodb.net/test';\nconst client = new MongoClient(url);\nclient.connect(function(err) {\n    console.log('Connected to MongoDB with NodeJS!');\n    // OUR CODE GOES BELOW HERE\n    // AND ABOVE HERE\n    client.close();\n})\n```", "```js\n    // OUR CODE GOES BELOW HERE\n    // AND ABOVE HERE\n```", "```js\n    // OUR CODE GOES BELOW HERE\n    const database = client.db(\"sample_mflix\")\n    // AND ABOVE HERE\n```", "```js\n// Defining filter first.\nvar filter = { title: 'Blacksmith Scene'};\ndatabase.collection(\"movies\").find(filter).toArray(function(err, docs) { });\n// Doing everything in a single line.\ndatabase.collection(\"movies\").find({title: 'Blacksmith   Scene'}).toArray(function(err, docs) {});\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n// Replace this variable with the connection string for your server, provided by   MongoDB Atlas.\nconst url = 'mongodb+srv://mike:password@myAtlas-  fawxo.gcp.mongodb.net/test?retryWrites=true&w=majority'\nconst client = new MongoClient(url);\nclient.connect(function(err) {\n    console.log('Connected to MongoDB with NodeJS!');\n    const database = client.db(\"sample_mflix\");\n    var filter = { title: 'Blacksmith Scene'};\n    database.collection(\"movies\").find(filter).toArray(function(err, docs) {\n        console.log('Docs results:');\n        console.log(docs);\n     });\n    client.close();\n})\n```", "```js\n    database.collection(\"movies\").find(filter).toArray(function(err, docsArray) {\n        console.log('Docs results as an array:');\n        console.log(docsArray[0]); // Print the first entry in the array.\n     });\n    ```", "```js\n    database.collection(\"movies\").find(filter).each(function(err, doc) {\n        if(doc) {\n            console.log('Current doc');\n            console.log(doc);\n        } else {\n            client.close(); // Close our connection.\n            return false;   // End the each loop.\n        }\n     });\n    ```", "```js\n    database.collection(\"movies\").find(filter).next(function(err, doc) {\n        console.log(\"First doc in the cursor\");\n        console.log(doc);\n     });\n    ```", "```js\ndatabase.collection(\"movies\").find(filter).limit(5).sort([['title', 1]]).next   (function(err, doc) {…}\n```", "```js\n    const databaseName = \"sample_mflix\";\n    const collectionName = \"movies\";\n    ```", "```js\n    const query = { genres: { $all: [\"Romance\"]} };\n    ```", "```js\n    const database = client.db(databaseName);\n    ```", "```js\n    database.collection(collectionName).find(query).limit(2).project({title:   1}).each(function(err, doc) {\n        if(doc) {\n\n        } else {\n            client.close(); // Close our connection.\n            return false;   // End the each loop.\n        }\n     });\n    ```", "```js\n    if(doc){\n               console.log('Current doc');\n               console.log(doc);\n    }  \n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    const url = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\n    const client = new MongoClient(url);\n    const databaseName = \"sample_mflix\";\n    const collectionName = \"movies\";\n    const query = { genres: { $all: [\"Romance\"]} };\n    // Open the connection using the .connect function.\n    client.connect(function(err) {\n        // Within the connection block, add a console.log to confirm the       connection\n        console.log('Connected to MongoDB with NodeJS!');\n        const database = client.db(databaseName);\n        database.collection(collectionName).find(query).limit(2).project({title:      1}).each(function(err, doc) {\n            if(doc) {\n                console.log('Current doc');\n                console.log(doc);\n            } else {\n                client.close(); // Close our connection.\n                return false;   // End the each loop.\n            }\n         });\n    })\n    ```", "```js\n    Connected to MongoDB with NodeJS!\n    Our database connected alright!\n    Current doc\n    { _id: 573a1390f29313caabcd548c, title: 'The Birth of a Nation' }\n    Current doc\n    { _id: 573a1390f29313caabcd5b9a, title: \"Hell's Hinges\" }\n    ```", "```js\n.each(function(err, doc) {\n        if(doc) {\n            console.log('Current doc');\n            console.log(doc);\n        } else {\n            client.close(); // Close our connection.\n            return false;   // End the each loop.\n        }\n     });\n```", "```js\ndatabase.collection(collectionName).find(query).limit(2).project({title: 1}).each   (function(err, doc) {\n        if(doc) {\n            console.log('Current doc');\n            console.log(doc);\n        } else {\n            client.close(); // Close our connection.\n            return false;   // End the each loop.\n        }\n     });\n```", "```js\nconsole.log('This will execute first.')\ndatabase.collection(collectionName).find(query).limit(2).project({title: 1}).each   (function(err, doc) {\nconsole.log('This will execute last, once for each document in the result.')\n        if(doc) {\n        } else {\n            client.close(); // Close our connection.\n            return false;   // End the each loop.\n        }\n     });\nconsole.log('This will execute second.');\n```", "```js\nConnected to MongoDB with NodeJS!\nThis will execute first.\nThis will execute second.\nThis will execute last, once for each doc.\nThis will execute last, once for each doc.\nThis will execute last, once for each doc.\n```", "```js\ndatabase.collection(collectionName).find(query).limit(2).project({title: 1}).each   (function(err, doc) {\n        if(err) {\n            console.log('Error in query.');\n            console.log(err);\n            client.close();\n            return false;\n        }\n        else if(doc) {\n            console.log('Current doc');\n            console.log(doc);\n        } else {\n            client.close(); // Close our connection.\n            return false;   // End the each loop.\n        }\n     });\n```", "```js\n// Open the connection using the .connect function.\nclient.connect(function(err) {\n    if(err) {\n        console.log('Error connecting!');\n        console.log(err);\n        client.close();\n    } else {\n        // Within the connection block, add a console.log to confirm the           connection\n        console.log('Connected to MongoDB with NodeJS!');\n        client.close(); // Close our connection at the end.\n    }\n})\n```", "```js\n    const database = client.db(databaseName);\n    if(database) {\n        console.log('Our database connected alright!');\n    }\n```", "```js\n    client.connect(function(err) {\n        if(err) {\n            console.log('Failed to connect.');\n            console.log(err);\n            return false;\n        }\n        // Within the connection block, add a console.log to confirm the       connection\n        console.log('Connected to MongoDB with NodeJS!');\n    ```", "```js\n        const database = client.db(databaseName);\n        if(!database) {\n            console.log('Database object doesn't exist!');\n            return false;\n        }\n    ```", "```js\n        database.collection(collectionName).find(query).limit(2).project({title: 1}).each(function(err, doc) {\n            if(err) {\n                console.log('Query error.');\n                console.log(err);\n                client.close();\n                return false;\n            }\n            if(doc) {\n                console.log('Current doc');\n                console.log(doc);\n            } else {\n                client.close(); // Close our connection.\n                return false;   // End the each loop.\n            }\n         });\n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    const url = 'mongodb+srv://username:password@server-  fawxo.gcp.mongodb.net/test?retryWrites=true&w=majority';\n    const client = new MongoClient(url);\n    const databaseName = \"sample_mflix\";\n    const collectionName = \"movies\";\n    const query = { genres: { $all: [\"Romance\"]} };\n    // Open the connection using the .connect function.\n    client.connect(function(err) {\n        if(err) {\n            console.log('Failed to connect.');\n            console.log(err);\n            return false;\n        }\n        // Within the connection block, add a console.log to confirm the       connection\n        console.log('Connected to MongoDB with NodeJS!');\n        const database = client.db(databaseName);\n        if(!database) {\n            console.log('Database object doesn't exist!');\n            return false;\n        }\n        database.collection(collectionName).find(query).limit(2).project({title:      1}).each(function(err, doc) {\n            if(err) {\n                console.log('Query error.');\n                console.log(err);\n                client.close();\n                return false;\n            }\n            if(doc) {\n                console.log('Current doc');\n                console.log(doc);\n            } else {\n                client.close(); // Close our connection.\n                return false;   // End the each loop.\n            }\n         });\n    })\n    ```", "```js\n    Connected to MongoDB with NodeJS!\n    Current doc\n    { _id: 573a1390f29313caabcd548c, title: 'The Birth of a Nation' }\n    Current doc\n    { _id: 573a1390f29313caabcd5b9a, title: \"Hell's Hinges\" }\n    ```", "```js\n    const query = { genres: { $thisIsNotAnOperator: [\"Romance\"]} };\n    ```", "```js\n    database.collection(collectionName).insertOne({Hello:      \"World\"}, function(err, result) {\n        // Handle result.\n    })\n    database.collection(collectionName).insertMany([{Hello: \"World\"},       {Hello: \"Mongo\"}], function(err, result) {\n        // Handle result.\n    })\n```", "```js\n    database.collection(collectionName).insertOne({Hello: \"World\"},       function(err, result) {\n        console.log(result.result);\n   client.close();\n    })\n```", "```js\n    database.collection(collectionName).updateOne({Hello: \"World\"}, {$set: {Hello       : \"Earth\"}}, function(err, result) {\n        console.log(result.modifiedCount);\n        client.close();\n    })\n```", "```js\nConnected to MongoDB with NodeJS!\n1\n```", "```js\n    database.collection(collectionName).deleteOne({Hello: \"Earth\"}, function(err, result) {\n        console.log(result.deletedCount);\n        client.close();\n    })\n```", "```js\nConnected to MongoDB with NodeJS!\n1\n```", "```js\ndatabase.collection(collectionName).find({name: \"Matthew\"}).each(function(err,   doc) {});\ndatabase.collection(collectionName).find({name: \"Mark\"}).each(function(err, doc)   {});\ndatabase.collection(collectionName).find({name: \"Luke\"}).each(function(err, doc)   {})\n```", "```js\nconst findByName = function(name) {\n\n}\n```", "```js\nconst findByName = function(name) {\n    database.collection(collectionName).find({name:       name}).each(function(err, doc) {})\n}\n```", "```js\nconst findByName = function(name, database) {\n    database.collection(collectionName).find({name: name}).each(function(err,       doc) {})\n}\n```", "```js\nconst findByName = function(name, database) {\n    database.collection(collectionName).find({name: name}).each(function(err, doc       ) {})\n}\nfindByName(\"Matthew\", database);\nfindByName(\"Mark\", database);\nfindByName(\"Luke\", database);\n```", "```js\n    db.chapter8_Exercise4.find({ $or: [{name: \"Ned Stark\"}, {name: \"Robb Stark\"}, {name: \"Bran Stark\"}]});\n    ```", "```js\n    db.chapter8_Exercise4.insert([{name: \"Ned Stark\"}, {name: \"Bran Stark\"}, {name: \"Robb Stark\"}]);\n    ```", "```js\n    const collectionName = \"chapter8_Exercise4\";\n    ```", "```js\n    const updateName = function(client, database, oldName, newName) {\n    }\n    ```", "```js\n    const updateName = function(client, database, oldName, newName) {\n        database.collection(collectionName).updateOne({name: oldName}, {$set: {name: newName}}, function(err, result) {\n            if(err) {\n                console.log('Error updating');\n                console.log(err);\n                client.close();\n                return false;\n            }\n            console.log('Updated documents #:');\n            console.log(result.modifiedCount);\n            client.close();\n        })\n    };\n    ```", "```js\n        updateName(client, database, \"Ned Stark\", \"Greg Stark\");\n        updateName(client, database, \"Robb Stark\", \"Bob Stark\");\n        updateName(client, database, \"Bran Stark\", \"Brad Stark\");\n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    const url = 'mongodb+srv://mike:password@myAtlas-fawxo.gcp.mongodb.net/test?retryWrites=true&w=majority';\n    const client = new MongoClient(url);\n    const databaseName = \"sample_mflix\";\n    const collectionName = \"chapter8_Exercise4\";\n    const updateName = function(client, database, oldName, newName) {\n        database.collection(collectionName).updateOne({name: oldName}, {$set: {name: newName}}, function(err, result) {\n            if(err) {\n                console.log('Error updating');\n                console.log(err);\n                client.close();\n                return false;\n            }\n            console.log('Updated documents #:');\n            console.log(result.modifiedCount);\n            client.close();\n        })\n    };\n    // Open the connection using the .connect function.\n    client.connect(function(err) {\n        if(err) {\n            console.log('Failed to connect.');\n            console.log(err);\n            return false;\n        }\n        // Within the connection block, add a console.log to confirm the connection\n        console.log('Connected to MongoDB with NodeJS!');\n        const database = client.db(databaseName);\n        if(!database) {\n            console.log('Database object doesn't exist!');\n            return false;\n        }\n\n        updateName(client, database, \"Ned Stark\", \"Greg Stark\");\n        updateName(client, database, \"Robb Stark\", \"Bob Stark\");\n        updateName(client, database, \"Bran Stark\", \"Brad Stark\");\n    })\n    ```", "```js\n    Connected to MongoDB with NodeJS!\n    Updated documents #:\n    1\n    Updated documents #:\n    1\n    Updated documents #:\n    1\n    ```", "```js\nconst readline = require('readline');\nconst interface = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n```", "```js\ninterface.question('Hello, what is your name? ', (input) => {\n    console.log(`Hello, ${input}`);\n    interface.close();\n  });\n```", "```js\nChapter_8> node example.js \nHello, what is your name? Michael\nHello, Michael\n```", "```js\nconst question = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum?\"\ninterface.question(question, (input) => {\n    console.log(`Hello, ${input}`);\n    interface.close();\n  });\n```", "```js\nconst askName = function() {\n    interface.question(\"Hello, what is your name?\", (input) => {\n        if(input === \"exit\") {\n            return interface.close(); // Will kill the loop.\n        }\n        console.log(`Hello, ${input}`);\n        askName();\n\n      });\n}\naskName(); // First Run.\n```", "```js\n        if(input === \"exit\") {\n            return interface.close(); // Will kill the loop.\n        }\n```", "```js\nChapter_8> node examples.js \nHello, what is your name?Mike\nHello, Mike\nHello, what is your name?John\nHello, John\nHello, what is your name?Ed\nHello, Ed\nHello, what is your name?exit\n```", "```js\n    const readline = require('readline');\n    const interface = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n    });\n    ```", "```js\n    const login = function() {\n        interface.question(\"Hello, what is your name?\", (name) => {\n            user = name;\n      prompt();\n          });\n    }\n    ```", "```js\n    const who = function () {\n        console.log(`User is ${user}`);\n        prompt();\n    }\n    ```", "```js\n    const prompt = function() {\n        interface.question(\"login, who OR exit?\", (input) => {\n            if(input === \"exit\") {\n                return interface.close(); // Will kill the loop.\n            }   \n            prompt();\n          });\n    }\n    ```", "```js\n            if(input === \"login\") {\n                login();\n            }\n    ```", "```js\n            if(input === \"who\") {\n                who();\n            }\n    ```", "```js\n    const readline = require('readline');\n    const interface = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n    });\n    var choice;\n    var user;\n    var cinema;\n    const login = function() {\n        interface.question(\"Hello, what is your name?\", (name) => {\n            user = name;\n            prompt();\n          });\n    }\n    const who = function () {\n        console.log(`User is ${user}`)\n        prompt();\n    }\n    const prompt = function() {\n        interface.question(\"login, who OR exit?\", (input) => {\n            if(input === \"exit\") {\n                return interface.close(); // Will kill the loop.\n            }   \n            if(input === \"login\") {\n                login();\n            }\n            if(input === \"who\") {\n                who();\n            }\n          });\n    }\n    prompt();\n    ```", "```js\n    Chapter_8> node .\\Exercise8.06.js\n    login, who OR exit?login\n    Hello, what is your name?Michael\n    login, who OR exit?who\n    User is Michael\n    login, who OR exit?exit\n    ```"]