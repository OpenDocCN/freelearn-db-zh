["```js\n// 1_Hello_World.js\nvar message = \"Hello, Node!\";\nconsole.log(message);\n```", "```js\n> node 1_Hello_World.js\n```", "```js\nSection1> node 1_Hello_World.js\nHello, Node!\nSection1>\n```", "```js\n// 1_Hello_World.js\nconst message = \"Hello, Node!\";\nconsole.log(message);\n```", "```js\nvar printHello = function(parameter) {\n\u00a0\u00a0\u00a0\u00a0console.log(\"Hello, \" + parameter);\n}\nprintHello(\"World\")\n```", "```js\n// 3_Full_Example.js\nconst Mongo = require('mongodb').MongoClient;\nconst server = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test?retryWrites=true&w=majority'\nconst myDB   = 'sample_mflix'\nconst myColl = 'movies';\nconst mongo = new Mongo(server);\nmongo.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0console.log('Our driver has connected to MongoDB!');\n\u00a0\u00a0\u00a0\u00a0const database = mongo.db(myDB);\n\u00a0\u00a0\u00a0\u00a0const collection = database.collection(myColl);\n\u00a0\u00a0\u00a0\u00a0collection.find({title: 'Blacksmith Scene'}).each(function(err, doc) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Doc returned: ')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mongo.close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0})\n})\n```", "```js\n// 4_Define_Function.js\nconst newFunction = function(parameter1, parameter2) {\n\u00a0\u00a0\u00a0\u00a0// Function logic goes here.\n\u00a0\u00a0\u00a0\u00a0console.log(parameter1);\n\u00a0\u00a0\u00a0\u00a0console.log(parameter2);\n}\n```", "```js\n> npm install mongo --save\n```", "```js\n// First load the Driver module.\nconst Mongo = require('MongoDB').MongoClient;\n// Then define our server.\nconst server = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test?retryWrites=true&w=majority';\n// Create a new client.\nconst mongo = new Mongo(server);\n// Connect to our server.\nmongo.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0// Inside this block we are connected to MongoDB.\nmongo.close(); // Close our connection at the end.\n})\n```", "```js\n\u2026\nmongo.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0// Inside this block we are connected to MongoDB.\n\u00a0\u00a0\u00a0\u00a0// Create our database object.\n\u00a0\u00a0\u00a0\u00a0const database = mongo.db(\u00absample_mflix\u00bb);\n\u00a0\u00a0\u00a0\u00a0mongo.close(); // Close our connection at the end.\n})\n\u2026\n```", "```js\n\u2026\nmongo.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0// Inside this block we are connected to MongoDB.\n\u00a0\u00a0\u00a0\u00a0// Create our database object.\n\u00a0\u00a0\u00a0\u00a0const database = mongo.db(\"sample_mflix\");\n\u00a0\u00a0\u00a0\u00a0// Create our collection object\n\u00a0\u00a0\u00a0\u00a0const collection = database.collection(\"movies\");\n\u00a0\u00a0\u00a0\u00a0mongo.close(); // Close our connection at the end.\n})\n\u2026\n```", "```js\nconst serverURL = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\nconst mongo = new Mongo(serverURL);\nmongo.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0// Inside this block we are connected to MongoDB.\nmongo.close(); // Close our connection at the end.\n})\n```", "```js\ncallback. We will cover these in detail later in this chapter. For now, it is enough to use this pattern without having a more in-depth understanding.\n```", "```js\nconst serverURL = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test?retryWrites=true&w=majority';\n```", "```js\nconst mongo = new Mongo(serverURL, {\n\u00a0\u00a0\u00a0\u00a0\u00a0sslValidate: false\n});\nmongo.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0\u00a0// Inside this block we are connected to MongoDB.\nmongo.close(); // Close our connection at the end.\n})\n```", "```js\n    > node Exercise8.01.js\n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    ```", "```js\n    const url = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\n    ```", "```js\n    const client = new MongoClient(url);\n    ```", "```js\n    client.connect(function(err) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u2026\n    })\n    ```", "```js\n    console.log('Connected to MongoDB with NodeJS!');\n    ```", "```js\n    client.close(); // Close our connection at the end.\n    ```", "```js\n    // Import MongoDB Driver module.\n    const MongoClient = require('mongodb').MongoClient;\n    // Create a new url variable.\n    const url = 'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\n    // Create a new MongoClient.\n    const client = new MongoClient(url);\n    // Open the connection using the .connect function.\n    client.connect(function(err) {\n    \u00a0\u00a0\u00a0\u00a0// Within the connection block, add a console.log to confirm the       connection\n    \u00a0\u00a0\u00a0\u00a0console.log('Connected to MongoDB with NodeJS!');\n    \u00a0\u00a0\u00a0\u00a0client.close(); // Close our connection at the end.\n    })\n    ```", "```js\n    Chapter8> node Excercise8.01.js\n    Connected to MongoDB with NodeJS!\n    Chapter8>\n    ```", "```js\ndb.movies.findOne({})\n```", "```js\ncollection.find({title: 'Blacksmith Scene'}).each(function(err, doc) { \u2026 }\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n// Replace this variable with the connection string for your server, provided by   MongoDB Atlas.\nconst url = 'mongodb+srv://username:password@server-abcdef.gcp.mongodb.net/test';\nconst client = new MongoClient(url);\nclient.connect(function(err) {\n\u00a0\u00a0\u00a0\u00a0console.log('Connected to MongoDB with NodeJS!');\n\u00a0\u00a0\u00a0\u00a0// OUR CODE GOES BELOW HERE\n\u00a0\u00a0\u00a0\u00a0// AND ABOVE HERE\n\u00a0\u00a0\u00a0\u00a0client.close();\n})\n```", "```js\n\u00a0\u00a0\u00a0\u00a0// OUR CODE GOES BELOW HERE\n\u00a0\u00a0\u00a0\u00a0// AND ABOVE HERE\n```", "```js\n\u00a0\u00a0\u00a0\u00a0// OUR CODE GOES BELOW HERE\n\u00a0\u00a0\u00a0\u00a0const database = client.db(\"sample_mflix\")\n\u00a0\u00a0\u00a0\u00a0// AND ABOVE HERE\n```", "```js\n// Defining filter first.\nvar filter = { title: 'Blacksmith Scene'};\ndatabase.collection(\"movies\").find(filter).toArray(function(err, docs) { });\n// Doing everything in a single line.\ndatabase.collection(\"movies\").find({title: 'Blacksmith   Scene'}).toArray(function(err, docs) {});\n```", "```js\nconst\u00a0MongoClient\u00a0=\u00a0require('mongodb').MongoClient;\n// Replace this variable with the connection string for your server, provided by   MongoDB Atlas.\nconst\u00a0url\u00a0=\u00a0'mongodb+srv://mike:password@myAtlas-  fawxo.gcp.mongodb.net/test?retryWrites=true&w=majority'\nconst\u00a0client\u00a0=\u00a0new\u00a0MongoClient(url);\nclient.connect(function(err)\u00a0{\n\u00a0\u00a0\u00a0\u00a0console.log('Connected\u00a0to\u00a0MongoDB\u00a0with\u00a0NodeJS!');\n\u00a0\u00a0\u00a0\u00a0const\u00a0database\u00a0=\u00a0client.db(\"sample_mflix\");\n\u00a0\u00a0\u00a0\u00a0var\u00a0filter\u00a0=\u00a0{\u00a0title:\u00a0'Blacksmith\u00a0Scene'};\n\u00a0\u00a0\u00a0\u00a0database.collection(\"movies\").find(filter).toArray(function(err,\u00a0docs)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Docs\u00a0results:');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(docs);\n\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0client.close();\n})\n```", "```js\n    database.collection(\"movies\").find(filter).toArray(function(err,\u00a0docsArray)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0console.log('Docs\u00a0results\u00a0as\u00a0an\u00a0array:');\n    \u00a0\u00a0\u00a0\u00a0console.log(docsArray[0]);\u00a0//\u00a0Print\u00a0the\u00a0first\u00a0entry\u00a0in\u00a0the\u00a0array.\n    \u00a0});\n    ```", "```js\n    database.collection(\"movies\").find(filter).each(function(err,\u00a0doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current\u00a0doc');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n    \u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\u00a0//\u00a0Close\u00a0our\u00a0connection.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0//\u00a0End\u00a0the\u00a0each\u00a0loop.\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0});\n    ```", "```js\n    database.collection(\"movies\").find(filter).next(function(err,\u00a0doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0console.log(\"First\u00a0doc\u00a0in\u00a0the\u00a0cursor\");\n    \u00a0\u00a0\u00a0\u00a0console.log(doc);\n    \u00a0});\n    ```", "```js\ndatabase.collection(\"movies\").find(filter).limit(5).sort([['title', 1]]).next   (function(err,\u00a0doc)\u00a0{\u2026}\n```", "```js\n    const\u00a0databaseName\u00a0=\u00a0\"sample_mflix\";\n    const\u00a0collectionName\u00a0=\u00a0\"movies\";\n    ```", "```js\n    const query = { genres: { $all: [\"Romance\"]}\u00a0};\n    ```", "```js\n    const database = client.db(databaseName);\n    ```", "```js\n    database.collection(collectionName).find(query).limit(2).project({title:   1}).each(function(err,\u00a0doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(doc) {\n\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\u00a0// Close our connection.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0// End the each loop.\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0});\n    ```", "```js\n    if(doc){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current doc');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n    }\u00a0\u00a0\n    ```", "```js\n    const\u00a0MongoClient\u00a0=\u00a0require('mongodb').MongoClient;\n    const\u00a0url\u00a0=\u00a0'mongodb+srv://username:password@server-  abcdef.gcp.mongodb.net/test';\n    const\u00a0client\u00a0=\u00a0new\u00a0MongoClient(url);\n    const\u00a0databaseName\u00a0=\u00a0\"sample_mflix\";\n    const\u00a0collectionName\u00a0=\u00a0\"movies\";\n    const\u00a0query\u00a0=\u00a0{\u00a0genres:\u00a0{\u00a0$all:\u00a0[\"Romance\"]}\u00a0};\n    //\u00a0Open\u00a0the\u00a0connection\u00a0using\u00a0the\u00a0.connect\u00a0function.\n    client.connect(function(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0//\u00a0Within\u00a0the\u00a0connection\u00a0block,\u00a0add\u00a0a\u00a0console.log\u00a0to\u00a0confirm\u00a0the\u00a0      connection\n    \u00a0\u00a0\u00a0\u00a0console.log('Connected\u00a0to\u00a0MongoDB\u00a0with\u00a0NodeJS!');\n    \u00a0\u00a0\u00a0\u00a0const\u00a0database\u00a0=\u00a0client.db(databaseName);\n    \u00a0\u00a0\u00a0\u00a0database.collection(collectionName).find(query).limit(2).project({title:      1}).each(function(err, doc) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current doc');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close(); // Close our connection.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;   // End the each loop.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0});\n    })\n    ```", "```js\n    Connected to MongoDB with NodeJS!\n    Our database connected alright!\n    Current doc\n    { _id: 573a1390f29313caabcd548c, title: 'The Birth of a Nation' }\n    Current doc\n    { _id: 573a1390f29313caabcd5b9a, title: \"Hell's Hinges\" }\n    ```", "```js\n.each(function(err,\u00a0doc)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current\u00a0doc');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\u00a0//\u00a0Close\u00a0our\u00a0connection.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0//\u00a0End\u00a0the\u00a0each\u00a0loop.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0});\n```", "```js\ndatabase.collection(collectionName).find(query).limit(2).project({title:\u00a01}).each   (function(err, doc) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current doc');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close(); // Close our connection.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;   // End the each loop.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0});\n```", "```js\nconsole.log('This will execute first.')\ndatabase.collection(collectionName).find(query).limit(2).project({title:\u00a01}).each   (function(err,\u00a0doc)\u00a0{\nconsole.log('This will execute last, once for each document in the result.')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\u00a0//\u00a0Close\u00a0our\u00a0connection.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0//\u00a0End\u00a0the\u00a0each\u00a0loop.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0});\nconsole.log('This will execute second.');\n```", "```js\nConnected to MongoDB with NodeJS!\nThis will execute first.\nThis will execute second.\nThis will execute last, once for each doc.\nThis will execute last, once for each doc.\nThis will execute last, once for each doc.\n```", "```js\ndatabase.collection(collectionName).find(query).limit(2).project({title:\u00a01}).each   (function(err,\u00a0doc)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Error in query.');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0if(doc) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current doc');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close(); // Close our connection.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;   // End the each loop.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0});\n```", "```js\n// Open the connection using the .connect function.\nclient.connect(function(err)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Error connecting!');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Within the connection block,\u00a0add\u00a0a\u00a0console.log to confirm the           connection\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Connected to MongoDB with NodeJS!');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close(); // Close our connection at the end.\n\u00a0\u00a0\u00a0\u00a0}\n})\n```", "```js\n\u00a0\u00a0\u00a0\u00a0const\u00a0database\u00a0=\u00a0client.db(databaseName);\n\u00a0\u00a0\u00a0\u00a0if(database)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Our database connected alright!');\n\u00a0\u00a0\u00a0\u00a0}\n```", "```js\n    client.connect(function(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Failed\u00a0to\u00a0connect.');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0//\u00a0Within\u00a0the\u00a0connection\u00a0block,\u00a0add\u00a0a\u00a0console.log\u00a0to\u00a0confirm\u00a0the       connection\n    \u00a0\u00a0\u00a0\u00a0console.log('Connected\u00a0to\u00a0MongoDB\u00a0with\u00a0NodeJS!');\n    ```", "```js\n    \u00a0\u00a0\u00a0\u00a0const\u00a0database\u00a0=\u00a0client.db(databaseName);\n    \u00a0\u00a0\u00a0\u00a0if(!database)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Database\u00a0object\u00a0doesn't\u00a0exist!');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```js\n    \u00a0\u00a0\u00a0\u00a0database.collection(collectionName).find(query).limit(2).project({title:\u00a01}).each(function(err,\u00a0doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Query\u00a0error.');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current\u00a0doc');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\u00a0//\u00a0Close\u00a0our\u00a0connection.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0//\u00a0End\u00a0the\u00a0each\u00a0loop.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```js\n    const MongoClient = require('mongodb').MongoClient;\n    const url\u00a0=\u00a0'mongodb+srv://username:password@server-  fawxo.gcp.mongodb.net/test?retryWrites=true&w=majority';\n    const client\u00a0=\u00a0new\u00a0MongoClient(url);\n    const databaseName\u00a0=\u00a0\"sample_mflix\";\n    const collectionName\u00a0=\u00a0\"movies\";\n    const query = { genres: { $all: [\"Romance\"]} };\n    // Open the connection using the .connect function.\n    client.connect(function(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Failed to connect.');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// Within\u00a0the\u00a0connection\u00a0block,\u00a0add\u00a0a\u00a0console.log\u00a0to\u00a0confirm\u00a0the\u00a0      connection\n    \u00a0\u00a0\u00a0\u00a0console.log('Connected\u00a0to\u00a0MongoDB\u00a0with\u00a0NodeJS!');\n    \u00a0\u00a0\u00a0\u00a0const\u00a0database\u00a0=\u00a0client.db(databaseName);\n    \u00a0\u00a0\u00a0\u00a0if(!database)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Database\u00a0object\u00a0doesn't\u00a0exist!');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0database.collection(collectionName).find(query).limit(2).project({title:      1}).each(function(err,\u00a0doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Query\u00a0error.');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(doc)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Current\u00a0doc');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(doc);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\u00a0//\u00a0Close\u00a0our\u00a0connection.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\u00a0\u00a0\u00a0//\u00a0End\u00a0the\u00a0each\u00a0loop.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0});\n    })\n    ```", "```js\n    Connected to MongoDB with NodeJS!\n    Current doc\n    { _id: 573a1390f29313caabcd548c, title: 'The Birth of a Nation' }\n    Current doc\n    { _id: 573a1390f29313caabcd5b9a, title: \"Hell's Hinges\" }\n    ```", "```js\n    const\u00a0query\u00a0=\u00a0{\u00a0genres:\u00a0{\u00a0$thisIsNotAnOperator:\u00a0[\"Romance\"]}\u00a0};\n    ```", "```js\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).insertOne({Hello:      \"World\"},\u00a0function(err,\u00a0result)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Handle result.\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).insertMany([{Hello:\u00a0\"World\"},\u00a0      {Hello:\u00a0\"Mongo\"}],\u00a0function(err,\u00a0result)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Handle result.\n\u00a0\u00a0\u00a0\u00a0})\n```", "```js\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).insertOne({Hello:\u00a0\"World\"},       function(err, result)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(result.result);\n\u00a0\u00a0\u00a0client.close();\n\u00a0\u00a0\u00a0\u00a0})\n```", "```js\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).updateOne({Hello:\u00a0\"World\"},\u00a0{$set:\u00a0{Hello       :\u00a0\"Earth\"}},\u00a0function(err,\u00a0result)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(result.modifiedCount);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n\u00a0\u00a0\u00a0\u00a0})\n```", "```js\nConnected to MongoDB with NodeJS!\n1\n```", "```js\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).deleteOne({Hello:\u00a0\"Earth\"},\u00a0function(err,\u00a0result)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(result.deletedCount);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n\u00a0\u00a0\u00a0\u00a0})\n```", "```js\nConnected to MongoDB with NodeJS!\n1\n```", "```js\ndatabase.collection(collectionName).find({name: \"Matthew\"}).each(function(err,   doc) {});\ndatabase.collection(collectionName).find({name: \"Mark\"}).each(function(err, doc)   {});\ndatabase.collection(collectionName).find({name: \"Luke\"}).each(function(err, doc)   {})\n```", "```js\nconst findByName = function(name) {\n\n}\n```", "```js\nconst findByName = function(name) {\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).find({name:       name}).each(function(err,\u00a0doc)\u00a0{})\n}\n```", "```js\nconst\u00a0findByName = function(name, database) {\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).find({name: name}).each(function(err,       doc) {})\n}\n```", "```js\nconst\u00a0findByName\u00a0=\u00a0function(name,\u00a0database)\u00a0{\n\u00a0\u00a0\u00a0\u00a0database.collection(collectionName).find({name:\u00a0name}).each(function(err,\u00a0doc       )\u00a0{})\n}\nfindByName(\"Matthew\",\u00a0database);\nfindByName(\"Mark\",\u00a0database);\nfindByName(\"Luke\",\u00a0database);\n```", "```js\n    db.chapter8_Exercise4.find({ $or: [{name: \"Ned Stark\"}, {name: \"Robb Stark\"}, {name: \"Bran Stark\"}]});\n    ```", "```js\n    db.chapter8_Exercise4.insert([{name: \"Ned Stark\"}, {name: \"Bran Stark\"}, {name: \"Robb Stark\"}]);\n    ```", "```js\n    const collectionName = \"chapter8_Exercise4\";\n    ```", "```js\n    const\u00a0updateName\u00a0=\u00a0function(client, database, oldName, newName) {\n    }\n    ```", "```js\n    const\u00a0updateName\u00a0=\u00a0function(client,\u00a0database,\u00a0oldName,\u00a0newName)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0database.collection(collectionName).updateOne({name:\u00a0oldName},\u00a0{$set:\u00a0{name:\u00a0newName}},\u00a0function(err,\u00a0result)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Error\u00a0updating');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Updated documents #:');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(result.modifiedCount);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n    \u00a0\u00a0\u00a0\u00a0})\n    };\n    ```", "```js\n    \u00a0\u00a0\u00a0\u00a0updateName(client,\u00a0database,\u00a0\"Ned\u00a0Stark\",\u00a0\"Greg\u00a0Stark\");\n    \u00a0\u00a0\u00a0\u00a0updateName(client,\u00a0database,\u00a0\"Robb\u00a0Stark\",\u00a0\"Bob\u00a0Stark\");\n    \u00a0\u00a0\u00a0\u00a0updateName(client,\u00a0database,\u00a0\"Bran\u00a0Stark\",\u00a0\"Brad\u00a0Stark\");\n    ```", "```js\n    const\u00a0MongoClient\u00a0=\u00a0require('mongodb').MongoClient;\n    const\u00a0url\u00a0=\u00a0'mongodb+srv://mike:password@myAtlas-fawxo.gcp.mongodb.net/test?retryWrites=true&w=majority';\n    const\u00a0client\u00a0=\u00a0new\u00a0MongoClient(url);\n    const\u00a0databaseName\u00a0=\u00a0\"sample_mflix\";\n    const\u00a0collectionName\u00a0=\u00a0\"chapter8_Exercise4\";\n    const\u00a0updateName\u00a0=\u00a0function(client,\u00a0database,\u00a0oldName,\u00a0newName)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0database.collection(collectionName).updateOne({name:\u00a0oldName},\u00a0{$set:\u00a0{name:\u00a0newName}},\u00a0function(err,\u00a0result)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(err)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Error\u00a0updating');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Updated\u00a0documents\u00a0#:');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(result.modifiedCount);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.close();\n    \u00a0\u00a0\u00a0\u00a0})\n    };\n    // Open the connection using the .connect function.\n    client.connect(function(err) {\n    \u00a0\u00a0\u00a0\u00a0if(err) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Failed to connect.');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(err);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// Within the connection block, add a console.log to confirm the connection\n    \u00a0\u00a0\u00a0\u00a0console.log('Connected to MongoDB with NodeJS!');\n    \u00a0\u00a0\u00a0\u00a0const database = client.db(databaseName);\n    \u00a0\u00a0\u00a0\u00a0if(!database)\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Database\u00a0object\u00a0doesn't\u00a0exist!');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0updateName(client,\u00a0database,\u00a0\"Ned\u00a0Stark\",\u00a0\"Greg\u00a0Stark\");\n    \u00a0\u00a0\u00a0\u00a0updateName(client,\u00a0database,\u00a0\"Robb\u00a0Stark\",\u00a0\"Bob\u00a0Stark\");\n    \u00a0\u00a0\u00a0\u00a0updateName(client,\u00a0database,\u00a0\"Bran\u00a0Stark\",\u00a0\"Brad\u00a0Stark\");\n    })\n    ```", "```js\n    Connected to MongoDB with NodeJS!\n    Updated documents #:\n    1\n    Updated documents #:\n    1\n    Updated documents #:\n    1\n    ```", "```js\nconst readline = require('readline');\nconst interface = readline.createInterface({\n\u00a0\u00a0\u00a0\u00a0input: process.stdin,\n\u00a0\u00a0\u00a0\u00a0output: process.stdout,\n});\n```", "```js\ninterface.question('Hello, what is your name? ', (input) => {\n\u00a0\u00a0\u00a0\u00a0console.log(`Hello, ${input}`);\n\u00a0\u00a0\u00a0\u00a0interface.close();\n\u00a0\u00a0});\n```", "```js (if you're not sure where to find this, on a standard QWERTY keyboard, it shares a key with the ~ symbol, to the left of the `1` key.)\n\nIf we run this example, we will get an output resembling this:\n\n```", "```js\n\nIf you want to create a longer prompt, it is better to use `console.log` to output the bulk of your output, and then provide just a smaller question for the `readline`. For example, say we have a long message that we send before we ask for user input. We can define it as a variable and log it before we ask our question:\n\n```", "```js\n\nIn this way, it is easy to modify and reuse our messages across multiple inputs.\n\nNote\n\nThere are many different libraries and modules for handling inputs in Node.js. However, to keep things simple, we'll use `readline` in this\u00a0chapter.\n\n## Creating an Interactive Loop\n\nSo, we have an easy way of asking a user a question and accepting some input from them. However, our application won't be very useful if we have to run it from the command line every time we want to use it. It would be much more useful if we could run the program once, and execute many runs of it based on different inputs.\n\nTo accomplish this, we can create an interactive loop, meaning the application will keep asking for input until an exit condition is met. To make sure we keep looping, we can place our prompt in a function that calls itself, which will keep running the code inside its block until the exit condition stated becomes `true`. This will provide a much better experience for users of our code. Here is an example of an interactive loop using our aforementioned `readline`:\n\n```", "```js\n\nNote the exit condition here:\n\n```", "```js\n\nIt is vitally important to ensure that, in any loop, you have an exit condition, as this allows users to quit the application. Otherwise, they will be stuck in a loop forever, and it may consume the resources of your computer.\n\nNote\n\nWhen writing loops in your code, it is possible that you could accidentally create an infinite loop without an exit condition. If this does happen, you may have to kill your shell or Terminal. You can try *Ctrl+C*, or *Cmd+C* on a macOS, to exit.\n\nIf you were to run the preceding example, you would be able to answer the question multiple times before exiting; for example:\n\n```", "```js\n\n## Exercise 8.05: Handling Inputs in Node.js\n\nFor this exercise, you're going to create a small Node.js application that allows you to ask users their name. You can think of this as a rudimentary login system. This application should run in an interactive loop; the options for the user are as follows:\n\n*   `login` (*Ask and store the user's name*)\n*   `who` (*Output the user's name*)\n*   `exit` (*End the application*)\n\nCreate this application by performing the following steps:\n\n1.  Create a new JavaScript file called `Exercise8.05.js`.\n2.  Import the `readline` module:\n\n    ```", "```js\n\n3.  Define the choice and user variables.\n4.  Now, define a new function called `login` that takes user as parameters. The function first asks for a user and stores it in a variable:\n\n    ```", "```js\n\n5.  Create a new function called `who` that outputs `user`:\n\n    ```", "```js\n\n6.  Create an input loop with the condition that choice is not equal to exit:\n\n    ```", "```js\n\n7.  After that, use the if keyword to check whether their choice matches \"`login`\". If we find a match, then run the `login` function:\n\n    ```", "```js\n\n8.  Then, use the if keyword to check whether their choice matches \"`who`\". If we find a match, then print out the `user` variable:\n\n    ```", "```js\n\n    Your final code should look something like this:\n\n    ```", "```js\n\n9.  Run the code using `node Exercise8.05.js` and enter some input. Now, you should be able to interact with the application. The following is an example:\n\n    ```"]