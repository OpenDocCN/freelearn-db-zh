["```js\ndb.oplog.rs.stats().maxSize\n```", "```js\nuse local  \nvar opl = db.oplog.rs.stats().maxSize/1024/1024\nprint(\"Oplog size: \" + ~~opl + \" MB\")\n```", "```js\nrs.status().members\n```", "```js\n    mongo \"mongodb+srv://cluster0.u7n6b.mongodb.net/test\" --username admindb\n    ```", "```js\n    var rs_srv = rs.status().members\n    for (i=0; i<rs_srv.length; i++) {\n    \u00a0\u00a0\u00a0\u00a0print (rs_srv[i].name, '  -  ', rs_srv[i].stateStr)\n    }\n    ```", "```js\n\"mongodb+srv://cluster0.<id#>.mongodb.net/<db_name>\"\n```", "```js\nconnecting to: mongodb://cluster0-shard-00-00.u7n6b.mongodb.net:27017,cluster0-shard-00-01.u7n6b.mongodb.net:27017,cluster0-shard-00-02.u7n6b.mongodb.net:27017/test?authSource=admin&compressors=disabled&gssapiServiceName=mongodb&replicaSet=atlas-rzhbg7-shard-0&ssl=true\n```", "```js\nMongoDB Enterprise atlas-rzhbg7-shard-0:PRIMARY>\n```", "```js\nreplicaset/server1:port1, server2:port2, server3:port3...\n```", "```js\ndb.getMongo()\n```", "```js\nmongo \"mongodb://cluster0-shard-00-00.u7n6b.mongodb.net:27017/test?authSource=admin&ssl=true\" --username admindb\n```", "```js\n    mongo \"mongodb+srv://cluster0.u7n6b.mongodb.net/test\" --username admindb\n    ```", "```js\n    use sample_mflix\n    db.createCollection(\"new_collection\")\n    for (i=0; i<=100; i++) {\n    \u00a0\u00a0\u00a0\u00a0db.new_collection.insert({_id:i, \"value\":Math.random()})\n    }\n    ```", "```js\n    mongo \"mongodb://cluster0-shard-00-00.u7n6b.mongodb.net:27017/test?authSource=admin&ssl=true\" --username admindb\n    ```", "```js\n    rs.slaveOk()\n    ```", "```js\ndb.getMongo().getReadPrefMode()\n```", "```js\ndb.getMongo().setReadPref('secondary')\n```", "```js\n\"mongodb+srv://atlas1-u7n6b.mongodb.net/?readPreference=secondary\"\n```", "```js\ndb.new_collection.insert({\"_id\":1, \"info\": \"test writes\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{w:2})\n```", "```js\n    mongod --replSet cluster0 --port 27017 --bind_ip <server_ip_address> --dbpath /data/db --logpath /var/log/mongodb/cluster0.log --oplogSize 100\n    ```", "```js\n    mongod --replSet cluster0 --port 27017 --bind_ip <server_ip_address> --dbpath C:\\mongo\\data --logpath C:\\mongo\\log\\cluster0.log --oplogSize 100\n    ```", "```js\n    mongo mongodb://hostname1.domain/cluster0\n    ```", "```js\n    var cfg = {\n    \u00a0\u00a0\u00a0\u00a0_id : \"cluster0\",   \n    \u00a0\u00a0\u00a0\u00a0members : [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ _id : 0, host : \"hostname1.domain\":27017\"},  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ _id : 1, host : \"hostname2.domain\":27017\"},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ _id : 2, host : \"hostname3.domain\":27017\"},  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\n    }\n    ```", "```js\n    rs.initiate( cfg )\n    ```", "```js\n    start mongod --replSet my_cluster --port 27001 --dbpath C:\\data\\inst1 -- logpath C:\\data\\log\\inst1.log --logappend --oplogSize 50\n\n    start mongod --replSet my_cluster --port 27002 --dbpath C:\\data\\inst2 -- logpath C:\\data\\log\\inst2.log --logappend --oplogSize 50\n\n    start mongod --replSet my_cluster --port 27003 --dbpath C:\\data\\inst3 -- logpath C:\\data\\log\\inst3.log --logappend --oplogSize 50\n    ```", "```js\n    16.613+1000 I  NETWORK  [initandlisten] waiting for connections on port 27001\n    ```", "```js\n    mongo mongodb://localhost:27001/replicaSet=my_cluster\n    ```", "```js\n    var cfg = {\n    \u00a0\u00a0\u00a0\u00a0_id : \"my_cluster\",     //replica set name\n    \u00a0\u00a0\u00a0\u00a0members : [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ _id : 0, host : \"localhost:27001\"},  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ _id : 1, host : \"localhost:27002\"},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ _id : 2, host : \"localhost:27003\"},  \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\n    }\n    ```", "```js\n    rs.initiate( cfg )\n    ```", "```js\n    rs.status()\n    ```", "```js\n    rs.conf()\n    ```", "```js\nmongod --dbpath C:\\data\\inst4 --replSet <cluster_name>  --bind_ip <hostname> --  logpath <disk path>\n```", "```js\nrs.add ( \"node4.domain.com:27004\" )\n```", "```js\nINITSYNC [replication-0] Starting initial sync (attempt 1 of 10)\n```", "```js\nrs.add ( {host: \"node4.domain.com:27017\", hidden : true,   votes : 1})\n```", "```js\nrs.remove({ <hostname.com> })\n```", "```js\nrs.reconfig()\n```", "```js\n    var new_cfg = rs.config()\n    ```", "```js\n    new_conf.members[0].priority=1\n    new_conf.members[1].priority=0.5\n    new_conf.members[2].priority=0\n    ```", "```js\n    rs.reconfig(new_cfg)\n    ```", "```js\n2019-11-25T15:08:05.893+1000  REPL     [replexec-0] Member localhost:27003 is now in state RS_DOWN - Error connecting to localhost:27003 (127.0.0.1:27003) :: caused by :: No connection could be made because the target machine actively refused it.\n```", "```js\n2019-11-25T15:08:05.893+1000 I  ELECTION [replexec-4] not becoming primary, we received insufficient votes\n...Election failed.\n```", "```js\n2019-11-25T15:09:45.928+1000 W  NETWORK  [ReplicaSetMonitor-TaskExecutor] Unable to reach primary for set my_cluster\n2019-11-25T15:09:45.929+1000 E  QUERY    [js] Error: Could not find host matching read preference { mode: \"primary\", tags: [ {} ] } for set my_cluster :\n```", "```js\nmongo mongodb://localhost:27001/?readPreference=secondary&replicaSet=my_cluster\n```", "```js\nrs.stepDown()\n```", "```js\nrs.isMaster()\n```", "```js\n    var sw_over = rs.conf()\n    sw_over.member[2].priority = 0\n    rs.reconfig(sw_over)\n    ```", "```js\n    rs.stepDown()\n    ```", "```js\n    rs.isMaster().primary\n    ```", "```js\n    db.shutdownServer()\n    ```", "```js\nROLLBACK [rsBackgroundSync] transition to SECONDARY\n2019-11-26T15:48:29.538+1000 I  REPL     [rsBackgroundSync] transition to SECONDARY from ROLLBACK\n2019-11-26T15:48:29.538+1000 I  REPL     [rsBackgroundSync] Rollback successful.\n```"]