- en: 11\. Backup and Restore in MongoDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. MongoDB中的备份和恢复
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we will examine exactly how to load backups, samples, and test
    databases into a target MongoDB instance, and just as importantly, you will learn
    how to export an existing dataset for backup and restoration at a later date.
    By the end of this chapter, you will be able to backup, export, import, and restore
    MongoDB data into an existing server. This allows you to recover data from disasters
    as well as quickly load known information into a system for testing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细研究如何将备份、样本和测试数据库加载到目标MongoDB实例中，同样重要的是，你将学会如何导出现有数据集以备份和恢复。到本章结束时，你将能够将MongoDB数据备份、导出、导入和恢复到现有服务器中。这使你能够从灾难中恢复数据，以及快速将已知信息加载到系统进行测试。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapters, we have relied primarily on the sample data preloaded
    into a MongoDB Atlas instance. Unless you are working on a new project, this is
    generally the way a database will first appear to you. However, when you are hired
    or moved to a different project with a MongoDB database, it will contain all the
    data that was created before you started there.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们主要依赖预加载到MongoDB Atlas实例中的样本数据。除非你在进行新项目，否则这通常是数据库首次出现的方式。然而，当你被雇佣或转移到一个包含MongoDB数据库的不同项目时，它将包含在你开始之前创建的所有数据。
- en: Now, what if you require a local copy of this data to test your applications
    or queries? It is often not safe or feasible to run queries directly against production
    databases, so the process of duplicating datasets onto a testing environment is
    quite common. Similarly, when creating a new project, you may wish to load some
    sample data or test data into the database. In this chapter, we will examine the
    procedures for migrating, importing or exporting for an existing MongoDB server
    and setting up a new database with existing data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你需要一个本地副本来测试你的应用程序或查询呢？直接对生产数据库运行查询通常是不安全或不可行的，因此将数据集复制到测试环境是非常常见的过程。同样，当创建一个新项目时，你可能希望将一些样本数据或测试数据加载到数据库中。在本章中，我们将研究迁移、导入或导出现有MongoDB服务器的程序，并设置一个包含现有数据的新数据库的程序。
- en: Note
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout this chapter, the exercises and activities included are iterations
    on a single scenario. The data and examples are based on the MongoDB Atlas sample
    database titled `sample_mflix`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，包括的练习和活动都是对一个场景的迭代。数据和示例都基于名为`sample_mflix`的MongoDB Atlas示例数据库。
- en: For the duration of this chapter, we will follow a set of exercises based on
    a theoretical scenario. This is an expansion of the scenario covered in *Chapter
    7*, *Data Aggregation* and *Chapter 8*, *Coding JavaScript in MongoDB*. As you
    may recall, a cinema chain asked you to create queries and programs that would
    analyze their database to produce a list of movies to screen during their promotional
    season.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章期间，我们将按照一个理论场景进行一系列练习。这是对*第7章*“数据聚合”和*第8章*“在MongoDB中编写JavaScript”中涵盖的场景的扩展。你可能还记得，一个电影院连锁要求你创建查询和程序，分析他们的数据库，以制作在促销季期间放映的电影列表。
- en: Over the course of these chapters, you built up some aggregations whose output
    was a new collection containing summary data. You also created an application
    that enabled users to update movies programmatically. The company has been so
    delighted with your work that they have decided to migrate the entire system to
    more significant, better hardware. Although the system administrators feel they
    are confident in migrating the existing MongoDB instance to the new hardware,
    you have decided it would be best if you manually test the procedure to ensure
    you can assist if required.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些章节中，你已经构建了一些聚合，其输出是包含摘要数据的新集合。你还创建了一个应用程序，使用户可以以编程方式更新电影。公司对你的工作非常满意，他们决定将整个系统迁移到更重要、更好的硬件上。尽管系统管理员们对将现有的MongoDB实例迁移到新硬件上感到自信，但你决定最好手动测试该过程，以确保在需要时能够提供帮助。
- en: The MongoDB Utilities
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB实用程序
- en: 'The mongo shell does not include functions for exporting, importing, backup
    or restore. However, MongoDB has created methods for accomplishing this, so that
    no scripting work or complex GUIs are needed. For this, several utility scripts
    are provided that can be used to get data in or out of the database in bulk. These
    utility scripts are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: mongo shell不包括导出、导入、备份或恢复的功能。然而，MongoDB已经创建了方法来实现这一点，因此不需要脚本工作或复杂的图形用户界面。为此，提供了几个实用程序脚本，可以用于批量将数据进出数据库。这些实用程序脚本包括：
- en: '`mongoimport`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongoimport`'
- en: '`mongoexport`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongoexport`'
- en: '`mongodump`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongodump`'
- en: '`mongorestore`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mongorestore`'
- en: We will cover each of these utilities in detail in the upcoming sections. As
    their names suggest, these four utilities correspond to importing documents, exporting
    documents, backing up a database and restoring a database. We will start with
    the topic of exporting data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细介绍这些实用程序。正如它们的名称所示，这四个实用程序对应于导入文档、导出文档、备份数据库和恢复数据库。我们将从导出数据的主题开始。
- en: Exporting MongoDB Data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出MongoDB数据
- en: When it comes to moving data in and out of MongoDB in bulk, the most common
    and generally useful utility is `mongoexport`. This command is useful because
    it is one of the primary ways to extract large amounts of data from MongoDB in
    a usable format. Getting your MongoDB data out into a JSON file allows you to
    ingest it with other applications or databases and share data with stakeholders
    outside of MongoDB.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在批量移动数据进出MongoDB时，最常见且通用的实用程序是`mongoexport`。这个命令很有用，因为它是从MongoDB中提取大量数据的主要方式之一。将MongoDB数据导出到JSON文件中，可以让你将其与其他应用程序或数据库一起使用，并与MongoDB之外的利益相关者共享数据。
- en: 'It is important to note that `mongoexport` must run on a single specified database
    and collection. You cannot run `mongoexport` on an entire database or multiple
    collections. We will see how to accomplish larger scope backups like these later
    in the chapter. The following snippet is an example of `mongoexport` in action:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，`mongoexport` 必须在指定的单个数据库和集合上运行。 不能在整个数据库或多个集合上运行 `mongoexport`。 我们将在本章后面看到如何完成类似这样的更大范围的备份。
    以下片段是 `mongoexport` 的示例：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This example is a more complex command, which includes some optional parameters
    and explicitly sets others. In practice though, your export commands may be much
    more straightforward. The structure and parameters used here are explained in
    detail in the following section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是一个更复杂的命令，其中包括一些可选参数并明确设置其他参数。 但是在实践中，您的导出命令可能会简单得多。 这里使用的结构和参数在下一节中有详细解释。
- en: Using mongoexport
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 mongoexport
- en: 'The best way to learn the `mongoexport` syntax is to build up a command parameter
    by parameter. So let''s do that, beginning with the simplest possible version
    of an export:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 `mongoexport` 语法的最佳方法是逐个参数地构建命令。 所以让我们从最简单的导出开始：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, in its simplest form, the command only requires a single parameter:
    `–-collection`. This parameter is the collection for which we wish to export our documents.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，命令的最简单形式只需要一个参数：`–-collection`。 此参数是我们希望导出文档的集合。
- en: 'If you execute this command, you may encounter some puzzling results, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行此命令，可能会遇到一些令人困惑的结果，如下所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We get this result because we have not specified a database or URI. In such
    cases, where these details are not specified, `mongoexport` defaults to using
    a local MongoDB on port 27017 and the default database. Since we have been running
    our MongoDB server on Atlas in previous chapter examples and exercises, let's
    update our command to specify these parameters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到这个结果是因为我们没有指定数据库或 URI。 在这种情况下，`mongoexport` 默认使用本地 MongoDB 的端口 27017 和默认数据库。
    由于在上一章的示例和练习中我们一直在 Atlas 上运行我们的 MongoDB 服务器，让我们更新我们的命令以指定这些参数。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You cannot specify both database and URI; this is because the database is a
    part of the URI. In this chapter, we will use URI for our exports.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能同时指定数据库和 URI；这是因为数据库是 URI 的一部分。 在本章中，我们将使用 URI 进行导出。
- en: 'The updated command would look as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的命令如下所示：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that you have a valid command, run it against the MongoDB Atlas database.
    You will see the following output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个有效的命令，可以针对 MongoDB Atlas 数据库运行它。 您将看到以下输出：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At the end of the output, you should see the number of exported records:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的末尾，您应该看到导出的记录数：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With your URI specified, the export operation worked, and you can see all the
    documents from the `theatres` collection. However, it''s not very useful having
    all these documents flooding your output. You could use some shell commands to
    pipe or append this output into a file, but the `mongoexport` command provides
    another parameter in its syntax for outputting to a file automatically. You can
    see this parameter (`--out`) in the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定的 URI，导出操作成功，并且您可以看到从 `theatres` 集合中的所有文档。 但是，将所有这些文档淹没在输出中并不是很有用。 您可以使用一些
    shell 命令将此输出管道或附加到文件中，但是 `mongoexport` 命令在其语法中提供了另一个参数，用于自动输出到文件。 您可以在以下命令中看到此参数
    (`--out`)：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After running this command, you will see the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您将看到以下输出：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, there is a new file created in that directory called `output.json`. If
    you look inside this file, you can see our documents exported from the theatres
    collection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在该目录中创建了一个名为 `output.json` 的新文件。 如果您查看此文件，您可以看到我们从 theatres 集合中导出的文档。
- en: The parameters `uri`, `collection`, and `out` enable the majority of use cases
    for exporting. Once you have your data in a file on the disk, it is easy to integrate
    it with other applications or scripts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `uri`、`collection` 和 `out` 可以满足大多数导出用例。 一旦您的数据在磁盘上的文件中，就很容易将其与其他应用程序或脚本集成。
- en: mongoexport Options
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mongoexport 选项
- en: 'We now know about the three most important options for a `mongoexport`. However,
    there are several other useful options that are helpful for exporting data from
    MongoDB. Here are some of these options and their effects:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了 `mongoexport` 的三个最重要的选项。 但是，还有一些其他有用的选项可帮助从 MongoDB 导出数据。 以下是其中一些选项及其效果：
- en: '`--quiet`: This option reduces the amount of output sent to the command line
    during export.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--quiet`：此选项减少了在导出期间发送到命令行的输出量。'
- en: '`--type`: This will affect how the documents are printed in the console and
    defaults to JSON. For example, you can export the data in **Comma-Separated Value**
    (**CSV**) format by specifying CSV.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--type`：这将影响文档在控制台中的打印方式，默认为 JSON。 例如，您可以通过指定 CSV 来以 **逗号分隔值** (**CSV**) 格式导出数据。'
- en: '`--pretty`: This outputs the documents in a nicely formatted manner.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--pretty`：这以良好格式的方式输出文档。'
- en: '`--fields`: This specifies a comma-separated list of keys in your documents
    to be exported, similar to an export level projection.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--fields`：这指定要导出的文档中的键的逗号分隔列表，类似于导出级别的投影。'
- en: '`--skip`: This works similar to a query level skip, skipping documents in the export.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--skip`：这类似于查询级别的跳过，跳过导出的文档。'
- en: '`--sort`: This works similar to a query level sort, sorting documents by some keys.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--sort`：这类似于查询级别的排序，按某些键对文档进行排序。'
- en: '`--limit`: This works similar to a query level limit, limiting the number of
    documents outputted.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--limit`：这类似于查询级别的限制，限制输出的文档数量。'
- en: 'Here is an example with some of these options used, in this case outputting
    ten `theatre` documents, sorted by id, into a file called `output.json`. Additionally,
    the `--quiet` parameter has also been used:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，其中使用了一些这些选项，本例中将排序的十个 `theatre` 文档输出到名为 `output.json` 的文件中。 此外，还使用了
    `--quiet` 参数：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since we have used the `--quiet` option, we will not see any output at all.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了 `--quiet` 选项，因此将不会看到任何输出。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However, if we look inside the `output.json` file, we can see the ten documents
    sorted by ID:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们查看`output.json`文件的内容，我们可以看到按ID排序的十个文档：
- en: '![Figure 11.1: Contents of output.json file (truncated)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1：output.json文件的内容（已截断）'
- en: '](img/B15507_11_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_01.jpg)'
- en: 'Figure 11.1: Contents of output.json file (truncated)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：output.json文件的内容（已截断）
- en: There is another option that can be used for more advanced exports, and that
    is the query option. The query option allows you to specify a query, using the
    same format as your standard MongoDB queries. Only documents matching this query
    will be exported. Using this option in combination with other options like --fields,
    `--skip`, and `--limit` allows you to define a complete query with formatted output
    and then export that into a file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个选项可用于更高级的导出，那就是查询选项。查询选项允许您指定一个查询，使用与标准MongoDB查询相同的格式。只有匹配此查询的文档将被导出。将此选项与`--fields`、`--skip`和`--limit`等其他选项结合使用，可以定义一个完整的查询，并将其格式化输出，然后将其导出到文件中。
- en: The following is an export that uses the query option to return a specific subset
    of documents. In this case, we are getting all cinemas with a `theaterId` of `4`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用查询选项返回特定文档子集的导出。在这种情况下，我们正在获取所有`theaterId`为`4`的电影院。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'On MacOS you may need to wrap the `theaterId` in quotation marks, for example:
    `--query="{\"theaterId\": 4}"`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '在MacOS上，您可能需要用引号括起`theaterId`，例如：`--query="{\"theaterId\": 4}"`'
- en: 'We will now see the document we''re looking for as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到我们正在寻找的文档如下：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let us use these options in the next Exercise.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一个练习中使用这些选项。
- en: 'Exercise 11.01: Exporting MongoDB Data'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.01：导出MongoDB数据
- en: Before you begin this exercise, let's revisit the movie company from the scenario
    outlined in the *Introduction* section. Say your client (the cinema company) is
    going to migrate their existing data, and you're worried about any loss of valuable
    information. One of the first things you decide to do is export the documents
    from the database as JSON files, which can be stored in inexpensive cloud storage
    in case of a disaster. Additionally, you are going to create a different export
    for each film category.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本练习之前，让我们重新审视一下*介绍*部分中概述的电影公司的情景。假设您的客户（电影公司）将迁移其现有数据，您担心会丢失宝贵的信息。您决定的第一件事是将数据库中的文档导出为JSON文件，以防灾难发生，可以将其存储在廉价的云存储中。此外，您将为每个电影类别创建不同的导出。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To demonstrate knowledge of `mongoexport`, we will not create an export for
    each category, but just for a single category. You will also only export the top
    three documents.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示对`mongoexport`的了解，我们将不为每个类别创建一个导出，而只为单个类别创建一个。您还只会导出前三个文档。
- en: 'In this exercise, you will use `mongoexport` to create a file called `action_movies.json`,
    which contains three action movies, sorted by release year. The following steps
    will help you accomplish the task:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用`mongoexport`创建一个名为`action_movies.json`的文件，其中包含按发行年份排序的三部动作电影。以下步骤将帮助您完成任务：
- en: Fine-tune your export and save it for later. Create a new file called `Exercise11.01.txt`
    to store your export command.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整您的导出并保存以备后用。创建一个名为`Exercise11.01.txt`的新文件，以存储您的导出命令。
- en: 'Next, type the standard `mongoexport` syntax with just the URI and `movies` collection:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，只需输入标准的`mongoexport`语法，包括URI和`movies`集合：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add extra parameters to satisfy your conditions. First, output your export
    into a file called `action_movies.json`. Use the `--out` parameter as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加额外的参数以满足您的条件。首先，将您的导出输出到名为`action_movies.json`的文件中。使用`--out`参数如下：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, add your sort condition to sort the movies by release year as per the
    specifications of this exercise. You can accomplish this using `--sort`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据本练习的规范，添加您的排序条件以按发行年份对电影进行排序。您可以使用`--sort`来实现：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you were to run this command at its current intermediary stage, you would
    encounter the following error:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在当前的中间阶段运行此命令，您将遇到以下错误：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is because there are a large number of documents that the MongoDB server
    is trying to sort for us. To improve the performance of your exports and imports,
    you can limit the number of documents you retrieve, so MongoDB doesn't have to
    sort so many for you.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为MongoDB服务器正在尝试为我们排序大量文档。为了提高导出和导入的性能，您可以限制检索的文档数量，这样MongoDB就不必为您排序那么多文档。
- en: 'Add a `--limit` parameter to reduce the number of documents being sorted and
    satisfy the three-document condition:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`--limit`参数以减少被排序的文档数量，并满足三个文档的条件：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finally, you need to add your query parameter to filter out any documents not
    in the movie genre.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要添加查询参数以过滤掉不属于电影类型的任何文档。
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'On MacOS and Linux, you may need to change the quotation marks around strings
    within parameters, for example in the preceding query you will need to use: `--query=''{"genres":
    "Action"}''`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '在MacOS和Linux上，您可能需要更改参数中字符串周围的引号，例如在前面的查询中，您需要使用：`--query=''{"genres": "Action"}''`'
- en: 'With your command complete, copy it from your `Exercise11.01.txt` file into
    your terminal or command prompt to run it:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成命令后，从`Exercise11.01.txt`文件中将其复制到终端或命令提示符中运行：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The output looks good so far, but you need to check your output file to ensure
    the correct documents have been exported. In the directory in which you just executed
    your command, you should see the new file `action_movies.json`. Open this file
    and view the contents inside.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，输出看起来不错，但您需要检查输出文件以确保已导出正确的文档。在您刚刚执行命令的目录中，您应该看到新文件`action_movies.json`。打开此文件并查看其中的内容。
- en: Note
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The plot field is removed to improve the clarity of the output.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高输出的清晰度，已删除了剧情字段。
- en: 'You should see the following documents:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下文档：
- en: '![Figure 11.2: Contents of the action_movies.json file (truncated for brevity)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2：action_movies.json文件的内容（为简洁起见已截断）'
- en: '](img/B15507_11_02.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_02.jpg)'
- en: 'Figure 11.2: Contents of the action_movies.json file (truncated for brevity)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：action_movies.json文件的内容（为简洁起见已截断）
- en: This exercise illustrated the fundamentals required to export your documents
    from MongoDB in a robust and flexible way. Combining the parameters learned here,
    most basic exports will now be easy. To master data exports in MongoDB, it is
    helpful to keep experimenting and learning.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习说明了以强大和灵活的方式从MongoDB导出文档所需的基本知识。结合这里学到的参数，大多数基本导出现在都很容易。要掌握MongoDB中的数据导出，保持实验和学习是有帮助的。
- en: Importing Data into MongoDB
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据导入到MongoDB
- en: You now know how to get your collection data out of MongoDB and into an easy-to-use
    format on disk. But say that you have this file on disk, and you want to share
    it with someone with their own MongoDB database? This situation is where `mongoimport`
    comes in handy. As you may have guessed from the name, this command is essentially
    the reverse of `mongoexport`, and it is designed to take the output of `mongoexport`
    as an input into `mongoimport`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何将你的集合数据从MongoDB中导出并以易于使用的格式保存到磁盘上。但是假设你在磁盘上有这个文件，并且你想与拥有自己的MongoDB数据库的人分享？这种情况下，`mongoimport`就派上用场了。正如你可能从名称中猜到的那样，这个命令本质上是`mongoexport`的反向，并且它被设计为将`mongoexport`的输出作为`mongoimport`的输入。
- en: However, it is not only data exported from MongoDB that you can use with `mongoimport`.
    The command supports JSON, CSV and TSV formats, meaning data extracted from other
    applications or manually created can still be easily added to the database using
    `mongoimport`. By supporting these widespread file formats, the command becomes
    an all-purpose way to load bulk data into MongoDB.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不仅可以使用从MongoDB导出的数据来使用`mongoimport`。该命令支持JSON、CSV和TSV格式，这意味着从其他应用程序提取的数据或手动创建的数据仍然可以轻松地添加到数据库中。通过支持这些广泛使用的文件格式，该命令成为将大量数据加载到MongoDB中的通用方式。
- en: As with `mongoexport`, `mongoimport` operates on a single target collection
    within the specified database. This means that if you wish to import data into
    multiple collections, you must separate the data into individual files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与`mongoexport`一样，`mongoimport`在指定的数据库中操作单个目标集合。这意味着如果你希望将数据导入多个集合，你必须将数据分开成单独的文件。
- en: Following is an example a complex `mongoimport`. We'll go through the syntax
    in detail during the next section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个复杂`mongoimport`的例子。我们将在下一节详细介绍语法。
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using mongoimport
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mongoimport
- en: The following is a `mongoimport` command with the fewest possible parameters.
    This is significantly simpler than preceding command.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个具有最少参数的`mongoimport`命令。这比前面的命令简单得多。
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This example should also look very similar to some of the snippets we saw in
    the previous section. It is almost identical to our `mongoexport` syntax, except,
    instead of providing a location to create a new file using `--out`, we're entering
    a `--file` parameter which specifies the data we wish to load in. Our database
    and collection parameters are provided with the same syntax as in the `mongoexport`
    examples.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子看起来也与我们在前一节中看到的一些片段非常相似。它几乎与我们的`mongoexport`语法相同，只是不是提供一个使用`--out`创建新文件的位置，而是输入一个`--file`参数，指定我们希望加载的数据。我们的数据库和集合参数与`mongoexport`示例中提供的语法相同。
- en: As you may have guessed, another similarity that `mongoimport` shares with `mongoexport`
    is that, by default, it would run against a MongoDB database running on your local
    machine. We use the same `--uri` parameter to specify that we are loading data
    into a remote MongoDB server—in this case, on MongoDB Atlas.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能猜到的，`mongoimport`与`mongoexport`共享的另一个相似之处是，默认情况下，它将针对本地计算机上运行的MongoDB数据库运行。我们使用相同的`--uri`参数来指定我们正在将数据加载到远程MongoDB服务器中——在这种情况下是MongoDB
    Atlas。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As with `mongoexport`, the `db` and `uri` parameters are mutually exclusive
    as the database is defined in the `uri` itself.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与`mongoexport`一样，`db`和`uri`参数是互斥的，因为数据库在`uri`中已经定义了。
- en: 'The `mongoimport` command, when using the `--uri` parameter, will look as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`--uri`参数时，`mongoimport`命令将如下所示：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Before you can execute this command against your MongoDB database and import,
    you require a file containing valid data. Let's create one now. One of the simplest
    ways to create importable data is to run a `mongoexport`. However, to improve
    your knowledge of importing files, we'll create one from scratch.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以执行这个命令来导入你的MongoDB数据库之前，你需要一个包含有效数据的文件。现在让我们创建一个。创建可导入数据的最简单方法之一是运行`mongoexport`。然而，为了提高你导入文件的知识，我们将从头开始创建一个。
- en: You would begin by creating a file called `contacts.json`. Open the file in
    a text editor and create some very simple documents. When importing JSON files,
    each line within the file must contain exactly one document.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以开始创建一个名为`contacts.json`的文件。在文本编辑器中打开文件并创建一些非常简单的文档。在导入JSON文件时，文件中的每一行必须包含一个文档。
- en: 'The `contacts.json` file should look as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`contacts.json`文件应该如下所示：'
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Execute the following import:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下导入：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will result in the following output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下输出：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also use a JSON array format for your file, meaning your import file
    contains an array of many different JSON documents. In that case, you must specify
    the `--jsonArray` option in your command. This JSON array structure should be
    very familiar to you by now, as it matches both the `mongoexport` output as well
    as the results you receive from MongoDB queries. For example, if your file contains
    an array as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用JSON数组格式的文件，这意味着你的导入文件包含许多不同的JSON文档的数组。在这种情况下，你必须在命令中指定`--jsonArray`选项。这个JSON数组结构现在应该对你来说非常熟悉，因为它与`mongoexport`的输出以及你从MongoDB查询中收到的结果匹配。例如，如果你的文件包含如下数组：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You could still import the file using the `mongoimport` command with the `--jsonArray`
    option as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以使用`mongoimport`命令导入文件，并使用`--jsonArray`选项，如下所示：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will result in the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下输出：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding example, you will notice that you can provide `_id` values
    for documents in the import. If no `_id` is provided, one will be generated for
    the document. You must ensure that the `_id` you provide is not already used;
    otherwise, the `mongoimport` command will throw an error.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，您会注意到可以为导入的文档提供`_id`值。如果没有提供`_id`，则将为文档生成一个。您必须确保您提供的`_id`尚未被使用；否则，`mongoimport`命令将抛出错误。
- en: These two imports have shown us simple ways to get data into our MongoDB database,
    but let's have a look at what happens when things go wrong. Let's modify our file
    to specify the `_id` for a few of our documents.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个导入向我们展示了将数据导入MongoDB数据库的简单方法，但让我们看看当事情出错时会发生什么。让我们修改文件以为我们的一些文档指定`_id`。
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Execute this once, and you should get an output without error.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一次，您应该可以得到无错误的输出。
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You will see the following output:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, if you rerun the same command, you see an error because that `_id` value
    already exists in your collection.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您重新运行相同的命令，您会看到错误，因为该`_id`值已经存在于您的集合中。
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can see the error in your output. Another thing you may notice is that the
    documents without problems are still imported successfully. `mongoimport` will
    not fail on a single document if you're importing a ten-thousand document file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在输出中看到错误。您可能还注意到，没有问题的文档仍然成功导入。如果您导入了一个包含一万个文档的文件，`mongoimport`不会因为单个文档而失败。
- en: Say you did want to update this document without changing its `_id`. You couldn't
    use this `mongoimport` command because you would receive a duplicate key error
    every time.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您确实想要更新此文档而不更改其`_id`。您无法使用此`mongoimport`命令，因为每次都会收到重复键错误。
- en: You can log into MongoDB using the mongo shell and manually remove this document
    before importing, but this would be a slow way to do it. With `mongoimport`, we
    can use the --drop option to drop the collection before the import takes place.
    This is a great way to ensure that what exists in your file exists in the collection.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用mongo shell登录MongoDB并在导入之前手动删除此文档，但这将是一个缓慢的方法。使用`mongoimport`，我们可以使用`--drop`选项在导入之前删除集合。这是确保文件中存在的内容也存在于集合中的好方法。
- en: 'For example, consider that you have the following documents in our collection
    before our import:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设在我们导入之前，我们的集合中有以下文档：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, run the following `mongoimport` command with `--drop`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`--drop`运行以下`mongoimport`命令：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You will see that the collection has the following documents once the command
    is executed, view these documents using the find command.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，您将看到集合中有以下文档，可以使用find命令查看这些文档。
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should see the following output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the next section, we will look at the options we can use with `mongoimport`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看可以与`mongoimport`一起使用的选项。
- en: mongoimport Options
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mongoimport选项
- en: We now know about the fundamental options you need to use `mongoimport` with
    the `--uri`, `--collection`, and `--file` parameters. But, just as with `mongoexport`
    in our last section, there are several additional options you may wish to use
    when running the command. Many of these options are the same as from `mongoexport`.
    The following list describes some of the options and their effects.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了使用`mongoimport`的基本选项，包括`--uri`、`--collection`和`--file`参数。但是，就像我们上一节中的`mongoexport`一样，运行命令时可能还有几个其他选项。其中许多选项与`mongoexport`相同。以下列表描述了一些选项及其效果。
- en: '`--quiet`: This reduces the amount of output messaging from the import.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--quiet`：这会减少导入的输出消息量。'
- en: '`--drop`: This drops the collection before beginning import.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--drop`：在开始导入之前删除集合。'
- en: '`--jsonArray`: A JSON type only, this specifies if the file is in a JSON array format.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --jsonArray：仅适用于JSON类型，指定文件是否为JSON数组格式。
- en: '`--type`: This can be either JSON, CSV, or TSV to specify what type of file
    will be imported, but the default type is JSON.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--type`：可以是JSON、CSV或TSV，用于指定要导入的文件类型，但默认类型为JSON。'
- en: '`--ignoreBlanks` TSV and CSV only, this will ignore empty fields in your import file.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--ignoreBlanks`：仅适用于TSV和CSV，这将忽略导入文件中的空字段。'
- en: '`--headerline` : TSV and CSV only, this will assume the first line of your
    import file is a list of field names.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--headerline`：仅适用于TSV和CSV，这将假定导入文件的第一行是字段名称列表。'
- en: '`--fields`: TSV and CSV only, this will specify a comma-separated list of keys
    in your documents for CSV and TSV formats. This is only needed if you do not have
    a header line.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--fields`：仅适用于TSV和CSV，这将为CSV和TSV格式的文档指定逗号分隔的键列表。只有在没有标题行时才需要。'
- en: '`--stopOnError`: If specified, the import will stop on the first error it encounters.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--stopOnError`：如果指定，导入将在遇到第一个错误时停止。'
- en: Here is an example with some more of these options used—specifically, a CSV
    import with a header line. We will also have to ignore blanks so that a document
    is not given a blank `_id` value.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用更多这些选项的示例，特别是带有标题行的CSV导入。我们还必须忽略空白，以便文档不会获得空白的`_id`值。
- en: 'Here is our `.csv` file, called `contacts.csv`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`.csv`文件，名为`contacts.csv`：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We will use the following command to import the CSV:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令导入CSV：
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The preceding command results in the following documents in our collection:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令导致我们的集合中有以下文档：
- en: '[PRE38]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Of course, these are only some of the more common options you may encounter.
    There is a full list available in the documentation. It is useful to familiarize
    yourself with these in case you need to run a more advanced import to a differently
    configured MongoDB server.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些只是您可能遇到的一些常见选项。文档中提供了完整的列表。熟悉这些选项是有用的，以防您需要对不同配置的MongoDB服务器运行更高级的导入。
- en: 'Exercise 11.02: Loading Data into MongoDB'
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.02：将数据加载到MongoDB中
- en: In this scenario, you have successfully created an export of the clients' data
    on your local machine. You have set up a new server on a different version and
    would like to make sure the data imports correctly into the new configuration.
    Additionally, you have been given some data files from another, older database
    in CSV format that will be migrated to the new MongoDB server. You want to ensure
    this different format also imports correctly. With that in mind, your goal is
    to import two files (shown as follows) into your Atlas database and test that
    the documents exist in the correct collections.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您已经成功地在本地机器上创建了客户数据的导出。您已经在不同版本的新服务器上设置了一个新服务器，并希望确保数据正确地导入到新配置中。此外，您还从另一个较旧的数据库中以CSV格式获得了一些数据文件，这些数据文件将迁移到新的MongoDB服务器。您希望确保这种不同的格式也能正确导入。考虑到这一点，您的目标是将两个文件（如下所示）导入到Atlas数据库中，并测试文档是否存在于正确的集合中。
- en: In this exercise, you will use `mongoimport` to import two files (`old.csv`
    and `new.json`) into two separate collections (`oldData` and `newData`) and use
    drop to ensure no leftover documents exist.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用`mongoimport`将两个文件（`old.csv`和`new.json`）导入到两个单独的集合（`oldData`和`newData`），并使用drop来确保没有剩余的文档存在。
- en: 'This aim can be accomplished by executing the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下步骤来实现这个目标：
- en: Fine-tune your import and save it for later. Create a new file called `Exercise11.02.txt`
    to store your export command.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微调您的导入并保存以备后用。创建一个名为`Exercise11.02.txt`的新文件来存储您的导出命令。
- en: Create your `old.csv` and `new.json` files that contain the data to be imported.
    Either download the files from GitHub at [https://packt.live/2LsgKS3](https://packt.live/2LsgKS3)
    or copy the following into identical files in your current directory.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含要导入的数据的`old.csv`和`new.json`文件。可以从GitHub上下载文件[https://packt.live/2LsgKS3](https://packt.live/2LsgKS3)，或者将以下内容复制到当前目录中的相同文件中。
- en: 'The `old.csv` file should look as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`old.csv`文件应如下所示：'
- en: '[PRE39]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `new.json` file should look as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`new.json`文件应如下所示：'
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Enter the standard `mongoimport` syntax into your `Exercise11.02.txt` file,
    with just the URI, collection, and file location. Import your data into the `"imports"`
    database, importing the old data first:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标准的`mongoimport`语法输入到您的`Exercise11.02.txt`文件中，只包括URI、集合和文件位置。首先将您的数据导入到`"imports"`数据库中，先导入旧数据：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, start adding your extra parameters to satisfy the conditions for your
    CSV file. Specify `type=CSV`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，开始添加额外的参数以满足CSV文件的条件。指定`type=CSV`：
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Next, because you have a header row in your old data, use the `headerline` parameter.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，因为旧数据中有标题行，所以使用`headerline`参数。
- en: '[PRE43]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: When you saw a CSV import in some of the examples earlier in the chapter, the
    `--ignoreBlanks` parameter was used to ensure empty fields were not imported.
    This is a good practice, so add it here too.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章的一些示例中，当您看到CSV导入时，使用了`--ignoreBlanks`参数来确保空字段不被导入。这是一个很好的做法，所以在这里也要添加它。
- en: '[PRE44]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, for this exercise, you need to make sure you don''t import on top
    of the existing data, as this may cause conflicts. To ensure your data is imported
    cleanly, use the `--drop` parameter as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在这个练习中，您需要确保不要在现有数据之上进行导入，因为这可能会导致冲突。为了确保您的数据被干净地导入，请使用`--drop`参数如下：
- en: '[PRE45]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: That should be everything you need for your CSV import. Start writing your JSON
    import by copying your existing command on to a new line and then removing the
    CSV specific parameters.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该是你进行CSV导入所需要的一切。通过复制现有命令到新行，然后删除CSV特定参数来开始编写JSON导入。
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, change the `file` and `collection` parameters by importing your `new.json`
    file into a `newData` collection as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过以下命令更改`file`和`collection`参数，将您的`new.json`文件导入到`newData`集合中：
- en: '[PRE47]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can see that the data in your `new.json` file is in a JSON array format,
    so add the matching parameter, as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到`new.json`文件中的数据是以JSON数组格式，因此添加匹配参数如下：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You should now have the following two commands in your `Exercise11.02.txt` file.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的`Exercise11.02.txt`文件中应该有以下两个命令。
- en: '[PRE49]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Run your `newData` import using the following command:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行您的`newData`导入：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The output is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE51]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, execute the `oldData` import as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式执行`oldData`导入：
- en: '[PRE52]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The output is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE53]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Check the two new collections in MongoDB by running the following command:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令来检查MongoDB中的两个新集合：
- en: '[PRE54]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The output is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 11.3: Displaying the new collections'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.3：显示新集合'
- en: '](img/B15507_11_03.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_03.jpg)'
- en: 'Figure 11.3: Displaying the new collections'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：显示新集合
- en: First, we learned how to export our data from our MongoDB server. Now we are
    able to take that external data and enter it back into MongoDB using the import
    command. By combining these two simple commands, we can also shift data between
    instances of MongoDB or create data using external tools before importing them
    into MongoDB.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们学会了如何从MongoDB服务器中导出数据。现在我们可以使用导入命令将外部数据输入到MongoDB中。通过结合这两个简单的命令，我们还可以在MongoDB的不同实例之间转移数据，或者在导入到MongoDB之前使用外部工具创建数据。
- en: Backing up an Entire Database
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份整个数据库
- en: Using `mongoexport`, we could theoretically take an entire MongoDB server and
    extract all the data in each database and collection. However, we would have to
    do this with one collection at a time, ensuring that the files correctly mapped
    to the original database and collection. Doing this manually is possible but difficult.
    A script could accomplish this reliably for an entire MongoDB server even with
    hundreds of collections
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mongoexport`，理论上我们可以获取整个MongoDB服务器，并提取每个数据库和集合中的所有数据。然而，我们必须一次处理一个集合，确保文件正确映射到原始数据库和集合。手动完成这个过程是可能的，但很困难。脚本可以可靠地完成整个MongoDB服务器的这项工作，即使有数百个集合。
- en: Fortunately, along with `mongoimport` and `mongoexport`, the MongoDB tools package
    also provides a tool for exporting the entire contents of a database. This utility
    is called `mongodump`. This command creates a backup of the entire MongoDB instance.
    All you need to provide is the URI (or host and port numbers), and the `mongodump`
    command does the rest. This export creates a binary file that can be restored
    using `mongorestore` (a command covered in the next section). By combining `mongodump`
    and `mongorestore`, you have a reliable way of backing up, restoring, and migrating
    your MongoDB databases across different hardware and software configurations.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，除了`mongoimport`和`mongoexport`之外，MongoDB工具包还提供了一个工具，用于导出整个数据库的内容。这个实用程序称为`mongodump`。这个命令创建了整个MongoDB实例的备份。您只需要提供URI（或主机和端口号），`mongodump`命令就会完成剩下的工作。这个导出创建了一个二进制文件，可以使用`mongorestore`来恢复（这是下一节中介绍的命令）。通过结合使用`mongodump`和`mongorestore`，您可以可靠地备份、恢复和迁移MongoDB数据库，跨不同的硬件和软件配置。
- en: Using mongodump
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mongodump
- en: 'The following is a `mongodump` command in its simplest possible form:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个最简单形式的`mongodump`命令：
- en: '[PRE55]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Interestingly enough, you can run `mongodump` without a single parameter. This
    is because the only piece of information the command needs to use is the location
    of your MongoDB server. If no URI or host is specified, it will attempt to create
    a backup of a MongoDB server running on your local system.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，您可以运行`mongodump`而不使用任何参数。这是因为命令需要使用的唯一信息是您的MongoDB服务器的位置。如果没有指定URI或主机，它将尝试创建运行在您本地系统上的MongoDB服务器的备份。
- en: We can specify a URI using the `--uri` parameter to specify the location of
    our MongoDB server.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`--uri`参数来指定URI，以指定我们的MongoDB服务器的位置。
- en: Note
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As with `mongoexport`, the `--db/--host` and `--uri` parameters are mutually
    exclusive.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 与`mongoexport`一样，`--db/--host`和`--uri`参数是互斥的。
- en: 'If we did have a local MongoDB server running, however, this is the sort of
    output we may receive:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们确实有一个本地运行的MongoDB服务器，这是我们可能会收到的输出：
- en: '[PRE56]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: At the end of this command, we can see there is a new folder in our directory
    containing the dump of our database. By default, `mongodump` exports everything
    in our MongoDB server. However, we can be more selective with our exports, and
    we see an example of this in the next section.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令结束时，我们可以看到我们的目录中有一个新的文件夹，其中包含我们数据库的备份。默认情况下，`mongodump`会导出MongoDB服务器中的所有内容。但是，我们可以更加有选择地进行导出，我们将在下一节中看到一个例子。
- en: mongodump Options
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mongodump选项
- en: The `mongodump` command requires very minimal options to function; in most cases,
    you may only be using the `–-uri` parameter. However, there are several options
    we can use to get the most out of this utility command. Following is a list of
    some of the most useful options.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongodump`命令需要非常少的选项才能运行；在大多数情况下，您可能只使用`--uri`参数。但是，我们可以使用几个选项来充分利用这个实用程序命令。以下是一些最有用的选项列表。'
- en: '`--quiet`: This reduces the amount of output messaging from the dump.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--quiet`：这会减少备份时的输出信息量。'
- en: '`--out`: This allows you to specify a different location for the export to
    be written to disk, by default it will create a directory called "dump" in the
    same directory the command is run.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--out`：这允许您指定导出的不同位置，以便将其写入磁盘，默认情况下将在运行命令的相同目录中创建一个名为“dump”的目录。'
- en: '`--db`: This allows you to specify a single database for the command to backup,
    by default it will back up all databases.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--db`：这允许您指定要备份的单个数据库，默认情况下将备份所有数据库。'
- en: '`--collection`: This allows you to specify a single collection to backup, by
    default it will back up all collections.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--collection`：这允许您指定要备份的单个集合，默认情况下将备份所有集合。'
- en: '`--excludeCollection`: This allows you to specify a collection to exclude from
    the backup.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--excludeCollection`：这允许您指定要从备份中排除的集合。'
- en: '`--query`: This allows you to specify a query document which will limit the
    documents being backed up to only those matching the query.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--query`：这允许您指定一个查询文档，将备份的文档限制为仅匹配查询的文档。'
- en: '`--gzip`: If enabled, the output of the export will be a compressed file in
    `.gz` format instead of a directory.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--gzip`：如果启用，导出的输出将是一个压缩文件，格式为`.gz`，而不是一个目录。'
- en: We'll look at creating a dump of a single database, with users and roles, to
    a specific location on disk. Because we are doing a single database dump, we can
    use `--uri` with the database we want to use.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何创建一个单个数据库的备份，包括用户和角色，并将其保存到磁盘上的特定位置。因为我们正在进行单个数据库的备份，所以可以使用`--uri`来指定要使用的数据库。
- en: '[PRE57]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As you can see in the preceding screenshot, only the collections existing in
    our specified database were exported. You can even see this if you have a look
    at the folder containing our exports:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的截图中所看到的，只有我们指定的数据库中存在的集合被导出。如果您查看包含我们导出内容的文件夹，甚至可以看到这一点：
- en: '[PRE58]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You can see in the imports directory that two files are created for each collection
    in the dump, a `.bson` file containing our data and a `.metadata.json` file for
    the collection metadata. All `mongodump` results will match this format.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在导入目录中看到，对于转储中的每个集合，都创建了两个文件，一个包含我们数据的`.bson`文件，一个用于集合元数据的`.metadata.json`文件。所有`mongodump`的结果都将匹配这种格式。
- en: 'Next, use your `--query` parameter to dump only specific documents in a collection.
    You can specify your collection using a standard query document. For example,
    consider the following command on Windows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用您的`--query`参数来仅转储集合中的特定文档。您可以使用标准查询文档来指定您的集合。例如，在Windows上考虑以下命令：
- en: '[PRE59]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'On MacOS/Linux, you will have to modify the quotation marks to the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在MacOS/Linux上，您将不得不修改引号如下：
- en: '[PRE60]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The output is as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE61]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The movies collection has over 20,000 documents in it, but we have exported
    only the `2539` matching documents.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 电影收藏中有超过20,000个文档，但我们只导出了`2539`个匹配的文档。
- en: 'Now, execute this same export without the `--query` parameter:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行相同的导出，但不使用`--query`参数：
- en: '[PRE62]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The output is as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE63]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We can see in the preceding output that the number of documents dumped is significantly
    higher without the `--query` parameter, meaning we have reduced the number of
    documents exported from our collection to only those matching the query.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的输出中看到，如果没有`--query`参数，导出的文档数量会显著增加，这意味着我们已经将从我们的集合中导出的文档数量减少到仅与查询匹配的文档。
- en: As with the commands we learned earlier, these options only represent a small
    subset of the parameters you can provide to `mongodump`. By combining and experimenting
    with these options, you will be able to create a robust backup and snapshot solution
    for your MongoDB server.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前学习的命令一样，这些选项只代表您可以提供给`mongodump`的参数的一小部分。通过组合和尝试这些选项，您将能够为您的MongoDB服务器创建一个强大的备份和快照解决方案。
- en: By using `mongoimport` and `mongoexport`, you have been able to get specific
    collections in and out of a database easily. However, as part of the backup strategy
    for your MongoDB server, you may want to back up the entire state of your MongoDB
    database. In the next exercise, we will create a dump of only the `sample_mflix`
    database, rather than creating a larger dump of the many different databases we
    may have within our MongoDB server.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`mongoimport`和`mongoexport`，您已经能够轻松地将特定集合导入和导出数据库。然而，作为MongoDB服务器的备份策略的一部分，您可能希望备份整个MongoDB数据库的状态。在下一个练习中，我们将仅创建`sample_mflix`数据库的转储，而不是创建我们的MongoDB服务器中可能有的许多不同数据库的更大的转储。
- en: 'Exercise 11.03: Backing up MongoDB'
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.03：备份MongoDB
- en: In this exercise, you will use `mongodump` to create a backup of the `sample_mflix`
    database. Export the data to a `.gz` file in a folder called `movies_backup`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用`mongodump`来创建`sample_mflix`数据库的备份。将数据导出到名为`movies_backup`的文件夹中的`.gz`文件。
- en: 'Perform the following steps to complete this exercise:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此练习，执行以下步骤：
- en: To fine-tune your import and save it for later, create a new file called `Exercise11.03.txt`
    to store your `mongodump` command.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了调整您的导入并将其保存以备后用，创建一个名为`Exercise11.03.txt`的新文件来存储您的`mongodump`命令。
- en: Next, type the standard `mongodump` syntax with just the `--uri` parameter set.
    Remember, the `--uri` includes the target database within it.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入标准的`mongodump`语法，只设置`--uri`参数。记住，`--uri`包含目标数据库。
- en: '[PRE64]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Next, add the parameter which specifies the location your dump should be saved
    to. In this case, that is a folder called `movies_backup`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加指定转储位置的参数。在这种情况下，那就是一个名为`movies_backup`的文件夹：
- en: '[PRE65]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Finally, to automatically place your dump file in a `.gz` file, use the `--gzip`
    parameter and run the command.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了自动将您的转储文件放入`.gz`文件中，使用`--gzip`参数并运行命令。
- en: '[PRE66]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Note
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because this command will dump the entire `sample_mflix` database, it may take
    a little bit of time depending on your internet connection.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个命令将转储整个`sample_mflix`数据库，所以根据您的互联网连接速度，可能需要一点时间。
- en: 'Once the command executes, you should see output similar to the following screenshot:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令执行，您应该看到类似以下截图的输出：
- en: '![Figure 11.4: Output after the mongodump command is executed'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.4：执行`mongodump`命令后的输出'
- en: '](img/B15507_11_04.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_04.jpg)'
- en: 'Figure 11.4: Output after the mongodump command is executed'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：执行`mongodump`命令后的输出
- en: Check your dump directory. You can see all the `mongodump` data has been written
    into the correct directory.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的转储目录。您可以看到所有的`mongodump`数据都已经写入了正确的目录。
- en: '[PRE67]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Over the course of this exercise, you have learned how to write a `mongodump`
    command that will correctly create a compressed backup of your database. You will
    now be able to integrate this technique as part of a database migration or backup strategy.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习过程中，您已经学会了如何编写一个`mongodump`命令，可以正确地创建数据库的压缩备份。现在，您将能够将这种技术作为数据库迁移或备份策略的一部分。
- en: Restoring a MongoDB Database
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复MongoDB数据库
- en: In the previous section, we learned how to create a backup of an entire MongoDB
    database using `mongodump`. However, these exports would not be beneficial in
    our backup strategy unless we possess a method for loading them back into a MongoDB
    server. The command that complements `mongodump` by putting our export back into
    the Database is `mongorestore`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们学习了如何使用`mongodump`创建整个MongoDB数据库的备份。然而，除非我们拥有一种将它们加载回MongoDB服务器的方法，否则这些导出对我们的备份策略没有好处。通过将我们的导出放回数据库的命令是`mongorestore`。
- en: Unlike `mongoimport` which allows us to import commonly used formats into MongoDB,
    `mongorestore` is only used to importing `mongodump` results. This means it is
    most commonly used for restoring most or all of a database to a specific state.
    The `mongorestore` command is ideal for restoring a dump after a disaster or for
    migrating an entire MongoDB instance to a new configuration.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 与`mongoimport`允许我们将常用格式导入MongoDB不同，`mongorestore`仅用于导入`mongodump`的结果。这意味着它最常用于将大部分或全部数据库恢复到特定状态。`mongorestore`命令非常适合在灾难后恢复转储，或者将整个MongoDB实例迁移到新配置。
- en: When put in combination with our other commands, it should be clear that `mongorestore`
    completes the import and export lifecycle. With the three commands (`mongoimport`,
    `mongoexport`, and `mongodump`), we have learned we can export collection-level
    data, import collection-level data, export at the server level, and now finally,
    with `mongorestore`, we can import server-level information.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 当与我们的其他命令结合使用时，应该清楚`mongorestore`完成了导入和导出的生命周期。通过这三个命令（`mongoimport`，`mongoexport`和`mongodump`），我们已经学会了可以导出集合级别的数据，导入集合级别的数据，导出服务器级别的数据，现在最后，通过`mongorestore`，我们可以导入服务器级别的信息。
- en: Using mongorestore
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`mongorestore`
- en: As with the other commands, let's have a look at a simple implementation of
    the `mongorestore` command.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他命令一样，让我们来看一个`mongorestore`命令的简单实现。
- en: '[PRE68]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Or on MacOS/Linux, you can enter the following:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在MacOS/Linux上，您可以输入以下内容：
- en: '[PRE69]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The only required parameter we need to pass in is the location of the dump we
    are restoring. However, as you may have guessed from our other commands, by default
    `mongorestore` attempts to restore the backup to the local system.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要传递的唯一必需参数是要还原的转储位置。但是，正如您可能已经从我们的其他命令中猜到的那样，默认情况下，`mongorestore`会尝试将备份还原到本地系统。
- en: Note
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The dump location does not require a `--parameter` format and, instead, can
    be passed in as the last value of the command.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 转储位置不需要`--parameter`格式，而是可以作为命令的最后一个值传递。
- en: Here again, we can specify a URI using the `--uri` parameter to specify the
    location of our MongoDB server.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以再次使用`--uri`参数指定URI，以指定我们的MongoDB服务器的位置。
- en: 'As an example, let''s say that we did have a local MongoDB server running.
    To complete a restore we would need a previously created dump . Here is the dump
    command based off *Exercise 11.03, Backing up MongoDB*:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们确实有一个正在运行的本地MongoDB服务器。要完成还原，我们需要之前创建的转储文件。以下是基于*练习11.03，备份MongoDB*的转储命令：
- en: '[PRE70]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If we now run `mongorestore` against this dump using the `--drop` option, you
    might see an output similar to the following:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用`--drop`选项对此转储运行`mongorestore`，您可能会看到类似以下的输出：
- en: '![Figure 11.5: Output after mongorestore is run using the –drop option'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.5：使用`--drop`选项运行`mongorestore`后的输出'
- en: '](img/B15507_11_05.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_05.jpg)'
- en: 'Figure 11.5: Output after mongorestore is run using the –drop option'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：使用`--drop`选项运行`mongorestore`后的输出
- en: As you would expect, this output should be most similar to the output from `mongoimport`,
    telling us exactly how many documents and indexes were restored from the dump
    file. If your use case is to restore as part of a backup strategy, this simple
    command with minimal parameters is all you need.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，此输出应该与`mongoimport`的输出最为相似，告诉我们从转储文件中恢复了多少文档和索引。如果您的用例是作为备份策略的一部分进行还原，那么这个简单的命令和最少的参数就是您所需要的。
- en: By default, `mongorestore` restores every database, collection and document
    in the targeted dump. If you wish to be more specific with your restore, there
    are several handy options which allow you to restore only specific collections
    or even rename collections during the restore. Examples of these options are provided
    in the next section.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`mongorestore`会还原目标转储中的每个数据库、集合和文档。如果您希望在还原时更加具体，有几个方便的选项可以让您只还原特定的集合，甚至在还原过程中重命名集合。这些选项的示例将在下一节中提供。
- en: The mongorestore Options
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mongorestore选项
- en: 'Like `mongodump`, the `mongorestore` command can satisfy most use cases with
    just its fundamental parameters such as `--uri` and the location of the dump file.
    If you wish to accomplish a more specific type of restore, you can use some of
    the following options:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 与`mongodump`一样，`mongorestore`命令可以只使用其基本参数（如`--uri`和转储文件的位置）来满足大多数用例。如果您希望执行更具体类型的还原，可以使用以下一些选项：
- en: '`--quiet`: This reduces the amount of output messaging from the dump.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --quiet：这会减少转储的输出消息量。
- en: '`--drop`: Similar to `mongoimport`, the `--drop` option will drop the collections
    to be restored before restoring them, allowing you to ensure no old data remains
    after the command has run.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--drop`：类似于`mongoimport`，`--drop`选项将在还原之前删除要还原的集合，确保命令运行后不会保留旧数据。'
- en: '`--dryRun`: This allows you to see the output of running a `mongorestore` without
    actually changing the information in the database, this is an excellent way to
    test your command before executing potentially dangerous operations.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--dryRun`：这允许您查看运行`mongorestore`的输出，而不实际更改数据库中的信息，这是在执行潜在危险操作之前测试命令的绝佳方式。'
- en: '`--stopOnError`: If enabled, the process stops as soon as a single error occurs.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--stopOnError`：如果启用，一旦发生单个错误，进程就会停止。'
- en: '`--nsInclude`: Instead of providing a database and collection specifically,
    this option allows you to define which namespaces (databases and collections)
    should be imported from the dump file. We will see an example of this later in
    the chapter.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--nsInclude`：这个选项允许您定义应从转储文件中导入哪些命名空间（数据库和集合），而不是明确提供数据库和集合。我们将在本章后面看到这个选项的示例。'
- en: '`--nsExclude`: This is the complimentary option for `nsInclude`, allowing you
    to provide a namespace pattern that is not imported when running the restore.
    There is an example of this in the next section.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--nsExclude`：这是`nsInclude`的补充选项，允许您提供一个在还原时不导入的命名空间模式。下一节将提供一个示例。'
- en: '`--nsFrom`: Using the same namespace pattern as in `nsInclude` and `nsExclude`,
    this parameter can be used with `--nsTo` to provide a mapping of namespaces in
    the export to new namespaces in the restored backup. This allows you to change
    the names of collections during your restore.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--nsFrom`：使用与`nsInclude`和`nsExclude`中相同的命名空间模式，此参数可以与`--nsTo`一起使用，提供导出中的命名空间到还原备份中的新命名空间的映射。这允许您在还原过程中更改集合的名称。'
- en: 'Now, let us look at some examples of these options being used. Note that for
    these examples, we are using the dump file created in the previous section. As
    a reminder, this is the command required to create this dump file:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一些使用这些选项的示例。请注意，对于这些示例，我们使用的是前一节创建的转储文件。作为提醒，这是创建此转储文件所需的命令：
- en: '[PRE71]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Firstly, assume you have a full `mongodump` created from the `sample_mflix`
    database. The following is an example of the command required to restore just
    a subset of our collections. You may notice the parameter is in the format of
    `{database}.{collection}`, but you can use the wild-star (`*`) operator to match
    all values. In the following example, we are including any collections that match
    the namespace `"sample_mflix.movies"` (only the movies collection of the `sample_mflix`
    database).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，假设您有一个从`sample_mflix`数据库创建的完整`mongodump`。以下是还原我们集合的子集所需的命令示例。您可能会注意到参数的格式是`{数据库}.{集合}`，但是您可以使用通配符（`*`）运算符来匹配所有值。在以下示例中，我们包括与命名空间`"sample_mflix.movies"`匹配的任何集合（仅`sample_mflix`数据库的movies集合）。
- en: '[PRE72]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Once this command finishes running, you should see an output similar to the
    following:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当此命令完成运行时，您应该会看到类似以下的输出：
- en: '[PRE73]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'In the output, you can see that only the matching namespaces are restored.
    Now let''s examine how the `nsFrom` and `nsTo` parameters can be used to rename
    collections, using the same format as in the preceding example. We will rename
    collections in the `sample_mflix` database to the same collection name but in
    a new database called backup:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，您可以看到只有匹配的命名空间被恢复。现在让我们看一下`nsFrom`和`nsTo`参数如何被用来重命名集合，使用与前面示例相同的格式。我们将在`sample_mflix`数据库中将集合重命名为相同的集合名称，但在一个名为`backup`的新数据库中：
- en: '[PRE74]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Once execution of this command is complete, the final few lines should look
    similar to the following:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行此命令完成，最后几行应该类似于以下内容：
- en: '[PRE75]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Now, if we observe the collections in our MongoDB database, we will see that
    the `sample_mflix` collections exist in a database called `backup` as well, for
    example:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们观察一下我们的MongoDB数据库中的集合，我们会发现`sample_mflix`集合也存在于名为`backup`的数据库中，例如：
- en: '[PRE76]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Finally, let''s have a quick look at how the `dryRun` parameter works. Take
    a look at the following command:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们快速看一下`dryRun`参数的工作原理。看一下以下命令：
- en: '[PRE77]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: You will notice an output about the command preparing the restore. However,
    it will not load any data. None of the underlying data in MongoDB has changed.
    This serves as an excellent way to make sure your command will run without error
    before executing it.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到有一个关于命令准备恢复的输出。但是，它不会加载任何数据。MongoDB中的基础数据都没有改变。这是确保在执行命令之前，确保命令不会出错的绝佳方法。
- en: The `mongorestore` command completes our four commands, that is, `mongoimport`,
    `mongoexport`, `mongodump`, and `mongorestore`. Although it is straightforward
    to use `mongorestore`, if your backup strategy has a more complicated setup, you
    may need to use multiple options and to refer the documentation.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongorestore`命令完成了我们的四个命令，即`mongoimport`，`mongoexport`，`mongodump`和`mongorestore`。虽然使用`mongorestore`很简单，但如果您的备份策略设置更复杂，您可能需要使用多个选项并参考文档。'
- en: 'Exercise 11.04: Restoring MongoDB Data'
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.04：恢复MongoDB数据
- en: In the previous exercise, you used `mongodump` to create a backup of the `sample_mflix`
    database. As part of the backup strategy for your MongoDB server, you now need
    to place this data back into the database. In this exercise, pretend that the
    database you exported from and imported to are different databases. So, to prove
    to the client that the backup strategy works, you will use `mongorestore` to import
    that dump back into a different namespace.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，您使用`mongodump`创建了`sample_mflix`数据库的备份。作为MongoDB服务器的备份策略的一部分，您现在需要将这些数据放回数据库。在这个练习中，假设您从导出的数据库和导入的数据库是不同的数据库。因此，为了向客户证明备份策略有效，您将使用`mongorestore`将该转储数据导入到不同的命名空间中。
- en: Note
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You need to create a dump from *Exercise 11.03*, *Backing up MongoDB*, before
    completing this exercise.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此练习之前，您需要从*练习11.03*，*备份MongoDB*中创建一个转储。
- en: In this exercise, you will use `mongorestore` to restore the `sample_mflix`
    database from the `movies_backup` dump created in the previous exercise, changing
    the namespace of each collection to `backup_mflix`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用`mongorestore`从上一个练习中创建的`movies_backup`转储中恢复`sample_mflix`数据库，并将每个集合的命名空间更改为`backup_mflix`。
- en: Fine-tune your import and save it for later. Create a new file called `Exercise11.04.txt`
    to store your restore command.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整您的导入并保存以备后用。创建一个名为`Exercise11.04.txt`的新文件来存储您的恢复命令。
- en: 'Make sure the `movies_backup` dump from *Exercise 11.03*, *Backing up MongoDB*,
    is in your current directory as well. Otherwise, you can create a new backup using
    the following command:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保*练习11.03*，*备份MongoDB*中的`movies_backup`转储也在您当前的目录中。否则，您可以使用以下命令创建一个新的备份：
- en: '[PRE78]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Next, type the standard `mongorestore` syntax with just the URI and location
    of the dump file being provided. Remember, the URI includes the target database
    within it:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，只需输入标准的`mongorestore`语法，只提供URI和转储文件的位置。记住，URI中包括目标数据库：
- en: '[PRE79]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Since the dump file is in `gzip` format, you also need to add the `--gzip` parameter
    to your restore command so that it can decompress the data.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于转储文件是以`gzip`格式，您还需要在恢复命令中添加`--gzip`参数，以便它可以解压数据。
- en: '[PRE80]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'To ensure the restore ends up with a clean result, use your `--drop` parameter
    to drop the relevant collections before you try and restore them:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保恢复结果干净，使用您的`--drop`参数在尝试恢复之前删除相关集合：
- en: '[PRE81]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now, add the parameters that modify your namespace. Because you are restoring
    a dump of the `sample_mflix` database, `"sample_mflix"` will be the value of your
    `nsFrom` parameter:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加修改命名空间的参数。因为您正在恢复`sample_mflix`数据库的转储，所以`"sample_mflix"`将是您的`nsFrom`参数的值：
- en: '[PRE82]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: This use case dictates that these collections will be restored in a database
    named `backup_mflix`. Provide this new namespace with the `nsTo` parameter as follows.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种用例规定这些集合将被恢复到一个名为`backup_mflix`的数据库中。使用`nsTo`参数提供这个新的命名空间。
- en: '[PRE83]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Your command is now complete. Copy and paste this code into your Terminal or
    Command Prompt and run it. There will be a lot of output to show you the progress
    of the restore, but at the end, you should see an output like the following:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的命令现在已经完成。将此代码复制并粘贴到您的终端或命令提示符中并运行。将会有大量输出来显示恢复的进度，但最后，您应该会看到如下输出：
- en: '[PRE84]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: From reading the output, you can see that the restoration completed, restoring
    each existing collection into a new database titled `backup_mflix`. The output
    will even tell you exactly how many documents were written as part of the restore.
    For example, `23541` documents were restored into the `movies` collection.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，恢复已完成，将每个现有集合恢复到名为`backup_mflix`的新数据库中。输出甚至会告诉您恢复的一部分写入了多少个文档。例如，`23541`个文档被恢复到`movies`集合中。
- en: 'Now if you log into your server with the mongo shell, you should be able to
    see your newly restored `backup_mflix` database and relevant collections as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您使用mongo shell登录到服务器，您应该能够看到您新恢复的`backup_mflix`数据库和相关集合，如下所示：
- en: '[PRE85]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: And that's it. You have successfully restored your backup into the MongoDB server.
    With your working knowledge of `mongorestore`, you will now be able to backup,
    and migrate entire MongoDB databases or servers efficiently. As noted earlier
    in this chapter, you might have been able to manage this same task with `mongoimport`,
    but being able to use `mongodump` and `mongorestore` will make your task significantly
    simpler.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。你已经成功地将备份还原到了MongoDB服务器中。有了对`mongorestore`的工作知识，你现在可以高效地备份和迁移整个MongoDB数据库或服务器。正如本章前面提到的，你也许可以用`mongoimport`来完成同样的任务，但是能够使用`mongodump`和`mongorestore`会让你的任务变得更简单。
- en: With the four key commands you've learned about in this chapter (`mongoexport`,
    `mongoimport`, `mongodump` and `monogrestore`), you should now be able to accomplish
    the majority of backup, migration and restoration tasks that you will encounter
    when working with MongoDB.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章学到的四个关键命令（`mongoexport`，`mongoimport`，`mongodump`和`mongorestore`），你现在应该能够完成大部分与MongoDB一起工作时遇到的备份、迁移和还原任务。
- en: 'Activity 11.01: Backup and Restore in MongoDB'
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动11.01：MongoDB中的备份和还原
- en: 'Your client (the cinema company) already has several scripts that run nightly
    to export, import, backup, and restore data. They run both backups and exports
    to ensure there are redundant copies of the data. However, due to their lack of
    experience with MongoDB, these commands are not functioning correctly. To resolve
    this, they have asked you to assist them with fine-tuning their backup strategy.
    Follow these steps to complete this activity:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 你的客户（电影公司）已经有了几个每晚运行的脚本，用于导出、导入、备份和还原数据。他们进行备份和导出是为了确保数据有冗余的副本。然而，由于他们对MongoDB的经验不足，这些命令并没有正确运行。为了解决这个问题，他们请求你帮助他们优化他们的备份策略。按照以下步骤完成这个活动：
- en: Note
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The four commands in this activity must be run in the correct order, as the
    `import` and `restore` commands depend on the output from the `export` and `dump`
    commands.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动中的四个命令必须按正确的顺序运行，因为`import`和`restore`命令依赖于`export`和`dump`命令的输出。
- en: '`theaterId` fields, sorted by `theaterId`, into a CSV file called `theaters.csv`:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按`theaterId`字段，按`theaterId`排序，导出到名为`theaters.csv`的CSV文件中：
- en: '[PRE86]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '`theaters.csv` file into a new collection called `theaters_import`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`theaters.csv`文件导入到名为`theaters_import`的新集合中：
- en: '[PRE87]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '`theaters` collection into a folder called `backups` in `gzip` format:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`theaters`集合以`gzip`格式备份到名为`backups`的文件夹中：
- en: '[PRE88]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '`sample_mflix_backup`:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sample_mflix_backup`：'
- en: '[PRE89]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Your goal is to take the provided scripts from the client, determine what is
    wrong with these scripts, and fix these problems. You can test that these scripts
    are running correctly on your own MongoDB server.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 你的目标是接受客户提供的脚本，确定这些脚本有什么问题，并解决这些问题。你可以在自己的MongoDB服务器上测试这些脚本是否正确运行。
- en: 'You can complete this objective in several ways, but remember what we have
    learned throughout the chapter and attempt to create simple, easy to use code.
    The following steps will help you to complete this task:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过几种方式完成这个目标，但要记住我们在整个章节中学到的东西，并尝试创建简单、易于使用的代码。以下步骤将帮助你完成这个任务：
- en: The target database is specified twice, try removing the redundant parameter.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标数据库被指定了两次，尝试移除多余的参数。
- en: Rerun the `export` command. We are missing an option specific to the CSV format.
    Add this parameter to ensure we export the `theaterId` and location fields.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行`export`命令。我们缺少一个特定于CSV格式的选项。添加这个参数以确保我们导出`theaterId`和location字段。
- en: Now looking at the `import` command, you should immediately notice there are
    some missing parameters required for CSV imports.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看`import`命令，你应该立即注意到一些缺少的参数，这些参数是CSV导入所需的。
- en: Firstly for the `dump` command, one of the options is not correct; run the command
    for the hint.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先对于`dump`命令，有一个选项是不正确的；运行命令以获取提示。
- en: Secondly, the `nsInclude` option is not available for the dump command, as this
    is a `mongorestore` option. Replace it with the appropriate option for `mongodump`.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，`dump`命令中没有`nsInclude`选项，因为这是`mongorestore`的选项。用适用于`mongodump`的适当选项替换它。
- en: In the `restore` command, there are some options with incorrect names. Fix these
    names.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`restore`命令中，有一些选项的名称不正确。修复这些名称。
- en: Also in the `restore` command, restore a `gzip` format dump from the preceding
    command. Add an option to your restore command to support this format.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在`restore`命令中，从前一个命令中还原一个`gzip`格式的dump。在还原命令中添加一个选项来支持这种格式。
- en: Finally, in the `restore` command, look at values of the `nsFrom` and `nsTo`
    options and check whether they are in the correct namespace format.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`restore`命令中，查看`nsFrom`和`nsTo`选项的值，并检查它们是否在正确的命名空间格式中。
- en: To test your results, run the four resulting commands in order (export, import,
    dump, restore.)
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试你的结果，按顺序运行这四个命令（导出，导入，dump，还原）。
- en: 'The output from the `mongoexport` command would look as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongoexport`命令的输出如下：'
- en: '[PRE90]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The output from the `mongoimport` command will look as follows:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongoimport`命令的输出如下：'
- en: '[PRE91]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The output from the `mongodump` command will look as follows:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongodump`命令的输出如下：'
- en: '![Figure 11.6 Output from the mongodump command'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.6 mongodump命令的输出'
- en: '](img/B15507_11_06.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_06.jpg)'
- en: Figure 11.6 Output from the mongodump command
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 mongodump命令的输出
- en: 'The start of the output from the `mongorestore` command will look as follows:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongorestore`命令的输出开始如下：'
- en: '![Figure 11.7: Start of the output from the mongorestore command'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.7：mongorestore命令的输出开始'
- en: '](img/B15507_11_07.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_07.jpg)'
- en: 'Figure 11.7: Start of the output from the mongorestore command'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：mongodump命令的输出开始
- en: 'The end of the output from the `mongorestore` command will look as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongorestore`命令的输出结束如下：'
- en: '![Figure 11.8: End of the output from the mongorestore command'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.8：mongorestore命令的输出结束'
- en: '](img/B15507_11_08.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15507_11_08.jpg)'
- en: 'Figure 11.8: End of the output from the mongorestore command'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8：mongorestore命令的输出结束
- en: Note
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15507_Solution_Final_SZ_ePub.xhtml#_idTextAnchor481).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可通过[此链接](B15507_Solution_Final_SZ_ePub.xhtml#_idTextAnchor481)找到。
- en: Summary
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered four separate commands. However, these four
    commands all serve as elements in a complete backup and restore lifecycle for
    MongoDB. By using these fundamental commands in combination with their advanced
    options, you should now be able to ensure that any MongoDB server you are responsible
    for can be appropriately snapshotted, backed up, exported, and restored in case
    of data corruption, loss, or disaster.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们涵盖了四个单独的命令。然而，这四个命令都作为 MongoDB 完整备份和恢复生命周期中的元素。通过结合这些基本命令和它们的高级选项，您现在应该能够确保您负责的任何
    MongoDB 服务器在数据损坏、丢失或灾难发生时都能得到适当的快照、备份、导出和恢复。
- en: You may not be responsible for backing up your MongoDB data, but these commands
    can also be used for a vast array of utilities. For example, being able to export
    the data into a CSV format will be very handy when trying to explore the information
    as a spreadsheet visually or even to present it to colleagues who are unfamiliar
    with the document model. By using `mongoimport`, you can also reduce the amount
    of manual work required to import data that is not provided in MongoDB format
    as well as import MongoDB data from other servers in bulk.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不负责备份 MongoDB 数据，但这些命令也可以用于各种实用程序。例如，将数据导出为 CSV 格式将非常方便，当尝试以电子表格的形式直观地探索信息，甚至向不熟悉文档模型的同事展示时。通过使用
    `mongoimport`，您还可以减少导入非 MongoDB 格式数据所需的手动工作量，以及批量导入来自其他服务器的 MongoDB 数据。
- en: The next chapter covers data visualization, an incredibly important concept
    for transforming MongoDB information into easily understood results that can provide
    insight and clarity for business problems as well as integrating them into presentations
    to persuade or convince stakeholders of hard to explain trends in the data.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章涵盖了数据可视化，这是一个非常重要的概念，可以将 MongoDB 信息转化为易于理解的结果，为业务问题提供洞察和清晰度，并将其整合到演示文稿中，以说服利益相关者对数据中难以解释的趋势产生兴趣。
