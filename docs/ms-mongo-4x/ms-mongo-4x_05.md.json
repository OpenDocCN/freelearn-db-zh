["```go\n$ mongo\n```", "```go\n$ db\n```", "```go\n> use <database_name>\n```", "```go\n> db.books.insert({title: 'mastering mongoDB', isbn: '101'})\nWriteResult({ \"nInserted\" : 1 })\n```", "```go\n> db.books.find()\n{ \"_id\" : ObjectId(\"592033f6141daf984112d07c\"), \"title\" : \"mastering mongoDB\", \"isbn\" : \"101\" }\n```", "```go\n> db.books.remove({isbn: '101'})\nWriteResult({ \"nRemoved\" : 1 })\n```", "```go\n> db.books.update({isbn:'101'}, {price: 30})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.books.find()\n{ \"_id\" : ObjectId(\"592034c7141daf984112d07d\"), \"price\" : 30 }\n```", "```go\n> db.books.update({isbn:'101'}, {$set: {price: 30}})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n```", "```go\n> db.books.find()\n{ \"_id\" : ObjectId(\"592035f6141daf984112d07f\"), \"title\" : \"mastering mongoDB\", \"isbn\" : \"101\", \"price\" : 30 }\n```", "```go\n> db.books.remove(\"592035f6141daf984112d07f\")\nWriteResult({ \"nRemoved\" : 1 })\n> db.books.find()\n>\n```", "```go\n> var title = 'MongoDB in a nutshell'\n> title\nMongoDB in a nutshell\n> db.books.insert({title: title, isbn: 102})\nWriteResult({ \"nInserted\" : 1 })\n> db.books.find()\n{ \"_id\" : ObjectId(\"59203874141daf984112d080\"), \"title\" : \"MongoDB in a nutshell\", \"isbn\" : 102 }\n```", "```go\n> queryBooksByIsbn = function(isbn) { return db.books.find({isbn: isbn})}\n```", "```go\n> queryBooksByIsbn(\"101\")\n{ \"_id\" : ObjectId(\"592035f6141daf984112d07f\"), \"title\" : \"mastering mongoDB\", \"isbn\" : \"101\", \"price\" : 30 }\n```", "```go\n$ mongo <script_name>.js\n```", "```go\n> authorMongoFactory = function() {for(loop=0;loop<1000;loop++) {db.books.insert({name: \"MongoDB factory book\" + loop})}}\nfunction () {for(loop=0;loop<1000;loop++) {db.books.insert({name: \"MongoDB factory book\" + loop})}}\n```", "```go\n> authorMongoFactory()\n```", "```go\n> fastAuthorMongoFactory = function() {\nvar bulk = db.books.initializeUnorderedBulkOp();\nfor(loop=0;loop<1000;loop++) {bulk.insert({name: \"MongoDB factory book\" + loop})}\nbulk.execute();\n}\n```", "```go\n> db.books.find()\n{ \"_id\" : ObjectId(\"59204251141daf984112d851\"), \"name\" : \"MongoDB factory book0\" }\n{ \"_id\" : ObjectId(\"59204251141daf984112d852\"), \"name\" : \"MongoDB factory book1\" }\n{ \"_id\" : ObjectId(\"59204251141daf984112d853\"), \"name\" : \"MongoDB factory book2\" }\n\u2026\n{ \"_id\" : ObjectId(\"59204251141daf984112d853\"), \"name\" : \"MongoDB factory book999\" }\n```", "```go\nvar bulk = db.books.initializeOrderedBulkOp();\n```", "```go\n> db.bookOrders.find()\n{ \"_id\" : ObjectId(\"59204793141daf984112dc3c\"), \"isbn\" : 101, \"name\" : \"Mastering MongoDB\", \"available\" : 99 }\n```", "```go\n> var bulk = db.bookOrders.initializeOrderedBulkOp();\n> bulk.find({isbn: 101}).updateOne({$inc: {available : 1}});\n> bulk.find({isbn: 101}).updateOne({$inc: {available : -100}});\n> bulk.execute();\n```", "```go\n[1000 inserts]\n[2 inserts]\n[998 updates]\n[1000 deletes]\n[4 deletes]\n[5 inserts] \n```", "```go\n> db.collection.bulkWrite(\n [ <operation 1>, <operation 2>, ... ],\n {\n writeConcern : <document>,\n ordered : <boolean>\n }\n)\n```", "```go\n> db.runCommand ( { compact: '<collection>', paddingFactor: 2.0 } )\n```", "```go\n> db.runCommand( { \"killOp\": 1, \"op\": <operationId> } )\n```", "```go\n> db.runCommand( { collMod: \"bookOrders\",\n\"validator\" : {\n \"$and\" : [\n {\n \"isbn\" : {\n \"$exists\" : true\n }\n },\n {\n \"name\" : {\n \"$exists\" : true\n }\n }\n ]\n }\n})\n```", "```go\n{ \"ok\" : 1 }\n```", "```go\n> db.bookOrders.insert({isbn: 102})\nWriteResult({\n\"nInserted\" : 0,\n\"writeError\" : {\n\"code\" : 121,\n\"errmsg\" : \"Document failed validation\"\n}\n})\n>\n```", "```go\n> db.runCommand({ touch: \"bookOrders\", data: true/false, index: true/false })\n```", "```go\n> db.books.find()\n{ \"_id\" : ObjectId(\"592149c4aabac953a3a1e31e\"), \"isbn\" : \"101\", \"name\" : \"Mastering MongoDB\", \"price\" : 30 }\n{ \"_id\" : ObjectId(\"59214bc1aabac954263b24e0\"), \"isbn\" : \"102\", \"name\" : \"MongoDB in 7 years\", \"price\" : 50 }\n{ \"_id\" : ObjectId(\"59214bc1aabac954263b24e1\"), \"isbn\" : \"103\", \"name\" : \"MongoDB for experts\", \"price\" : 40 }\n```", "```go\n> var mapper = function() {\n emit(this.id, 1);\n };\n```", "```go\n> var reducer = function(id, count) {\n return Array.sum(count);\n };\n```", "```go\n> db.books.mapReduce(mapper, reducer, { out:\"books_count\" });\n{\n\"result\" : \"books_count\",\n\"timeMillis\" : 16613,\n\"counts\" : {\n\"input\" : 3,\n\"emit\" : 3,\n\"reduce\" : 1,\n\"output\" : 1\n},\n\"ok\" : 1\n}\n> db.books_count.find()\n{ \"_id\" : null, \"value\" : 3 }\n>\n```", "```go\n> db.collection.mapReduce(\n mapper,\n reducer,\n {\n out: { merge/reduce: bookOrders, nonAtomic: true  }\n })\n```", "```go\n> db.books.find()\n{ \"_id\" : ObjectId(\"592149c4aabac953a3a1e31e\"), \"isbn\" : \"101\", \"name\" : \"Mastering MongoDB\", \"price\" : 30, \"published\" : ISODate(\"2017-06-25T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"59214bc1aabac954263b24e0\"), \"isbn\" : \"102\", \"name\" : \"MongoDB in 7 years\", \"price\" : 50, \"published\" : ISODate(\"2017-06-26T00:00:00Z\") }\n```", "```go\nvar mapper = function() {\n emit(this.id, 1);\n };\nvar reducer = function(id, count) {\n return Array.sum(count);\n };\n> db.books.mapReduce(mapper, reducer, { out: \"books_count\" })\n{\n\"result\" : \"books_count\",\n\"timeMillis\" : 16700,\n\"counts\" : {\n\"input\" : 2,\n\"emit\" : 2,\n\"reduce\" : 1,\n\"output\" : 1\n},\n\"ok\" : 1\n}\n> db.books_count.find()\n{ \"_id\" : null, \"value\" : 2 }\n```", "```go\n{ \"_id\" : ObjectId(\"59214bc1aabac954263b24e1\"), \"isbn\" : \"103\", \"name\" : \"MongoDB for experts\", \"price\" : 40, \"published\" : ISODate(\"2017-07-01T00:00:00Z\") }\n> db.books.mapReduce( mapper, reducer, { query: { published: { $gte: ISODate('2017-07-01 00:00:00') } }, out: { reduce: \"books_count\" } } )\n> db.books_count.find()\n{ \"_id\" : null, \"value\" : 3 }\n```", "```go\n> var emit = function(key, value) {\n print(\"debugging mapper's emit\");\n print(\"key: \" + key + \"  value: \" + tojson(value));\n}\n```", "```go\n> var myDoc = db.orders.findOne( { _id: ObjectId(\"50a8240b927d5d8b5891743c\") } );\n> mapper.apply(myDoc);\n```", "```go\nreduce( key, [ reduce(key, valuesArray) ] ) == reduce( key, valuesArray )\n```", "```go\nreduce(key, [ C, reduce(key, [ A, B ]) ] ) == reduce( key, [ C, A, B ] )\n```", "```go\nreduce( key, [ A, B ] ) == reduce( key, [ B, A ] )\n```", "```go\n$ mongod --auth\n```", "```go\n> use admin\n> db.createUser(\n {\n user: <adminUser>,\n pwd: <password>,\n roles: [ { role: <adminRole>, db: \"admin\" } ]\n }\n)\n```", "```go\n> db.createUser(\n {\n user: <adminUser>,\n pwd: <password>,\n roles: [ { role: \"dbAdmin\", db: \"mongo_book\" } ]\n }\n)\n```", "```go\nmongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n```", "```go\n$ mongod --sslMode requireSSL --sslPEMKeyFile <pem> --sslCAFile <ca>\n```", "```go\nnet:\n  ssl:\n     mode: requireSSL\n     PEMKeyFile: /etc/ssl/mongodb.pem\n     CAFile: /etc/ssl/ca.pem\n     disabledProtocols: TLS1_0,TLS1_1,TLS1_2\n```", "```go\nnet:\n  bindIp: <string>\n```", "```go\nuse $external\ndb.createUser(\n  {\n    user: \"mongo_book_user@packt.net\",\n    roles: [ { role: \"read\", db: \"mongo_book\" } ]\n  }\n)\n```", "```go\n--setParameter authenticationMechanisms=GSSAPI\n```", "```go\n$ mongo.exe --host <mongoserver> --authenticationMechanism=GSSAPI --authenticationDatabase='$external' --username mongo_book_user@packt.net\n```"]