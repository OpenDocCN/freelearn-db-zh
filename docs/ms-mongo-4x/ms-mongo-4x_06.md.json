["```go\n@collection = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mongo_book').database[:books]\n```", "```go\ndocument = { isbn: '101', name: 'Mastering MongoDB', price: 30}\n```", "```go\nresult = @collection.insert_one(document)\n```", "```go\n{\"n\"=>1, \"ok\"=>1.0}\n```", "```go\ndocuments = [ { isbn: '102', name: 'MongoDB in 7 years', price: 50 },\n            { isbn: '103', name: 'MongoDB for experts', price: 40 } ]\nresult = @collection.insert_many(documents)\n```", "```go\n@collection.find( { isbn: '101' } )\n```", "```go\n@collection.find( { isbn: '101', name: 'Mastering MongoDB' } )\n```", "```go\nresult = @collection.find({ isbn: '101' })\nresult.each do |doc|\n  puts doc.inspect\nend\n```", "```go\n{\"_id\"=>BSON::ObjectId('592149c4aabac953a3a1e31e'), \"isbn\"=>\"101\", \"name\"=>\"Mastering MongoDB\", \"price\"=>30.0, \"published\"=>2017-06-25 00:00:00 UTC}\n```", "```go\nresult = @collection.find('$or' => [{ isbn: '101' }, { isbn: '102' }]).to_a\nputs result\n```", "```go\n{\"_id\"=>BSON::ObjectId('592149c4aabac953a3a1e31e'), \"isbn\"=>\"101\", \"name\"=>\"Mastering MongoDB\", \"price\"=>30.0, \"published\"=>2017-06-25 00:00:00 UTC}{\"_id\"=>BSON::ObjectId('59214bc1aabac954263b24e0'), \"isbn\"=>\"102\", \"name\"=>\"MongoDB in 7 years\", \"price\"=>50.0, \"published\"=>2017-06-26 00:00:00 UTC}\n```", "```go\nresult = @collection.find('$and' => [{ isbn: '101' }, { isbn: '102' }]).to_a\nputs result\n```", "```go\nresult = @collection.find({ isbn: '101', isbn: '102' })\nputs result\n{\"_id\"=>BSON::ObjectId('59214bc1aabac954263b24e0'), \"isbn\"=>\"102\", \"name\"=>\"MongoDB in 7 years\", \"price\"=>50.0, \"published\"=>2017-06-26 00:00:00 UTC}\n```", "```go\nresult = @collection.find({ isbn: '102', isbn: '101' })\nputs result\n{\"_id\"=>BSON::ObjectId('592149c4aabac953a3a1e31e'), \"isbn\"=>\"101\", \"name\"=>\"Mastering MongoDB\", \"price\"=>30.0, \"published\"=>2017-06-25 00:00:00 UTC}\n```", "```go\nresult = @collection.find({'meta.authors': 'alex giamas'}).to_a\nputs result\n\"_id\"=>BSON::ObjectId('593c24443c8ca55b969c4c54'), \"isbn\"=>\"201\", \"name\"=>\"Mastering MongoDB, 2nd Edition\", \"meta\"=>{\"authors\"=>\"alex giamas\"}}\n```", "```go\n@collection.update_one( { 'isbn': 101}, { '$set' => { name: 'Mastering MongoDB, 2nd Edition' } } )\n```", "```go\n@collection.update( { isbn: '101'}, { \"$set\": { name: \"Mastering MongoDB, 2nd edition\" } } )\n```", "```go\n@collection.find( { isbn: '101' } ).delete_one\n```", "```go\n@collection.find( { price: { $gte: 30 } ).delete_many\n```", "```go\n@collection.bulk_write([ { insertMany: documents\n                     }],\n                   ordered: true)\n```", "```go\nold_book = @collection.findOne(name: 'MongoDB for experts')\nnew_book = { isbn: 201, name: 'MongoDB for experts, 2nd Edition', price: 55 }\n@collection.bulk_write([ {deleteOne: old_book}, { insertOne: new_book\n                     }],\n                   ordered: true)\n```", "```go\nBook.find('592149c4aabac953a3a1e31e')\n```", "```go\nBook.where(name: 'Mastering MongoDB')\n```", "```go\nBook.find_by(name: 'Mastering MongoDB')\n```", "```go\nMongoid::QueryCache.enabled = true\n```", "```go\nClass Book\n...\n  def self.premium\n     where(price: {'$gt': 20'})\n   end\nEnd\n```", "```go\nBook.premium\n```", "```go\nBook.where(isbn: 202, name: 'Mastering MongoDB, 3rd Edition').create\n```", "```go\nBook.where(isbn: 202, name: 'Mastering MongoDB, 3rd Edition').create!\n```", "```go\nBook.where(isbn: 202).update(name: 'Mastering MongoDB, THIRD Edition')\nBook.where(price: { '$gt': 20 }).update_all(price_range: 'premium')\n```", "```go\nfrom pymongo import MongoClient\nfrom pprint import pprint\n\n>>> book = {\n 'isbn': '301',\n 'name': 'Python and MongoDB',\n 'price': 60\n}\n>>> insert_result = books.insert_one(book)\n>>> pprint(insert_result)\n\n<pymongo.results.InsertOneResult object at 0x104bf3370>\n\n>>> result = list(books.find())\n>>> pprint(result)\n\n[{u'_id': ObjectId('592149c4aabac953a3a1e31e'),\n u'isbn': u'101',\n u'name': u'Mastering MongoDB',\n u'price': 30.0,\n u'published': datetime.datetime(2017, 6, 25, 0, 0)},\n{u'_id': ObjectId('59214bc1aabac954263b24e0'),\n u'isbn': u'102',\n u'name': u'MongoDB in 7 years',\n u'price': 50.0,\n u'published': datetime.datetime(2017, 6, 26, 0, 0)},\n{u'_id': ObjectId('593c24443c8ca55b969c4c54'),\n u'isbn': u'201',\n u'meta': {u'authors': u'alex giamas'},\n u'name': u'Mastering MongoDB, 2nd Edition'},\n{u'_id': ObjectId('594061a9aabac94b7c858d3d'),\n u'isbn': u'301',\n u'name': u'Python and MongoDB',\n u'price': 60}]\n```", "```go\nfor document in results:\n   print(document)\n```", "```go\n>>> result = books.delete_many({ \"isbn\": \"101\" })\n>>> print(result.deleted_count)\n1\n```", "```go\n>>> books.delete_many({})\n>>> books.drop()\n```", "```go\n>>> books.find({\"name\": \"Mastering MongoDB\"})\n\n[{u'_id': ObjectId('592149c4aabac953a3a1e31e'),\n u'isbn': u'101',\n u'name': u'Mastering MongoDB',\n u'price': 30.0,\n u'published': datetime.datetime(2017, 6, 25, 0, 0)}]\n```", "```go\n>>> result = list(books.find({\"meta.authors\": {\"$regex\": \"aLEx\", \"$options\": \"i\"}}))\n>>> pprint(result)\n\n[{u'_id': ObjectId('593c24443c8ca55b969c4c54'),\n u'isbn': u'201',\n u'meta': {u'authors': u'alex giamas'},\n u'name': u'Mastering MongoDB, 2nd Edition'}]\n```", "```go\n>>> result = list(books.find({ \"price\": {  \"$gt\":40 } }))\n>>> pprint(result)\n\n[{u'_id': ObjectId('594061a9aabac94b7c858d3d'),\n u'isbn': u'301',\n u'name': u'Python and MongoDB',\n u'price': 60}]\n```", "```go\n>>> result = list(books.find({\"name\": \"Mastering MongoDB\", \"isbn\": \"101\"}))\n>>> pprint(result)\n\n[{u'_id': ObjectId('592149c4aabac953a3a1e31e'),\n u'isbn': u'101',\n u'name': u'Mastering MongoDB',\n u'price': 30.0,\n u'published': datetime.datetime(2017, 6, 25, 0, 0)}]\n```", "```go\n>>> result = list(books.find({\"$or\": [{\"isbn\": \"101\"}, {\"isbn\": \"102\"}]}))\n>>> pprint(result)\n\n[{u'_id': ObjectId('592149c4aabac953a3a1e31e'),\n u'isbn': u'101',\n u'name': u'Mastering MongoDB',\n u'price': 30.0,\n u'published': datetime.datetime(2017, 6, 25, 0, 0)},\n{u'_id': ObjectId('59214bc1aabac954263b24e0'),\n u'isbn': u'102',\n u'name': u'MongoDB in 7 years',\n u'price': 50.0,\n u'published': datetime.datetime(2017, 6, 26, 0, 0)}]\n```", "```go\n>>> result = list(books.find({\"$or\": [{\"$and\": [{\"name\": \"Mastering MongoDB\", \"isbn\": \"101\"}]}, {\"$and\": [{\"name\": \"MongoDB in 7 years\", \"isbn\": \"102\"}]}]}))\n>>> pprint(result)\n[{u'_id': ObjectId('592149c4aabac953a3a1e31e'),\n u'isbn': u'101',\n u'name': u'Mastering MongoDB',\n u'price': 30.0,\n u'published': datetime.datetime(2017, 6, 25, 0, 0)},\n{u'_id': ObjectId('59214bc1aabac954263b24e0'),\n u'isbn': u'102',\n u'name': u'MongoDB in 7 years',\n u'price': 50.0,\n u'published': datetime.datetime(2017, 6, 26, 0, 0)}]\n```", "```go\n>>> result = books.update_one({\"isbn\": \"101\"}, {\"$set\": {\"price\": 100}})\n>>> print(result.matched_count)\n1\n>>> print(result.modified_count)\n1\n```", "```go\n>>> user = User('alexgiamas@packt.com', 'Alex', 'Giamas').save()\n```", "```go\n>>> user = User(email='alexgiamas@packt.com', 'Alex', last_name='Giamas').save()\n```", "```go\n>>> users = [ user1, user2,...,userN]\n>>>  User.bulk_create(users)\n```", "```go\n>>> user.first_name = 'Alexandros'\n>>> user.save()\n```", "```go\n>>> User.objects.raw({'first_name': {'$exists': True}})\n              .update({'$set': {'updated_at': datetime.datetime.now()}})\n```", "```go\n>>> User.objects.raw({'first_name': {'$exists': True}}).delete()\n```", "```go\n$document = array( \"isbn\" => \"401\", \"name\" => \"MongoDB and PHP\" );\n$result = $collection->insertOne($document);\nvar_dump($result);\n```", "```go\nMongoDB\\InsertOneResult Object\n(\n   [writeResult:MongoDB\\InsertOneResult:private] => MongoDB\\Driver\\WriteResult Object\n       (\n           [nInserted] => 1\n           [nMatched] => 0\n           [nModified] => 0\n           [nRemoved] => 0\n           [nUpserted] => 0\n           [upsertedIds] => Array\n               (\n               )\n\n           [writeErrors] => Array\n               (\n               )\n\n           [writeConcernError] =>\n           [writeConcern] => MongoDB\\Driver\\WriteConcern Object\n               (\n               )\n\n       )\n\n   [insertedId:MongoDB\\InsertOneResult:private] => MongoDB\\BSON\\ObjectID Object\n       (\n           [oid] => 5941ac50aabac9d16f6da142\n       )\n\n   [isAcknowledged:MongoDB\\InsertOneResult:private] => 1\n)\n```", "```go\n$documentAlpha = array( \"isbn\" => \"402\", \"name\" => \"MongoDB and PHP, 2nd Edition\" );$documentBeta  = array( \"isbn\" => \"403\", \"name\" => \"MongoDB and PHP, revisited\" );\n$result = $collection->insertMany([$documentAlpha, $documentBeta]);\n\nprint_r($result);\n```", "```go\n(\n   [writeResult:MongoDB\\InsertManyResult:private] => MongoDB\\Driver\\WriteResult Object\n       (\n           [nInserted] => 2\n           [nMatched] => 0\n           [nModified] => 0\n           [nRemoved] => 0\n           [nUpserted] => 0\n           [upsertedIds] => Array\n               (\n               )\n\n           [writeErrors] => Array\n               (\n               )\n\n           [writeConcernError] =>\n           [writeConcern] => MongoDB\\Driver\\WriteConcern Object\n               (\n               )\n\n       )\n\n   [insertedIds:MongoDB\\InsertManyResult:private] => Array\n       (\n           [0] => MongoDB\\BSON\\ObjectID Object\n               (\n                   [oid] => 5941ae85aabac9d1d16c63a2\n               )\n\n           [1] => MongoDB\\BSON\\ObjectID Object\n               (\n                   [oid] => 5941ae85aabac9d1d16c63a3\n               )\n\n       )\n\n   [isAcknowledged:MongoDB\\InsertManyResult:private] => 1\n)\n```", "```go\narray(2) {\n [0]=>\n object(MongoDB\\BSON\\ObjectID)#13 (1) {\n   [\"oid\"]=>\n   string(24) \"5941ae85aabac9d1d16c63a2\"\n }\n [1]=>\n object(MongoDB\\BSON\\ObjectID)#14 (1) {\n   [\"oid\"]=>\n   string(24) \"5941ae85aabac9d1d16c63a3\"\n }\n}\n```", "```go\n$deleteQuery = array( \"isbn\" => \"401\");\n$deleteResult = $collection->deleteMany($deleteQuery);\nprint($deleteResult->getDeletedCount());\n```", "```go\nMongoDB\\DeleteResult Object\n(\n   [writeResult:MongoDB\\DeleteResult:private] => MongoDB\\Driver\\WriteResult Object\n       (\n           [nInserted] => 0\n           [nMatched] => 0\n           [nModified] => 0\n           [nRemoved] => 2\n           [nUpserted] => 0\n           [upsertedIds] => Array\n               (\n               )\n\n           [writeErrors] => Array\n               (\n               )\n\n           [writeConcernError] =>\n           [writeConcern] => MongoDB\\Driver\\WriteConcern Object\n               (\n               )\n\n       )\n\n   [isAcknowledged:MongoDB\\DeleteResult:private] => 1\n)\n2\n```", "```go\n$manager = new MongoDB\\Driver\\Manager('mongodb://localhost:27017');\n$bulk = new MongoDB\\Driver\\BulkWrite(array(\"ordered\" => true));\n$bulk->insert(array( \"isbn\" => \"401\", \"name\" => \"MongoDB and PHP\" ));\n$bulk->insert(array( \"isbn\" => \"402\", \"name\" => \"MongoDB and PHP, 2nd Edition\" ));\n$bulk->update(array(\"isbn\" => \"402\"), array('$set' => array(\"price\" => 15)));\n$bulk->insert(array( \"isbn\" => \"403\", \"name\" => \"MongoDB and PHP, revisited\" ));\n\n$result = $manager->executeBulkWrite('mongo_book.books', $bulk);\nprint_r($result);\n```", "```go\nMongoDB\\Driver\\WriteResult Object\n(\n   [nInserted] => 3\n   [nMatched] => 1\n   [nModified] => 1\n   [nRemoved] => 0\n   [nUpserted] => 0\n   [upsertedIds] => Array\n       (\n       )\n\n   [writeErrors] => Array\n       (\n       )\n\n   [writeConcernError] =>\n   [writeConcern] => MongoDB\\Driver\\WriteConcern Object\n       (\n       )\n\n)\n```", "```go\n$document = $collection->findOne( array(\"isbn\" => \"401\") );\n$cursor = $collection->find( array( \"name\" => new MongoDB\\BSON\\Regex(\"mongo\", \"i\") ) );\n```", "```go\n$cursor = $collection->find( array('meta.price' => 50) );\n```", "```go\n$cursor = $collection->find( array( 'price' => array('$gte'=> 60) ) );\n```", "```go\n$cursor = $collection->find( array( '$or' => array(\n                                            array(\"price\" => array( '$gte' => 60)),\n                                            array(\"price\" => array( '$lte' => 20))\n                                   )));\n```", "```go\n$result = $collection->updateOne(  array( \"isbn\" => \"401\"),\n   array( '$set' => array( \"price\" => 39 ) )\n);\n```", "```go\n$book = new Book();\n$book->setName('MongoDB with Doctrine');\n$book->setPrice(45);\n```", "```go\n$dm->persist($book);\n```", "```go\n$dm->flush();\n```", "```go\n$dm = DocumentManager::create(new Connection(), $config);\n```", "```go\n$book->price = 39;\n$book->persist($book);\n```", "```go\n$dm->createQueryBuilder('Book')\n   ->updateMany()\n   ->field('price')->set(69)\n   ->field('name')->equals('MongoDB with Doctrine')\n   ->getQuery()\n   ->execute();\n```", "```go\n$dm->remove($book);\n```", "```go\n$qb = $dm->createQueryBuilder('Book');\n$qb->remove()\n   ->field('price')->equals(50)\n   ->getQuery()\n   ->execute();\n```", "```go\n$qb = $dm->createQueryBuilder('Book');\n$query = $qb->getQuery();\n$books = $query->execute();\n```", "```go\n$qb = $dm->createQueryBuilder('Book')\n                ->field('price')->lt(30);\n```", "```go\n$expression = $qb->expr()->field('name')->equals('MongoDB with Doctrine')\n```", "```go\n> db.books.find({\"name\": /mongo/})\n```", "```go\n> db.books.find({\"name\": /mongo/i})\n```", "```go\n> db.books.find({'name': { '$regex': /mongo/ } })\n> db.books.find({'name': { '$regex': /mongo/i } })\n```", "```go\n> db.books.find({'name': { '$regex': /mongo/ } })\n> db.books.find({'name': { '$regex': /^mongo.*/ } })\n```", "```go\n> db.books.find().snapshot()\n```", "```go\n> db.books.remove( { price: { $gt: 30 }, $isolated: 1 } )\n```", "```go\n> db.books.compact()\n```", "```go\nfrom pymongo import MongoClient\n\nclass MongoExamples:\n   def __init__(self):\n       self.client = MongoClient('localhost', 27017)\n       db = self.client.streams\n       self.signals = db.signals\n   # a basic watch on signals collection\n   def change_books(self):\n       with self.client.watch() as stream:\n           for change in stream:\n               print(change)\ndef main():\n   MongoExamples().change_books()\nif __name__ == '__main__':\n   main()\n```", "```go\n> mongo\n> use streams\n> db.signals.insert({value: 114.3, signal:1})\n```", "```go\n{'_id': {'_data': '825BB7A25E0000000129295A1004A34408FB07864F8F960BF14453DFB98546645F696400645BB7A25EE10ED33145BCF7A70004'}, 'operationType': 'insert', 'clusterTime': Timestamp(1538761310, 1), 'fullDocument': {'_id': ObjectId('5bb7a25ee10ed33145bcf7a7'), 'value': 114.3, 'signal': 1.0}, 'ns': {'db': 'streams', 'coll': 'signals'}, 'documentKey': {'_id': ObjectId('5bb7a25ee10ed33145bcf7a7')}}\n```", "```go\n> db.a_random_collection.insert({test: 'bar'})\n```", "```go\n{'_id': {'_data': '825BB7A3770000000229295A10044AB37F707D104634B646CC5810A40EF246645F696400645BB7A377E10ED33145BCF7A80004'}, 'operationType': 'insert', 'clusterTime': Timestamp(1538761591, 2), 'fullDocument': {'_id': ObjectId('5bb7a377e10ed33145bcf7a8'), 'test': 'bar'}, 'ns': {'db': 'streams', 'coll': 'a_random_collection'}, 'documentKey': {'_id': ObjectId('5bb7a377e10ed33145bcf7a8')}}\n```", "```go\n> with self.signals.watch() as stream:\n```", "```go\nwatch(pipeline=None, full_document='default', resume_after=None, max_await_time_ms=None, batch_size=None, collation=None, start_at_operation_time=None, session=None)\n```", "```go\n$match\n$project\n$addFields\n$replaceRoot\n$redact\n```", "```go\n{  _id : { <BSON Object> },\n  \"operationType\" : \"<operation>\",\n  \"fullDocument\" : { <document> },\n  \"ns\" : {\n     \"db\" : \"<database>\",\n     \"coll\" : \"<collection\"\n  },\n  \"documentKey\" : { \"_id\" : <ObjectId> },\n  \"updateDescription\" : {\n     \"updatedFields\" : { <document> },\n     \"removedFields\" : [ \"<field>\", ... ]\n  }\n  \"clusterTime\" : <Timestamp>,\n  \"txnNumber\" : <NumberLong>,\n  \"lsid\" : {\n     \"id\" : <UUID>,\n     \"uid\" : <BinData>\n  }\n}\n```"]