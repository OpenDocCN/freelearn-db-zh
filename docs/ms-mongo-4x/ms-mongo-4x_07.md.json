["```go\n{accounts: [ {account_id: 1, account_name: \u2018alex\u2019, balance: 100}, {account_id: 2, account_name: \u2018bob\u2019, balance: 50}]}\n```", "```go\ns.start_transaction()\norders.insert_one(order, session=s)\nstock.update_one(item, stockUpdate, session=s)\ns.commit_transaction()\n```", "```go\ndb.start_transaction()\ncursor.execute(orderInsert, orderData)\ncursor.execute(stockUpdate, stockData)\ndb.commit()\n```", "```go\n{\"collection\": \"accounts\", \"account_id\": \"1\", \"account_name\": \"Alex\", \"account_balance\":100}{\"collection\": \"accounts\", \"account_id\": \"2\", \"account_name\": \"Mary\", \"account_balance\":50}\n```", "```go\nimport json\nclass InitData:\n   def __init__(self):\n       self.client = MongoClient('localhost', 27017)\n       self.db = self.client.mongo_bank\n       self.accounts = self.db.accounts\n       # drop data from accounts collection every time to start from a clean slate\n       self.accounts.drop()\n       # load data from json and insert them into our database\n       init_data = InitData.load_data(self)\n       self.insert_data(init_data)\n   @staticmethod\n   def load_data(self):\n       ret = []\n       with open('init_data.json', 'r') as f:\n           for line in f:\n               ret.append(json.loads(line))\n       return ret\n   def insert_data(self, data):\n       for document in data:\n           collection_name = document['collection']\n           account_id = document['account_id']\n           account_name = document['account_name']\n           account_balance = document['account_balance']\n           self.db[collection_name].insert_one({'account_id': account_id, 'name': account_name, 'balance': account_balance})\n```", "```go\n> db.accounts.find()\n{ \"_id\" : ObjectId(\"5bc1fa7ef8d89f2209d4afac\"), \"account_id\" : \"1\", \"name\" : \"Alex\", \"balance\" : 100 }\n{ \"_id\" : ObjectId(\"5bc1fa7ef8d89f2209d4afad\"), \"account_id\" : \"2\", \"name\" : \"Mary\", \"balance\" : 50 }\n```", "```go\n   def transfer(self, source_account, target_account, value):\n       print(f'transferring {value} Hypnotons from {source_account} to {target_account}')\n       with self.client.start_session() as ses:\n           ses.start_transaction()\n           self.accounts.update_one({'account_id': source_account}, {'$inc': {'balance': value*(-1)} })\n           self.accounts.update_one({'account_id': target_account}, {'$inc': {'balance': value} })\n           updated_source_balance = self.accounts.find_one({'account_id': source_account})['balance']\n           updated_target_balance = self.accounts.find_one({'account_id': target_account})['balance']\n           if updated_source_balance < 0 or updated_target_balance < 0:\n               ses.abort_transaction()\n           else:\n               ses.commit_transaction()\n```", "```go\n>>> obj = InitData.new\n>>> obj.transfer('1', '2', 300)\n```", "```go\n> db.accounts.find()\n{ \"_id\" : ObjectId(\"5bc1fe25f8d89f2337ae40cf\"), \"account_id\" : \"1\", \"name\" : \"Alex\", \"balance\" : -200 }\n{ \"_id\" : ObjectId(\"5bc1fe26f8d89f2337ae40d0\"), \"account_id\" : \"2\", \"name\" : \"Mary\", \"balance\" : 350 }\n```", "```go\n       with self.client.start_session() as ses:\n```", "```go\n               ses.abort_transaction()\n```", "```go\n   def tx_transfer_err(self, source_account, target_account, value):\n       print(f'transferring {value} Hypnotons from {source_account} to {target_account}')\n       with self.client.start_session() as ses:\n           ses.start_transaction()\n           res = self.accounts.update_one({'account_id': source_account}, {'$inc': {'balance': value*(-1)} }, session=ses)\n           res2 = self.accounts.update_one({'account_id': target_account}, {'$inc': {'balance': value} }, session=ses)\n           error_tx = self.__validate_transfer(source_account, target_account)\n\n           if error_tx['status'] == True:\n               print(f\"cant transfer {value} Hypnotons from {source_account} ({error_tx['s_bal']}) to {target_account} ({error_tx['t_bal']})\")\n               ses.abort_transaction()\n           else:\n               ses.commit_transaction()\n```", "```go\n   def __validate_transfer(self, source_account, target_account):\n       source_balance = self.accounts.find_one({'account_id': source_account})['balance']\n       target_balance = self.accounts.find_one({'account_id': target_account})['balance']\n\n       if source_balance < 0 or target_balance < 0:\n          return {'status': True, 's_bal': source_balance, 't_bal': target_balance}\n       else:\n           return {'status': False}\n```", "```go\nfrom pymongo import MongoClient\nimport json\n\nclass InitData:\n   def __init__(self):\n       self.client = MongoClient('localhost', 27017, w='majority')\n       self.db = self.client.mongo_bank\n       self.accounts = self.db.accounts\n\n       # drop data from accounts collection every time to start from a clean slate\n       self.accounts.drop()\n\n       init_data = InitData.load_data(self)\n       self.insert_data(init_data)\n       self.transfer('1', '2', 300)\n\n   @staticmethod\n   def load_data(self):\n       ret = []\n       with open('init_data.json', 'r') as f:\n           for line in f:\n               ret.append(json.loads(line))\n       return ret\n\n   def insert_data(self, data):\n       for document in data:\n           collection_name = document['collection']\n           account_id = document['account_id']\n           account_name = document['account_name']\n           account_balance = document['account_balance']\n\n           self.db[collection_name].insert_one({'account_id': account_id, 'name': account_name, 'balance': account_balance})\n\n   # validating errors, using the tx session\n   def tx_transfer_err_ses(self, source_account, target_account, value):\n       print(f'transferring {value} Hypnotons from {source_account} to {target_account}')\n       with self.client.start_session() as ses:\n           ses.start_transaction()\n           res = self.accounts.update_one({'account_id': source_account}, {'$inc': {'balance': value * (-1)}}, session=ses)\n           res2 = self.accounts.update_one({'account_id': target_account}, {'$inc': {'balance': value}}, session=ses)\n           error_tx = self.__validate_transfer_ses(source_account, target_account, ses)\n\n           if error_tx['status'] == True:\n               print(f\"cant transfer {value} Hypnotons from {source_account} ({error_tx['s_bal']}) to {target_account} ({error_tx['t_bal']})\")\n               ses.abort_transaction()\n           else:\n               ses.commit_transaction()\n\n   # we are passing the session value so that we can view the updated values\n   def __validate_transfer_ses(self, source_account, target_account, ses):\n       source_balance = self.accounts.find_one({'account_id': source_account}, session=ses)['balance']\n       target_balance = self.accounts.find_one({'account_id': target_account}, session=ses)['balance']\n       if source_balance < 0 or target_balance < 0:\n           return {'status': True, 's_bal': source_balance, 't_bal': target_balance}\n       else:\n           return {'status': False}\n\ndef main():\n   InitData()\n\nif __name__ == '__main__':\n   main()\n```", "```go\nrequire 'mongo'\n\nclass MongoBank\n  def initialize\n    @client = Mongo::Client.new([ '127.0.0.1:27017' ], database: :mongo_bank)\n    db = @client.database\n    @collection = db[:accounts]\n\n    # drop any existing data\n    @collection.drop\n\n    @collection.insert_one('collection': 'accounts', 'account_id': '1', 'account_name': 'Alex', 'account_balance':100)\n    @collection.insert_one('collection': 'accounts', 'account_id': '2', 'account_name': 'Mary', 'account_balance':50)\n\n    transfer('1', '2', 30)\n    transfer('1', '2', 300)\n  end\n\n  def transfer(source_account, target_account, value)\n    puts \"transferring #{value} Hypnotons from #{source_account} to #{target_account}\"\n    session = @client.start_session\n\n    session.start_transaction(read_concern: { level: :snapshot }, write_concern: { w: :majority })\n    @collection.update_one({ account_id: source_account }, { '$inc' => { account_balance: value*(-1)} }, session: session)\n    @collection.update_one({ account_id: target_account }, { '$inc' => { account_balance: value} }, session: session)\n\n    source_account_balance = @collection.find({ account_id: source_account }, session: session).first['account_balance']\n\n    if source_account_balance < 0\n      session.abort_transaction\n    else\n      session.commit_transaction\n    end\n  end\n\nend\n\n# initialize class\nMongoBank.new\n```", "```go\n> db.users.find()\n{ \"_id\" : ObjectId(\"5bc22f35f8d89f2b9e01d0fd\"), \"user_id\" : 1, \"name\" : \"alex\" }\n{ \"_id\" : ObjectId(\"5bc22f35f8d89f2b9e01d0fe\"), \"user_id\" : 2, \"name\" : \"barbara\" }\n```", "```go\n> db.carts.find()\n{ \"_id\" : ObjectId(\"5bc2f9de8e72b42f77a20ac8\"), \"cart_id\" : 1, \"user_id\" : 1 }\n{ \"_id\" : ObjectId(\"5bc2f9de8e72b42f77a20ac9\"), \"cart_id\" : 2, \"user_id\" : 2 }\n```", "```go\n> db.payments.find()\n{ \"_id\" : ObjectId(\"5bc2f9de8e72b42f77a20aca\"), \"cart_id\" : 1, \"name\" : \"alex\", \"item_id\" : 101, \"status\" : \"paid\" }\n```", "```go\n> db.inventories.find()\n{ \"_id\" : ObjectId(\"5bc2f9de8e72b42f77a20acb\"), \"item_id\" : 101, \"description\" : \"bull bearing\", \"price\" : 100, \"quantity\" : 5 }\n```", "```go\nvalidator = { validator:\n { $jsonSchema:\n { bsonType: \"object\",\n required: [\"quantity\"],\n properties:\n { quantity:\n { bsonType: [\"long\"],\n minimum: 0,\n description: \"we can\u2019t have a negative number of items in our inventory\"\n }\n }\n }\n }\n}\n```", "```go\n> db.createCollection(\"inventories\", validator)\n```", "```go\nfrom pymongo import MongoClient\nfrom pymongo.errors import ConnectionFailure\nfrom pymongo.errors import OperationFailure\n\nclass ECommerce:\n   def __init__(self):\n       self.client = MongoClient('localhost', 27017, w='majority')\n       self.db = self.client.mongo_bank\n       self.users = self.db['users']\n       self.carts = self.db['carts']\n       self.payments = self.db['payments']\n       self.inventories = self.db['inventories']\n       # delete any existing data\n       self.db.drop_collection('carts')\n       self.db.drop_collection('payments')\n       self.db.inventories.remove()\n       # insert new data\n       self.insert_data()\n       alex_order_cart_id = self.add_to_cart(1,101,2)\n       barbara_order_cart_id = self.add_to_cart(2,101,4)\n       self.place_order(alex_order_cart_id)\n       self.place_order(barbara_order_cart_id)\n   def insert_data(self):\n       self.users.insert_one({'user_id': 1, 'name': 'alex' })\n       self.users.insert_one({'user_id': 2, 'name': 'barbara'})\n       self.carts.insert_one({'cart_id': 1, 'user_id': 1})\n       self.db.carts.insert_one({'cart_id': 2, 'user_id': 2})\n       self.db.payments.insert_one({'cart_id': 1, 'name': 'alex', 'item_id': 101, 'status': 'paid'})\n       self.db.inventories.insert_one({'item_id': 101, 'description': 'bull bearing', 'price': 100, 'quantity': 5.0})\n\n   def add_to_cart(self, user, item, quantity):\n       # find cart for user\n       cart_id = self.carts.find_one({'user_id':user})['cart_id']\n       self.carts.update_one({'cart_id': cart_id}, {'$inc': {'quantity': quantity}, '$set': { 'item': item} })\n       return cart_id\n\n   def place_order(self, cart_id):\n           while True:\n               try:\n                   with self.client.start_session() as ses:\n                       ses.start_transaction()\n                       cart = self.carts.find_one({'cart_id': cart_id}, session=ses)\n                       item_id = cart['item']\n                       quantity = cart['quantity']\n                       # update payments\n                       self.db.payments.insert_one({'cart_id': cart_id, 'item_id': item_id, 'status': 'paid'}, session=ses)\n                       # remove item from cart\n                       self.db.carts.update_one({'cart_id': cart_id}, {'$inc': {'quantity': quantity * (-1)}}, session=ses)\n                       # update inventories\n                       self.db.inventories.update_one({'item_id': item_id}, {'$inc': {'quantity': quantity*(-1)}}, session=ses)\n                       ses.commit_transaction()\n                       break\n               except (ConnectionFailure, OperationFailure) as exc:\n                   print(\"Transaction aborted. Caught exception during transaction.\")\n                   # If transient error, retry the whole transaction\n                   if exc.has_error_label(\"TransientTransactionError\"):\n                       print(\"TransientTransactionError, retrying transaction ...\")\n                       continue\n                   elif str(exc) == 'Document failed validation':\n                       print(\"error validating document!\")\n                       raise\n                   else:\n                       print(\"Unknown error during commit ...\")\n                       raise\ndef main():\n   ECommerce()\nif __name__ == '__main__':\n   main()\n```", "```go\n   def add_to_cart(self, user, item, quantity):\n       # find cart for user\n       cart_id = self.carts.find_one({'user_id':user})['cart_id']\n       self.carts.update_one({'cart_id': cart_id}, {'$inc': {'quantity': quantity}, '$set': { 'item': item} })\n       return cart_id\n```", "```go\n    def place_order(self, cart_id):\n while True:\n try:\n with self.client.start_session() as ses:\n ses.start_transaction()\n \u2026\n # update payments\n self.db.payments.insert_one({'cart_id': cart_id, 'item_id': item_id, 'status': 'paid'}, session=ses)\n # remove item from cart\n self.db.carts.update_one({'cart_id': cart_id}, {'$inc': {'quantity': quantity * (-1)}}, session=ses)\n # update inventories\n self.db.inventories.update_one({'item_id': item_id}, {'$inc': {'quantity': quantity*(-1)}}, session=ses)\n ses.commit_transaction()\n break\n except (ConnectionFailure, OperationFailure) as exc:\n print(\"Transaction aborted. Caught exception during transaction.\")\n # If transient error, retry the whole transaction\n if exc.has_error_label(\"TransientTransactionError\"):\n print(\"TransientTransactionError, retrying transaction ...\")\n continue\n elif str(exc) == 'Document failed validation':\n print(\"error validating document!\")\n raise\n else:\n print(\"Unknown error during commit ...\")\n raise\n```", "```go\n> db.payments.find()\n{ \"_id\" : ObjectId(\"5bc307178e72b431c0de385f\"), \"cart_id\" : 1, \"name\" : \"alex\", \"item_id\" : 101, \"status\" : \"paid\" }\n{ \"_id\" : ObjectId(\"5bc307178e72b431c0de3861\"), \"cart_id\" : 1, \"item_id\" : 101, \"status\" : \"paid\" }\n```", "```go\n> db.inventories.find()\n{ \"_id\" : ObjectId(\"5bc303468e72b43118dda074\"), \"item_id\" : 101, \"description\" : \"bull bearing\", \"price\" : 100, \"quantity\" : 3 }\n```", "```go\n> db.carts.find()\n{ \"_id\" : ObjectId(\"5bc307178e72b431c0de385d\"), \"cart_id\" : 1, \"user_id\" : 1, \"item\" : 101, \"quantity\" : 0 }\n{ \"_id\" : ObjectId(\"5bc307178e72b431c0de385e\"), \"cart_id\" : 2, \"user_id\" : 2, \"item\" : 101, \"quantity\" : 4 }\n```", "```go\nrequire 'mongo'\n\nclass ECommerce\n def initialize\n   @client = Mongo::Client.new([ '127.0.0.1:27017' ], database: :mongo_bank)\n   db = @client.database\n   @users = db[:users]\n   @carts = db[:carts]\n   @payments = db[:payments]\n   @inventories = db[:inventories]\n\n   # drop any existing data\n   @users.drop\n   @carts.drop\n   @payments.drop\n   @inventories.delete_many\n\n   # insert data\n   @users.insert_one({ \"user_id\": 1, \"name\": \"alex\" })\n   @users.insert_one({ \"user_id\": 2, \"name\": \"barbara\" })\n\n   @carts.insert_one({ \"cart_id\": 1, \"user_id\": 1 })\n   @carts.insert_one({ \"cart_id\": 2, \"user_id\": 2 })\n\n   @payments.insert_one({\"cart_id\": 1, \"name\": \"alex\", \"item_id\": 101, \"status\": \"paid\" })\n   @inventories.insert_one({\"item_id\": 101, \"description\": \"bull bearing\", \"price\": 100, \"quantity\": 5 })\n\n   alex_order_cart_id = add_to_cart(1, 101, 2)\n   barbara_order_cart_id = add_to_cart(2, 101, 4)\n\n   place_order(alex_order_cart_id)\n   place_order(barbara_order_cart_id)\n end\n\n def add_to_cart(user, item, quantity)\n   session = @client.start_session\n   session.start_transaction\n   cart_id = @users.find({ \"user_id\": user}).first['user_id']\n   @carts.update_one({\"cart_id\": cart_id}, {'$inc': { 'quantity': quantity }, '$set': { 'item': item } }, session: session)\n   session.commit_transaction\n   cart_id\n end\n\n def place_order(cart_id)\n   session = @client.start_session\n   session.start_transaction\n   cart = @carts.find({'cart_id': cart_id}, session: session).first\n   item_id = cart['item']\n   quantity = cart['quantity']\n   @payments.insert_one({'cart_id': cart_id, 'item_id': item_id, 'status': 'paid'}, session: session)\n   @carts.update_one({'cart_id': cart_id}, {'$inc': {'quantity': quantity * (-1)}}, session: session)\n   @inventories.update_one({'item_id': item_id}, {'$inc': {'quantity': quantity*(-1)}}, session: session)\n   quantity = @inventories.find({'item_id': item_id}, session: session).first['quantity']\n   if quantity < 0\n     session.abort_transaction\n   else\n     session.commit_transaction\n   end\n end\nend\n\nECommerce.new\n```"]