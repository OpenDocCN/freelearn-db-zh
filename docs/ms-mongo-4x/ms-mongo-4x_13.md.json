["```go\nhelm install helm_chart/ --name mongodb-enterprise\n```", "```go\napiVersion: v1\nkind: ConfigMap\nmetadata:\n name:<<any sample name we choose(1)>>\n namespace: mongodb\ndata:\n projectId:<<Project ID from above>>\n baseUrl: <<BaseURI from above>>\n```", "```go\nkubectl apply -f mongodb-project.yaml\n```", "```go\nkubectl -n mongodb create secret generic <<any sample name for credentials we choos>> --from-literal=\"user=<<User as above>>\" --from-literal=\"publicApiKey=<<our public api key as above>>\"\n```", "```go\napiVersion: mongodb.com/v1\nkind: MongoDbReplicaSet\nmetadata:\n name: <<any replica set name we choose>>\n namespace: mongodb\nspec:\n members: 3\n version: 3.6.5\npersistent: false\nproject: <<the name value (1) that we chose in metadata.name of ConfigMap file above>>\ncredentials: <<the name of credentials secret that we chose above>>\n```", "```go\nkubectl apply -f replica-set.yaml\n```", "```go\nImport packages:\n// Base Stitch Packages\nimport com.mongodb.stitch.android.core.Stitch;\nimport com.mongodb.stitch.android.core.StitchAppClient;\n// Packages needed to interact with MongoDB and Stitch\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoCollection;\n// Necessary component for working with MongoDB Mobile\nimport com.mongodb.stitch.android.services.mongodb.local.LocalMongoDbService;\n```", "```go\n// Create the default Stitch Client\nfinal StitchAppClient client =\n  Stitch.initializeDefaultAppClient(\"<APP ID>\");\n// Create a Client for MongoDB Mobile (initializing MongoDB Mobile)\nfinal MongoClient mobileClient =\n  client.getServiceClient(LocalMongoDbService.clientFactory);\n```", "```go\nMongoCollection<Document> localCollection =\n  mobileClient.getDatabase(\"my_db\").getCollection(\"my_collection\");\n```", "```go\nlocalCollection.insertOne(document);\n```", "```go\nDocument doc = localCollection.find().first();\n```", "```go\n{\n  \"createdBy\": \"%%user.id\"\n}\n```", "```go\nexports = function(a, b) {\n return a * b;\n};\n```", "```go\ncontext.functions.execute(\"multiply\", a, b);\n```", "```go\n{\n \"%%true\": {\n   \"%function\": {\n     \"name\": \"multiply\",\n     \"arguments\": [3,4]\n   }\n }\n}\n```", "```go\nconst client = Stitch.defaultAppClient;\nclient.callFunction(\"multiply\", [3, 4]).then(result => {\nconsole.log(result) // Output: 12\n});\n```", "```go\nDocumentT resolveConflict(BsonValue documentId,\n                         ChangeEvent<DocumentT> localEvent,\n                         ChangeEvent<DocumentT> remoteEvent)\n```", "```go\nvoid onError(BsonValue documentId,Exception error)\n```", "```go\nvoid onEvent(BsonValue documentId, ChangeEvent<DocumentT> event)\n```"]