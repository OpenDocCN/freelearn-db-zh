["```go\n> use admin\n> db.shutdownServer()\n```", "```go\n> rs.initiate()\n```", "```go\n> rs.add(\"<hostname><:port>\")\n```", "```go\n> mongod --replSet \"xmr_cluster\"\n```", "```go\n> mongod --config <path-to-config>\n```", "```go\n/etc/mongod.conf\n```", "```go\nsystemLog:\n  destination: file\n  path: \"/var/log/mongodb/mongod.log\"\n  logAppend: true\nstorage:\n  journal:\n     enabled: true\nprocessManagement:\n  fork: true\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nreplication:\n  oplogSizeMB: <int>\n  replSetName: <string>\n```", "```go\nsecondaryIndexPrefetch: <string>\n```", "```go\nenableMajorityReadConcern: <boolean>\n```", "```go\n> rs.initiate()\n```", "```go\n> rs.initiate( {\n _id : \"xmr_cluster\",\n members: [ { _id : 0, host : \"host:port\" } ]\n})\n```", "```go\n> rs.add(\"host2:port2\")\n> rs.add(\"host3:port3\")\n```", "```go\n> db.mongo_books.insert(\n { name: \"Mastering MongoDB\", isbn: \"1001\" },\n { writeConcern: { w: 2, wtimeout: 5000 } }\n)\n```", "```go\n> cfg = rs.conf()\n> cfg.settings.getLastErrorDefaults = { w: \"majority\", wtimeout: 5000 }\n> rs.reconfig(cfg)\n```", "```go\n> conf = rs.conf()\n> conf.members[0].tags = { \"location\": \"UK\", \"use\": \"production\", \"location_uk\":\"true\"  }\n> conf.members[1].tags = { \"location\": \"UK\", \"use\": \"reporting\", \"location_uk\":\"true\"  }\n> conf.members[2].tags = { \"location\": \"Ireland\", \"use\": \"production\"  }\n```", "```go\n> conf.settings = { getLastErrorModes: { UKWrites : { \"location_uk\": 2} } }\n```", "```go\n> rs.reconfig(conf)\n```", "```go\n> db.mongo_books.insert({<our insert object>}, { writeConcern: { w: \"UKWrites\" } })\n```", "```go\n> cfg = rs.conf()\n```", "```go\n> cfg.members[0].priority = 0.778\n> cfg.members[1].priority = 999.9999\n```", "```go\n> cfg = rs.conf()\n```", "```go\n> cfg.members[2].priority = 0\n```", "```go\nrs.reconfig(cfg)\n```", "```go\n> cfg = rs.conf()\n> cfg.members[0].priority = 0\n> cfg.members[0].hidden = true\n> rs.reconfig(cfg)\n```", "```go\n> cfg = rs.conf()\n> cfg.members[0].priority = 0\n> cfg.members[0].hidden = true\n> cfg.members[0].slaveDelay = 7200\n> rs.reconfig(cfg)\n```", "```go\nclient_host = ['hostname:port']\nclient_options = {\n database: 'signals',\n replica_set: 'xmr_btc'\n}\n```", "```go\nclient = Mongo::Client.new(client_host, client_options)\n```", "```go\nclient_reporting = client.with(:read => { :mode => :secondary })\n```", "```go\nmin_pool_size(defaults to 1 connection),\nmax_pool_size(defaults to 5),\nwait_queue_timeout(defaults to 1 in seconds).\n```", "```go\n> use admin\n> db.shutdownServer()\n```", "```go\n> mongod --port 95658 --dbpath <wherever our mongoDB data resides in this host>\n```", "```go\n> mongo --port 37017\n```", "```go\n> rs.status()\n```", "```go\n> rs.stepDown(600)\n```", "```go\n> mongodump --db local --collection 'oplog.rs' --port 37017\n```", "```go\n> use local\n> db = db.getSiblingDB('local')\n> db.temp.drop()\n```", "```go\n> db.temp.save( db.oplog.rs.find( { }, { ts: 1, h: 1 } ).sort( {$natural : -1} ).limit(1).next() )\n```", "```go\n> db = db.getSiblingDB('local')\n> db.oplog.rs.drop()\n```", "```go\n> db.runCommand( { create: \"oplog.rs\", capped: true, size: (4 * 1024 * 1024 * 1024) } )\n```", "```go\n> db.oplog.rs.save( db.temp.findOne() )\n```", "```go\n> rs.stepDown(600)\n```", "```go\n> cfg = rs.conf()\n```", "```go\n> cfg.members = [cfg.members[1] , cfg.members[2] , cfg.members[3]]\n> rs.reconfig(cfg, {force : true})\n```", "```go\n> cfg.settings.chainingAllowed = true\n```", "```go\n> cfg.settings = { }\n```"]