["```go\n> db.runCommand( { movePrimary : \"mongo_books\", to : \"UK_based\" } )\n```", "```go\n> db.runCommand( { split : \"mongo_books.books\", middle : { id : 50 } } )\n```", "```go\n> sh.shardCollection(\"mongo_books.books\", { id: 1 } )\n```", "```go\n> sh.shardCollection(\"mongo_books.books\", { id: \"hashed\" } )\n```", "```go\n> db.runCommand( { moveChunk : 'mongo_books.books' ,\n find : {id: 50},\n to : 'shard1.packtdb.com' } )\n```", "```go\n> db.runCommand( { moveChunk : 'mongo_books.books' ,\n bounds :[ { id : <minValue> } ,\n { id : <maxValue> } ],\n to : 'shard1.packtdb.com' } )\n```", "```go\n> db.settings.save( { _id:\"chunksize\", value: 16 } )\n```", "```go\n> sh.status(true)\n```", "```go\ndatabases:\n\u2026\nmongo_books.books\n...\nchunks:\n\u2026\n shardB  2\n shardA  2\n { \"id\" : 7 } -->> { \"id\" : 9 } on : shardA Timestamp(2, 2) jumbo\n```", "```go\n> sh.splitAt( \"mongo_books.books\", { id: 8 })\n```", "```go\n> sh.splitFind(\"mongo_books.books\", {id: 7})\n```", "```go\n> sh.stopBalancer()\n> sh.getBalancerState() > use config\nwhile( sh.isBalancerRunning() ) {\n print(\"waiting...\");\n sleep(1000);\n} \n```", "```go\n> db.getSiblingDB(\"config\").chunks.update(\n { ns: \"mongo_books.books\", min: { id: 7 }, jumbo: true },\n { $unset: { jumbo: \"\" } }\n)\n```", "```go\n> sh.setBalancerState(true)\n```", "```go\n> db.adminCommand({ flushRouterConfig: 1 } )\n```", "```go\n> use mongo_books\n> db.runCommand({\n \"dataSize\": \"mongo_books.books\",\n \"keyPattern\": { id: 1 },\n \"min\": { \"id\": -6 },\n \"max\": { \"id\": 0 }\n})\n```", "```go\n{ \"size\" : 0, \"numObjects\" : 0, \"millis\" : 0, \"ok\" : 1 }\n```", "```go\n> db.runCommand( { mergeChunks: \"mongo_books.books\",\n bounds: [ { \"id\": -12 },\n { id: 0 } ]\n } )\n```", "```go\n{ \"ok\" : 1 }\n```", "```go\n> db.runCommand( {\naddShard: \"mongo_books_replica_set/rs01.packtdb.com:27017\", maxSize: 18000, name: \"packt_mongo_shard_UK\"\n} )\n```", "```go\n> use admin\n> db.runCommand( { removeShard: \"packt_mongo_shard_UK\" } )\n```", "```go\n...\n \"msg\" : \"draining started successfully\",\n \"state\" : \"started\",\n...\n```", "```go\n> db.runCommand( { removeShard: \"packt_mongo_shard_UK\" } )\n\u2026\n\"msg\" : \"draining ongoing\",\n \"state\" : \"ongoing\",\n \"remaining\" : {\n \"chunks\" : NumberLong(2),\n \"dbs\" : NumberLong(3)\n },\n\u2026\n```", "```go\n...\n\"note\" : \"you need to drop or movePrimary these databases\",\n \"dbsToMove\" : [\n \"mongo_books\"\n ],\n...\n```", "```go\n ...\"remaining\" : {\n \"chunks\" : NumberLong(0) }...\n```", "```go\n> db.runCommand( { movePrimary: \"mongo_books\", to: \"packt_mongo_shard_EU\" })\n```", "```go\n{ \"primary\" : \"packt_mongo_shard_EU\", \"ok\" : 1 }\n```", "```go\n> db.runCommand( { removeShard: \"packt_mongo_shard_UK\" } )\n\n... \"msg\" : \"removeshard completed successfully\",\n \"state\" : \"completed\",\n \"shard\" : \"packt_mongo_shard_UK\"\n \"ok\" : 1\n...\n```", "```go\n> db.User.find({_id: 1})\n> db.User.find({_id: 1, email: 'alex@packt.com'})\n> db.User.find({_id: 1, email: 'janluc@packt.com', address: 'Linwood Dunn'})\n```", "```go\nclient = Mongo::Client.new('mongodb://key:password@mongos-server1-host:mongos-server1-port,mongos-server2-host:mongos-server2-port/admin?ssl=true&authSource=admin')\n```"]