- en: Fault Tolerance and High Availability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容错和高可用性
- en: In this chapter, we will try to fit in the information that we didn't manage
    to discuss in the previous chapters, and we will place emphasis on some other
    topics. Throughout the previous 13 chapters, we have gone all the way from the
    basic concepts to effective querying, to administration and data management, to
    scaling and high availability concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试整合我们在之前章节中没有讨论的信息，并且我们将强调一些其他主题。在之前的13章中，我们从基本概念一直到有效查询，到管理和数据管理，到扩展和高可用性概念都有所涉及。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: We will discuss how our application design should be accommodating and proactive
    with regard to our database needs.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将讨论我们的应用程序设计应该如何适应和积极应对我们的数据库需求。
- en: Day-to-day operations are another area that we will discuss, including tips
    and best practices that can help us to avoid nasty surprises down the line.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将讨论日常运营，包括可以帮助我们避免未来不愉快的惊喜的提示和最佳实践。
- en: In light of recent attempts by ransomware to infect and hold MongoDB servers
    hostage, we will offer more tips on security.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鉴于勒索软件最近试图感染和挟持MongoDB服务器，我们将提供更多关于安全性的建议。
- en: Finally, we will try to sum up the advice that's been given in a series of checklists
    that should be followed to ensure that the best practices are properly set up
    and followed.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将尝试总结已经给出的一系列应该遵循以确保最佳实践得到适当设置和遵循的建议清单。
- en: Application design
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序设计
- en: In this section, we will describe some useful tips for application design that
    we did not cover or emphasize enough in the previous chapters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将描述一些应用设计的有用提示，这些提示在之前的章节中我们没有涵盖或强调足够。
- en: Schema-less doesn't mean schema design-less
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无模式并不意味着无模式设计
- en: A big part of MongoDB's success can be attributed to the increased popularity
    of ORM/ODMs. Especially with languages like JavaScript and the MEAN stack, the
    developer can use JavaScript from the frontend (Angular/Express) to the backend
    (Node.js) to the database (MongoDB). This is frequently coupled with an ODM that
    abstracts away the internals of the database, mapping collections to Node.js models.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB成功的一个重要原因是其ORM/ODM的日益流行。特别是对于像JavaScript和MEAN堆栈这样的语言，开发人员可以从前端（Angular/Express）到后端（Node.js）再到数据库（MongoDB）使用JavaScript。这经常与一个ODM结合使用，它将数据库的内部抽象出来，将集合映射到Node.js模型。
- en: The major advantage is that developers don't need to fiddle with the database
    schema design, as this is automatically provided by the ODM. The downside is that
    database collections and schema designs are left up to the ODM, which does not
    have the business domain knowledge of different fields and access patterns.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 主要优点是开发人员不需要纠缠数据库模式设计，因为这是由ODM自动提供的。缺点是数据库集合和模式设计留给了ODM，它没有不同领域和访问模式的业务领域知识。
- en: In the case of MongoDB and other NoSQL-based databases, this boils down to making
    architectural decisions based not only on immediate needs, but also on what needs
    to be done down the line. On an architectural level, this may mean that instead
    of a monolithic approach, we can combine different database technologies for our
    diverse and evolving needs by using a graph database for graph-related querying,
    a relational database for hierarchical, unbounded data, and MongoDB for JSON retrieval,
    processing, and storage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在MongoDB和其他基于NoSQL的数据库的情况下，这归结为基于不仅是即时需求，还有未来需求的架构决策。在架构层面上，这可能意味着我们可以通过使用图数据库进行图相关查询，使用关系数据库进行分层、无限数据的查询，以及使用MongoDB进行JSON检索、处理和存储，而不是采用单块方法。
- en: In fact, many of MongoDB's successful use cases come from the fact that it's
    not being used as a one-size-fits-all solution, but only for the use cases that
    make sense.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，MongoDB成功的许多用例来自于它并不被用作一刀切的解决方案，而只用于有意义的用例。
- en: Read performance optimization
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取性能优化
- en: In this section, we will discuss some tips for optimizing read performance.
    Read performance is directly correlated to the number of queries and their complexity.
    Performing fewer queries in a schema without complex nested data structures and
    arrays will generally result in better read performance. However, many times,
    optimizing for read performance can mean that the write performance will degrade.
    This is something to keep in mind and continuously measure when we are making
    performance optimizations in MongoDB.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些优化读取性能的提示。读取性能与查询数量及其复杂性直接相关。在没有复杂嵌套数据结构和数组的模式中执行较少的查询通常会导致更好的读取性能。然而，很多时候，为了优化读取性能可能意味着写入性能会下降。这是需要记住并在进行MongoDB性能优化时不断测量的事情。
- en: Consolidating read querying
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合读取查询
- en: We should aim to have as few queries as possible. This can be achieved by embedding
    information into sub-documents instead of having separate entities. This can lead
    to an increased write load, as we have to keep the same data points in multiple
    documents and maintain their values everywhere when they change in one place.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该尽量减少查询。这可以通过将信息嵌入子文档中而不是拥有单独的实体来实现。这可能会导致写入负载增加，因为我们必须在多个文档中保留相同的数据点，并在一个地方更改时在所有地方维护它们的值。
- en: 'The design considerations here are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的设计考虑如下：
- en: The read performance benefits from data duplication/denormalization.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取性能受益于数据复制/去规范化。
- en: The data integrity benefits from data references (`DBRef` or in-application
    code, using an attribute as a foreign key).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据完整性受益于数据引用（`DBRef`或在应用程序代码中，使用属性作为外键）。
- en: We should denormalize, especially if our read/write ratio is too high (our data
    rarely changes values, but it gets accessed several times in between) if our data
    can afford to be inconsistent for brief periods of time, and, most importantly,
    if we absolutely need our reads to be as fast as possible and are willing to pay
    the price in consistency/write performance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该去规范化，特别是如果我们的读/写比太高（我们的数据很少更改值，但在中间被多次访问），如果我们的数据可以承受短暂时间的不一致，最重要的是，如果我们绝对需要我们的读取尽可能快，并且愿意以一致性/写入性能为代价。
- en: The most obvious candidates for fields that we should denormalize (embed) are
    dependent fields. If we have an attribute or a document structure that we don't
    plan to query on its own, but only as part of a contained attribute/document,
    then it makes sense to embed it, rather than have it in a separate document/collection.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该对需要去规范化（嵌入）的字段进行特别处理。如果我们有一个属性或文档结构，我们不打算单独查询它，而只作为包含属性/文档的一部分，那么将其嵌入而不是放在单独的文档/集合中是有意义的。
- en: Using our MongoDB `books` example, a book can have a related data structure
    that refers to a review from a reader of the book. If our most common use case
    is showing a book along with its associated reviews, then we can embed reviews
    into the book document.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的MongoDB `books`示例，一本书可以有一个相关的数据结构，指的是书的读者的评论。如果我们最常见的用例是显示一本书以及其相关的评论，那么我们可以将评论嵌入到书的文档中。
- en: The downside to this design is that when we want to find all of the book reviews
    by a user, this will be costly, as we will have to iterate all of the books for
    the associated reviews. Denormalizing users and embedding their reviews can be
    a solution to this problem.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计的缺点是，当我们想要找到用户的所有书评时，这将是昂贵的，因为我们将不得不迭代所有书籍以获取相关的评论。对用户进行去规范化并嵌入他们的评论可以解决这个问题。
- en: A counterexample is data that can grow unbounded. In our example, embedding
    reviews along with heavy metadata can lead to an issue if we hit the 16 MB document
    size limit. A solution is to distinguish between data structures that we expect
    to grow rapidly and those that we don't, and to keep an eye on their sizes through
    monitoring processes that query our live dataset at off-peak times and reporting
    on attributes that may pose a risk down the line.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 反例是可以无限增长的数据。在我们的例子中，将评论与大量元数据一起嵌入可能会导致问题，如果我们达到了16 MB文档大小限制。解决方案是区分我们预期会快速增长的数据结构和那些不会快速增长的数据结构，并通过监控过程来关注它们的大小，这些监控过程在非高峰时间查询我们的实时数据集，并报告可能会在未来造成风险的属性。
- en: Don't embed data that can grow unbounded.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不要嵌入可以无限增长的数据。
- en: When we embed attributes, we have to decide whether we will use a sub-document
    or an enclosing array.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们嵌入属性时，我们必须决定是使用子文档还是封闭数组。
- en: When we have a unique identifier to access the sub-document, we should embed
    it as a sub-document. If we don't know exactly how to access it or we need the
    flexibility to be able to query for an attribute's values, then we should embed
    it in an array.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个唯一标识符来访问子文档时，我们应该将其嵌入为子文档。如果我们不确定如何访问它，或者我们需要灵活性来查询属性的值，那么我们应该将其嵌入到数组中。
- en: 'For example, with our `books` collection, if we decide to embed reviews into
    each book document, we have the following two design options:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于我们的books集合，如果我们决定将评论嵌入到每个书籍文档中，我们有以下两种设计选项：
- en: 'A book document with an array:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有数组的书籍文档：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A book with an embedded document:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入文档的书籍：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The array structure has the advantage that we can directly query MongoDB for
    all of the reviews with a `rating` greater than `4` through the embedded array
    reviews.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数组结构具有优势，我们可以通过嵌入的数组reviews直接查询MongoDB中所有评分大于4的评论。
- en: Using the embedded document structure, on the other hand, we can retrieve all
    of the reviews the same way that we would using the array, but if we want to filter
    them, it has to be done on the application side, rather than on the database side.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，使用嵌入文档结构，我们可以以与使用数组相同的方式检索所有评论，但如果我们想要对其进行过滤，则必须在应用程序端进行，而不是在数据库端进行。
- en: Defensive coding
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防御性编码
- en: More of a generic principle, **defensive coding** refers to a set of practices
    and software designs that ensures the continuing functionality of a piece of software
    under unforeseen circumstances.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的是一个通用原则，**防御性编码**是指一组确保软件在意外情况下继续功能的实践和软件设计。
- en: 'It prioritizes code quality, readability, and predictability*. *Readability
    was best explained by John F. Woods in his *comp.lang.c++* post, on September
    24, 1991:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它优先考虑代码质量、可读性和*可预测性*。*可读性是由John F. Woods在1991年9月24日的*comp.lang.c++*帖子中最好地解释的：
- en: '"Always code as if the guy who ends up maintaining your code will be a violent
    psychopath who knows where you live. Code for readability."'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “编码时要像最终维护您的代码的人是一个知道您住在哪里的暴力精神病患者一样编码。为了可读性而编码。”
- en: Our code should be readable and understandable by humans, as well as by machines.
    With code quality metrics, as derived by static analysis tools, code reviews,
    and bugs reported/resolved, we can estimate the quality of our code base and aim
    for a certain threshold at each sprint, or when we are ready to release. Code
    predictability, on the other hand, means we should always expect results in unexpected
    input and program states.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码应该对人类可读和理解，也应该对机器可读。通过静态分析工具派生的代码质量指标、代码审查和报告/解决的错误，我们可以估计我们的代码库的质量，并在每个冲刺或准备发布时，以及在每个冲刺或准备发布时，都可以达到一定的阈值。另一方面，代码的可预测性意味着我们应该始终期望在意外输入和程序状态下获得结果。
- en: These principles apply to every software system. In the context of system programming
    using MongoDB, there are some extra steps that we must take to ensure that code
    predictability and, subsequently, quality are measured by the number of resulting
    bugs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原则适用于每个软件系统。在使用MongoDB进行系统编程的情况下，我们必须采取一些额外的步骤，以确保代码的可预测性，以及随后的质量由产生的错误数量来衡量。
- en: 'MongoDB limitations that will result in a loss of database functionality should
    be monitored and evaluated on a periodic basis, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应该定期监控并评估导致数据库功能丧失的MongoDB限制，如下所示：
- en: '**Document size limit**: We should keep an eye on the collections in which
    we expect to have documents growing the most, running a background script to examine
    document sizes and alert us if we have documents approaching the limit (16 MB),
    or if the average size has grown significantly since the last check.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档大小限制**：我们应该密切关注我们预计文档增长最多的集合，运行后台脚本来检查文档大小，并在接近限制（16 MB）的文档或平均大小自上次检查以来显着增长时向我们发出警报。'
- en: '**Data integrity checks**: If we are using denormalization for read optimization,
    then it''s a good practice to check for data integrity. Through a software bug
    or a database error, we may end up with inconsistent duplicate data among collections.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据完整性检查**：如果我们使用反规范化进行读取优化，那么检查数据完整性是一个很好的做法。通过软件错误或数据库错误，我们可能会在集合中得到不一致的重复数据。'
- en: '**Schema checks**: If we don''t want to use the document validation feature
    of MongoDB, but rather we want a lax document schema, it''s still a good idea
    to periodically run scripts to identify fields that are present in our documents,
    and their frequencies. Then, along with relative access patterns, we can identify
    whether these fields can be identified and consolidated. This is mostly useful
    if we are ingesting data from another system wherein data input changes over time,
    which may result in a wildly varying document structure on our end.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式检查**：如果我们不想使用MongoDB的文档验证功能，而是想要一个宽松的文档模式，定期运行脚本来识别文档中存在的字段及其频率仍然是一个好主意。然后，结合相对访问模式，我们可以确定这些字段是否可以被识别和合并。如果我们从另一个系统中摄取数据，其中数据输入随时间变化，这可能导致我们端上文档结构变化很大，这个检查就非常有用。'
- en: '**Data storage checks**: This mostly applies when using MMAPv1, where document
    padding optimization can help performance. By keeping an eye on document size
    relative to its padding, we can make sure that our size-modifying updates won''t
    incur a move of the document in physical storage.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据存储检查**：这主要适用于使用MMAPv1时，其中文档填充优化可以提高性能。通过关注文档大小相对于其填充的情况，我们可以确保我们的大小修改更新不会导致文档在物理存储中移动。'
- en: These are the basic checks that we should implement when defensively coding
    for our MongoDB application. On top of this, we need to defensively code our application-level
    code to make sure that when failures occur in MongoDB, our application will continue
    operating—perhaps with degraded performance, but still operational.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们在为MongoDB应用程序进行防御性编码时应该实施的基本检查。除此之外，我们还需要在应用程序级别的代码上进行防御性编码，以确保当MongoDB发生故障时，我们的应用程序将继续运行——可能会有性能下降，但仍然可以运行。
- en: An example of this is replica set failover and failback. When our replica set
    master fails, there is a brief period to detect this failure and the new master
    is elected, promoted, and operational. During this brief period, we should make
    sure that our application continues to operate in read-only mode, instead of throwing
    500 errors. In most cases, electing a new primary is done in seconds, but in some
    cases we may end up in the minority end of a network partition and unable to contact
    a master for a long period of time. Similarly, some secondaries may end up in
    a recovering state (for example, if they fall way behind the master in replication);
    our application should be able to pick a different secondary in this case.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是副本集故障转移和故障恢复。当我们的副本集主服务器失败时，会有一个短暂的时间来检测这个故障，并选举、提升和运行新的主服务器。在这个短暂的时间内，我们应该确保我们的应用程序继续以只读模式运行，而不是抛出500错误。在大多数情况下，选举新的主服务器只需要几秒钟，但在某些情况下，我们可能会处于网络分区的少数端，并且长时间无法联系主服务器。同样，一些次要服务器可能会处于恢复状态（例如，如果它们在复制方面落后于主服务器）；在这种情况下，我们的应用程序应该能够选择另一个次要服务器。
- en: Designing for secondary access is one of the most useful examples of defensive
    coding. Our application should weigh between fields that can only be accessed
    by the primary to ensure data consistency and fields that are okay to be updated
    in near real-time, instead of in real time, in which case we can read these from
    secondary servers. By keeping track of replication lag for our secondaries by
    using automated scripts, we can have a view of our cluster's load and how safe
    it is to enable this functionality.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 设计用于次要访问的是防御性编码中最有用的例子之一。我们的应用程序应该权衡只能由主服务器访问的字段，以确保数据一致性，以及可以在几乎实时而不是实时更新的字段，在这种情况下，我们可以从次要服务器读取这些字段。通过使用自动化脚本跟踪我们次要服务器的复制延迟，我们可以了解我们集群的负载情况以及启用此功能的安全性。
- en: Another defensive coding practice is to always perform writes with journaling
    on. Journaling helps to recover from server crashes and power failures.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个防御性编码实践是始终使用日志记录进行写入。日志记录有助于从服务器崩溃和电源故障中恢复。
- en: Finally, we should aim to use replica sets as early as possible. Other than
    the performance and workload improvements, they help us to recover from server
    failures.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们应该尽早使用副本集。除了性能和工作负载的改进外，它们还可以帮助我们从服务器故障中恢复。
- en: Monitoring integrations
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控集成
- en: All of this adds up to a greater adoption of monitoring tools and services.
    As much as we can script some of them, integrating with cloud and on-premise monitoring
    tools can help us to achieve more in a smaller amount of time.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些加起来都导致了对监控工具和服务的更广泛采用。尽管我们可以对其中一些进行脚本编写，但与云和本地监控工具集成可以帮助我们在更短的时间内取得更多成果。
- en: 'The metrics that we keep a track of should do one of the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们跟踪的指标应该做到以下几点：
- en: '**Detect failures**: Failure detection is a reactive process, where we should
    have clear protocols in place for what happens when each of the failure detection
    flags goes off. For example, what should the recovery steps be if we lose a server,
    a replica set, or a shard?'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检测故障**：故障检测是一个被动的过程，我们应该制定清晰的协议，以应对每个故障检测标志触发时会发生什么。例如，如果我们失去了一个服务器、一个副本集或一个分片，应该采取什么恢复步骤？'
- en: '**Prevent failures**: Failure prevention, on the other hand, is a proactive
    process, designed to help us catch problems before they become a potential source
    of failure in the future. For example, CPU/storage/memory usage should be actively
    monitored with yellow and red thresholds, and clear processes should be put in
    place as to what we should do in the event that we reach either threshold.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预防故障**：另一方面，故障预防是一种积极的过程，旨在帮助我们在将来成为潜在故障源之前捕捉问题。例如，CPU/存储/内存使用情况应该被积极监控，并且应该制定清晰的流程，以确定在达到任一阈值时我们应该做什么。'
- en: Operations
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作
- en: When connecting to our production MongoDB servers, we want to make sure that
    our operations are as lightweight as possible (and are certainly non-destructive)
    and do not alter the database state in any sense.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到我们的生产MongoDB服务器时，我们希望确保我们的操作尽可能轻量级（并且肯定不会破坏性地）并且不会以任何方式改变数据库状态。
- en: 'The two useful utilities that we can chain to our queries are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将以下两个有用的实用程序链接到我们的查询中：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our `query` will only take up to `999` ms, and will then return an exceeded
    time limit error:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`query`将最多花费`999`毫秒的时间，然后返回超过时间限制的错误：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our `query` will examine `1000` documents at the most, in order to find results
    and then return (no error raised).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`query`将最多检查`1000`个文档，以查找结果然后返回（不会引发错误）。
- en: Whenever we can, we should bind our queries by time or document result size
    to avoid running unexpectedly long queries that may affect our production database.
    A common reason for accessing our production database is troubleshooting degraded
    cluster performance. This can be investigated via cloud monitoring tools, as we
    described in previous chapters.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以的情况下，我们应该通过时间或文档结果大小来限制我们的查询，以避免运行意外长时间的查询，这可能会影响我们的生产数据库。访问我们的生产数据库的常见原因是故障排除降级的集群性能。这可以通过云监控工具进行调查，正如我们在前几章中所描述的。
- en: The `db.currentOp()` command, through the MongoDB shell, will give us a list
    of all of the current operations. We can then isolate the ones that have large
    `.secs_running` values and identify them through the `.query` field.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过MongoDB shell的`db.currentOp()`命令，我们可以得到所有当前操作的列表。然后，我们可以分离出具有较大`.secs_running`值的操作，并通过`.query`字段对其进行识别。
- en: If we want to kill an in-progress operation that takes a long time, we need
    to note the value of the `.opid` field and pass it on `db.killOp(<opid>)`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要终止长时间运行的操作，我们需要注意`.opid`字段的值，并将其传递给`db.killOp(<opid>)`。
- en: Finally, it's important to recognize (from an operational standpoint) that everything
    may go wrong. We must have a backup strategy in place that is implemented consistently.
    Most importantly, we should practice restoring from backup to make sure that it
    works as intended.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从运营的角度来看，重要的是要认识到一切都可能出错。我们必须有一个一致实施的备份策略。最重要的是，我们应该练习从备份中恢复，以确保它按预期工作。
- en: Security
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: After the recent waves of ransomware that were locking down unsecured MongoDB
    servers, asking for ransom payments in cryptocurrency from the administrators
    to unlock the MongoDB servers, many developers have become more security-conscious.
    Security is one of the items on a checklist that we, as developers, may not prioritize
    highly enough, due to the optimistic belief that it won't happen to us. The truth
    is, in the modern internet landscape, everyone can be a target of automated or
    directed attacks, so security should always be taken into account, from the early
    stages of the design to after production deployment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的勒索软件波之后，这些勒索软件锁定了不安全的MongoDB服务器，并要求管理员以加密货币支付赎金来解锁MongoDB服务器，许多开发人员变得更加注重安全。安全是我们作为开发人员可能没有高度优先考虑的检查表上的一项，这是由于我们乐观地认为这种情况不会发生在我们身上。事实上，在现代互联网环境中，每个人都可能成为自动化或有针对性攻击的目标，因此安全性应该始终被考虑在内，从设计的早期阶段到生产部署之后。
- en: Enabling security by default
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认情况下启用安全性
- en: 'Every database (other than local development servers, perhaps) should be set
    up with the following in the `mongod.conf` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据库（除了本地开发服务器，也许）都应该在`mongod.conf`文件中设置如下内容：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: SSL should always be enabled, as we described in the relevant [Chapter 8](687220c0-264a-4edb-9e04-c10b0c180766.xhtml),
    *Monitoring, Backup, and Security*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 应该始终启用SSL，正如我们在相关[第8章](687220c0-264a-4edb-9e04-c10b0c180766.xhtml)中所描述的，*监控、备份和安全*。
- en: 'REST and HTTP status interfaces should be disabled by adding the following
    lines to `mongod.conf`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: REST和HTTP状态接口应通过向`mongod.conf`添加以下行来禁用：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Access should be restricted to only communication between application servers
    and MongoDB servers, and only in the interfaces that are required. Using `bind_ip`,
    we can force MongoDB to listen to specific interfaces, instead of the default
    binding to every interface-available behavior:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 访问应该仅限于应用服务器和MongoDB服务器之间的通信，并且仅限于所需的接口。使用`bind_ip`，我们可以强制MongoDB监听特定接口，而不是默认绑定到每个可用接口的行为：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Isolating our servers
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离我们的服务器
- en: 'We should secure our infrastructure perimeter with AWS VPC or the equivalent
    from the cloud provider of our choice. As an extra layer of security, we should
    isolate our servers in a cloud of their own, only allowing external connections
    to reach our application servers and never allowing them to directly connect to
    our MongoDB servers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该使用AWS VPC或我们选择的云提供商的等效物来保护我们的基础设施边界。作为额外的安全层，我们应该将我们的服务器隔离在一个独立的云中，只允许外部连接到达我们的应用服务器，永远不允许它们直接连接到我们的MongoDB服务器：
- en: '![](img/d29f3744-2d98-4abf-81d5-786fc70bb182.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d29f3744-2d98-4abf-81d5-786fc70bb182.png)'
- en: We should invest in role-based authorization. Security lies not only in protecting
    against data leaks caused by external actors, but also in making sure that internal
    actors have the appropriate levels of access to our data. Using role-based authorization
    at the MongoDB level, we can make sure that our users have the appropriate levels
    of access.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该投资于基于角色的授权。安全性不仅在于防止外部行为者造成的数据泄漏，还在于确保内部行为者对我们的数据具有适当的访问级别。通过MongoDB级别的基于角色的授权，我们可以确保我们的用户具有适当的访问级别。
- en: Consider Enterprise Edition for large deployments. Enterprise Edition offers
    some convenient features concerning security, more integrations with well-known
    tools, and should be evaluated for large deployments, with an eye for changing
    needs as we transition from a single replica set to an enterprise-complex architecture.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑企业版用于大规模部署。企业版提供了一些方便的安全功能，更多地集成了知名工具，并且应该在大规模部署中进行评估，以满足随着我们从单个副本集过渡到企业复杂架构的不断变化的需求。
- en: Checklists
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查表
- en: 'Operations require the completion of many tasks and complexity. A good practice
    is to keep a set of checklists with all of the tasks that need to be performed
    and their order of significance. This will ensure that we don''t let something
    slip through. A deployment and security checklist, for example, could be as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运营需要完成许多任务和复杂性。一个好的做法是保持一套包含所有需要执行的任务及其重要性顺序的检查表。这将确保我们不会漏掉任何事情。例如，部署和安全检查表可能如下所示：
- en: '**Hardware**:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件**：'
- en: '**Storage**: How much disk space is needed per node? What is the growth rate?'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：每个节点需要多少磁盘空间？增长率是多少？'
- en: '**Storage technology**: Do we need SSD versus HDD? What is the throughput of
    our storage?'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储技术**：我们是否需要SSD还是HDD？我们的存储吞吐量是多少？'
- en: '**RAM**: What is the expected working set? Can we fit it in the RAM? If not,
    are we going to be okay with SSD instead of HDD? What is the growth rate?'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAM**：预期的工作集是多少？我们能否将其放入RAM中？如果不能，我们是否可以接受SSD而不是HDD？增长率是多少？'
- en: '**CPU**: This usually isn''t a concern for MongoDB, but it could be if we planned
    to run CPU-intensive jobs in our cluster (for example, aggregation or `MapReduce`).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU**：这通常对MongoDB不是一个问题，但如果我们计划在我们的集群中运行CPU密集型作业（例如，聚合或MapReduce），它可能是一个问题。'
- en: '**Network**: What are the network links between servers? This is usually trivial
    if we are using a single data center, but it can get complicated if we have multiple
    data centers and/or offsite servers for disaster recovery.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：服务器之间的网络链接是什么？如果我们使用单个数据中心，这通常是微不足道的，但如果我们有多个数据中心和/或用于灾难恢复的离站服务器，情况可能会变得复杂。'
- en: '**Security**:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：'
- en: Enable auth.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用认证。
- en: Enable SSL.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用SSL。
- en: Disable REST/HTTP interfaces.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用REST/HTTP接口。
- en: Isolate our servers (for example, VPC).
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离我们的服务器（例如，VPC）。
- en: Authorization is enabled. With great power comes great responsibility. Make
    sure that the powerful users are the ones that you trust. Don't give potentially
    destructive powers to inexperienced users.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已启用授权。伴随着强大的权力而来的是巨大的责任。确保强大的用户是您信任的用户。不要将潜在破坏性的权力赋予经验不足的用户。
- en: 'A monitoring and operations checklist could be as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和运营检查表可能如下所示：
- en: '**Monitoring**:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：'
- en: Usage of hardware (CPU, memory, storage, and network).
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用硬件（CPU、内存、存储和网络）。
- en: Health checks, using Pingdom or an equivalent service to make sure that we get
    a notification when one of our servers fails.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康检查，使用Pingdom或等效服务，以确保我们在其中一个服务器失败时收到通知。
- en: 'Client performance monitoring: Integrating periodic mystery shopper tests using
    service as a customer in a manual or automated way, from an end-to-end perspective,
    in order to find out if it behaves as expected. We don''t want to learn about
    application performance issues from our customers.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端性能监控：定期集成神秘购物者测试，以客户的方式手动或自动化地进行，从端到端的角度，以找出它是否表现如预期。我们不希望从客户那里了解应用性能问题。
- en: Use MongoDB Cloud Manager monitoring; it has a free tier, it can provide useful
    metrics, and it is the tool that MongoDB engineers can take a look at if we run
    into issues and need their help, especially as a part of support contracts.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MongoDB Cloud Manager监控；它有免费层，可以提供有用的指标，是MongoDB工程师在我们遇到问题并需要他们的帮助时可以查看的工具，特别是作为支持合同的一部分。
- en: '**Disaster recovery**:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灾难恢复**：'
- en: '**Evaluate the risk**: What is the risk, from a business perspective, of losing
    MongoDB data? Can we recreate this dataset? If yes, how costly is it in terms
    of time and effort?'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估风险**：从业务角度来看，丢失MongoDB数据的风险是多少？我们能否重新创建这个数据集？如果可以，从时间和精力方面来看，成本是多少？'
- en: '**Devise a plan**: Have a plan for each failure scenario, with the exact steps
    that we need to take in case something happens.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制定计划**：针对每种故障场景制定计划，包括我们需要采取的确切步骤。'
- en: '**Test the plan**: Having a dry run of every recovery strategy is as important
    as having one. Many things can go wrong in disaster recovery, and having an incomplete
    plan (or one that fails in each purpose) is something that we shouldn''t allow
    to happen under any circumstance.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试计划**：对每个恢复策略进行干预与实施一样重要。在灾难恢复中可能会出现许多问题，拥有一个不完整的计划（或者在每个目的中失败的计划）是我们在任何情况下都不应该允许发生的事情。'
- en: '**Have an alternative to the plan**: No matter how well we devise a plan and
    test it, anything can go wrong during planning, testing, or execution. We need
    to have a backup plan for our plan, in case we can''t recover our data using plan
    A. This is also called plan B, or the last resort plan. It doesn''t have to be
    efficient, but it should alleviate any business reputation risks.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制定计划的备选方案**：无论我们制定计划和测试计划有多么完善，计划、测试或执行过程中都可能出现问题。我们需要为我们的计划制定备用计划，以防我们无法使用计划A恢复我们的数据。这也被称为计划B，或最后的后备计划。它不必高效，但应该减轻任何业务声誉风险。'
- en: '**Load test**: We should make sure that we load test our application end to
    end before deployment, with a realistic workload. This is the only way to ensure
    that our application will behave as expected.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载测试**：我们应该确保在部署之前对我们的应用进行端到端的负载测试，使用真实的工作负载。这是确保我们的应用行为符合预期的唯一方法。'
- en: Further reading
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following links for further information:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下链接获取更多信息：
- en: '[http://mo.github.io/2017/01/22/mongo-db-tips-and-tricks.html](http://mo.github.io/2017/01/22/mongo-db-tips-and-tricks.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://mo.github.io/2017/01/22/mongo-db-tips-and-tricks.html](http://mo.github.io/2017/01/22/mongo-db-tips-and-tricks.html)'
- en: '[https://studio3t.com/whats-new/tips-for-sql-users-new-to-mongodb/](https://studio3t.com/whats-new/tips-for-sql-users-new-to-mongodb/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://studio3t.com/whats-new/tips-for-sql-users-new-to-mongodb/](https://studio3t.com/whats-new/tips-for-sql-users-new-to-mongodb/)'
- en: '[https://www.hostreview.com/blog/170327-top-7-mongodb-performance-tips-must-know](https://www.hostreview.com/blog/170327-top-7-mongodb-performance-tips-must-know)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.hostreview.com/blog/170327-top-7-mongodb-performance-tips-must-know](https://www.hostreview.com/blog/170327-top-7-mongodb-performance-tips-must-know)'
- en: '[https://groups.google.com/forum/#!msg/comp.lang.c++/rYCO5yn4lXw/oITtSkZOtoUJ](https://groups.google.com/forum/#!msg/comp.lang.c++/rYCO5yn4lXw/oITtSkZOtoUJ)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://groups.google.com/forum/#!msg/comp.lang.c++/rYCO5yn4lXw/oITtSkZOtoUJ](https://groups.google.com/forum/#!msg/comp.lang.c++/rYCO5yn4lXw/oITtSkZOtoUJ)'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered some topics that were not detailed in previous chapters.
    It is important to apply the best practices according to our workload requirements.
    Read performance is usually what we want to optimize for; that is why we discussed
    consolidating queries and the denormalization of our data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了一些在之前章节中没有详细介绍的主题。根据我们的工作负载要求，应用最佳实践非常重要。阅读性能通常是我们要优化的内容；这就是为什么我们讨论了查询合并和数据去规范化。
- en: Operations are also important when we go from deployment to ensuring the continuous
    performance and availability of our cluster. Security is something that we often
    don't think about until it affects us. That's why we should invest the time beforehand
    to plan and make sure that we have the measures in place to be sufficiently secure.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从部署转向确保集群的持续性能和可用性时，运营也很重要。安全性是我们经常忽视直到它影响我们的东西。这就是为什么我们应该事先投入时间来计划，并确保我们已经采取措施足够安全。
- en: Finally, we introduced the concept of checklists to keep track of our tasks
    and to make sure that we complete all of them before major operational events
    (deployment, cluster upgrades, moving to sharding from replica sets, and so on).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍了清单的概念，以跟踪我们的任务，并确保在主要运营事件（部署、集群升级、从副本集迁移到分片等）之前完成所有任务。
