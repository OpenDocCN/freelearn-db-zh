- en: Chapter 5. Changing Data and Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。改变数据和结构
- en: Data is not static, it changes often. This chapter focuses on editing and deleting
    data and its supporting structures—tables and databases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据并不是静态的，它经常发生变化。本章重点介绍了编辑和删除数据以及其支持结构——表和数据库。
- en: The chapter is divided into two main parts. The first part covers all aspects
    of changing data. First we examine how to edit data, that is, how to enter the
    edit mode, how to edit more than one row at once, and how to benefit from inline
    editing. Next we see how to delete rows of data and how to delete tables and databases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章分为两个主要部分。第一部分涵盖了改变数据的所有方面。首先我们会看到如何编辑数据，即如何进入编辑模式，如何一次编辑多行数据，以及如何从内联编辑中受益。接下来我们会看到如何删除数据行，以及如何删除表和数据库。
- en: The second part explains how to modify the structure of tables. We examine how
    to add a column to a table; we then explore various column types such as `TEXT,
    BLOB, ENUM, DATE`, and `BIT` column types. Finally, we examine the management
    of indexes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分解释了如何修改表的结构。我们将介绍如何向表中添加列；然后我们将探讨各种列类型，如`TEXT，BLOB，ENUM，DATE`和`BIT`列类型。最后，我们将介绍索引的管理。
- en: Changing data
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变数据
- en: In this section, we cover the various ways of editing and deleting data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍编辑和删除数据的各种方法。
- en: Entering edit mode
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入编辑模式
- en: 'When we browse a table or view results from a search on any single-table query,
    small icons and links appear on the left or right of each table row as shown in
    the following screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们浏览表或查看任何单表查询的搜索结果时，小图标和链接会出现在每个表行的左侧或右侧，如下面的截图所示：
- en: '![Entering edit mode](img/7782_05_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![进入编辑模式](img/7782_05_01.jpg)'
- en: 'The row can be edited with one of the pencil-shaped icons **(Edit)** and deleted
    with the red icon **(Delete)**. The exact form and location of these controls
    are governed by:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用铅笔形状的图标**(编辑)**来编辑行，使用红色图标**(删除)**来删除行。这些控件的确切形式和位置受以下因素的影响：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can decide whether to display them on the left side, the right side, or on
    both sides. The `$cfg['PropertiesIconic']` parameter can have the values `TRUE,
    FALSE`, or `both. TRUE` displays icons only, `FALSE` displays **Edit, Inline Edit,
    Copy**, and **Delete** (or their translated equivalent) as links, and `both` displays
    the icon and the text, as seen in the preceding screenshot.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以决定是在左侧显示它们，右侧显示它们，还是两侧都显示。`$cfg['PropertiesIconic']`参数可以有`TRUE, FALSE`或`both`的值。`TRUE`只显示图标，`FALSE`显示**编辑，内联编辑，复制**和**删除**（或它们的翻译等效），`both`显示图标和文本，如前面的截图所示。
- en: The small checkbox beside each row is explained in the *Multi-row editing* and
    the *Deleting multiple rows* sections later in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行旁边的小复选框在本章后面的*多行编辑*和*删除多行*部分中有解释。
- en: 'Clicking on the **Edit** icon or link brings the following panel, which is
    similar to the data entry panel (except for the lower part):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**编辑**图标或链接会带来以下面板，它与数据输入面板相似（除了下部分）。
- en: '![Entering edit mode](img/7782_05_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![进入编辑模式](img/7782_05_02.jpg)'
- en: In this panel, we can change data by typing directly (or by cutting and pasting
    via the normal operating system mechanisms). We can also revert to the original
    contents using the **Reset** button.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个面板中，我们可以通过直接输入（或通过常规操作系统机制剪切和粘贴）来更改数据。我们也可以使用**重置**按钮恢复到原始内容。
- en: By default, the lower drop-down menus are set to **Save** (so that we make changes
    to this row) and **Go back to previous page** (so that we can continue editing
    another row on the previous results page). We might want to stay on the current
    page after clicking on **Go** —in order to save and then continue editing—we can
    choose **Go back to this page**. If we want to insert yet another new row after
    saving the current row, we just have to choose **Insert another new row** before
    saving. The **Insert as new row** choice (below the **Save** choice) is explained
    in the *Duplicating rows of data* section later in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，下拉菜单设置为**保存**（以便我们对此行进行更改）和**返回到上一页**（以便我们可以继续编辑上一页结果页面上的另一行）。如果我们想要在点击**Go**后留在当前页面以保存然后继续编辑，我们可以选择**返回到此页面**。如果我们想要在保存当前行后插入另一行，我们只需在保存之前选择**插入另一行**。**插入为新行**选项（在**保存**选项下方）在本章后面的*复制数据行*部分中有解释。
- en: Moving to next field with the tab key
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Tab键移动到下一个字段
- en: People who prefer to use the keyboard can use the *Tab* key to go to the next
    field. Normally, the cursor goes from left to right and from top to bottom, so
    it would travel into the fields in the **Function** column (more on this in a
    moment). However, to ease data navigation in phpMyAdmin, the normal order of navigation
    has been altered. The *Tab* key first goes through each field in the **Value**
    column, and then through each one in the **Function** column.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢使用键盘的人可以使用*Tab*键来进入下一个字段。通常情况下，光标从左到右，从上到下移动，所以它会进入**Function**列中的字段（稍后会详细介绍）。然而，为了方便在phpMyAdmin中导航数据，正常的导航顺序已经改变。*Tab*键首先通过**Value**列中的每个字段，然后通过**Function**列中的每个字段。
- en: Moving with arrows
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用箭头移动
- en: Another way of moving between fields is with the *Ctrl* + *arrow* keys. This
    method might be easier than using the *Tab* key when many fields are on screen.
    For this to work, the `$cfg['CtrlArrowsMoving']` parameter must be set to `true`,
    which is the default value.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种在字段之间移动的方法是使用*Ctrl* + *箭头*键。当屏幕上有许多字段时，这种方法可能比使用*Tab*键更容易。为了使其工作，`$cfg['CtrlArrowsMoving']`参数必须设置为`true`，这是默认值。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In some situations, this technique cannot be used for moving between fields.
    For example, the Google Chrome browser does not support *Ctrl* + *arrow*. Also,
    on Mac OS X 10.5 with Spaces enabled, *Ctrl* + *arrow* is the default shortcut
    to switch between virtual desktops.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这种技术不能用于在字段之间移动。例如，Google Chrome浏览器不支持*Ctrl* + *箭头*。另外，在启用了Spaces的Mac
    OS X 10.5上，*Ctrl* + *箭头*是在虚拟桌面之间切换的默认快捷键。
- en: Handling NULL values
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理NULL值
- en: If the table's structure permits a `NULL` value inside a column, a small checkbox
    appears in the column's **Null** column. Selecting this puts a `NULL` value in
    the column. Whenever data is typed into this column's **Value**, the **Null**
    checkbox is cleared automatically. (This is possible in JavaScript-enabled browsers.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表的结构允许在列中放置`NULL`值，那么在**Null**列中会出现一个小复选框。选择此复选框会在列中放置`NULL`值。每当在此列的**Value**中输入数据时，**Null**复选框会自动清除（这在启用JavaScript的浏览器中是可能的）。
- en: 'In the following screenshot, we have modified the structure of the **phone**
    column in the `author` table, to permit a `NULL` value (refer to the *Editing
    column attribute* section in this chapter). The **Null** checkbox is not selected
    here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们修改了`author`表中**phone**列的结构，以允许`NULL`值（请参考本章的*编辑列属性*部分）。这里没有选择**Null**复选框：
- en: '![Handling NULL values](img/7782_05_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![处理NULL值](img/7782_05_03.jpg)'
- en: The corresponding data is erased after selecting the **Null** box.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择**Null**框后，相应的数据被清除。
- en: Applying a function to a value
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对值应用函数
- en: MySQL language offers some functions that we may apply to data before saving.
    Some of these functions appear in a drop-down menu beside each column, if `$cfg['ShowFunctionFields']`
    is set to `TRUE`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL语言提供了一些函数，我们可以在保存之前应用到数据上。如果`$cfg['ShowFunctionFields']`设置为`TRUE`，则某些函数将出现在每个列旁边的下拉菜单中。
- en: The function list is defined in the `$cfg['Functions']` array. As usual, the
    default values for these arrays are located in `libraries/config.default.php`.
    We may change them by copying the needed section into `config.inc.php`. If we
    do so, as these values can change from version to version, we should take care
    of merging our changes with the values of the new version. The most commonly used
    functions for a certain data type are displayed first in the list. Some restrictions
    are defined in the `$cfg['RestrictColumnTypes']` and `$cfg['RestrictFunctions']`
    arrays.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数列表在`$cfg['Functions']`数组中定义。通常，这些数组的默认值位于`libraries/config.default.php`中。我们可以通过将所需的部分复制到`config.inc.php`中来更改它们。如果我们这样做，由于这些值可能会因版本而异，我们应该注意将我们的更改与新版本的值合并。某些数据类型的最常用函数首先显示在列表中。一些限制在`$cfg['RestrictColumnTypes']`和`$cfg['RestrictFunctions']`数组中定义。
- en: 'As depicted in the following screenshot, we could apply the **UPPER** function
    to the **title** column when saving this row, which would convert the title to
    uppercase characters:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如下面的屏幕截图所示，我们可以在保存此行时将**UPPER**函数应用于**title**列，将标题转换为大写字符：
- en: '![Applying a function to a value](img/7782_05_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![对值应用函数](img/7782_05_04.jpg)'
- en: To gain some screen space, this feature may be disabled by setting `$cfg['ShowFunctionFields']`
    to `FALSE`. Moreover, the **Function** column header is clickable, so we can disable
    this feature on the fly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省一些屏幕空间，可以通过将`$cfg['ShowFunctionFields']`设置为`FALSE`来禁用此功能。此外，**Function**列标题是可点击的，因此我们可以即时禁用此功能。
- en: 'When the feature is disabled—either by clicking or via the configuration parameter—a
    **Show : Function** link appears in order to display this **Function** column
    with a single click as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当功能被禁用时，要么通过点击，要么通过配置参数，会出现一个“显示：功能”链接，以便在单击时显示这个“功能”列，如下面的屏幕截图所示：
- en: '![Applying a function to a value](img/7782_05_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![对值应用函数](img/7782_05_05.jpg)'
- en: A similar feature is available for the **Type** column header, either by clicking
    on it or by configuring `$cfg['ShowFieldTypesInDataEditView']`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Type**列标题也可以通过点击或配置`$cfg[''ShowFieldTypesInDataEditView'']`来使用类似的功能。'
- en: Duplicating rows of data
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据行的复制
- en: During the course of data maintenance (for permanent duplication or for test
    purposes), we often have to generate a copy of a row. If this is done in the same
    table, we must respect the rules of key uniqueness.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据维护过程中（用于永久复制或测试目的），我们经常需要生成一行的副本。如果在同一表中进行此操作，我们必须遵守唯一键的规则。
- en: 'Here is an example of row duplication. Our author has written volume 2 of his
    book about cinema. Hence, the columns that need a slight change are the ISBN,
    title, and page count. We bring the existing row on screen, change these three
    columns, and choose **Insert as new row**, as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个行复制的例子。我们的作者写了关于电影的第2卷书。因此，需要稍作更改的列是ISBN、标题和页数。我们将现有行显示在屏幕上，更改这三列，并选择**插入为新行**，如下面的屏幕截图所示：
- en: '![Duplicating rows of data](img/7782_05_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![数据行的复制](img/7782_05_06.jpg)'
- en: 'When we click on **Go**, another row is created with the modified information,
    leaving the original row unchanged, shown as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**Go**时，将创建另一行，带有修改后的信息，原始行保持不变，如下所示：
- en: '![Duplicating rows of data](img/7782_05_07.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![数据行的复制](img/7782_05_07.jpg)'
- en: A shortcut link exists to achieve the same operation. When browsing the table,
    clicking on **Copy** for a specific row brings the edit panel for this row and
    selects **Insert as new row** instead of **Save**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个快捷链接来执行相同的操作。在浏览表时，点击特定行的**复制**会带来该行的编辑面板，并选择**插入为新行**而不是**保存**。
- en: Multi-row editing
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多行编辑
- en: The multi-row edit feature enables us to use checkboxes on the rows we want
    to edit, and use the **Change** link (or the pencil-shaped icon) in the **With
    selected** menu. The **Check All / Uncheck All** links can also be used to quickly
    check or uncheck all the boxes. We can also click anywhere on the row's data to
    activate the corresponding checkbox. To select a range of checkboxes, we can click
    the first checkbox of the range, and then *Shift* + Click on the last checkbox
    of the range.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 多行编辑功能使我们能够在要编辑的行上使用复选框，并在**With selected**菜单中使用**Change**链接（或铅笔形图标）。**Check
    All / Uncheck All**链接也可以用于快速选中或取消选中所有复选框。我们还可以点击行数据的任何位置来激活相应的复选框。要选择一系列复选框，我们可以点击范围的第一个复选框，然后*Shift*
    + 点击范围的最后一个复选框。
- en: '![Multi-row editing](img/7782_05_08.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![多行编辑](img/7782_05_08.jpg)'
- en: Upon clicking on **Change**, an edit panel containing all the chosen rows appears.
    The editing process may continue while the data from these rows is seen, compared,
    and changed. When we mark some rows with the checkboxes, we can also perform two
    other actions on them—**Delete** (refer to the *Deleting multiple rows* section
    in this chapter) and **Export** (refer to [Chapter 6)](ch06.html "Chapter 6. Exporting
    Structure and Data (Backup)").
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**更改**后，出现包含所有选定行的编辑面板。在查看、比较和更改这些行的数据时，编辑过程可以继续进行。当我们用复选框标记一些行时，我们还可以对它们执行另外两个操作——**删除**（参见本章的*删除多行*部分）和**导出**（参见[第6章)](ch06.html
    "第6章. 导出结构和数据（备份）")）。
- en: Editing the next row
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑下一行
- en: Sequential editing is possible on tables that have a primary key on an integer
    column. Our `author` table meets the criteria. Let us see what happens when we
    start editing the row having the **id** value **1:**
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有整数列上的主键的表上可以进行顺序编辑。我们的`author`表符合这些条件。让我们看看当我们开始编辑具有**id**值**1**的行时会发生什么：
- en: '![Editing the next row](img/7782_05_09.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![编辑下一行](img/7782_05_09.jpg)'
- en: The editing panel appears, and we can edit author number **1**. However, in
    the drop-down menu, the **Edit next row** choice is available. If chosen, the
    next author—the first one whose primary key value is greater than the current
    primary key value—will be available for edit.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑面板出现，我们可以编辑作者编号**1**。然而，在下拉菜单中，**编辑下一行**选项是可用的。如果选择了，下一个作者——第一个主键值大于当前主键值的作者——将可供编辑。
- en: Inline row editing
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行内编辑
- en: 'Version 3.4 introduces inline row editing, that is, keeping in view the other
    rows of the results set while editing. This feature is available if `$cfg[''AjaxEnable'']`
    is set to `true`, via either `config.inc.php` or the user preferences. Clicking
    on **Inline Edit** for a row shows the following dialog:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 版本3.4引入了行内编辑，即在编辑时查看结果集的其他行。如果`$cfg['AjaxEnable']`设置为`true`，则可以使用`config.inc.php`或用户首选项。单击行的**行内编辑**显示以下对话框：
- en: '![Inline row editing](img/7782_05_10.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![行内编辑](img/7782_05_10.jpg)'
- en: After editing the columns that need changes, we click on **Save**. Aborting
    the changes is also possible by using the **Hide** link.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑需要更改的列之后，我们单击**保存**。也可以使用**隐藏**链接中止更改。
- en: Deleting data
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除数据
- en: 'phpMyAdmin''s interface enables us to delete the following data:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin的界面使我们能够删除以下数据：
- en: Single rows of data
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行数据
- en: Multiple rows of a table
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表的多行
- en: All the rows in a table
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表中的所有行
- en: All the rows in multiple tables
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有表中的所有行
- en: Deleting a single row
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除单行
- en: We can use the red **Delete** icon beside each row to delete the row. If the
    value of `$cfg['Confirm']` is set to `TRUE`, every MySQL `DELETE` statement has
    to be confirmed before execution. This is the default, as it might not be prudent
    to allow a row to be deleted with just one click!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用每行旁边的红色**删除**图标来删除行。如果`$cfg['Confirm']`的值设置为`TRUE`，则必须在执行之前确认每个MySQL `DELETE`语句。这是默认设置，因为允许仅需一次点击即可删除行可能不明智！
- en: 'The form of the confirmation varies depending on the browser''s ability to
    execute JavaScript. A JavaScript-based confirmation pop up would resemble the
    following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 确认的形式因浏览器执行JavaScript的能力而异。基于JavaScript的确认弹出窗将类似于以下截图：
- en: '![Deleting a single row](img/7782_05_11.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![删除单行](img/7782_05_11.jpg)'
- en: If JavaScript has been disabled in our browser, a distinct panel appears.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的浏览器已禁用JavaScript，则会出现一个不同的面板。
- en: The actual `DELETE` statement will use whatever information is needed to ensure
    the deletion of only the intended row. In our case, a primary key had been defined
    and was used in the `WHERE` clause. In the absence of a primary key, a longer
    `WHERE` clause will be generated based on the value of each column. The generated
    `WHERE` clause might even prevent the correct execution of the `DELETE` operation,
    especially if there are `TEXT` or `BLOB` column types. This is because the HTTP
    transaction, used to send the query to the web server, may be limited in length
    by the browser or the server. This is another reason why defining a primary key
    is strongly recommended.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的`DELETE`语句将使用所需的任何信息来确保仅删除预期的行。在我们的情况下，已定义了主键并在`WHERE`子句中使用了它。如果没有主键，将根据每列的值生成更长的`WHERE`子句。生成的`WHERE`子句甚至可能阻止`DELETE`操作的正确执行，特别是如果存在`TEXT`或`BLOB`列类型。这是因为用于将查询发送到Web服务器的HTTP事务可能会受到浏览器或服务器的长度限制。这是另一个为什么强烈建议定义主键的原因。
- en: Deleting multiple rows
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除多行
- en: 'Let us say we examine a page of rows and decide that some rows have to be destroyed.
    Instead of deleting them one-by-one with the **Delete** link or icon and as sometimes
    the decision to delete must be made while examining a group of rows, there are
    checkboxes beside rows in `Table` view mode as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们检查了一页的行，并决定一些行必须被删除。与其逐个使用**删除**链接或图标删除它们，有时在检查一组行时必须做出删除决定，`表`视图模式下的行旁边有复选框，如下面的截图所示：
- en: '![Deleting multiple rows](img/7782_05_12.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![删除多行](img/7782_05_12.jpg)'
- en: These are used with the **Delete** icon in the **With selected** menu. A confirmation
    screen appears listing all the rows that are about to be deleted.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些复选框与**选择的**菜单中的**删除**图标一起使用。确认屏幕将列出所有即将被删除的行。
- en: Deleting all of the rows in a table
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除表中的所有行
- en: 'To completely erase all the rows in a table (leaving its structure intact),
    we first display the database **Structure** page by selecting the related database
    from the navigation panel. We then use the **Empty** icon or link located on the
    same line as the table we want to empty, shown as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全删除表中的所有行（保持其结构不变），我们首先通过从导航面板中选择相关数据库来显示数据库**结构**页面。然后，我们使用与要清空的表位于同一行的**清空**图标或链接，如下所示：
- en: '![Deleting all of the rows in a table](img/7782_05_13.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![删除表中的所有行](img/7782_05_13.jpg)'
- en: We get a message confirming the `TRUNCATE` statement (the MySQL statement used
    to quickly empty a table). For our exercise, we won't delete this precious data!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了确认`TRUNCATE`语句的消息（用于快速清空表的MySQL语句）。对于我们的练习，我们不会删除这些宝贵的数据！
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Deleting data, either row-by-row or by emptying a table, is a permanent action.
    No recovery is then possible except by restoring a backup.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 删除数据，无论是逐行删除还是清空表，都是永久性的操作。除非恢复备份，否则无法恢复。
- en: Deleting all rows in multiple tables
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除多个表中的所有行
- en: 'A checkbox is present on the left of each table name. We can choose some tables.
    Then, in the **With selected** menu, choose the **Empty** operation as shown in
    the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表名左侧都有一个复选框。我们可以选择一些表。然后，在**选择的操作**菜单中，选择**清空**操作，如下截图所示：
- en: '![Deleting all rows in multiple tables](img/7782_05_14.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![删除多个表中的所有行](img/7782_05_14.jpg)'
- en: Of course, this decision must not be taken lightly!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个决定不能轻率地做出！
- en: Deleting tables
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除表
- en: Deleting a table erases the data and the table's structure. In the `Database`
    view, we can delete a specific table by using the red **Drop** icon for that table.
    The same mechanism also exists for deleting more than one table (with the drop-down
    menu and the **Drop** action).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 删除表会删除数据和表的结构。在`数据库`视图中，我们可以通过使用该表的红色**删除**图标来删除特定表。相同的机制也适用于删除多个表（使用下拉菜单和**删除**操作）。
- en: Deleting databases
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除数据库
- en: 'We can delete an entire database (including all its tables) by going to the
    **Databases** page in `Server` view, selecting the checkbox beside the unwanted
    database and clicking on the **Drop** link:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过转到`服务器`视图中的**数据库**页面，选择不需要的数据库旁边的复选框，然后点击**删除**链接来删除整个数据库（包括其所有表）：
- en: '![Deleting databases](img/7782_05_15.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![删除数据库](img/7782_05_15.jpg)'
- en: By default, `$cfg['AllowUserDropDatabase']` is set to `FALSE`. So, this panel
    does not permit unprivileged users to drop a database until this setting is manually
    changed to `TRUE`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`$cfg['AllowUserDropDatabase']`设置为`FALSE`。因此，该面板不允许非特权用户删除数据库，直到手动将此设置更改为`TRUE`为止。
- en: To help us think twice, a special message—You **are about to DESTROY a complete
    database!—appears** before a database is deleted.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们三思而后行，在删除数据库之前会出现一个特殊的消息——您即将销毁一个完整的数据库！
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The database `mysql`, containing all user and privilege definitions, is highly
    important. Therefore, the checkbox is deactivated for this database, even for
    administrators.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有用户和权限定义的数据库`mysql`非常重要。因此，即使对于管理员来说，该复选框也被禁用。
- en: Changing table structure
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改表结构
- en: When developing an application, requirements about data structure often change
    because of new or modified needs. Developers must accommodate these changes through
    judicious table structure editing. This section explores the subject of changing
    the structure of tables. Specifically, it shows how to add a column to an existing
    table and edit the attributes of a column. We then build on these notions to introduce
    more specialized column types, and to explain their handling through phpMyAdmin.
    Finally, we will cover the topic of index management.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，由于新的或修改后的需求，关于数据结构的要求经常发生变化。开发人员必须通过审慎的表结构编辑来适应这些变化。本节探讨了更改表结构的主题。具体来说，它展示了如何向现有表中添加列和编辑列的属性。然后，我们基于这些概念引入了更多专业的列类型，并通过phpMyAdmin解释了它们的处理。最后，我们将涵盖索引管理的主题。
- en: Adding a column
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加列
- en: Suppose that we need a new column to store a book's language and, by default,
    the books on which we keep data are written in English. We call the column **language**,
    which will contain code composed of two characters **(en** by default).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要一个新列来存储书籍的语言，并且默认情况下，我们保存数据的书籍是用英语写的。我们称该列为**language**，它将包含由两个字符组成的代码（默认为**en**）。
- en: In the **Structure** page of the `Table` view for the `book` table, we can find
    the **Add column** dialog. Here, we specify how many new columns we want, and
    where they will go.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`book`表的`表`视图的**结构**页面中，我们可以找到**添加列**对话框。在这里，我们指定要添加多少个新列，以及它们将放在哪里。
- en: The positions of the new columns in the table matter only from a developer's
    point of view. We usually group the columns logically, so that we can find them
    more easily in the list of columns. The exact position of the columns will not
    play a role in the intended results (output from the queries), as these results
    can be adjusted regardless of the table structure. Usually, the most important
    columns (including the keys) are located at the beginning of the table. However,
    it is a matter of personal preference.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 表中新列的位置只在开发者的角度上才重要。通常我们会逻辑地分组列，这样我们可以在列的列表中更容易地找到它们。列的确切位置不会影响预期结果（查询的输出），因为无论表结构如何，这些结果都可以进行调整。通常，最重要的列（包括键）位于表的开头。然而，这是个人偏好的问题。
- en: We want to put the new column **At End of Table**. So, we check the corresponding
    radio button and click on **Go**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想把新列放在表的末尾。因此，我们选中相应的单选按钮，然后点击**执行**。
- en: '![Adding a column](img/7782_05_16.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![添加列](img/7782_05_16.jpg)'
- en: Other possible choices would be **At Beginning of Table** and **After** (where
    we would have to choose from the drop-down menu, the column after which the new
    one must go).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可能的选择是**在表的开头**和**之后**（在这种情况下，我们必须从下拉菜单中选择新列应该放在哪个列之后）。
- en: 'We see the familiar panel for entering column''s attributes. We fill it in.
    However, as we want to enter a default value this time, we do the following two
    actions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了输入列属性的熟悉面板。我们填写它。然而，由于这次我们想输入一个默认值，所以我们进行了以下两个操作：
- en: Change the **Default** drop-down menu from **None** to **As defined:**
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**默认**下拉菜单从**无**更改为**如定义：**
- en: 'Enter the default value: **en**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入默认值：**en**
- en: We then click on **Save**.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们点击**保存**。
- en: '![Adding a column](img/7782_05_17.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![添加列](img/7782_05_17.jpg)'
- en: Vertical mode
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 垂直模式
- en: The previous panel appeared in vertical mode because the default for `$cfg['DefaultPropDisplay']`
    is `3`. This means that for three columns or less, the vertical mode is used,
    and for more than three, horizontal mode would be automatically selected. Here,
    we can use a number of our choosing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的面板以垂直模式显示，因为`$cfg['DefaultPropDisplay']`的默认值为`3`。这意味着对于三列或更少，将使用垂直模式，对于三列以上，将自动选择水平模式。在这里，我们可以使用我们选择的数字。
- en: If we set `$cfg['DefaultPropDisplay']` to`'vertical'`, the panel to add new
    columns (along with the panel to edit a column's structure) will be always presented
    in vertical order. This parameter can also take a value of`'horizontal'` to force
    a horizontal mode.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`$cfg['DefaultPropDisplay']`设置为`'vertical'`，则添加新列的面板（以及编辑列结构的面板）将始终以垂直顺序呈现。此参数还可以取值`'horizontal'`以强制水平模式。
- en: Editing column attribute
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑列属性
- en: 'On the **Structure** page, we can make further changes to our table:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在**结构**页面上，我们可以对表进行进一步更改：
- en: '![Editing column attribute](img/7782_05_18.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![编辑列属性](img/7782_05_18.jpg)'
- en: 'This panel does not allow every possible change to columns. It specifically
    allows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此面板不允许对列进行所有可能的更改。它特别允许：
- en: Changing one column structure, using the **Change** link on a specific column
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特定列上的**更改**链接更改一个列的结构
- en: Removing a column, using **Drop** operation
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**删除**操作删除列
- en: Adding a column to an existing **Primary** key
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向现有**Primary**键添加列
- en: Setting a non-unique **Index** or a **Unique** index on a column
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列上设置非唯一**索引**或**唯一**索引
- en: Setting a **FULLTEXT** index (offered only if the column type allows it)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置**FULLTEXT**索引（仅当列类型允许时提供）
- en: These are quick links that may be useful in some situations, but they do not
    replace the full index management panel. Both of these are explained in this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些可能在某些情况下有用的快速链接，但它们不能替代完整的索引管理面板。这两者都在本章中有解释。
- en: We can use the checkboxes to choose columns. Then, with the appropriate **With
    selected** icons, we can edit the columns with **Change** or do a multiple column
    deletion with **Drop**. The **Check All / Uncheck All** option permits us to easily
    check or uncheck all boxes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用复选框选择列。然后，使用适当的**选择**图标，我们可以使用**更改**编辑列，或者使用**删除**进行多列删除。**全选/取消全选**选项允许我们轻松地选中或取消选中所有框。
- en: TEXT column type
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TEXT列类型
- en: We will now explore how to use the **TEXT** column type and the relevant configuration
    values to adjust for the best possible phpMyAdmin behavior. First, we add to the
    **book** table a **TEXT** column called **description**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探讨如何使用**TEXT**列类型和相关配置值来调整最佳的phpMyAdmin行为。首先，我们向**book**表中添加一个名为**description**的**TEXT**列。
- en: 'There are three configuration directives that control the layout of the text
    area that will be displayed in **Insert** or **Edit** mode for the **TEXT** column
    type. The number of display columns and rows for each column is defined by:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个配置指令控制在**插入**或**编辑**模式下显示的**TEXT**列类型的文本区域的布局。每列的显示列数和行数由以下定义：
- en: '[PRE1]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This gives (by default) space to work on a **TEXT** column type as shown in
    the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这默认情况下为**TEXT**列类型提供了工作空间，如下面的屏幕截图所示：
- en: '![TEXT column type](img/7782_05_19.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![TEXT列类型](img/7782_05_19.jpg)'
- en: The settings impose only a visual limit on the text area, and a vertical scroll
    bar is created by the browser if necessary.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 设置只对文本区域施加了视觉限制，如果必要，浏览器会创建垂直滚动条。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although **MEDIUMTEXT, TEXT**, and **LONGTEXT** column types can accommodate
    more than 32 KiB of data, some browsers cannot always edit them with the text
    area—the mechanism offered by HTML. In fact, experimentation has convinced the
    phpMyAdmin development team to have the product display a warning message if the
    contents are larger than 32 KiB. The message warns users that the contents may
    not be editable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管**MEDIUMTEXT、TEXT**和**LONGTEXT**列类型可以容纳超过32 KiB的数据，但某些浏览器并不总是能够使用HTML提供的文本区域进行编辑。事实上，实验已经说服了phpMyAdmin开发团队，如果内容大于32
    KiB，产品将显示警告消息。该消息警告用户内容可能无法编辑。
- en: The last configuration directive, `$cfg['LongtextDoubleTextarea']`, has an impact
    for **LONGTEXT** column types only. The default value of `TRUE` doubles the available
    editing space.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个配置指令`$cfg['LongtextDoubleTextarea']`只对**LONGTEXT**列类型有影响。默认值为`TRUE`，可以使编辑空间加倍。
- en: BLOB (Binary Large Object) column type
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLOB（二进制大对象）列类型
- en: '**BLOB** column types are generally used to hold binary data (such as images
    and sounds), even though the MySQL documentation implies that **TEXT** column
    types could be used for this purpose. The MySQL 5.1 manual says: "In some cases,
    it may be desirable to store binary data such as media files in BLOB or TEXT columns".
    However, another phrase: "BLOB columns are treated as binary strings (byte strings)",
    seems to indicate that binary data should really be stored in **BLOB** columns.
    Thus, phpMyAdmin''s intention is to work with the **BLOB** column type to hold
    all binary data.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**BLOB**列类型通常用于保存二进制数据（如图像和声音），尽管MySQL文档暗示**TEXT**列类型也可以用于此目的。MySQL 5.1手册中说：“在某些情况下，可能希望将媒体文件等二进制数据存储在BLOB或TEXT列中”。然而，另一句话：“BLOB列被视为二进制字符串（字节字符串）”，似乎表明二进制数据应该真正存储在**BLOB**列中。因此，phpMyAdmin的意图是使用**BLOB**列类型来保存所有二进制数据。'
- en: We will see in [Chapter 16](ch16.html "Chapter 16. Transforming Data using MIME")
    that there are special mechanisms available to go further with **BLOB** column
    type, including being able to view some images directly from within phpMyAdmin.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第16章](ch16.html "第16章。使用MIME转换数据")中看到，有特殊机制可进一步处理**BLOB**列类型，包括能够直接从phpMyAdmin中查看一些图像。
- en: First, we add a **BLOB** column type named **cover_photo** to our `book` table.
    If we now browse the table, we can see the length information, **[BLOB - 0B]**,
    for each **BLOB** column type.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们向`book`表中添加一个名为**cover_photo**的**BLOB**列类型。如果现在浏览表，我们可以看到每个**BLOB**列类型的长度信息**[BLOB
    - 0B]**。
- en: '![BLOB (Binary Large Object) column type](img/7782_05_20.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![BLOB（二进制大对象）列类型](img/7782_05_20.jpg)'
- en: This is because the **Show BLOB** display option (do you remember the **Options**
    slider?) has no check mark by default. So, it blocks the display of **BLOB** contents
    in Browse mode. This behavior is intentional. Usually, we cannot do anything with
    binary data represented in plain text.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为**Show BLOB**显示选项（还记得**选项**滑块吗？）默认情况下没有复选标记。因此，它阻止在浏览模式下显示**BLOB**内容。这种行为是有意的。通常，我们无法对以纯文本表示的二进制数据执行任何操作。
- en: Uploading binary content
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传二进制内容
- en: If we edit one row, we see the **Binary do - not edit** warning and a **Browse…**
    button. The exact caption on this button depends on the browser. Even though editing
    is not allowed, we can easily upload a text or binary file's contents into this
    **blob** column.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们编辑一行，我们会看到**Binary do - not edit**警告和一个**浏览…**按钮。这个按钮的确切标题取决于浏览器。尽管不允许编辑，但我们可以轻松地将文本或二进制文件的内容上传到这个**blob**列中。
- en: Let us choose an image file using the **Browse** button—for example, the `logo_left.png`
    file in a test copy of the `phpMyAdmin/themes/pmahomme/img` directory located
    on our client workstation. We now click on **Go**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用**浏览**按钮选择一个图像文件，例如位于客户端工作站上的`phpMyAdmin/themes/pmahomme/img`目录的测试副本中的`logo_left.png`文件。现在点击**Go**。
- en: '![Uploading binary content](img/7782_05_21.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![上传二进制内容](img/7782_05_21.jpg)'
- en: 'We need to keep in mind some limits for the upload size. Firstly, the **blob**
    column size is limited to 64 KiB, but in [Chapter 16](ch16.html "Chapter 16. Transforming
    Data using MIME") we will change the type of this column to accommodate bigger
    images. Hence, phpMyAdmin reminds us of this limit with the **Max: 64KiB** warning.
    Also, there could be limits inherent to PHP itself (refer to [Chapter 7](ch07.html
    "Chapter 7. Importing Structure and Data") for more details). We have now uploaded
    an image inside this column for a specific row.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要记住一些上传大小的限制。首先，**blob**列的大小限制为64 KiB，但在[第16章](ch16.html "第16章。使用MIME转换数据")中，我们将更改此列的类型以容纳更大的图像。因此，phpMyAdmin通过**Max:
    64KiB**警告提醒我们这一限制。此外，PHP本身可能存在限制（有关更多详细信息，请参阅[第7章](ch07.html "第7章。导入结构和数据")）。我们现在已经在特定行中上传了一张图片。'
- en: '![Uploading binary content](img/7782_05_22.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![上传二进制内容](img/7782_05_22.jpg)'
- en: We notice that **BLOB - 4.9KiB** is a link; it permits to download any binary
    data to our workstation should the need arise.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到**BLOB - 4.9KiB**是一个链接；如果需要，它允许我们下载任何二进制数据到我们的工作站。
- en: 'If we put a check mark for the **Show BLOB Contents** display option, we now
    see the following in the **BLOB** column type:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为**Show BLOB Contents**显示选项打上复选标记，我们现在在**BLOB**列类型中看到以下内容：
- en: '![Uploading binary content](img/7782_05_23.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![上传二进制内容](img/7782_05_23.jpg)'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To really see the image from within phpMyAdmin, refer to [Chapter 16](ch16.html
    "Chapter 16. Transforming Data using MIME").
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正在phpMyAdmin中查看图像，请参阅[第16章](ch16.html "第16章。使用MIME转换数据")。
- en: 'The `$cfg[''ProtectBinary'']` parameter controls what can be done while editing
    binary columns **(BLOB**s and any other column with the `binary` attribute). The
    default value **blob** blocks the **BLOB** columns from being edited but allows
    us to edit other columns marked `binary` by MySQL. A value of `all` would block
    even `binary` columns from being edited. A value of `FALSE` would protect nothing,
    thus allowing us to edit all the columns. If we try the last choice, we see the
    following in the **Edit** panel for this row:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`$cfg[''ProtectBinary'']`参数控制编辑二进制列**(BLOB**和任何其他带有`binary`属性的列)时可以做什么。默认值**blob**阻止编辑**BLOB**列，但允许我们编辑MySQL标记为`binary`的其他列。值为`all`将甚至阻止编辑`binary`列。值为`FALSE`将不保护任何内容，因此允许我们编辑所有列。如果我们选择最后一个选项，我们会在此行的**编辑**面板中看到以下内容：'
- en: '![Uploading binary content](img/7782_05_24.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![上传二进制内容](img/7782_05_24.jpg)'
- en: The content of this `BLOB` column type has been converted in hexadecimal and
    the **UNHEX** function is selected by default. We probably don't want to edit
    this image data in hexadecimal but this is the best way of safely representing
    binary data on screen. The reason for this hexadecimal representation is that
    the **Show binary contents as HEX display** option (in **Browse** mode) is currently
    marked. But we did not mark this option; it was checked because the `$cfg['DisplayBinaryAsHex']`
    directive is `TRUE` by default.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`BLOB`列类型的内容已经转换为十六进制，并且默认选择了**UNHEX**函数。我们可能不想以十六进制编辑这个图像数据，但这是在屏幕上安全表示二进制数据的最佳方式。这种十六进制表示的原因是，**Show
    binary contents as HEX display**选项（在**浏览**模式下）目前被标记。但我们没有标记这个选项；它被选中是因为`$cfg['DisplayBinaryAsHex']`指令默认为`TRUE`。
- en: 'Should we decide instead to not mark this option, we would see the following
    pure binary data for this image:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定不标记这个选项，我们将看到这个图像的纯二进制数据：
- en: '![Uploading binary content](img/7782_05_25.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![上传二进制内容](img/7782_05_25.jpg)'
- en: There are chances that this is not our favorite image editor! In fact, data
    may be corrupted even if we save this row without touching the **BLOB** column
    type. But the possibility of setting `$cfg['ProtectBinary']` to `FALSE` exists,
    as some users put text in their **BLOB** columns, and they need to be able to
    modify this text. This is why phpMyAdmin can be configured to allow editing of
    **BLOB** columns.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不是我们最喜欢的图像编辑器！实际上，即使我们在不触及**BLOB**列类型的情况下保存这一行，数据也可能会损坏。但是，将`$cfg['ProtectBinary']`设置为`FALSE`的可能性是存在的，因为一些用户在他们的**BLOB**列中放置文本，并且他们需要能够修改这些文本。这就是为什么phpMyAdmin可以配置为允许编辑**BLOB**列。
- en: MySQL **BLOB** data types are actually similar to their corresponding **TEXT**
    data types. However, we should keep in mind that a **BLOB** has no character set,
    whereas a **TEXT** column type has a character set that impacts sorting and comparison.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的**BLOB**数据类型实际上与它们对应的**TEXT**数据类型类似。但是，我们应该记住**BLOB**没有字符集，而**TEXT**列类型有一个影响排序和比较的字符集。
- en: ENUM and SET column types
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ENUM和SET列类型
- en: Both ENUM and SET column types are intended to represent a list of possible
    values. The difference is that the user can choose only one value from a defined
    list of values with **ENUM**, and more than one value with **SET**. With **SET**,
    all the multiple values go into one cell; but multiple values do not imply the
    creation of more than one row of data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**ENUM**和**SET**列类型都旨在表示可能的值列表。区别在于用户可以从定义的值列表中选择一个值，**ENUM**，和使用**SET**可以选择多个值。对于**SET**，所有多个值都放入一个单元格；但是多个值并不意味着创建多行数据。'
- en: 'We add a column named **genre** to the `book` table and define it as an **ENUM**.
    For now, we choose to put short codes in the value list and make one of them,
    **F**, into the default value as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`book`表中添加了一个名为**genre**的列，并将其定义为**ENUM**。目前，我们选择在值列表中放入简短的代码，并将其中一个值**F**作为默认值，如下面的屏幕截图所示：
- en: '![ENUM and SET column types](img/7782_05_26.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![ENUM and SET column types](img/7782_05_26.jpg)'
- en: 'In the value list, we have to enclose each value within single quotes, unlike
    in the default value field. Starting with version 3.4.0, an editor targeted for
    `ENUM/SET` columns is available. With this editor, we don''t need to bother enclosing
    values within single quotes. Clicking on **Get more editing space** brings this
    editor into action:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在值列表中，我们必须将每个值用单引号括起来，与默认值字段不同。从3.4.0版本开始，针对`ENUM/SET`列的编辑器可用。使用此编辑器，我们无需费心将值用单引号括起来。单击**获取更多编辑空间**即可启用此编辑器：
- en: '![ENUM and SET column types](img/7782_05_27.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![ENUM and SET column types](img/7782_05_27.jpg)'
- en: 'In our design, these values stand for **Fantasy, Child**, and **Novel**. However,
    for now, we want to see the interface''s behavior with short code. In the **Insert**
    panel, we now see a radio box interface as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设计中，这些值代表**幻想，儿童**和**小说**。但是，目前，我们希望看到界面对简短代码的行为。在**插入**面板中，我们现在看到一个单选框界面，如下面的屏幕截图所示：
- en: '![ENUM and SET column types](img/7782_05_28.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![ENUM and SET column types](img/7782_05_28.jpg)'
- en: If we decide to have more self-describing values, we can go back to **Structure**
    mode and change the values definition for the **genre** column. We also have to
    change the default value to one of the possible values, to avoid getting an error
    message while trying to save this column structure's modification.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定有更多自描述的值，我们可以回到**结构**模式，并更改**genre**列的值定义。我们还必须将默认值更改为可能的值之一，以避免在尝试保存此列结构修改时收到错误消息。
- en: '![ENUM and SET column types](img/7782_05_29.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![ENUM and SET column types](img/7782_05_29.jpg)'
- en: 'With the modified value list, the **Insert** panel now looks as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用修改后的值列表，**插入**面板现在如下所示：
- en: '![ENUM and SET column types](img/7782_05_30.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![ENUM and SET column types](img/7782_05_30.jpg)'
- en: Observe that the radio buttons have been replaced by a drop-down list because
    the possible values are larger in length.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，单选按钮已被下拉列表取代，因为可能的值长度更大。
- en: 'If we want more than one possible value selected, we have to change the column
    type to **SET**. The same value list may be used. However, using our browser''s
    multiple value selector (control-click on a Windows or Linux desktop, command-click
    on a Mac), we can select more than one value as shown in the screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要选择多个可能的值，我们必须将列类型更改为**SET**。可以使用相同的值列表。但是，使用浏览器的多值选择器（在Windows或Linux桌面上按住Ctrl键单击，在Mac上按住Command键单击），我们可以选择多个值，如屏幕截图所示：
- en: '![ENUM and SET column types](img/7782_05_31.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![ENUM and SET column types](img/7782_05_31.jpg)'
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In a normalized data structure, we would store only the **genre** code in the
    `book` table and would rely on another table to store the description for each
    code. We would not be using **SET** or **ENUM** in this case.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在规范化的数据结构中，我们只会在`book`表中存储**genre**代码，并依赖另一个表来存储每个代码的描述。在这种情况下，我们将不使用**SET**或**ENUM**。
- en: DATE, DATETIME, and TIMESTAMP column types
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DATE，DATETIME和TIMESTAMP列类型
- en: We could use a normal character column to store date or time information. But
    **DATE, DATETIME**, and **TIMESTAMP** are more efficient for this purpose. MySQL
    checks the contents to ensure valid date and time information, and offers special
    functions to work on these columns.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用普通字符列来存储日期或时间信息。但是**DATE，DATETIME**和**TIMESTAMP**对于此目的更有效。MySQL检查内容以确保有效的日期和时间信息，并提供特殊函数来处理这些列。
- en: Calendar pop up
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日历弹出
- en: As an added benefit, phpMyAdmin offers a calendar pop up for easy data entry.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的好处，phpMyAdmin提供了一个日历弹出，方便数据输入。
- en: 'We will start by adding a **DATE** column type **—date_published—** to our
    `book` table. If we go into **Insert** mode, we should now see the new column
    where we could type a date. A **Calendar** icon is also available. This icon brings
    a pop-up window, synchronized to this **DATE** column type. If there is already
    a value in the column, the pop up is displayed accordingly. In our case, there
    is no value in the column, so the calendar shows the current date as shown in
    the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`book`表中添加一个**DATE**列类型**—date_published—**。如果我们进入**插入**模式，现在应该会看到新列，我们可以在其中输入日期。还有一个**日历**图标可用。此图标会带来一个弹出窗口，与此**DATE**列类型同步。如果列中已经有值，则相应地显示弹出窗口。在我们的情况下，列中没有值，因此日历显示当前日期，如下面的屏幕截图所示：
- en: '![Calendar pop up](img/7782_05_32.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![日历弹出](img/7782_05_32.jpg)'
- en: Small arrows permit easy scrolling through months and years. A simple click
    on the date we want transports it to our **date_published** column. For a **DATETIME**
    or **TIMESTAMP** column type, the pop up offers the ability to edit the time part.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 小箭头方便地滚动月份和年份。点击我们想要的日期，将其传输到我们的**date_published**列。对于**DATETIME**或**TIMESTAMP**列类型，弹出窗口提供了编辑时间部分的功能。
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we type a date or time value, a validation is done if our browser is JavaScript-enabled;
    incorrect values are highlighted in red.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入日期或时间值，如果我们的浏览器启用了JavaScript，则会进行验证；不正确的值会用红色突出显示。
- en: TIMESTAMP option
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间戳选项
- en: Starting with MySQL 4.1.2, there are more options that can affect a **TIMESTAMP**
    column type. Let us add to our `book` table, a column named **stamp** of type
    **TIMESTAMP**. In the **Default** drop-down, we could choose **CURRENT_TIMESTAMP**;
    but we won't for this exercise. However, in the **Attributes** column, we choose
    **on update CURRENT_TIMESTAMP**. More details are available at [http://dev.mysql.com/doc/refman/5.5/en/timestamp.html](http://dev.mysql.com/doc/refman/5.5/en/timestamp.html).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 4.1.2开始，有更多选项可以影响**TIMESTAMP**列类型。让我们在`book`表中添加一个名为**stamp**的**TIMESTAMP**类型的列。在**默认**下拉菜单中，我们可以选择**CURRENT_TIMESTAMP**；但是对于此练习，我们不会这样做。但是，在**属性**列中，我们选择**on
    update CURRENT_TIMESTAMP**。更多详细信息，请参阅[http://dev.mysql.com/doc/refman/5.5/en/timestamp.html](http://dev.mysql.com/doc/refman/5.5/en/timestamp.html)。
- en: '![TIMESTAMP option](img/7782_05_33.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![TIMESTAMP选项](img/7782_05_33.jpg)'
- en: Bit column type
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位列类型
- en: 'MySQL 5.0.3 introduced true bit columns. These take the same amount of space
    in the database as the number of bits in their definition. Let us say we have
    the following three pieces of information about each book, and each piece can
    only be true (1) or false (0):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.0.3引入了真正的位列。它们在数据库中占用的空间与其定义中的位数相同。假设我们对每本书有以下三个信息，并且每个信息只能是真（1）或假（0）：
- en: Book is hard cover
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书是精装
- en: Book contains a CD-ROM
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书中包含CD-ROM
- en: Book is available only in electronic format
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书只有电子版可用
- en: 'We will use a single **BIT** column to store these three pieces of information.
    Therefore, we add a column having a length of **3** (which means 3 bits) to the
    `book` table:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个单个**BIT**列来存储这三个信息。因此，我们在`book`表中添加一个长度为**3**（即3位）的列：
- en: '![Bit column type](img/7782_05_34.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![位列类型](img/7782_05_34.jpg)'
- en: To construct and subsequently interpret the values we store in this column,
    we have to think in binary, respecting the position of each bit within the column.
    To indicate that a book is hard cover, does not contain a CD-ROM, and is available
    only in electronic format, we would use a value of `101`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构造并随后解释我们存储在此列中的值，我们必须以二进制方式思考，尊重列内每个位的位置。要指示一本书是精装，不包含CD-ROM，并且仅以电子版形式提供，我们将使用值`101`。
- en: 'phpMyAdmin handles `BIT` columns in a binary way. For example, if we edit one
    row and set a value of `101` to the **some_bits** column, the following query
    is sent at save time:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin以二进制方式处理`BIT`列。例如，如果我们编辑一行并将值`101`设置为**some_bits**列的值，那么在保存时将发送以下查询：
- en: '[PRE2]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The highlighted part of this query shows that the column really receives a binary
    value. At browse time, the exact value (which in decimal is `5` —a meaningless
    value for our purpose) is redisplayed in its binary form `101`, which helps to
    interpret each discrete bit value. More details about the notation for bit values
    are available at [http://dev.mysql.com/doc/refman/5.5/en/bit-type.html](http://dev.mysql.com/doc/refman/5.5/en/bit-type.html).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的突出部分显示该列实际上接收到了一个二进制值。在浏览时，精确值（在十进制中为`5` ——对于我们的目的来说是一个无意义的值）以其二进制形式`101`重新显示，这有助于解释每个离散的位值。有关位值表示法的更多详细信息，请参阅[http://dev.mysql.com/doc/refman/5.5/en/bit-type.html](http://dev.mysql.com/doc/refman/5.5/en/bit-type.html)。
- en: Managing indexes
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理索引
- en: Properly maintained indexes are crucial for data retrieval speed. phpMyAdmin
    has a number of index management options, which will be covered in this section.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 正确维护的索引对于数据检索速度至关重要。phpMyAdmin具有许多索引管理选项，将在本节中介绍。
- en: Single-column indexes
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单列索引
- en: 'We have already seen how the **Structure** panel offers a quick way to create
    an index on a single column, thanks to some links such as **Add primary key, Add
    index**, and **Add unique index**. Under the columns list, there is a section
    of the interface available to manage indexes:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到**结构**面板通过一些链接（如**添加主键、添加索引**和**添加唯一索引**）提供了快速创建单列索引的方法。在列列表下方，有一个可用于管理索引的界面部分：
- en: '![Single-column indexes](img/7782_05_35.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![单列索引](img/7782_05_35.jpg)'
- en: This section has links to edit or delete every index. Here, the **Column** part
    lists only one column per index, and we can see that the whole column participates
    in the index. This is because there is no size information after each column name,
    contrary to what will be seen in our next example.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分有链接可编辑或删除每个索引。在这里，**列**部分每个索引只列出一个列，我们可以看到整个列参与索引。这是因为在每个列名后面没有大小信息，与我们下一个示例中将看到的情况相反。
- en: 'We will now add an index on the title. However, we want to restrict the length
    of this index to reduce the space used by the on-disk index structure. The **Create
    an index on 1 columns** option is appropriate. So, we click on **Go**. In the
    next screen, we specify the index details as shown here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在标题上添加一个索引。但是，我们希望限制此索引的长度，以减少磁盘上索引结构使用的空间。**在1列上创建索引**选项是合适的。因此，我们点击**Go**。在下一个屏幕中，我们指定索引详细信息如下：
- en: '![Single-column indexes](img/7782_05_36.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![单列索引](img/7782_05_36.jpg)'
- en: 'We fill in the following information in the options of this panel:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此面板的选项中填写以下信息：
- en: '**Index name:** A name we invent, that describes the purpose of this index'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引名称：**我们发明的描述此索引目的的名称'
- en: '**Index type:** We can choose **INDEX**'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引类型：**我们可以选择**INDEX**'
- en: '**Column:** We select the column that is used as the index, which is **title**'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列：**我们选择用作索引的列，即**title**'
- en: '**Size:** We enter **30** instead of 100 (the complete length of the column)
    to save space in the table''s physical portion that holds index data'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小：**我们输入**30**而不是100（列的完整长度），以节省表的物理部分中保存索引数据的空间'
- en: 'After saving this panel, we can confirm from the following screenshot that
    the index is created and does not cover the entire length of the **title** column:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此面板后，我们可以从以下屏幕截图中确认索引已创建，并且不覆盖**title**列的整个长度：
- en: '![Single-column indexes](img/7782_05_37.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![单列索引](img/7782_05_37.jpg)'
- en: Multi-column indexes and index editing
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多列索引和索引编辑
- en: In the next example, we assume that in a future application we will need to
    find the books written by a specific author in a specific language. It makes sense
    to expand our **author_id** index, adding the **language** column to it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们假设在将来的应用程序中，我们将需要找到特定作者写的特定语言的书。将**author_id**索引扩展，添加**language**列到其中是有意义的。
- en: 'We click on the **Edit** link (small-pencil icon) on the line containing the
    **author_id** index; this shows the current state of this index. The interface
    has room to add another column to this index. We could use the **Add to index
    1 column(s)** feature should we need to add more than one column. In the selector,
    we pick **language**. This time we do not have to enter a size, as the whole column
    will be used in the index. For better documentation, we change the **Index name
    (author_language** is appropriate) as shown in the following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们点击包含**author_id**索引的行上的**Edit**链接（小铅笔图标），这将显示此索引的当前状态。界面上有空间可以向此索引添加另一列。如果需要添加多于一列，我们可以使用**Add
    to index 1 column(s)**功能。在选择器中，我们选择**language**。这次我们不需要输入大小，因为整个列将被用于索引。为了更好的文档记录，我们更改**Index
    name (author_language** 为适当的名称，如下图所示：
- en: '![Multi-column indexes and index editing](img/7782_05_38.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![多列索引和索引编辑](img/7782_05_38.jpg)'
- en: We save this index modification. In the list of indexes, we can confirm our
    index modification.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存这个索引修改。在索引列表中，我们可以确认我们的索引修改。
- en: FULLTEXT indexes
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全文索引
- en: This special type of index allows for full text searches. It is supported only
    on `MyISAM` tables for the **VARCHAR** and **TEXT** column types, but MySQL 5.6
    should be offering this feature for `InnoDB` too. We can use the **Add FULLTEXT
    index** link in the columns list or go to the index management panel and choose
    **FULLTEXT** in the drop-down menu.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这种特殊类型的索引允许进行全文搜索。它仅支持`MyISAM`表的**VARCHAR**和**TEXT**列类型，但MySQL 5.6也应该为`InnoDB`提供此功能。我们可以在列列表中使用**Add
    FULLTEXT index**链接，或者转到索引管理面板，并在下拉菜单中选择**FULLTEXT**。
- en: Optimizing indexes with EXPLAIN
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用EXPLAIN优化索引
- en: In this section, we want to get some information about the index that MySQL
    uses for a specific query, and the performance impact of not having defined an
    index.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们想要获取有关MySQL用于特定查询的索引以及没有定义索引的性能影响的一些信息。
- en: 'Let us assume we want to use the following query:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想使用以下查询：
- en: '[PRE3]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We want to know, which books written by the author whose `id` is `2`, are in
    the `es` language—our code for Spanish.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想知道，哪些由`id`为`2`的作者写的书是用`es`语言——我们的西班牙语的代码。
- en: To enter this query, we use the **SQL** tab from the database or the table menu,
    or the SQL Query window (refer to [Chapter 11)](ch11.html "Chapter 11. Entering
    SQL Statements"). We enter this query in the query box and click **Go**. Whether
    the query finds any results, is not important right now.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要输入此查询，我们可以使用数据库或表菜单中的**SQL**选项卡，或者SQL查询窗口（参见[第11章](ch11.html "第11章 输入SQL语句")）。我们在查询框中输入此查询，然后点击**Go**。目前查询是否找到任何结果并不重要。
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You could obtain the same query by following explanations from [Chapter 8](ch08.html
    "Chapter 8. Searching Data") to produce a search for **author_id 2** and language
    **es**.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过按照[第8章](ch08.html "第8章 搜索数据")中的解释来获得相同的查询，以便搜索**author_id 2**和语言**es**。
- en: '![Optimizing indexes with EXPLAIN](img/7782_05_39.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![使用EXPLAIN优化索引](img/7782_05_39.jpg)'
- en: 'We will now use the **[Explain SQL]** link to get information about which index
    (if any) has been used for this query:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用**[Explain SQL]**链接来获取有关此查询使用了哪个索引（如果有的话）的信息。
- en: '![Optimizing indexes with EXPLAIN](img/7782_05_40.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![使用EXPLAIN优化索引](img/7782_05_40.jpg)'
- en: We can see that the **EXPLAIN** command has been passed to MySQL, telling us
    that the **key** used is **author_language**. Thus, we know that this index will
    be used for this type of query. If this index had not existed, the result would
    have been quite different.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到**EXPLAIN**命令已经传递给MySQL，告诉我们使用的**key**是**author_language**。因此，我们知道这个索引将用于这种类型的查询。如果这个索引不存在，结果将会有很大不同。
- en: '![Optimizing indexes with EXPLAIN](img/7782_05_41.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![使用EXPLAIN优化索引](img/7782_05_41.jpg)'
- en: Here, **key (NULL)** and the **type (ALL)** mean that no index would be used,
    and all rows would need to be examined to find the desired data. Depending on
    the total number of rows, this could have a serious impact on the performance.
    We can ascertain the exact impact by examining the query timing that phpMyAdmin
    displays on each result page **(Query took x sec)**, and comparing it with or
    without the index. However, the difference in time can be minimal if we only have
    limited test data, compared to a real table in production. For more details about
    the `EXPLAIN` output format, please refer to [http://dev.mysql.com/doc/refman/5.5/en/explain-output.html](http://dev.mysql.com/doc/refman/5.5/en/explain-output.html).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，**key (NULL)** 和 **type (ALL)** 意味着没有使用索引，需要检查所有行以找到所需的数据。根据总行数的不同，这可能会严重影响性能。我们可以通过检查phpMyAdmin在每个结果页面上显示的查询时间
    **(Query took x sec)** 来确定确切的影响，并将其与有无索引进行比较。然而，如果我们只有有限的测试数据，与生产中的真实表相比，时间上的差异可能是微不足道的。有关`EXPLAIN`输出格式的更多详细信息，请参阅[http://dev.mysql.com/doc/refman/5.5/en/explain-output.html](http://dev.mysql.com/doc/refman/5.5/en/explain-output.html)。
- en: Detecting index problems
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测索引问题
- en: 'To help users maintain an optimal index strategy, phpMyAdmin tries to detect
    some common index problems. For example, let us access the `book` table and add
    an index on the **isbn** column. When we display this table''s structure, we get
    a warning as shown in the following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助用户维护最佳的索引策略，phpMyAdmin尝试检测一些常见的索引问题。例如，让我们访问`book`表并在**isbn**列上添加一个索引。当我们显示这个表的结构时，我们会得到如下截图所示的警告：
- en: '![Detecting index problems](img/7782_05_42.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![检测索引问题](img/7782_05_42.jpg)'
- en: The intention here is to warn us about an inefficient index structure when considering
    the whole table. We don't need to have two indexes on the same column.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的意图是在考虑整个表时警告我们关于索引结构的低效性。我们不需要在同一列上有两个索引。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter examined data-changing concepts, such as:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了数据更改的概念，例如：
- en: Editing data
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑数据
- en: Including the `NULL` column and using the *Tab* key
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括`NULL`列和使用*Tab*键
- en: Applying a function to a value
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对值应用函数
- en: Duplicating rows of data
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制数据行
- en: Deleting data, tables, and databases
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除数据、表和数据库
- en: 'We also got an overview of structure-changing techniques such as:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还概述了结构更改技术，例如：
- en: How to add columns, including special column types such as TEXT, BLOB, ENUM,
    and SET
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何添加列，包括特殊的列类型，如TEXT、BLOB、ENUM和SET
- en: How to use a calendar pop up for DATE, DATETIME, and TIMESTAMP column types
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用日历弹出窗口来处理DATE、DATETIME和TIMESTAMP列类型
- en: How to upload binary data into a BLOB column
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将二进制数据上传到BLOB列
- en: How to manage indexes (multi-column and full-text), and get feedback from MySQL
    about which indexes are used in a specific query
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理索引（多列和全文），并从MySQL获取关于特定查询中使用了哪些索引的反馈
- en: In the next chapter, we will learn how to export a table's structure and data
    for backup purposes, or to use as a gateway to another application.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何导出表的结构和数据以备份，或者用作连接到另一个应用程序的网关。
