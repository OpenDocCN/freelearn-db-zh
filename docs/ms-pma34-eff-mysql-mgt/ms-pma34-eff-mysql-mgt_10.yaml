- en: Chapter 10. Benefiting from the Relational System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。从关系系统中受益
- en: The relational system allows users to work more closely with phpMyAdmin, as
    we will see in the following chapters. This chapter explains how to define inter-table
    relations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 关系系统允许用户更密切地与phpMyAdmin合作，我们将在接下来的章节中看到。本章将解释如何定义表格之间的关系。
- en: Relational MySQL
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系型MySQL
- en: When application developers use PHP and MySQL to build web interfaces or other
    data manipulation applications, they usually establish relations between tables
    using the underlying SQL queries. Examples of this would be queries to "get an
    invoice and all its items" and "get all books by an author".
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序开发人员使用PHP和MySQL构建Web界面或其他数据操作应用程序时，他们通常使用底层SQL查询来建立表格之间的关系。例如，"获取发票及其所有项目"和"获取作者的所有书籍"等查询。
- en: In the earlier versions of phpMyAdmin, the relational data structure (how tables
    relate to each other) was not stored within MySQL. Tables were programmatically
    joined by the applications to generate meaningful results.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期版本的phpMyAdmin中，关系数据结构（表格之间的关系）并未存储在MySQL中。表格是通过应用程序进行程序化连接以生成有意义的结果的。
- en: This was considered a shortcoming of MySQL by phpMyAdmin developers and users.
    Therefore, the team started to build an infrastructure to support relations for
    `MyISAM` tables, which is now called the phpMyAdmin configuration storage. The
    infrastructure evolved to support a growing array of special features such as
    query bookmarks and MIME-based transformations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这被phpMyAdmin开发人员和用户认为是MySQL的一个缺点。因此，团队开始构建基础设施，以支持`MyISAM`表的关系，现在称为phpMyAdmin配置存储。这个基础设施发展到支持越来越多的特殊功能，如查询书签和基于MIME的转换。
- en: Now-a-days, relations between tables are normally defined natively with the
    `FOREIGN KEY` feature of the `InnoDB` and `PBXT` storage engines. phpMyAdmin supports
    both this type of relations and those defined for `MyISAM`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，表格之间的关系通常是使用`InnoDB`和`PBXT`存储引擎的`FOREIGN KEY`功能本地定义的。phpMyAdmin支持这种类型的关系以及为`MyISAM`定义的关系。
- en: InnoDB and PBXT
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InnoDB和PBXT
- en: '`InnoDB` ([http://www.innodb.com](http://www.innodb.com)) is a MySQL storage
    engine developed by Innobase Oy, a subsidiary of Oracle. Prior to MySQL 5.5, this
    storage engine may not be available as it must be activated by a system administrator;
    however, it''s the default storage engine in version 5.5.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`（[http://www.innodb.com](http://www.innodb.com)）是由Innobase Oy，Oracle的子公司开发的MySQL存储引擎。在MySQL
    5.5之前，这个存储引擎可能不可用，因为它必须由系统管理员激活；然而，在5.5版本中，它是默认的存储引擎。'
- en: The `PrimeBase XT` storage engine or PBXT ([http://www.primebase.org](http://www.primebase.org))
    is developed by PrimeBase Technologies. The minimum MySQL required version is
    5.1, as this version supports the pluggable storage engine API that is used by
    `PBXT` and other third parties to offer alternative storage engines. This transactional
    storage engine is newer than `InnoDB`. It is usually installed after downloading
    it from their website and then going through a compilation step. For some operating
    systems, a precompiled binary is available—please visit the aforementioned website
    for download and installation instructions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrimeBase XT`存储引擎或PBXT（[http://www.primebase.org](http://www.primebase.org)）是由PrimeBase
    Technologies开发的。最低要求的MySQL版本是5.1，因为这个版本支持可插拔存储引擎API，这个API被`PBXT`和其他第三方用来提供替代存储引擎。这个事务性存储引擎比`InnoDB`更新。通常在从他们的网站下载后进行编译步骤后安装。对于一些操作系统，也有预编译的二进制文件可用-请访问上述网站获取下载和安装说明。'
- en: 'When considering the relational aspect, here are the benefits of using the
    `InnoDB` or `PBXT` storage engine for a table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑关系方面，对于表格使用`InnoDB`或`PBXT`存储引擎的好处有：
- en: They support referential integrity based on foreign keys, which are the keys
    in a foreign (or reference) table. By contrast, using only phpMyAdmin's internal
    relations (discussed later) brings no automatic referential integrity verification.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它们支持基于外键的引用完整性，这些外键是外部（或引用）表中的键。相比之下，仅使用phpMyAdmin的内部关系（稍后讨论）不会带来自动的引用完整性验证。
- en: The exported structure for `InnoDB` and `PBXT` tables contains the defined relations.
    Therefore, they are easily imported back for better cross-server interoperability.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`和`PBXT`表的导出结构包含了定义的关系。因此，它们可以轻松地被重新导入，以实现更好的跨服务器互操作性。'
- en: The foreign key feature of these storage engines can effectively replace the
    part of phpMyAdmin's configuration storage that deals with relations. We will
    see how phpMyAdmin interfaces with the `InnoDB` and `PBXT` foreign key system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些存储引擎的外键功能可以有效地替代phpMyAdmin配置存储中处理关系的部分。我们将看到phpMyAdmin如何与`InnoDB`和`PBXT`外键系统进行交互。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The other parts of phpMyAdmin's configuration storage (for example, bookmarks)
    have no equivalent in `InnoDB, PBXT`, or MySQL. Hence, they are still required
    to access the complete phpMyAdmin feature set. However, in MySQL 5.x, views are
    supported, and have similarities with phpMyAdmin's bookmarks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin的其他部分配置存储（例如书签）在`InnoDB、PBXT`或MySQL中没有等价物。因此，仍然需要它们来访问完整的phpMyAdmin功能集。然而，在MySQL
    5.x中，支持视图，并且与phpMyAdmin的书签有相似之处。
- en: Defining relations with the relation view
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用关系视图定义关系
- en: After the installation of the phpMyAdmin configuration storage, there are more
    options available in the `Database` view and the `Table` view. We will now examine
    the **Relation view** link in the **Structure** page of the `Table` view.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装phpMyAdmin配置存储后，在`Database`视图和`Table`视图中有更多选项可用。我们现在将在`Table`视图的**Structure**页面中检查**Relation
    view**链接。
- en: '![Defining relations with the relation view](img/7782_10_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![使用关系视图定义关系](img/7782_10_01.jpg)'
- en: 'This view is used to:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图用于：
- en: Define the relations of the current table with the other tables
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义当前表格与其他表格的关系
- en: Choose the display column
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择显示列
- en: Our goal here is to create a relation between the `book` table (which contains
    the author ID) and the `author` table (which describes each author by an ID).
    We start on the `Table` view for the `book` table, go to **Structure**, and click
    on the **Relation view** link.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是在“book”表（包含作者ID）和“author”表（通过ID描述每个作者）之间创建关系。我们从“book”表的“表”视图开始，转到“结构”，然后点击“关系视图”链接。
- en: Defining internal relations
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义内部关系
- en: 'If the `book` table is in `MyISAM` format, we see the following screen (otherwise,
    the display would be different, as explained in the *Defining foreign key relations*
    section later):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果“book”表是以“MyISAM”格式，我们会看到以下屏幕（否则，显示会不同，如后面的“定义外键关系”部分所解释的）：
- en: '![Defining internal relations](img/7782_10_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![定义内部关系](img/7782_10_02.jpg)'
- en: This screen allows us to create **Internal relation** (stored in the `pma_relation`
    table) as MySQL itself does not have any relational notion for `MyISAM` tables.
    The empty drop-down list next to each column indicates that there are no relations
    (links) to any foreign table.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕允许我们创建“内部关系”（存储在“pma_relation”表中），因为MySQL本身对“MyISAM”表没有任何关系概念。每一列旁边的空下拉列表表示没有与任何外键表的关系（链接）。
- en: Defining the relation
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义关系
- en: We can relate each column of the `book` table to a column in another table (or
    in the same table because self-referencing relations are sometimes necessary).
    The interface finds both the unique and the non-unique keys in all the tables
    of the same database, and presents the keys in drop-down lists. (Creating internal
    relations to other databases from the interface is not currently supported.) The
    appropriate choice for the **author_id** column is to select the corresponding
    **id** column from the `author` table.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将“book”表的每一列与另一张表的列（或同一张表，因为自引用关系有时是必要的）相关联。界面会在同一数据库的所有表中找到唯一和非唯一键，并以下拉列表的形式呈现这些键。（目前不支持从界面创建到其他数据库的内部关系。）对于“author_id”列的适当选择是从“author”表中选择相应的“id”列。
- en: '![Defining the relation](img/7782_10_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![定义关系](img/7782_10_03.jpg)'
- en: We then click on **Save**, and the definition is saved in phpMyAdmin's configuration
    storage. To remove the relation, we would just come back to the screen, select
    the empty choice, and click on **Save**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击“保存”，定义将保存在phpMyAdmin的配置存储中。要删除关系，只需返回到屏幕，选择空选项，然后点击“保存”。
- en: Defining the display column
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义显示列
- en: The primary key of our `author` table is the `id`, which is a unique number
    that we made up for key purposes. The author's name is the natural way to refer
    to an author. It would be interesting to see the author's name when browsing the
    `book` table. This is the purpose of the display column. We should normally define
    a display column for each table that participates in a relation as a foreign table.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“author”表的主键是“id”，这是我们为主键目的而创造的唯一编号。作者的名字是自然指代作者的方式。在浏览“book”表时看到作者的名字会很有趣。这就是显示列的目的。我们通常应该为每个参与关系的表定义一个显示列，作为外键表。
- en: 'We will see how this information is displayed in the *Benefiting from the defined
    relations* section. We now go to the **Relation view** for the `author` table
    (which is the foreign table in this case) and specify the display column. We choose
    **name** as the display column and click on **Save**, as shown in the following
    screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在“从定义的关系中受益”部分看到这些信息是如何显示的。现在我们转到“author”表的“关系视图”（在这种情况下是外键表），并指定显示列。我们选择“name”作为显示列，然后点击“保存”，如下面的截图所示：
- en: '![Defining the display column](img/7782_10_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![定义显示列](img/7782_10_04.jpg)'
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: phpMyAdmin offers to define only one display column for a table, and this column
    is used in all the relations where this table is used as a foreign table.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin只提供为一张表定义一个显示列的选项，并且这一列在使用该表作为外键表的所有关系中都会使用。
- en: The definition of this relation is now done. Although we did not relate any
    of the columns in the `author` table to another table, it can be done. For example,
    we could have a country code in this table and could create a relation to the
    country code of a country table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个关系的定义已经完成。虽然我们没有将“author”表的任何列与另一张表相关联，但可以这样做。例如，我们可以在这个表中有一个国家代码，并且可以创建到国家表的国家代码的关系。
- en: For now, we will see what happens if our tables are under the control of the
    `InnoDB` or `PBXT` storage engine.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如果我们的表受到“InnoDB”或“PBXT”存储引擎的控制会发生什么。
- en: Foreign key relations
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外键关系
- en: The `InnoDB` and `PBXT` storage engines offer us a native foreign key system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “InnoDB”和“PBXT”存储引擎为我们提供了本地外键系统。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At your choice, the exercises in this section can be accomplished with either
    `InnoDB` or `PBXT` storage engines. `InnoDB` has been chosen in the text.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，可以选择使用“InnoDB”或“PBXT”存储引擎来完成练习。“InnoDB”已经在文本中选择。
- en: For this exercise, our `book` and `author` tables must be under the `InnoDB`
    storage engine. We can do this from the **Operations** page in the `Table` view.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们的“book”和“author”表必须使用“InnoDB”存储引擎。我们可以在“表”视图的“操作”页面中进行此操作。
- en: Another step is necessary in order to see the consequences of a missing index
    during the exercise. We go back to the **Structure** for the `book` table and
    remove the combined index we created on **author_id** and **language** columns.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在练习中，为了看到缺少索引的后果，需要采取另一步。我们回到“book”表的“结构”，移除我们在“author_id”和“language”列上创建的组合索引。
- en: The foreign key system in `InnoDB` maintains integrity between the related tables.
    Hence, we cannot add a non-existent author ID to the `book` table. In addition,
    actions are programmable when `DELETE` or `UPDATE` operations are performed on
    the master table (in our case, `book)`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “InnoDB”中的外键系统维护相关表之间的完整性。因此，我们无法向“book”表中添加不存在的作者ID。此外，在对主表执行“DELETE”或“UPDATE”操作时，可以编程执行操作（在我们的情况下是“book”）。
- en: 'Opening the `book` table on its **Structure** page and entering the **Relation
    view**, now displays a different page:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`book`表的**结构**页面并进入**关系视图**，现在显示了一个不同的页面：
- en: '![Foreign key relations](img/7782_10_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![外键关系](img/7782_10_05.jpg)'
- en: 'This page provides us the following information:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面为我们提供以下信息：
- en: There is an internal relation defined for **author_id** to the `author` table.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**author_id**到`author`表有一个内部关系定义。'
- en: No `InnoDB` relations are defined yet.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尚未定义任何`InnoDB`关系。
- en: 'We will be able to remove the internal relation, when the same relation has
    been defined in `InnoDB`. Indeed, hovering over the question mark next to **Internal
    relations** displays the following message: **An internal relation is not necessary
    when a corresponding FOREIGN KEY relation exists**. So, it will be better to remove
    it.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在`InnoDB`中定义了相同的关系时，我们将能够删除内部关系。实际上，悬停在**内部关系**旁边的问号上会显示以下消息：**当存在相应的FOREIGN
    KEY关系时，内部关系是不必要的**。因此，最好将其删除。
- en: In the possible choices for the related key, we see the keys defined in all
    the `InnoDB` tables of the same database. (Creating a cross-database relation
    is currently not supported in phpMyAdmin.) The keys defined in the current table
    are also shown, as self-referring relations are possible. Let us remove the internal
    relation for the **author_id** column and click on **Save**. Our goal is to add
    an `InnoDB-type` relation for the **author_id** column, but it's not possible
    as the **No index defined!** message appears on this line. This is because foreign
    key definitions in `InnoDB` or `PBXT` can be done only if both the columns have
    indexes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在相关键的可能选择中，我们可以看到同一数据库中所有`InnoDB`表中定义的键。 （当前不支持在phpMyAdmin中创建跨数据库关系。）当前表中定义的键也会显示，因为自引用关系是可能的。让我们删除**author_id**列的内部关系并单击**保存**。我们的目标是为**author_id**列添加一个`InnoDB类型`的关系，但是由于此行上出现了**未定义索引！**消息，这是不可能的。这是因为只有在两个列都有索引的情况下，才能在`InnoDB`或`PBXT`中定义外键。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Other conditions regarding constraints are explained in the MySQL manual. Please
    refer to [http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html](http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有关约束的其他条件在MySQL手册中有解释。请参考[http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html](http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html)。
- en: 'Thus, we come back to the **Structure** page for the `book` table and add an
    ordinary (non-unique) index to the **author_id** column producing the following
    screen:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们回到`book`表的**结构**页面，并为**author_id**列添加一个普通（非唯一）索引，产生以下屏幕：
- en: '![Foreign key relations](img/7782_10_06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![外键关系](img/7782_10_06.jpg)'
- en: In the **Relation view**, we can try again to add the relation we wanted; it
    works this time!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在**关系视图**中，我们可以再次尝试添加我们想要的关系；这次成功了！
- en: '![Foreign key relations](img/7782_10_07.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![外键关系](img/7782_10_07.jpg)'
- en: We can also set some actions with the **ON DELETE** and **ON UPDATE** options.
    For example, **ON DELETE CASCADE** would make MySQL automatically delete all the
    rows in the related (foreign) table when the corresponding row is deleted from
    the parent table. This would be useful, for example, when the parent table is
    `invoices`, and the foreign table is `invoice‑items`. These options are supported
    natively by MySQL, so deleting outside of phpMyAdmin would cause the delete cascade.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用**ON DELETE**和**ON UPDATE**选项设置一些操作。例如，**ON DELETE CASCADE**会使MySQL在从父表中删除相应行时自动删除相关（外键）表中的所有行。例如，当父表是`invoices`，而外键表是`invoice‑items`时，这将非常有用。这些选项是MySQL本身支持的，因此在phpMyAdmin之外进行删除会导致级联删除。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we have not done so already, we should define the display column for the
    `author` table, as explained in the *Defining the display column* section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尚未这样做，应该按照“定义显示列”部分的说明为`author`表定义显示列。
- en: Foreign keys without phpMyAdmin configuration storage
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有phpMyAdmin配置存储的外键
- en: We see the **Relation view** link on the **Structure** page of an `InnoDB` or
    `PBXT` table, even when the configuration storage is not installed. This would
    bring us to a screen where we could define the foreign keys, in this case for
    the `book` table.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 即使未安装配置存储，我们在`InnoDB`或`PBXT`表的**结构**页面上也可以看到**关系视图**链接。这会带我们到一个屏幕，我们可以在这里定义外键，例如`book`表。
- en: Note that, if we choose this, the display column for the linked table (in this
    case `author)` cannot be defined, as it belongs to phpMyAdmin's configuration
    storage. Thus, we would lose the benefit of seeing the associated description
    of the foreign key.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果选择此选项，无法定义所链接表（在本例中为`author`）的显示列，因为它属于phpMyAdmin的配置存储。因此，我们将失去查看外键相关描述的好处。
- en: Defining relations with the Designer
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设计师定义关系
- en: 'The Ajax-based **Designer** offers a visually-driven way of managing relations
    (both internal and foreign key-based), and defining the display column for each
    table. It can also act as:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Ajax的**设计师**提供了一种以视觉方式管理关系（内部和基于外键的），并为每个表定义显示列的方法。它还可以充当：
- en: A menu to access the structure of existing tables and to access the table creation
    page
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问现有表结构和访问表创建页面的菜单
- en: A PDF schema manager, if we want a PDF schema encompassing all our tables
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们想要一个包含所有表的PDF模式管理器
- en: On the **Designer** workspace, we can work on the relations for all tables on
    the same panel. On the other hand, the **Relation view** shows the relations for
    only a single table at a time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在**设计师**工作区，我们可以在同一面板上处理所有表的关系。另一方面，**关系视图**只显示单个表的关系。
- en: We access this feature from the `Database` view by clicking on the **Designer**
    menu tab.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过单击**设计师**菜单选项从`数据库`视图访问此功能。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If this menu tab does not appear, it's because we are yet to install the phpMyAdmin
    configuration storage as described in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with phpMyAdmin").
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此菜单选项未出现，则是因为我们尚未按照[第1章](ch01.html "第1章。使用phpMyAdmin入门")中描述的方式安装phpMyAdmin配置存储。
- en: Over viewing the interface
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看界面
- en: 'The **Designer** page contains the main workspace where the tables can be seen.
    This workspace will dynamically grow and shrink, depending on the position of
    our tables. The following screenshot demonstrates the **Designer** interface containing
    our three tables and the relations between them:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计师**页面包含主工作区，可以在其中看到表。该工作区将根据我们的表的位置动态增长和缩小。以下截图展示了包含我们的三个表及其之间关系的**设计师**界面：'
- en: '![Over viewing the interface](img/7782_10_08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![查看界面](img/7782_10_08.jpg)'
- en: 'A top menu contains icons whose description is revealed by hovering the mouse
    over them. The following table gives a summary of the goals for the top menu''s
    icons:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部菜单包含图标，将鼠标悬停在上面可以显示其描述。以下表格总结了顶部菜单图标的目标：
- en: '| Icon | Description |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 图标 | 描述 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Show/Hide left menu** | To display or hide the left hand menu. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **显示/隐藏左侧菜单** | 显示或隐藏左侧菜单。 |'
- en: '| **Save position** | Saves the current state of the workspace. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **保存位置** | 保存工作区的当前状态。 |'
- en: '| **Create table** | Quits the **Designer** and enters a dialog to create a
    table; we should take care of saving the position of tables before clicking on
    this. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| **创建表** | 退出**设计师**并进入对话框以创建表；在单击此按钮之前，我们应该注意保存表的位置。'
- en: '| **Create relation** | Puts the **Designer** in a relation-creating mode.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **创建关系** | 将**设计师**置于创建关系的模式中。 |'
- en: '| **Choose column to display** | Specifies which column represents a table.
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| **选择要显示的列** | 指定哪一列代表一个表。 |'
- en: '| **Reload** | Refreshes the table''s information in case their structure has
    changed outside of the **Designer**. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| **重新加载** | 在**设计师**之外表的结构发生变化时，刷新表的信息。 |'
- en: '| **Help** | Displays an explanation about selecting the relations. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| **帮助** | 显示有关选择关系的解释。 |'
- en: '| **Angular links/Direct links** | Specifies the shape of relation links. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **Angular链接/直接链接** | 指定关系链接的形状。 |'
- en: '| **Snap to grid** | Influences the behavior of table movements, relative to
    an imaginary grid. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **吸附到网格** | 影响相对于想象网格的表移动行为。 |'
- en: '| **Small/Big All** | Hides or displays the list of columns for every table.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **小/大全部** | 隐藏或显示每个表的列列表。 |'
- en: '| **Toggle small/big** | Reverses the display mode of columns for every table,
    as this mode can be chosen for each table with its corner icon **V** or**>**.
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **切换小/大** | 反转每个表的列显示模式，因为可以使用其角标图标**V**或**>**为每个表选择此模式。 |'
- en: '| **Import/Export** | Displays a dialog to import from an existing PDF schema
    definition or to export to it. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **导入/导出** | 显示一个对话框，以从现有的PDF模式定义中导入或导出。 |'
- en: '| **Move Menu** | The top menu can move to right and back again. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **移动菜单** | 顶部菜单可以向右移动，然后再次返回。 |'
- en: 'A side menu appears when clicking on the **Show/Hide left menu** icon. Its
    purpose is to present the complete list of tables, so that you can decide which
    table appears on the workspace, and to enable access to the **Structure** page
    of a specific table. In this example, we choose to remove the **book-copy** table
    from the workspace as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**显示/隐藏左侧菜单**图标时，会出现一个侧边菜单。其目的是呈现完整的表列表，以便您可以决定哪个表出现在工作区，并启用访问特定表的**结构**页面。在这个例子中，我们选择从工作区中移除**book-copy**表，如下截图所示：
- en: '![Over viewing the interface](img/7782_10_09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![查看界面](img/7782_10_09.jpg)'
- en: If we want to remove it permanently, we click on the **Save position** top icon.
    This icon also saves the current position of our tables on the workspace.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想永久删除它，我们点击**保存位置**顶部图标。该图标还会保存我们的表在工作区上的当前位置。
- en: Tables can be moved on the workspace by dragging their title bars, and the list
    of columns for a table can be made visible/invisible with the help of upper-left
    icon of each table. In this list of columns, small icons show us the data type
    (numeric, text, and date), and also tell us whether this column is a primary key.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表可以通过拖动它们的标题栏在工作区上移动，并且可以通过每个表的左上角图标来显示/隐藏表的列列表。在这个列列表中，小图标显示数据类型（数字、文本和日期），并告诉我们这一列是否是主键。
- en: Defining relations
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义关系
- en: As we have already defined a relation with the **Relation view**, we will first
    see how to remove it. The **Designer** does not permit a change in a relation.
    However, the **Designer** allows the relation to be removed and defined.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经使用**关系视图**定义了一个关系，我们首先看看如何删除它。**设计师**不允许更改关系。但是，**设计师**允许删除和定义关系。
- en: The question mark icon displays a panel that explains where to click, in order
    to select a relation for subsequent deletion.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 问号图标显示一个面板，解释了在哪里点击，以便选择要删除的关系。
- en: '![Defining relations](img/7782_10_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![定义关系](img/7782_10_10.jpg)'
- en: Let us click on the relation line to select it. We get a confirmation panel
    on which we click on **Delete**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 单击关系线以选择它。我们会得到一个确认面板，在上面单击**删除**。
- en: '![Defining relations](img/7782_10_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![定义关系](img/7782_10_11.jpg)'
- en: 'We can then proceed to recreate it. To do this, we start by clicking on the
    **Create relation** icon:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以继续重新创建它。要做到这一点，我们首先点击**创建关系**图标：
- en: '![Defining relations](img/7782_10_12.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![定义关系](img/7782_10_12.jpg)'
- en: The cursor then takes the form of a short message saying **Select referenced
    key**. In our case, the referenced key is the **id** column of the **author**
    table; so we bring the cursor on this column and click on it. A validation is
    done, ensuring that we chose a primary or unique key.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，光标变成一个短消息，上面写着**选择引用键**。在我们的情况下，引用键是**author**表的**id**列；所以我们把光标放在这个列上并点击它。进行验证，确保我们选择了一个主键或唯一键。
- en: Next, having changed the cursor to **Select foreign key**, we bring it to the
    `author_id` column of the `book` table and click on it again. This confirms the
    creation of the relation. Currently, the interface does not permit the creation
    of compound keys (having more than one column).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将光标更改为**选择外键**，将其移动到`book`表的`author_id`列上，然后再次点击。这确认了关系的创建。目前，界面不允许创建复合键（具有多个列）。
- en: Defining foreign key relations
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义外键关系
- en: The procedure to delete or define a relation between `InnoDB` or `PBXT` tables
    is the same as that for internal relations. The only exception is that at the
    time of creation, a different confirmation panel appears enabling us to specify
    the `on delete` and `on update` actions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 删除或定义`InnoDB`或`PBXT`表之间的关系的过程与内部关系相同。唯一的例外是，在创建时，会出现一个不同的确认面板，使我们能够指定`on delete`和`on
    update`操作。
- en: '![Defining foreign key relations](img/7782_10_13.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![定义外键关系](img/7782_10_13.jpg)'
- en: Defining the display column
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义显示列
- en: On the workspace, the `name` column in `author` table has a special background
    color. This indicates that this column serves as the display column. We can simply
    click on the **Choose column to display** icon, and drag the short message **Choose
    column to display** onto another column—for example, the `phone` column. This
    changes the display column to this column. If we were to drag the message to an
    existing display column, we would have removed the definition of this column as
    the display column for the table.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作空间中，`author`表中的`name`列具有特殊的背景颜色。这表示该列作为显示列。我们只需点击**选择要显示的列**图标，然后将短消息**选择要显示的列**拖到另一列上，例如`phone`列。这将更改显示列为该列。如果我们将消息拖到现有的显示列上，我们将删除该列作为表的显示列的定义。
- en: Exporting for PDF schema
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出PDF模式
- en: In Chapter 15, we will see how to produce a PDF schema for a subset of our database.
    We can import the coordinates of tables from such a schema into the **Designer's**
    workspace, and conversely export them to the PDF schema. The **Import/export coordinates**
    icon is available for that purpose.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第15章中，我们将看到如何为数据库的子集生成PDF模式。我们可以将这样一个模式的表坐标导入到**设计师**的工作空间中，反之亦然，将它们导出到PDF模式。**导入/导出坐标**图标可用于此目的。
- en: Benefiting from the defined relations
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受益于定义的关系
- en: In this section, we will look at the benefits of the defined relations that
    we can currently test. Other benefits will be described in [Chapter 12](ch12.html
    "Chapter 12. Generating Multi-table Queries") and [Chapter 15](ch15.html "Chapter 15. Documenting
    the System"). Additional benefits of the phpMyAdmin configuration storage will
    appear in [Chapter 14](ch14.html "Chapter 14. Using Query Bookmarks"), [Chapter
    16](ch16.html "Chapter 16. Transforming Data using MIME"), and [Chapter 18](ch18.html
    "Chapter 18. Tracking Changes").
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到我们目前可以测试的定义关系的好处。其他好处将在[第12章](ch12.html "第12章。生成多表查询")和[第15章](ch15.html
    "第15章。系统文档化")中描述。phpMyAdmin配置存储的其他好处将在[第14章](ch14.html "第14章。使用查询书签")、[第16章](ch16.html
    "第16章。使用MIME转换数据")和[第18章](ch18.html "第18章。跟踪变更")中出现。
- en: These benefits are available for both internal and foreign key relations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些好处适用于内部和外键关系。
- en: Foreign key information
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外键信息
- en: Let us browse the `book` table. We see that the values of the related key **(author_id)**
    are now links. Moving the cursor over any **author_id** value reveals the author's
    name (as defined by the display column of the `author` table).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览`book`表。我们看到相关键**（author_id）**的值现在是链接。将光标移动到任何**author_id**值上会显示作者的名字（由`author`表的显示列定义）。
- en: '![Foreign key information](img/7782_10_14.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![外键信息](img/7782_10_14.jpg)'
- en: 'Clicking on the **author_id** brings us to the relevant table `—author—`for
    this specific author:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**author_id**会带我们到相关的`—author—`表，针对特定的作者：
- en: '![Foreign key information](img/7782_10_15.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![外键信息](img/7782_10_15.jpg)'
- en: 'Instead of viewing the keys, we might prefer to see the display column for
    all the rows. Going back to the `book` table, we can select the **Relational display
    column** display option and click on **Go**. This produces a screen similar to
    the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能更喜欢看到所有行的显示列而不是查看键。返回到`book`表，我们可以选择**关系显示列**显示选项并点击**Go**。这会产生一个类似以下截图的屏幕：
- en: '![Foreign key information](img/7782_10_16.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![外键信息](img/7782_10_16.jpg)'
- en: We now switch back to viewing the keys by selecting **Relational key** and clicking
    on **Go**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过选择**关系键**并点击**Go**来切换回查看键。
- en: The drop-down list of foreign keys
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外键的下拉列表
- en: Displaying the `book` table, in **Insert** mode (or in **Edit** mode), there
    is now a drop-down list of the possible keys for each column that has a defined
    relation. The list contains the keys and the description (display column) in both
    orders—key to the display column as well as display column to the key. This enables
    us to use the keyboard and type the first letter of either the key or the display
    column.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在**插入**模式（或**编辑**模式）下显示`book`表，现在每个具有定义关系的列都有可能键的下拉列表。列表包含键和描述（显示列）的两种顺序——键到显示列以及显示列到键。这使我们可以使用键盘输入键或显示列的第一个字母。
- en: '![The drop-down list of foreign keys](img/7782_10_17.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![外键的下拉列表](img/7782_10_17.jpg)'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Only the key (in this case **1)** will be stored in the `book` table. The display
    column is shown only to assist us.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 只有键（在这种情况下为**1**）将存储在`book`表中。显示列仅用于辅助我们。
- en: 'By default, this drop-down list will appear if there are a maximum of 100 rows
    in the foreign table. This is controlled by the following parameter:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果外部表中最多有100行，则会出现此下拉列表。这由以下参数控制：
- en: '[PRE0]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For foreign tables bigger than that, a distinct window appears—the foreign-table
    window (refer to the next section) that can be browsed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于比这更大的外部表，会出现一个不同的窗口——外部表窗口（参见下一节），可以进行浏览。
- en: 'We might prefer to see information differently in the drop-down list. Here,
    **John Smith** is the content and **1** is the ID. The default display is controlled
    by the following line of code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望以不同的方式查看下拉列表中的信息。这里，**John Smith**是内容，**1**是ID。默认显示由以下代码控制：
- en: '[PRE1]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can use one or both of the strings`—content-id` and `id-content—in` the
    defining array and in the order we prefer. Thus, defining `$cfg[''ForeignKeyDropdownOrder'']`
    to `array(''id-content'')` would produce a list with only those choices:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在定义数组中使用`—content-id`和`id-content—`中的一个或两个字符串，并按照我们喜欢的顺序。因此，将`$cfg['ForeignKeyDropdownOrder']`定义为`array('id-content')`将产生一个只有这些选择的列表：
- en: '[PRE2]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The browseable foreign-table window
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可浏览的外键表窗口
- en: Our current `author` table has very few entries. Thus, to illustrate this mechanism,
    we will set the `$cfg['ForeignKeyMaxLimit']` to an artificially low number, 1\.
    Now in the **Insert** mode for the `book` table, we see a small table-shaped icon
    and a **Browse foreign values** link for **author_id** column. This icon opens
    another window, which will present the values of the `author` table and a **Search**
    input field. On the left, the values are sorted by key value (here, the **id**
    column), and on the right, they are sorted by description.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的`author`表中只有很少的条目。因此，为了说明这个机制，我们将把`$cfg['ForeignKeyMaxLimit']`设置为一个人为的低数，1。现在在`book`表的**插入**模式中，我们看到一个小表形状的图标和**浏览外键值**链接，用于**author_id**列。这个图标打开另一个窗口，其中会显示`author`表的值和一个**搜索**输入框。左边的值按键值排序（这里是**id**列），右边的值按描述排序。
- en: '![The browseable foreign-table window](img/7782_10_18.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![可浏览的外键表窗口](img/7782_10_18.jpg)'
- en: Choosing one of the values (by clicking either a key value or a description)
    closes this window and brings the value back to the **author_id** column.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个值（通过点击键值或描述）会关闭这个窗口，并将值带回**author_id**列。
- en: Referential integrity checks
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用完整性检查
- en: We discussed the **Operations** page and its **Table maintenance** section in
    Chapter 9\. For this exercise, we suppose that both the `book` and `author` tables
    are not under the control of the `InnoDB` or `PBXT` storage engine. If we have
    defined an internal relation for the `author` table, a new choice appears for
    the `book` table—**Check referential integrity**.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第9章中讨论了**操作**页面及其**表维护**部分。在这个练习中，我们假设`book`和`author`表都不受`InnoDB`或`PBXT`存储引擎的控制。如果我们为`author`表定义了内部关系，那么`book`表会出现一个新的选项——**检查引用完整性**。
- en: '![Referential integrity checks](img/7782_10_19.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![引用完整性检查](img/7782_10_19.jpg)'
- en: A link **(author_id -> author.id)** appears for each defined relation, and clicking
    on it starts verification. For each row, the presence of the corresponding key
    in the foreign table is verified and errors, if any, are reported. If the resulting
    page reports zero rows, it is good news!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个定义的关系都会出现一个链接**(author_id -> author.id)**，点击它会开始验证。对于每一行，会验证外键表中相应键的存在性，并报告任何错误。如果结果页面报告零行，那就是好消息！
- en: This operation exists because for tables under the storage engines that do not
    support foreign key natively, neither MySQL nor phpMyAdmin enforces referential
    integrity. It is perfectly possible, for example, to insert data in the `book`
    table with invalid values for **author_id** column.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作存在是因为对于不支持外键的存储引擎下的表，无论是MySQL还是phpMyAdmin都不会强制执行引用完整性。例如，可以在`book`表中插入无效的**author_id**列的数据。
- en: Automatic updates of metadata
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元数据的自动更新
- en: phpMyAdmin keeps the metadata for internal relations synchronized with every
    change that is made to the tables via phpMyAdmin. For example, renaming a column
    that is part of a relation would make phpMyAdmin rename this column in the metadata
    for the relation. This guarantees that an internal relation continues to function,
    even after a column's name is changed. The same thing happens when a column or
    table is dropped.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin通过在每次通过phpMyAdmin对表进行更改时，保持内部关系的元数据同步。例如，重命名作为关系一部分的列会使phpMyAdmin在关系的元数据中重命名此列。这保证了内部关系在列名更改后仍然能够正常工作。当删除列或表时也会发生同样的情况。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Metadata should be maintained manually in case a change in the structure is
    done from outside phpMyAdmin.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从phpMyAdmin外部对结构进行更改，元数据应该手动维护。
- en: Column commenting
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列评论
- en: Prior to MySQL 4.1, the MySQL structure itself did not support the addition
    of comments to a column. Nevertheless, thanks to phpMyAdmin's metadata, we could
    comment on columns. However, since MySQL 4.1, native column commenting has been
    supported. The good news is that for any MySQL version, column commenting in phpMyAdmin
    is always accessed via the **Structure** page by editing the structure of each
    column. In the following example, we need to comment on three columns of the `book`
    table. Hence, we choose them and click on the pencil icon near the **With selected**
    choice.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 4.1之前，MySQL结构本身不支持对列添加注释。然而，由于phpMyAdmin的元数据，我们可以对列进行注释。然而，自MySQL 4.1以来，原生列注释得到了支持。好消息是，对于任何MySQL版本，phpMyAdmin中的列注释始终通过**结构**页面访问，通过编辑每个列的结构。在下面的例子中，我们需要对`book`表的三列进行注释。因此，我们选择它们，然后点击**With
    selected**旁边的铅笔图标。
- en: '![Column commenting](img/7782_10_20.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![列评论](img/7782_10_20.jpg)'
- en: To obtain the next panel, as seen here, we are working in vertical mode. This
    mode was covered in [Chapter 5](ch05.html "Chapter 5. Changing Data and Structure").
    We enter the comments as shown in the following screenshot, and then click on
    **Save:**
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得下一个面板，如图所示，我们正在垂直模式下工作。这种模式在[第5章](ch05.html "第5章。更改数据和结构")中有介绍。我们按照下面的截图输入注释，然后点击**保存**：
- en: '![Column commenting](img/7782_10_21.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![列评论](img/7782_10_21.jpg)'
- en: 'These comments appear at various places, for example, in the export file (refer
    to [Chapter 6)](ch06.html "Chapter 6. Exporting Structure and Data (Backup)"),
    on the PDF relational schema (refer to [Chapter 15)](ch15.html "Chapter 15. Documenting
    the System"), and in browse mode, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释会出现在各个地方，例如导出文件（参见[第6章](ch06.html "第6章。导出结构和数据（备份）")），PDF关系模式（参见[第15章](ch15.html
    "第15章。系统文档化")），以及浏览模式，如下面的截图所示：
- en: '![Column commenting](img/7782_10_22.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![列评论](img/7782_10_22.jpg)'
- en: If we do not want the comments to appear in browse mode, we can set `$cfg['ShowBrowseComments']`
    to `FALSE`. (It is `TRUE` by default.)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不希望注释出现在浏览模式中，我们可以将`$cfg['ShowBrowseComments']`设置为`FALSE`。（默认为`TRUE`。）
- en: Column comments also appear as a tool tip in the **Structure** page, and column
    names are underlined with dashes. To deactivate this behavior, we can set `$cfg['ShowPropertyComments']`
    to `FALSE`. (This one is also `TRUE` by default.)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 列注释也会出现在**结构**页面的工具提示中，列名下划线为虚线。要停用此行为，我们可以将`$cfg['ShowPropertyComments']`设置为`FALSE`。（这个也是默认为`TRUE`。）
- en: Automatically migrating column comments
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动迁移列注释
- en: Whenever phpMyAdmin detects that column comments have been stored in its metadata,
    it automatically migrates these column comments to the native MySQL column comments.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 每当phpMyAdmin检测到列注释存储在其元数据中时，它会自动将这些列注释迁移到本机MySQL列注释中。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered how to define relations between both `InnoDB` and non-InnoDB
    tables. It also examined the modified behavior of phpMyAdmin (when relations are
    present) and foreign keys. Finally, it covered the **Designer** feature, column
    commenting, and how to obtain information from the table.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何定义`InnoDB`和非InnoDB表之间的关系。它还检查了phpMyAdmin的修改行为（当存在关系时）和外键。最后，它涵盖了**设计者**功能，列注释以及如何从表中获取信息。
- en: The next chapter will cover the means of entering SQL commands, which are useful
    when the phpMyAdmin's interface is not sufficient to accomplish what we need.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍输入SQL命令的方法，当phpMyAdmin的界面不足以完成我们需要的操作时，这些命令非常有用。
