- en: Chapter 11. Entering SQL Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。输入SQL语句
- en: This chapter explains how we can enter our own SQL statements (queries) into
    phpMyAdmin, and how we can keep a history of those queries. Traditionally, one
    would interact with a MySQL server via the "mysql" command-line client by entering
    SQL statements and watching the server's response. Official MySQL training still
    involves directly typing statements to such a client.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了我们如何在phpMyAdmin中输入自己的SQL语句（查询），以及如何保留这些查询的历史记录。传统上，人们会通过“mysql”命令行客户端与MySQL服务器交互，输入SQL语句并观察服务器的响应。官方的MySQL培训仍然涉及直接向这样的客户端输入语句。
- en: The SQL query box
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL查询框
- en: 'phpMyAdmin allows us to accomplish many database operations via its graphical
    interface. However, there will be times when we have to rely on SQL query input
    to achieve operations that are not directly supported by the interface. Following
    are two examples of such queries:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin允许我们通过其图形界面执行许多数据库操作。然而，有时我们必须依靠SQL查询输入来实现界面不直接支持的操作。以下是两个这样的查询示例：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To enter such queries, the SQL query box is available from a number of places
    within phpMyAdmin.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要输入这样的查询，可以从phpMyAdmin中的多个位置使用SQL查询框。
- en: The Database view
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库视图
- en: We encounter our first SQL query box when going to the **SQL** menu available
    in the `Database` view.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当进入“数据库”视图中的“SQL”菜单时，我们会遇到第一个SQL查询框。
- en: '![The Database view](img/7782_11_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![数据库视图](img/7782_11_01.jpg)'
- en: This box is simple—we type in some valid (hopefully) MySQL statement and click
    on **Go**. Under the query text area, there are bookmark-related choices (explained
    later in [Chapter 14)](ch14.html "Chapter 14. Using Query Bookmarks"). Usually,
    we don't have to change the standard SQL delimiter, which is a semicolon. However,
    there is a **Delimiter** dialog in case we need it (refer to [Chapter 17)](ch17.html
    "Chapter 17. Supporting Features Added in MySQL 5").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框很简单——我们输入一些有效（希望如此）的MySQL语句，然后点击**Go**。在查询文本区域下方，有与书签相关的选择（稍后在[第14章](ch14.html
    "第14章。使用查询书签")中解释）。通常，我们不必更改标准的SQL分隔符，即分号。但是，如果需要，有一个**分隔符**对话框（参见[第17章](ch17.html
    "第17章。MySQL 5中添加的支持功能")）。
- en: For a default query to appear in this box, we can set it with the `$cfg['DefaultQueryDatabase']`
    configuration directive, which is empty by default. We could put a query such
    as `SHOW TABLES FROM @DATABASE@` in this directive. The `@DATABASE@` placeholder
    in this query would be replaced by the current database name, resulting in `SHOW
    TABLES FROM `marc_book`` in the query box.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要在此框中显示默认查询，我们可以使用`$cfg['DefaultQueryDatabase']`配置指令进行设置，默认情况下为空。我们可以在这个指令中放置一个查询，比如`SHOW
    TABLES FROM @DATABASE@`。这个查询中的`@DATABASE@`占位符将被当前数据库名替换，结果就是在查询框中显示`SHOW TABLES
    FROM `marc_book``。
- en: The Table view
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表视图
- en: A slightly different box is available in the `Table` view of the `book` table
    from the **SQL** menu.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在“表”视图的`book`表中，“SQL”菜单中有一个略有不同的框。
- en: '![The Table view](img/7782_11_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![表视图](img/7782_11_02.jpg)'
- en: 'The box already has a default query as seen in the previous screenshot. This
    default query is generated from the `$cfg[''DefaultQueryTable'']` configuration
    directive, which contains `SELECT * FROM @TABLE@ WHERE 1`. Here, the `@TABLE@`
    is replaced by the current table name. Another placeholder available in `$cfg[''DefaultQueryTable'']`
    is `@FIELDS@`. This placeholder would be replaced by the complete column''s list
    of this table, thus producing the following query:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该框已经有一个默认查询，如前一个截图所示。这个默认查询是从`$cfg['DefaultQueryTable']`配置指令生成的，其中包含`SELECT
    * FROM @TABLE@ WHERE 1`。这里，`@TABLE@`会被当前表名替换。`$cfg['DefaultQueryTable']`中的另一个占位符是`@FIELDS@`。这个占位符将被该表的完整列列表替换，从而生成以下查询：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`WHERE 1` is a condition that is always true. Therefore, the query can be executed
    as it is. We can replace **1** with the condition we want, or we can type a completely
    different query.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`WHERE 1`是一个始终为真的条件。因此，查询可以按原样执行。我们可以用我们想要的条件替换**1**，或者我们可以输入一个完全不同的查询。'
- en: Because this SQL box appears in the `Table` view, the table name is known; therefore,
    phpMyAdmin shows buttons below the query box, which permit to quickly create common
    SQL queries which contain this table name. Most of the queries generated by these
    buttons contain the full column list.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个SQL框出现在“表”视图中，表名是已知的；因此，phpMyAdmin在查询框下方显示按钮，允许快速创建包含该表名的常见SQL查询。这些按钮生成的大多数查询包含完整的列列表。
- en: The Columns selector
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列选择器
- en: 'The **Columns** selector is a way to speed up query generation. By choosing
    a column and clicking on the arrows**<<**, this column name is copied at the current
    cursor position in the query box. Here, we select the **author_id** column, remove
    the digit **1**, and click on**<<**. Then we add the condition **= 2** as shown
    in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “列”选择器是加快查询生成的一种方式。通过选择一个列并点击箭头**<<**，这个列名就会被复制到查询框中当前的光标位置。在这里，我们选择**author_id**列，删除数字**1**，然后点击**<<**。然后我们添加条件**=
    2**，如下截图所示：
- en: '![The Columns selector](img/7782_11_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![列选择器](img/7782_11_03.jpg)'
- en: The **Show this query here again** option (checked by default) ensures that
    the query stays in the box after its execution if we are still on the same page.
    This can be seen more easily for a query like an `UPDATE` or `DELETE`, which affects
    a table, but does not produce a separate results page.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “再次显示此查询”选项（默认选中）确保查询在执行后仍然保留在框中，如果我们仍然在同一页上。这对于像`UPDATE`或`DELETE`这样影响表但不产生单独结果页面的查询更容易看到。
- en: Clicking into the query box
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 点击查询框
- en: We might want to change the behavior of a click inside the query box with the
    `$cfg['TextareaAutoSelect']` configuration directive. Its default value is `FALSE`,
    which means that no automatic selection of the contents is done upon a click.
    Should you change this directive to `TRUE`, the first click inside this box will
    select all its contents. (This is a way to quickly copy the contents elsewhere
    or delete them from the box.) The next click would put the cursor at the click
    position.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要通过`$cfg['TextareaAutoSelect']`配置指令来改变在查询框内点击的行为。它的默认值是`FALSE`，这意味着点击时不会自动选择内容。如果将这个指令更改为`TRUE`，那么第一次点击这个框将选择它的所有内容。（这是一种快速将内容复制到其他地方或从框中删除的方法。）下一次点击将把光标放在点击位置。
- en: The Query window
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询窗口
- en: 'In [Chapter 3](ch03.html "Chapter 3. Over Viewing the Interface"), we discussed
    the purpose of this window, and the procedure for changing some parameters (such
    as dimensions). This window can easily be opened from the navigation panel using
    the **SQL** icon or the **Query window** link, as shown in the following screenshot,
    and is very convenient for entering a query and testing it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。查看界面概述")中，我们讨论了这个窗口的目的，以及更改一些参数（如尺寸）的过程。这个窗口可以很容易地从导航面板中使用**SQL**图标或**查询窗口**链接打开，如下面的屏幕截图所示，非常方便用于输入查询和测试：
- en: '![The Query window](img/7782_11_04.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![查询窗口](img/7782_11_04.jpg)'
- en: 'The following screenshot shows the Query window that appears over the main
    panel:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了出现在主面板上的查询窗口：
- en: '![The Query window](img/7782_11_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![查询窗口](img/7782_11_05.jpg)'
- en: The window seen in the screenshot contains the same **Columns** selector and**<<**
    button as that used in a `Table` view context. This distinct Query window is a
    feature supported only on JavaScript-enabled browsers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕截图中的窗口包含与`表`视图上下文中使用的相同的**列**选择器和**<<**按钮。这个独特的查询窗口只支持启用了JavaScript的浏览器。
- en: Query window options
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询窗口选项
- en: The **SQL** tab is the default active tab in this window. This comes from the
    configuration directive `$cfg['QueryWindowDefTab']`, which contains `sql` by default.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL**选项卡是这个窗口中默认的活动选项卡。这来自于配置指令`$cfg[''QueryWindowDefTab'']`，默认包含`sql`。'
- en: If we want another tab to be the default active tab, we can replace `sql` with
    `files` or `history`. Another value, `full`, shows the contents of all the three
    tabs at once.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要另一个选项卡成为默认活动选项卡，我们可以用`files`或`history`替换`sql`。另一个值`full`一次显示所有三个选项卡的内容。
- en: In the Query window, we see a checkbox for the **Do not overwrite this query
    from outside the window** choice. Normally, this checkbox is selected. If we deselect
    it, the changes we make while generating queries are reflected in the Query window.
    This is called **synchronization**. For example, choosing a different database
    or table from the navigation or main panel would update the Query window accordingly.
    However, if we start to type a query directly in this window, the checkbox will
    get checked in order to protect its contents and remove synchronization. This
    way, the query composed here will be locked and protected.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询窗口中，我们可以看到一个**不要从窗口外部覆盖此查询**选择的复选框。通常情况下，这个复选框是选中的。如果我们取消选中它，那么我们在生成查询时所做的更改将反映在查询窗口中。这被称为**同步**。例如，从导航或主面板中选择不同的数据库或表会相应地更新查询窗口。然而，如果我们直接在这个窗口中开始输入查询，复选框将被选中以保护其内容并取消同步。这样，这里组成的查询将被锁定和保护。
- en: Session-based SQL history
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于会话的SQL历史记录
- en: This feature collects all the successful SQL queries we execute as PHP session
    data, and modifies the Query window to make them available. This default type
    of history is temporary, as `$cfg['QueryHistoryDB']` is set to `FALSE` by default.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能将我们作为PHP会话数据执行的所有成功的SQL查询收集起来，并修改查询窗口以使它们可用。这种默认类型的历史记录是临时的，因为`$cfg['QueryHistoryDB']`默认设置为`FALSE`。
- en: Database-based SQL history (permanent)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于数据库的SQL历史记录（永久）
- en: As we installed the phpMyAdmin configuration storage (refer to [Chapter 1)](ch01.html
    "Chapter 1. Getting Started with phpMyAdmin"), a more powerful history mechanism
    is available. We should now enable this mechanism by setting `$cfg['QueryHistoryDB']`
    to `TRUE`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装了phpMyAdmin配置存储（参见[第1章](ch01.html "第1章。使用phpMyAdmin入门")）时，就可以使用更强大的历史记录机制。我们现在应该通过将`$cfg['QueryHistoryDB']`设置为`TRUE`来启用这个机制。
- en: 'After we try some queries from one of the query boxes, a history is built,
    visible only from the Query window as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从查询框中尝试一些查询之后，一个历史记录就会建立起来，只有从查询窗口中才能看到，如下面的屏幕截图所示：
- en: '![Database-based SQL history (permanent)](img/7782_11_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![基于数据库的SQL历史记录（永久）](img/7782_11_06.jpg)'
- en: We see (in the reverse order) the last successful queries and the database on
    which they were made. Queries typed only from the query box are kept in this history,
    along with queries generated by phpMyAdmin (such as those generated by clicking
    on **Browse)**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到（按相反顺序）最后成功的查询和它们所在的数据库。只有从查询框中输入的查询以及phpMyAdmin生成的查询（例如通过点击**浏览**生成的查询）才会保存在这个历史记录中。
- en: They are clickable for immediate execution, and the **Change** icon is available
    to insert a recorded query into the query box for editing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以立即执行，**更改**图标可用于将记录的查询插入查询框进行编辑。
- en: The number of queries that will be kept is controlled by `$cfg['QueryHistoryMax']`,
    which is set to `25` by default. This limit is not kept for performance reasons,
    but as a practical limit in order to achieve a visually unencumbered view. Extra
    queries are eliminated at login time in a process traditionally called **garbage
    collection**. The queries are stored in the table configured in `$cfg['Servers'][$i]['history']`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将保留的查询数量由`$cfg['QueryHistoryMax']`控制，默认设置为`25`。这个限制不是出于性能原因，而是为了实现一个视觉上不受限制的视图而设置的实际限制。额外的查询在登录时被消除，这个过程传统上被称为**垃圾收集**。查询被存储在`$cfg['Servers'][$i]['history']`中配置的表中。
- en: Editing queries
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑查询
- en: 'On the results page of a successful query, a header containing the executed
    query appears as shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功查询的结果页面上，会显示包含执行查询的标题，如下截图所示：
- en: '![Editing queries](img/7782_11_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![编辑查询](img/7782_11_07.jpg)'
- en: 'Clicking on **Edit** opens the Query window''s **SQL** tab, with this query
    ready to be modified. This happens because of the following default setting for
    this parameter:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**编辑**会打开查询窗口的**SQL**选项卡，并准备修改此查询。这是因为该参数的默认设置如下：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When it is set to `FALSE`, a click on **Edit** will not open the Query window;
    instead, the query will appear inside the query box of the **SQL** page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当它设置为“FALSE”时，单击**编辑**将不会打开查询窗口；相反，查询将出现在**SQL**页面的查询框内。
- en: Clicking on **Inline** replaces the displayed query by a text area where it's
    possible to edit and submit this query, without leaving the current results page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**内联**会将显示的查询替换为文本区域，在这里可以编辑和提交此查询，而不离开当前结果页面。
- en: Multi-statement queries
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多语句查询
- en: 'In PHP and MySQL programming, we can send only one query at a time using the
    `mysql_query()` function call. phpMyAdmin allows us to send many queries in one
    transmission, using a semicolon as a separator. Suppose we type the following
    query in the query box:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP和MySQL编程中，我们可以使用`mysql_query()`函数调用一次只发送一个查询。phpMyAdmin允许我们使用分号作为分隔符，在一次传输中发送多个查询。假设我们在查询框中输入以下查询：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will receive the following results screen:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将收到以下结果屏幕：
- en: '![Multi-statement queries](img/7782_11_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![多语句查询](img/7782_11_08.jpg)'
- en: We see the number of affected rows through comments because `$cfg['VerboseMultiSubmit']`
    is set to `TRUE`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过注释看到受影响的行数，因为`$cfg['VerboseMultiSubmit']`设置为`TRUE`。
- en: 'Let us send the same list of queries again and watch the results:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次发送相同的查询列表并观看结果：
- en: '![Multi-statement queries](img/7782_11_09.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![多语句查询](img/7782_11_09.jpg)'
- en: It is normal to receive a **Duplicate entry** error message that says the value
    **100** exists already. We are seeing the results of the first **INSERT** statement;
    but what happens to the next one? Execution stops at the first error because `$cfg['IgnoreMultiSubmitErrors']`
    is set to `FALSE` telling phpMyAdmin not to ignore errors in multiple statements.
    If it is set to `TRUE`, the program successively tries all the statements, and
    we see two **Duplicate entry** errors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 收到“重复条目”错误消息是正常的，该消息表示值**100**已经存在。我们看到第一个**INSERT**语句的结果；但是下一个会发生什么？由于`$cfg['IgnoreMultiSubmitErrors']`设置为`FALSE`，告诉phpMyAdmin不要忽略多个语句中的错误，因此执行在第一个错误处停止。如果设置为`TRUE`，程序将依次尝试所有语句，我们会看到两个**重复条目**错误。
- en: This feature would not work as expected, if we tried more than one `SELECT`
    statement. We would see the results of only the last `SELECT` statement.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试多个`SELECT`语句，此功能将无法按预期工作。我们将只看到最后一个`SELECT`语句的结果。
- en: Pretty printing (syntax highlighting)
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漂亮打印（语法高亮）
- en: By default, phpMyAdmin parses and highlights the various elements of any MySQL
    statement it processes. This is controlled by `$cfg['SQP']['fmtType']`, which
    is set to`'html'` by default. This mode uses a specific color for each different
    element (a reserved word, a variable, a comment, and so on) as described in the
    `$cfg['SQP']['fmtColor']` array located in the theme-specific `layout.inc.php`
    file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，phpMyAdmin解析和突出显示其处理的任何MySQL语句的各个元素。这由`$cfg['SQP']['fmtType']`控制，默认设置为`'html'`。此模式对每个不同的元素（保留字、变量、注释等）使用特定颜色，如`$cfg['SQP']['fmtColor']`数组中所描述的那样，该数组位于特定主题的`layout.inc.php`文件中。
- en: Setting `fmtType` to`'text'` would remove all color formatting, inserting line
    breaks at logical points inside a MySQL statement. Finally, setting `fmtType`
    to`'none'` removes every kind of formatting, leaving our syntax intact.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将`fmtType`设置为`'text'`将删除所有颜色格式，将换行符插入到MySQL语句中的逻辑点。最后，将`fmtType`设置为`'none'`将删除所有格式，保留我们的语法不变。
- en: The SQL Validator
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL验证器
- en: Each time phpMyAdmin transmits a query, the MySQL server interprets it and provides
    feedback. The syntax of the query must follow MySQL rules, which are not the same
    as the SQL Standard. However, conforming to SQL Standard ensures that our queries
    are usable on other SQL implementations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每次phpMyAdmin传输查询时，MySQL服务器会解释它并提供反馈。查询的语法必须遵循MySQL规则，这与SQL标准不同。但是，遵循SQL标准可以确保我们的查询在其他SQL实现上可用。
- en: A free external service, the **Mimer SQL Validator**, is available to us, thanks
    to Mimer Information Technology AB. It validates our query according to the Core
    SQL-99 rules and generates a report. The Validator is available directly from
    phpMyAdmin, and its home page is located at [http://developer.mimer.com/validator/index.htm](http://developer.mimer.com/validator/index.htm).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个免费的外部服务，**Mimer SQL验证器**，由Mimer Information Technology AB提供。它根据Core SQL-99规则验证我们的查询并生成报告。验证器可以直接从phpMyAdmin使用，并且其主页位于[http://developer.mimer.com/validator/index.htm](http://developer.mimer.com/validator/index.htm)。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For statistical purposes, this service anonymously stores on its server, the
    queries it receives. When storing the queries, it replaces database, table, and
    column names with generic names. Strings and numbers that are part of the query
    are replaced with generic values so as to protect the original information.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 出于统计目的，此服务会匿名存储接收到的查询。在存储查询时，它会用通用名称替换数据库、表和列名称。查询中的字符串和数字将被替换为通用值，以保护原始信息。
- en: System requirements
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统要求
- en: 'This Validator is available as a SOAP service. Our PHP server must have XML,
    PCRE, and SOAP support. SOAP support is offered by either a PHP extension or by
    a PEAR module. If we choose the PEAR way, the following command (executed on the
    server by the system administrator) installs the modules we need:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此验证器作为SOAP服务提供。我们的PHP服务器必须具有XML、PCRE和SOAP支持。SOAP支持由PHP扩展或PEAR模块提供。如果选择PEAR方式，系统管理员在服务器上执行以下命令安装我们需要的模块：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we have problems with this command due to some of the modules being in a
    beta state, we can execute the following command, which installs SOAP and other
    dependent modules:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某些模块处于测试阶段而导致该命令出现问题，我们可以执行以下命令，安装SOAP和其他依赖模块：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Making the Validator available
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使验证器可用
- en: Some parameters must be configured in `config.inc.php`. Setting `$cfg['SQLQuery']['Validate']`
    to `TRUE` enables the **Validate SQL** link.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在`config.inc.php`中配置一些参数。将`$cfg['SQLQuery']['Validate']`设置为`TRUE`可以启用**验证SQL**链接。
- en: We should also enable the Validator itself (as other validators might be available
    on future phpMyAdmin versions). This is done by setting `$cfg['SQLValidator']['use']`
    to `TRUE`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该启用验证器本身（因为将来的phpMyAdmin版本可能会提供其他验证器）。这可以通过将`$cfg['SQLValidator']['use']`设置为`TRUE`来完成。
- en: 'The Validator is accessed with an anonymous Validator account by default, as
    configured using the following commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器默认使用匿名验证器帐户访问，配置如下命令：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Instead, if Mimer Information Technology has provided us with an account, we
    can use that account information here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果Mimer Information Technology已经为我们提供了一个帐户，我们可以在这里使用该帐户信息。
- en: Validator results
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证器结果
- en: There are two kinds of reports returned by the Validator—one if the query conforms
    to the standard, and the other if it does not conform.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器返回两种报告之一，一种是查询符合标准的，另一种是不符合标准的。
- en: Standard-conforming queries
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 符合标准的查询
- en: 'We will try a simple query: `SELECT COUNT(*) FROM book`. As usual, we enter
    this query in the query box and send it. On the results page, we now see an additional
    link— **Validate SQL** as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试一个简单的查询：`SELECT COUNT(*) FROM book`。像往常一样，我们在查询框中输入此查询并发送。在结果页面上，我们现在看到了一个额外的链接——**验证SQL**，如下截图所示：
- en: '![Standard-conforming queries](img/7782_11_10.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![符合标准的查询](img/7782_11_10.jpg)'
- en: 'Clicking on **Validate SQL** produces a report as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**验证SQL**会生成如下截图所示的报告：
- en: '![Standard-conforming queries](img/7782_11_11.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![符合标准的查询](img/7782_11_11.jpg)'
- en: We have the option of clicking on **Skip Validate SQL** to see our original
    query.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择点击**跳过验证SQL**来查看我们的原始查询。
- en: Non standard-conforming queries
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不符合标准的查询
- en: 'Let us try another query, which works correctly in MySQL: `SELECT * FROM book
    WHERE language = ''en''`. Sending it to the Validator produces a report as shown
    in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试另一个在MySQL中正确工作的查询：`SELECT * FROM book WHERE language = 'en'`。将其发送到验证器会生成如下截图所示的报告：
- en: '![Non standard-conforming queries](img/7782_11_12.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![不符合标准的查询](img/7782_11_12.jpg)'
- en: 'Each time the Validator finds a problem, it adds a message such as **{error:
    1}** at the point of the error and adds a footnote in the report. In this query,
    the **language** column name is non-standard. Hence, the Validator tells us that
    it was expecting an identifier at this point. Another non-standard error is reported
    about the use of a `LIMIT` clause, which was added to the query by phpMyAdmin.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '每当验证器发现问题时，它会在错误点添加诸如**{error: 1}**的消息，并在报告中添加脚注。在此查询中，**language**列名是非标准的。因此，验证器告诉我们在此处期望标识符。关于使用`LIMIT`子句的非标准错误也被报告，这是phpMyAdmin添加到查询中的。'
- en: Another case is that of the backquote. If we just click on **Browse** for the
    `book` table, phpMyAdmin generates `SELECT * FROM `book``, enclosing the table
    name with backquote. This is MySQL's way of protecting identifiers, which might
    contain special characters, such as spaces, international characters, or reserved
    words. However, sending this query to the Validator shows us that the backquotes
    do not conform to standard SQL. We may even get two errors, one for each backquote.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个情况是反引号。如果我们只是点击**浏览**`book`表，phpMyAdmin会生成`SELECT * FROM `book``，用反引号括起表名。这是MySQL保护标识符的方式，标识符可能包含特殊字符，如空格、国际字符或保留字。然而，将此查询发送给验证器会显示反引号不符合标准SQL。我们甚至可能会得到两个错误，每个反引号一个。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter helped us understand the purpose of query boxes and showed us where
    to find them. It also gave us an overview of how to use the column selector, the
    Query window options, how to get a history of the typed commands, multi-statement
    queries, and finally, how to use the SQL Validator.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章帮助我们理解了查询框的目的，并告诉我们在哪里找到它们。它还概述了如何使用列选择器、查询窗口选项、如何获取输入命令的历史记录、多语句查询，最后，如何使用SQL验证器。
- en: The next chapter will show how to produce multi-table queries without typing
    much, thanks to phpMyAdmin's query generator.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将展示如何通过phpMyAdmin的查询生成器生成多表查询而无需输入太多内容。
