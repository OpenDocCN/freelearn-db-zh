- en: Chapter 14. Using Query Bookmarks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。使用查询书签
- en: 'This chapter covers query bookmarks—one of the features of the phpMyAdmin configuration
    storage. Being able to label queries, and recall them by label, can be a real
    time saver. Bookmarks are queries that have the following properties:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了查询书签——phpMyAdmin配置存储的一个功能。能够为查询添加标签，并通过标签进行检索，可以节省真正的时间。书签是具有以下属性的查询：
- en: Stored permanently
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永久存储
- en: Viewable
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可查看
- en: Erasable
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可擦除
- en: Related to one database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与一个数据库相关
- en: Recorded only as a consequence of a user's action
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅作为用户操作的结果记录
- en: Labeled
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已标记
- en: Private by default (only available to the user creating them) but possibly public
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下是私有的（仅对创建它们的用户可用），但可能是公共的
- en: A bookmark can also have a variable part, as explained in the *Passing a parameter
    to a bookmark* section later in this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章后面的*向书签传递参数*部分所述，书签也可以具有可变部分。
- en: There is no bookmark page for managing bookmarks. Instead, the various actions
    for bookmarks are available on specific pages, such as results pages or query
    box pages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 没有用于管理书签的书签页面。相反，书签的各种操作可在特定页面上进行，例如结果页面或查询框页面。
- en: Comparing bookmark and query history features
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较书签和查询历史功能
- en: In [Chapter 11](ch11.html "Chapter 11. Entering SQL Statements"), we learned
    about the SQL history feature, which automatically stores queries (temporarily
    or permanently). There are similarities between queries stored in the history
    and bookmarks. After all both features are intended to store queries for later
    execution. However, there are important differences regarding the way the queries
    are stored and the action that triggers the recording of a query.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](ch11.html "第11章。输入SQL语句")中，我们了解了SQL历史功能，它会自动存储查询（临时或永久）。存储在历史中的查询和书签之间存在相似之处。毕竟，这两个功能都旨在存储查询以供以后执行。然而，关于查询的存储方式和触发查询记录的操作，存在重要的区别。
- en: Storing of queries in the history is automatic; whereas a query is saved as
    a bookmark via an explicit request from the user. Also, there is a configurable
    limit (refer to [Chapter 11)](ch11.html "Chapter 11. Entering SQL Statements")
    on the number of queries stored in the permanent history; however, the number
    of bookmarks is not limited. Finally, the history feature presents the queries
    in the reverse order of the time they were sent. However, bookmarks are shown
    by label (not showing the query text directly).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查询历史的存储是自动的；而查询被保存为书签是通过用户的显式请求。此外，存储在永久历史中的查询数量有可配置的限制（参见[第11章](ch11.html "第11章。输入SQL语句")）；然而，书签的数量没有限制。最后，历史功能按照查询发送的时间的倒序呈现查询。然而，书签是按标签显示的（不直接显示查询文本）。
- en: To summarize, the automatic query history is useful when we neither plan to
    recall a query, nor wish to remember which queries we typed. This contrasts with
    the bookmark facility where we intentionally ask the system to remember a query,
    and even give it a name (label). Therefore, we can do more with bookmarks than
    with the query history, but both features have their own importance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，当我们既不打算回忆查询，也不希望记住我们输入的查询时，自动查询历史是有用的。这与书签功能形成对比，我们故意要求系统记住一个查询，甚至给它一个名称（标签）。因此，我们可以通过书签做更多事情，而不仅仅是查询历史，但是这两个功能都有其重要性。
- en: Creating bookmarks
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建书签
- en: There are two instances when it is possible to create a bookmark—after a query
    is executed (in which case we don't need to plan ahead for its creation), and
    before sending the query to the MySQL server for execution. Both of these options
    are explored in the following sections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种情况下可以创建书签——在执行查询后（在这种情况下，我们不需要提前计划其创建），以及在将查询发送到MySQL服务器执行之前。这两个选项在以下部分中进行了探讨。
- en: Creating a bookmark after a successful query
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在成功查询后创建书签
- en: Initial bookmark creation is made possible by the **Bookmark this SQL query**
    button. This button appears only after executing a query that generates a result
    (when at least one row is found); so this method for creating bookmarks only stores
    `SELECT` statements. For example, a complex query produced by the multi-table
    query generator (as seen in [Chapter 12)](ch12.html "Chapter 12. Generating Multi-table
    Queries") could be stored as a bookmark in this way, provided that it finds some
    results.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 初始书签创建是通过**收藏此SQL查询**按钮实现的。此按钮仅在执行生成结果的查询后出现（至少找到一行时）；因此，此方法仅存储`SELECT`语句。例如，由多表查询生成器生成的复杂查询（如[第12章](ch12.html
    "第12章。生成多表查询")中所示）可以以这种方式存储为书签，前提是它找到了一些结果。
- en: 'Let us see an example. In the **Search** page for the `book` table, we select
    the columns that we want in the results, and enter the search values as shown
    in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。在`book`表的**搜索**页面上，我们选择要在结果中显示的列，并输入如下截图所示的搜索值：
- en: '![Creating a bookmark after a successful query](img/7782_14_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![成功查询后创建书签](img/7782_14_01.jpg)'
- en: After clicking on **Go**, we see that the results page shows a bookmark dialog.
    We enter only a label, **books for author 1**, for this bookmark, and then click
    on **Bookmark this SQL query** to save this query as a bookmark. Bookmarks are
    saved in the table defined by `$cfg['Servers'][$i]['bookmarktable']`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Go**后，我们看到结果页面显示了一个书签对话框。我们仅为此书签输入一个标签**作者1的书籍**，然后点击**收藏此SQL查询**以将此查询保存为书签。书签保存在由`$cfg['Servers'][$i]['bookmarktable']`定义的表中。
- en: '![Creating a bookmark after a successful query](img/7782_14_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![成功查询后创建书签](img/7782_14_02.jpg)'
- en: This bookmark dialog can be seen on any page that contains results. As a test,
    we could just click on **Browse** for a table to get results, and then store this
    query as a bookmark. However, it does not make much sense to store (in a bookmark)
    a query that can easily be made with one click.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个书签对话框可以在包含结果的任何页面上看到。作为测试，我们可以只需点击一个表的**浏览**以获取结果，然后将此查询存储为书签。然而，将一个可以轻松点击完成的查询存储为书签并没有太多意义。
- en: Storing a bookmark before sending a query
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在发送查询之前存储书签
- en: We have seen that it's easy to create a bookmark after the execution of a `SELECT`
    statement that generates results. Sometimes, we may want to store a bookmark even
    if a query does not find any results. This may be the case if the data to which
    the query refers is not yet present, or if the query is a statement other than
    `SELECT`. To achieve this, we have the **Bookmark this SQL query** dialog available
    in the **SQL** tab of the `Database` view, `Table` view, and the Query window.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，在生成结果的`SELECT`语句执行后很容易创建一个书签。有时，即使查询没有找到任何结果，我们也可能希望存储一个书签。如果查询所指的数据尚未存在，或者查询是除`SELECT`之外的语句，就可能出现这种情况。为了实现这一点，我们在`Database`视图、`Table`视图和查询窗口的**SQL**选项卡中提供了**将此SQL查询设为书签**对话框。
- en: We now go to the **SQL** page of the `book` table, enter a query to retrieve
    French books, and directly put the **books in French** bookmark label in the **Bookmark
    this SQL query** dialog. If this bookmark label has been used previously, a new
    bookmark with the same name will be created, unless we check the **Replace existing
    bookmark of same name** checkbox. Bookmarks carry an internal identifying number,
    as well as a label chosen by the user.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们转到`book`表的**SQL**页面，输入一个检索法语书籍的查询，并直接将**法语书籍**书签标签放入**将此SQL查询设为书签**对话框中。如果此书签标签以前已被使用，除非我们选中**替换同名现有书签**复选框，否则将创建一个同名的新书签。书签带有内部识别号，以及用户选择的标签。
- en: '![Storing a bookmark before sending a query](img/7782_14_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![在发送查询之前存储书签](img/7782_14_03.jpg)'
- en: On clicking on **Go**, the query is executed and stored as a bookmark. It does
    not matter if the query does not find anything. This is how we can generate bookmarks
    for non-SELECT queries such as `UPDATE, DELETE, CREATE TABLE`, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**Go**后，查询将被执行并存储为书签。即使查询没有找到任何内容也没关系。这就是我们可以为非`SELECT`查询生成书签的方法，例如`UPDATE,
    DELETE, CREATE TABLE`等。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This technique can also be used for a `SELECT` statement that either returns
    results or does not return results.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术也可以用于`SELECT`语句，无论是返回结果还是不返回结果。
- en: Making bookmarks public
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将书签设为公开
- en: 'All bookmarks we create are private by default. When a bookmark is created,
    the username, which we are logged in as, is stored with the bookmark. Let us suppose
    that we check the **Let every user access this bookmark** checkbox as shown in
    the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的所有书签默认都是私有的。创建书签时，我们登录的用户名将与书签一起存储。假设我们勾选了如下屏幕截图中显示的**让每个用户访问此书签**复选框：
- en: '![Making bookmarks public](img/7782_14_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![将书签设为公开](img/7782_14_04.jpg)'
- en: 'This would have the following effect:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下效果：
- en: All users having access to the same database (the current one) will have access
    to the bookmark.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有访问同一数据库（当前数据库）的用户都将可以访问该书签。
- en: A user's ability to see meaningful results from the bookmark depends on the
    privileges they have on the tables referenced in the bookmark.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户能够从书签中看到有意义的结果，这取决于他们在书签中引用的表上的权限。
- en: Any user will be able to delete the bookmark.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用户都可以删除该书签。
- en: Users will be permitted to change the bookmark's query, by storing this bookmark
    before sending a query and using the **Replace existing bookmark of same name**
    option.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将被允许通过在发送查询之前存储此书签并使用**替换同名现有书签**选项来更改书签的查询。
- en: Public bookmarks are shown with a **(shared)** suffix when recalled.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 公共书签在调用时会显示**(共享)**后缀。
- en: The default initial query for a table
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表的默认初始查询
- en: In the previous examples, we chose bookmark labels according to our preferences.
    However, by convention, if a private bookmark has the same name as a table, it
    will be executed when **Browse** is clicked for this table. Thus, instead of seeing
    the normal **Browse** results of this table, we will see the bookmark's results.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的示例中，我们根据自己的喜好选择了书签标签。但是，按照惯例，如果私有书签与表同名，当单击此表的**浏览**时，它将被执行。因此，我们将看到书签的结果，而不是此表的正常**浏览**结果。
- en: Suppose that we are interested in viewing (by default, in the **Browse** mode)
    all books with a page count lower than 300\. We first generate the appropriate
    query, which can be done easily from the **Search** page, and then we use **book**
    as a bookmark label on the results page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有兴趣查看（默认情况下，以**浏览**模式）所有页数少于300页的书。我们首先生成适当的查询，可以从**搜索**页面轻松完成，然后在结果页面上使用**book**作为书签标签。
- en: '![The default initial query for a table](img/7782_14_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![表的默认初始查询](img/7782_14_05.jpg)'
- en: 'Following this action, every time the user, who created this bookmark, browses
    the `book` table, he sees the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在此操作之后，每当创建此书签的用户浏览`book`表时，他将看到以下屏幕截图：
- en: '![The default initial query for a table](img/7782_14_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![表的默认初始查询](img/7782_14_06.jpg)'
- en: Multi-query bookmarks
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多查询书签
- en: A single bookmark can also store more than one query (separated by a semicolon).
    This is mostly useful for non`-SELECT` queries. As an example, let us assume that
    we need to clean data about authors by removing an invalid area code from the
    phone numbers on a regular basis. This operation would always be followed by a
    display of the `author` table.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 单个书签还可以存储多个查询（用分号分隔）。这对于非`SELECT`查询非常有用。例如，假设我们需要定期清理有关作者的数据，以删除电话号码中的无效区号。此操作总是会跟随`author`表的显示。
- en: 'To accomplish this goal, we store a bookmark (before sending it for execution)
    that contains these queries:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们存储了一个包含这些查询的书签（在发送执行之前）：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the bookmark, we could put many data modification statements such as `INSERT,
    UPDATE`, or `DELETE`, followed optionally by one `SELECT` statement. Stacking
    a lot of `SELECT` statements would not yield the intended result because we would
    only see the data fetched by the last `SELECT` statement.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在书签中，我们可以放置许多数据修改语句，例如`INSERT, UPDATE`或`DELETE`，然后可以选择性地跟随一个`SELECT`语句。堆叠大量`SELECT`语句不会产生预期的结果，因为我们只会看到最后一个`SELECT`语句获取的数据。
- en: Recalling bookmarks from the bookmarks list
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从书签列表中调用书签
- en: 'Any created bookmarks can be found on the following pages:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的任何书签都可以在以下页面找到：
- en: 'The `Table` view: **SQL** page of any table from **marc_book**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表**视图：**marc_book**的任何表的**SQL**页面'
- en: 'The Query window: The **SQL-History** tab'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询窗口：**SQL历史**选项卡
- en: 'The `Database` view: **SQL** page of the **marc_book** database'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**视图：**marc_book**数据库的**SQL**页面'
- en: '![Recalling bookmarks from the bookmarks list](img/7782_14_07.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![从书签列表中调用书签](img/7782_14_07.jpg)'
- en: Three choices are available when recalling a bookmark— **Submit, View only**,
    and **Delete. (Submit** being the default).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用书签时有三个选择——**提交、仅查看**和**删除（提交**是默认选项）。
- en: Executing bookmarks
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行书签
- en: Choosing a bookmark and hitting **Go** executes the stored query and displays
    its results. The page resulting from a bookmark execution does not have another
    dialog to create a bookmark, as this would be superfluous.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个书签并点击**Go**执行存储的查询并显示其结果。书签执行后的页面没有另一个对话框来创建书签，因为这将是多余的。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The results we get are not necessarily the same as when we created the bookmark.
    They reflect the current contents of the database. Only the query is stored as
    a bookmark.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的结果不一定与创建书签时相同。它们反映了数据库的当前内容。只有查询被存储为书签。
- en: Manipulating bookmarks
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作书签
- en: Sometimes, we may just want to ascertain the contents of a bookmark. This is
    done by choosing a bookmark and selecting **View only**. The query is then displayed
    and we have the opportunity of reworking its contents. By doing so, we would be
    editing a copy of the original bookmarked query. To keep this new, edited query,
    we can save it as a bookmark. Again, this will create another bookmark even if
    we choose the same bookmark label, unless we explicitly ask for the original bookmark
    to be replaced.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能只想确定书签的内容。这可以通过选择书签并选择**仅查看**来完成。然后查询将被显示，我们有机会重新编辑其内容。这样做，我们将编辑原始书签查询的副本。为了保留这个新的编辑查询，我们可以将其保存为书签。同样，即使我们选择相同的书签标签，这将创建另一个书签，除非我们明确要求替换原始书签。
- en: A bookmark can be erased with the **Delete** option. There is no confirmation
    dialog to confirm the deletion of the bookmark. We should now proceed with the
    deletion of our **book** bookmark.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用**删除**选项来删除书签。没有确认对话框来确认删除书签。我们现在应该继续删除我们的**book**书签。
- en: '![Manipulating bookmarks](img/7782_14_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![操作书签](img/7782_14_08.jpg)'
- en: Passing a parameter to a bookmark
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向书签传递参数
- en: If we look again at the first bookmark we created (finding all books for **author
    1)**, we realize that although it's useful, it's limited to finding just one author—always
    the same one.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次查看我们创建的第一个书签（查找**作者1**的所有书），我们会意识到，虽然它很有用，但只能找到一个作者，总是相同的那个。
- en: Special query syntax enables the passing of parameters to bookmarks. This syntax
    uses the fact that SQL comments enclosed within `/*` and `*/` are ignored by MySQL.
    If the `/*[VARIABLE]*/` construct exists somewhere in the query, it will be expanded
    at execution time with the value provided when recalling the bookmark.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的查询语法使得可以向书签传递参数。这种语法利用了SQL注释`/*`和`*/`在MySQL中被忽略的特性。如果查询中存在`/*[VARIABLE]*/`结构，它将在执行时用提供的值进行扩展。
- en: Creating a parameterized bookmark
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个带参数的书签
- en: 'Let us say we want to find all the books for a given author when we don''t
    know the author''s `id`. We first enter the following query:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要找到给定作者的所有书，但不知道作者的`id`。我们首先输入以下查询：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The part between the comment characters `(/* */)` will be expanded later, and
    the tags will be removed. We label this query as a bookmark named **find author
    by name** (before executing it) and then click on **Go**. The first execution
    of the query just stores the bookmark while retrieving all books by all the authors,
    as this time we haven't passed a parameter to the query.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注释字符`(/* */)`之间的部分将在以后扩展，并且标签将被移除。我们将这个查询标记为一个名为**按姓名查找作者**的书签（在执行之前），然后点击**Go**。查询的第一次执行只是存储了书签，同时检索了所有作者的所有书，因为这次我们没有向查询传递参数。
- en: In this example, we have two conditions in the `WHERE` clause, of which one
    contains the special syntax. If our only criterion in the `WHERE` clause needs
    a parameter, we can use a syntax such as `/* WHERE author_id = [VARIABLE] */`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在`WHERE`子句中有两个条件，其中一个包含特殊语法。如果我们在`WHERE`子句中的唯一条件需要一个参数，我们可以使用诸如`/*
    WHERE author_id = [VARIABLE] */`的语法。
- en: Passing the parameter value
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传递参数值
- en: To test the bookmark, we recall it as usual and enter a value in the **Variable**
    dialog.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试书签，我们像往常一样调用它，并在**变量**对话框中输入一个值。
- en: '![Passing the parameter value](img/7782_14_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![传递参数值](img/7782_14_09.jpg)'
- en: When we click on **Go**, we see the expanded query, and the author Smith's books.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**Go**时，我们看到了扩展的查询和作者Smith的书。
- en: '![Passing the parameter value](img/7782_14_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![传递参数值](img/7782_14_10.jpg)'
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw an overview of how to record bookmarks (after or before
    sending a query), how to manipulate them, and how some bookmarks can be made public.
    The chapter also introduced us to the default initial query for **Browse** mode.
    It also covered passing parameters to bookmarks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何记录书签（在发送查询之前或之后），如何操作它们，以及如何使一些书签公开。本章还向我们介绍了**浏览**模式的默认初始查询。它还涵盖了向书签传递参数。
- en: The next chapter will explain how to produce documentation that explains the
    structure of your databases via the tools offered by phpMyAdmin.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将解释如何通过phpMyAdmin提供的工具生成解释数据库结构的文档。
