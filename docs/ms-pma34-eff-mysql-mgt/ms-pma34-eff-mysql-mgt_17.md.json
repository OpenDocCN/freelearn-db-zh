["```go\nCREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `book_public_info` AS\nselect `book`.`isbn` AS `number`,`book`.`title` AS `title` from `book`;\n\n```", "```go\nCREATE PROCEDURE `add_page`(IN param_isbn VARCHAR(25),\nIN param_pages INT, OUT param_message VARCHAR(100))\nBEGIN\nIF param_pages > 100 THEN\nSET param_message = 'the number of pages is too big';\nELSE\nUPDATE book SET page_count = page_count + param_pages WHERE\nisbn=param_isbn;\nSET param_message = 'success';\nEND IF;\nEND\n//\n\n```", "```go\ncall add_page('1-234567-22-0', 4, @message);\nSELECT @message;\n\n```", "```go\ncall add_page('1-234567-22-0', 101, @message);\nSELECT @message;\n\n```", "```go\nDROP PROCEDURE `add_page`//\nCREATE DEFINER=`marc`@`%` PROCEDURE `add_page`(IN param_isbn VARCHAR(25), IN param_pages INT, OUT param_message VARCHAR(100))\nBEGIN\nIF param_pages > 100 THEN\nSET param_message = 'the number of pages is too big';\nELSE\nUPDATE book SET page_count = page_count + param_pages WHERE\nisbn=param_isbn;\nSET param_message = 'success';\nEND IF;\nEND\n\n```", "```go\nCREATE FUNCTION get_country_name(param_country_code CHAR(2))\nRETURNS VARCHAR(50)\nREADS SQL DATA\nBEGIN\nDECLARE var_country_name VARCHAR(50) DEFAULT 'not found';\nSELECT description\nFROM country\nWHERE code = param_country_code\nINTO var_country_name;\nRETURN var_country_name;\nEND\n//\n\n```", "```go\nSELECT CONCAT('ca->', get_country_name('ca'), ', zz->',\nget_country_name('zz')) as test;\n\n```", "```go\nca->Canada, zz->not found\n\n```", "```go\nDELIMITER $$\n--\n-- Procedures\n--\nCREATE DEFINER=`marc`@`%` PROCEDURE `add_page`(IN param_isbn\nVARCHAR(25), IN param_pages INT, OUT param_message VARCHAR(100))\nBEGIN\nIF param_pages > 100 THEN\nSET param_message = 'the number of pages is too big';\nELSE\nUPDATE book SET page_count = page_count + param_pages WHERE\nisbn=param_isbn;\nSET param_message = 'success';\nEND IF;\nEND$$\n--\n-- Functions\n--\nCREATE DEFINER=`marc`@`%` FUNCTION `get_country_name`\n(param_country_code CHAR(2)) RETURNS varchar(50) CHARSET latin1\nREADS SQL DATA\nBEGIN\nDECLARE var_country_name VARCHAR(50) DEFAULT 'not found';\nSELECT description into var_country_name FROM country WHERE\ncode = param_country_code;\nRETURN var_country_name;\nEND$$\nDELIMITER ;\n\n```", "```go\nCREATE TRIGGER after_book_insert AFTER INSERT ON book\nFOR EACH ROW\nBEGIN\nUPDATE author\nSET total_page_count = total_page_count + NEW.page_count\nWHERE id = NEW.author_id;\nEND\n//\n\n```", "```go\nPARTITION BY RANGE (id) (\nPARTITION p0 VALUES LESS THAN (1000),\nPARTITION p1 VALUES LESS THAN (2000),\nPARTITION p2 VALUES LESS THAN (30000)\n);\n\n```", "```go\nCREATE TABLE `test` (\n`id` int(11) NOT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n/*!50100 PARTITION BY RANGE (id)\n(PARTITION p0 VALUES LESS THAN (1000) ENGINE = MyISAM,\nPARTITION p1 VALUES LESS THAN (2000) ENGINE = MyISAM,\nPARTITION p2 VALUES LESS THAN (3000) ENGINE = MyISAM) */;\n\n```", "```go\nSHOW VARIABLES LIKE 'event%';\n\n```", "```go\nSET GLOBAL event_scheduler = ON;\n\n```", "```go\nCREATE EVENT add_page_count\nON SCHEDULE\nEVERY 1 MINUTE\nDO\nUPDATE author set total_page_count = total_page_count + 1\nWHERE id = 1;\n\n```"]