- en: Chapter 17. Supporting Features Added in MySQL 5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章。MySQL 5中添加的支持功能
- en: MySQL 5.0 introduced a number of new features that calmed down a number of developers
    and industry observers who were claiming that MySQL was inferior to competitors'
    products. Views, stored procedures, triggers, a standard `information_schema`,
    and (more recently) a profiling mechanism are now present in the MySQL spectrum.
    These features are covered in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.0引入了许多新功能，平息了许多声称MySQL不如竞争对手产品的开发人员和行业观察者的声音。视图、存储过程、触发器、标准的`information_schema`，以及（最近）性能分析机制现在都存在于MySQL的范围内。这些功能在本章中进行了介绍。
- en: Among the new features of MySQL 5.1, the ones that relate to a web interface
    (for example, partitioning and events) are supported in phpMyAdmin and are covered
    in this chapter as well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.1的新功能中，与Web界面相关的功能（例如，分区和事件）也受到phpMyAdmin的支持，并在本章中进行了介绍。
- en: Supporting views
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持视图
- en: MySQL 5.0 introduced support for named and updatable views (more details are
    available at [http://dev.mysql.com/doc/refman/5.5/en/views.html)](http://dev.mysql.com/doc/refman/5.5/en/views.html)).
    A view is a derived table (consider it a virtual table) whose definition is stored
    in the database. A `SELECT` statement done on one or more tables (or even on views),
    can be stored as a view and can also be queried.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.0引入了对命名和可更新视图的支持（更多详细信息可在[http://dev.mysql.com/doc/refman/5.5/en/views.html)](http://dev.mysql.com/doc/refman/5.5/en/views.html)找到）。视图是一个派生表（将其视为虚拟表），其定义存储在数据库中。对一个或多个表（甚至是视图）执行的`SELECT`语句可以存储为视图，并且也可以进行查询。
- en: 'Views can be used to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 视图可以用于：
- en: Limit the visibility of columns (for example, do not show salary information)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制列的可见性（例如，不显示薪资信息）
- en: Limit the visibility of rows (for example, do not show data for specific world
    regions)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制行的可见性（例如，不显示特定世界地区的数据）
- en: Hide a changed table structure (so that legacy applications can continue to
    work)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏更改后的表结构（以便旧应用程序可以继续工作）
- en: Instead of defining cumbersome column-specific privileges on many tables, it's
    easier to prepare a view containing a limited set of columns from these tables.
    We can then grant permissions on the view as a whole.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与在许多表上定义繁琐的特定列权限相比，更容易准备一个包含这些表中有限列集的视图。然后我们可以授予整个视图的权限。
- en: To activate support for views on a server after an upgrade from a pre-5.0 version,
    the administrator has to execute the `mysql_upgrade` program, as described in
    the MySQL manual ([http://dev.mysql.com/doc/refman/5.0/en/upgrading-from-previous-series.html](http://dev.mysql.com/doc/refman/5.0/en/upgrading-from-previous-series.html)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在从5.0之前的版本升级后，要在服务器上激活对视图的支持，管理员必须执行`mysql_upgrade`程序，如MySQL手册中所述（[http://dev.mysql.com/doc/refman/5.0/en/upgrading-from-previous-series.html](http://dev.mysql.com/doc/refman/5.0/en/upgrading-from-previous-series.html)）。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Each user must have the appropriate `SHOW_VIEW` or `CREATE_VIEW` privilege to
    be able to see or manipulate views. These privileges exist at the global (server),
    database, and table levels.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户必须具有适当的`SHOW_VIEW`或`CREATE_VIEW`权限才能查看或操作视图。这些权限存在于全局（服务器）、数据库和表级别。
- en: Creating a view implies that the user has privileges on the tables involved,
    or at least a privilege such as `SELECT` or `UPDATE` on all the columns mentioned
    in the view.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建视图意味着用户对涉及的表具有权限，或者至少具有`SELECT`或`UPDATE`等权限来操作视图中提到的所有列。
- en: Creating a view from results
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从结果创建视图
- en: We can take advantage of phpMyAdmin's **Search** (at the table level) or **Query**
    (at the database level) features to build a rather complex query, execute it,
    and then easily create a view from the results. We will see how this is done.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用phpMyAdmin的**搜索**（在表级别）或**查询**（在数据库级别）功能来构建一个相当复杂的查询，执行它，然后轻松地从结果中创建一个视图。我们将看到这是如何完成的。
- en: We mentioned that a view can be used to limit the visibility of columns (and,
    in fact, of tables). Let us say that the number of pages in a book is highly classified
    information. We open the `book` table, click on **Search**, and choose a subset
    of the columns that does not include the **page_count** column (we might have
    to open the **Options** slider).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到视图可以用来限制列（实际上也包括表）的可见性。假设一本书的页数是高度机密的信息。我们打开`book`表，点击**搜索**，并选择不包括**page_count**列的列子集（我们可能需要打开**选项**滑块）。
- en: '![Creating a view from results](img/7782_17_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![从结果创建视图](img/7782_17_01.jpg)'
- en: 'Clicking on **Go** produces a results page, where we see a **CREATE VIEW**
    link in the **Query results operations** section. We use this link to access the
    view creation panel, which already has the underlying query in the **AS** box.
    We need to choose a name for this view (here, we use **book_public_info)**, and
    we can optionally set different column names for it (here, we use **number, title)**,
    as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Go**会生成一个结果页面，在**查询结果操作**部分我们会看到一个**CREATE VIEW**链接。我们使用这个链接来访问视图创建面板，其中已经有了**AS**框中的基础查询。我们需要为这个视图选择一个名称（这里我们使用**book_public_info)**，并且我们可以选择为它设置不同的列名（这里我们使用**number,
    title)**，如下截图所示：
- en: '![Creating a view from results](img/7782_17_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![从结果创建视图](img/7782_17_02.jpg)'
- en: The other options can influence the view's behavior, and have been explained
    in the MySQL manual ([http://dev.mysql.com/doc/refman/5.5/en/create-view.html](http://dev.mysql.com/doc/refman/5.5/en/create-view.html)).
    The `LOCAL CHECK OPTION` clause influences the behavior of the updateable views
    (this is explained in the MySQL manual at the page cited previously).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他选项可能会影响视图的行为，并在MySQL手册中有解释（[http://dev.mysql.com/doc/refman/5.5/en/create-view.html](http://dev.mysql.com/doc/refman/5.5/en/create-view.html)）。`LOCAL
    CHECK OPTION`子句会影响可更新视图的行为（这在前面引用的MySQL手册页面中有解释）。
- en: 'Clicking on **Go** generates the view we asked for. At this point, the view
    has been created. If we refresh our browser''s page and then access the `marc_book`
    database, we will see the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Go**生成我们要求的视图。此时，视图已经创建。如果我们刷新浏览器的页面，然后访问`marc_book`数据库，我们将看到以下截图：
- en: '![Creating a view from results](img/7782_17_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![从结果创建视图](img/7782_17_03.jpg)'
- en: In the main panel, we see the information on the newly-created view. The number
    of rows for the view currently indicates **~0** (more on this in the *Controlling
    row counting for improved performance* section, later in this chapter), and **View**
    is indicated in the **Type** column. There is no collation or size associated
    with a view.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在主面板中，我们看到了新创建的视图的信息。目前视图的行数指示为**~0**（稍后在本章的*控制行计数以提高性能*部分中会详细介绍），**类型**列中显示**视图**。视图没有排序或大小相关联。
- en: Main panel and views
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主面板和视图
- en: As a view has similarities with a table, its name is available along with the
    names of the ordinary tables. On clicking the view name, a panel similar to the
    one seen for tables is displayed, but with fewer menu tabs than seen in a normal
    table. Indeed, some operations do not make sense on a view, for example, **Import**.
    This is because a view does not actually contain data. However, other actions,
    such as **Browse**, are perfectly acceptable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于视图与表相似，它的名称与普通表的名称一样。单击视图名称时，会显示一个类似于表的面板，但是菜单选项比普通表少。事实上，有些操作在视图上是没有意义的，例如**导入**。这是因为视图实际上不包含数据。但是，其他操作，如**浏览**，是完全可以接受的。
- en: 'Let us browse the view shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览以下截图中显示的视图：
- en: '![Main panel and views](img/7782_17_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![主面板和视图](img/7782_17_04.jpg)'
- en: 'We notice that, in the generated SQL query, we do not see our original `CREATE
    VIEW` statement. The reason is that we are selecting from the view using a `SELECT`
    statement, hiding the fact that we are pulling data from a view. However, exporting
    the view''s structure would show how MySQL internally stored our view:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到，在生成的SQL查询中，我们没有看到原始的`CREATE VIEW`语句。原因是我们正在使用`SELECT`语句从视图中进行选择，隐藏了我们从视图中提取数据的事实。然而，导出视图的结构将显示MySQL如何内部存储我们的视图：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The main panel's menu may look similar to that of a table. However, when necessary,
    phpMyAdmin generates the appropriate syntax for handling views.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 主面板的菜单可能看起来类似于表的菜单。但是在必要时，phpMyAdmin会生成处理视图的适当语法。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To perform actions on existing views, a user needs to have the appropriate privilege
    at the view level, but not necessarily any privilege on the tables involved in
    this view. This is how we can achieve column and table hiding.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要对现有视图执行操作，用户需要在视图级别具有适当的权限，但不一定需要在涉及此视图的表上具有任何权限。这是我们可以实现列和表的隐藏。
- en: Controlling row counting for improved performance
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制行计数以提高性能
- en: 'phpMyAdmin has a configuration parameter, `$cfg[''MaxExactCountViews'']`, that
    controls the row-counting phase of phpMyAdmin. Sometimes, a view comprises many
    huge tables, and browsing it would make a large number of virtual rows appear.
    Therefore, the default value of 0 for this parameter ensures that no row counting
    happens for views. In this case, we will see rather strange results when browsing
    a view: **Showing rows 0 - -1 (0 total, Query took 0.0006 sec)**. This is more
    acceptable than slowing down a server.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin有一个配置参数`$cfg['MaxExactCountViews']`，用于控制phpMyAdmin的行计数阶段。有时，一个视图包含许多巨大的表，浏览它会导致大量的虚拟行出现。因此，该参数的默认值为0确保视图不进行行计数。在这种情况下，当浏览视图时，我们会看到相当奇怪的结果：**显示行0
    - -1（共0行，查询耗时0.0006秒）**。这比减慢服务器速度更可接受。
- en: Nonetheless, if we prefer to see a more exact row count for views, we can put
    a larger value in this parameter, which acts as an upper limit for the row counting
    phase.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，如果我们希望看到视图的更准确的行数，我们可以在该参数中放入一个较大的值，该值作为行计数阶段的上限。
- en: Supporting routines—stored procedures and functions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持例程-存储过程和函数
- en: It took a while before phpMyAdmin started to include support for stored procedures
    and functions. The reason is that these are blocks of code (like a sub-program)
    that are kept as a part of the database. phpMyAdmin, being a web interface, is
    more oriented towards operations that are performed quickly using a mouse.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin在开始支持存储过程和函数之前花了一些时间。原因是这些是作为数据库的一部分保存的代码块（类似于子程序）。作为一个Web界面的phpMyAdmin更倾向于使用鼠标快速执行的操作。
- en: Nonetheless, phpMyAdmin has a few features that permit a developer to create
    such routines, save them, recall them to make some modifications, and delete them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，phpMyAdmin有一些功能允许开发人员创建这样的例程，保存它们，调用它们进行一些修改，并删除它们。
- en: Procedures are accessed by a `CALL` statement to which we can pass parameters
    (more details at [http://dev.mysql.com/doc/refman/5.5/en/call.html)](http://dev.mysql.com/doc/refman/5.5/en/call.html)).
    On the other hand, functions are accessed from SQL statements (for example, `SELECT)`,
    and are similar to other MySQL internal functions, thus returning a value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`CALL`语句访问存储过程，我们可以传递参数（更多细节请参阅[http://dev.mysql.com/doc/refman/5.5/en/call.html)](http://dev.mysql.com/doc/refman/5.5/en/call.html)）。另一方面，函数可以从SQL语句（例如`SELECT`）中访问，并且类似于其他MySQL内部函数，因此返回一个值。
- en: The `CREATE ROUTINE` and `ALTER ROUTINE` privileges are needed to be able to
    create, see, and delete a stored procedure or function. The `EXECUTE` privilege
    is needed to run the routine, although the privilege is normally granted automatically
    to the routine's creator.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要`CREATE ROUTINE`和`ALTER ROUTINE`权限才能创建、查看和删除存储过程或函数。需要`EXECUTE`权限来运行例程，尽管该权限通常会自动授予例程的创建者。
- en: Creating a stored procedure
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建存储过程
- en: We will create a procedure to change the page count for a specific book, by
    adding a specific number of pages. The book's ISBN and the number of pages to
    be added will be the input parameters to this procedure. We are using the SQL
    query box (refer to [Chapter 11)](ch11.html "Chapter 11. Entering SQL Statements")
    to enter this procedure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个过程，通过添加特定数量的页面来更改特定书籍的页数。该过程的输入参数是书籍的ISBN和要添加的页数。我们正在使用SQL查询框（参考[第11章)](ch11.html
    "第11章。输入SQL语句")来输入这个过程。
- en: Changing the delimiter
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改分隔符
- en: The standard SQL delimiter is the semicolon, and this character will be used
    inside our procedure to delimit SQL statements. However, the `CREATE PROCEDURE`
    statement is by itself a SQL statement; hence, we must come up with a way to indicate
    to the MySQL parser where this statement ends. The query box has a **Delimiter**
    input box, which contains a semicolon by default. Therefore, we change it to another
    string, which, by convention, is a double slash `"//"`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的SQL分隔符是分号，这个字符将被用来在我们的存储过程中分隔SQL语句。然而，`CREATE PROCEDURE`语句本身就是一个SQL语句；因此，我们必须想办法告诉MySQL解析器这个语句在哪里结束。查询框中有一个**分隔符**输入框，默认包含一个分号。因此，我们将其更改为另一个字符串，按照惯例是双斜杠`"//"`。
- en: '![Changing the delimiter](img/7782_17_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![更改分隔符](img/7782_17_05.jpg)'
- en: Entering the procedure
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入存储过程
- en: 'We then enter the procedure''s code in the main query box:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在主查询框中输入存储过程的代码：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On clicking **Go**, we get a success message if the syntax is correct. If it
    is not, well it's time to revise our typing abilities or debug our syntax. Unfortunately,
    MySQL does not come with a procedure debugger.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Go**，如果语法正确，我们会收到一个成功消息。如果不正确，那么是时候检查我们的打字能力或调试我们的语法了。不幸的是，MySQL没有存储过程调试器。
- en: Testing the procedure
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试存储过程
- en: Again, in the query box, we test our procedure by entering the following statements.
    Here, we are using a SQL variable, `@message`, which will receive the contents
    of the `OUT` parameter `param_message:`
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在查询框中，我们通过输入以下语句来测试我们的存储过程。在这里，我们使用了一个SQL变量`@message`，它将接收`OUT`参数`param_message`的内容：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If all went well, we should see that the **@message** variable contains **success**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到**@message**变量包含**success**。
- en: 'We can then verify whether the page count for this book has increased. We also
    need to test the problematic case:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以验证这本书的页数是否增加了。我们还需要测试有问题的情况：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This procedure is now available for calling (for example) from your PHP scripts
    using the `mysqli` extension, which is the one recommended to access all the functionalities
    provided by MySQL 4.1 and above.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以调用这个存储过程（例如）从您的PHP脚本中使用`mysqli`扩展，这是推荐的访问MySQL 4.1及以上版本提供的所有功能的扩展。
- en: Manipulating procedures and functions
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作存储过程和函数
- en: A procedure is stored inside a database, and is not tied to a specific table.
    Therefore, the interface for manipulating procedures and functions can be found
    at the database level, on the **Structure** page under the **Routines** slider,
    which appears if at least one routine is already defined.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程存储在数据库中，不与特定表绑定。因此，用于操作存储过程和函数的接口可以在数据库级别找到，在**结构**页面下的**例程**滑块下，如果已经定义了至少一个例程，则会出现该滑块。
- en: '![Manipulating procedures and functions](img/7782_17_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![操作存储过程和函数](img/7782_17_06.jpg)'
- en: The first icon brings this procedure's text into a query box for editing. The
    second icon would be used to delete this procedure. When editing the procedure,
    we notice that the text has been somewhat modified.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个图标将这个存储过程的文本带入查询框进行编辑。第二个图标用于删除这个存储过程。在编辑存储过程时，我们注意到文本已经被稍微修改。
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First, a `DROP PROCEDURE` statement appears. This is normal because MySQL does
    not offer a statement that would permit changing the body of a procedure. Therefore,
    we have to delete a procedure every time we want to change it. It's true that
    the `ALTER PROCEDURE` statement exists, but it can only change the procedure's
    characteristics, for example, by adding a comment. Then, a `DEFINER` clause is
    shown. It was generated at creation time, and indicates who created this procedure.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先出现一个`DROP PROCEDURE`语句。这是正常的，因为MySQL没有提供一个允许更改存储过程主体的语句。因此，我们必须每次想要更改它时删除一个存储过程。`ALTER
    PROCEDURE`语句确实存在，但它只能改变存储过程的特性，例如添加注释。然后，显示了一个`DEFINER`子句。它是在创建时生成的，指示谁创建了这个存储过程。
- en: At this point, we make any changes we need to the code, and click on **Go**
    to save this procedure.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们对代码进行任何需要的更改，并点击**Go**来保存这个存储过程。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It might be tempting to open the `book` table on its **Structure** page and
    look for a list of procedures that manipulate this table, such as our `add_page()`
    procedure. However, all procedures are stored at the database level, and there
    is no direct link between the code itself `(UPDATE book)` and the place where
    the procedure is stored.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 也许会有诱惑打开**结构**页面上的`book`表，查找操作这个表的存储过程列表，比如我们的`add_page()`存储过程。然而，所有存储过程都存储在数据库级别，代码本身`(UPDATE
    book)`和存储过程存储的地方之间没有直接的链接。
- en: Manually creating a function
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建一个函数
- en: Functions are similar to stored procedures. However, a function may return just
    one value, whereas a stored procedure can have more than one `OUT` parameter.
    On the other hand, using a stored function from within a `SELECT` statement may
    seem more natural as it avoids the need for an intermediate SQL variable to hold
    the value of an `OUT` parameter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数类似于存储过程。然而，函数可能只返回一个值，而存储过程可以有多个`OUT`参数。另一方面，从`SELECT`语句中使用存储函数可能更自然，因为它避免了需要一个中间的SQL变量来保存`OUT`参数的值。
- en: What is the goal of functions? As an example, a function can be used to calculate
    the total cost of an order, including tax and shipping. Putting this logic inside
    the database instead of at the application level helps to document the application-database
    interface. It also avoids duplicating business logic in every application that
    needs to deal with this logic.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的目标是什么？例如，函数可以用来计算订单的总成本，包括税费和运费。将这个逻辑放在数据库中而不是在应用程序级别有助于记录应用程序-数据库接口。它还避免了在每个需要处理这个逻辑的应用程序中重复业务逻辑。
- en: We should not confuse MySQL 5.0 functions with **UDF** **(User-Defined Functions)**,
    which existed prior to MySQL 5.0\. A UDF consists of code written in C or C++,
    compiled into a shared object, and referenced with a `CREATE FUNCTION` statement
    and the `SONAME` keyword.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不应该混淆MySQL 5.0函数和**UDF**（用户定义函数），它们存在于MySQL 5.0之前。UDF由用C或C++编写的代码组成，编译成共享对象，并通过`CREATE
    FUNCTION`语句和`SONAME`关键字引用。
- en: 'phpMyAdmin''s treatment of functions is, in many ways, similar to what we have
    covered in procedures:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin对函数的处理在许多方面类似于我们在例程中所涵盖的内容：
- en: A query box in which to enter a function
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个查询框，用于输入函数
- en: The use of a delimiter
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分隔符
- en: A mechanism to manipulate a function that is already defined
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作已定义的函数的机制
- en: Let us define a function that retrieves the country name, based on its code.
    I prefer to use a `param_` prefix to clearly identify the parameters inside the
    function's definition and a `var_` prefix for local variables. We will use our
    trusty SQL query box to enter the function's code, again indicating to this box
    to use `//` as the delimiter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个函数，根据其代码检索国家名称。我更喜欢在函数定义内清楚地标识参数使用`param_`前缀和局部变量使用`var_`前缀。我们将使用我们信任的SQL查询框再次输入函数的代码，并指示该框使用`//`作为分隔符。
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We should note that our newly-created function can be seen on the database''s
    **Structure** page, along with its friend, the `add_page` procedure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意，我们新创建的函数可以在数据库的**结构**页面上看到，以及它的朋友`add_page`过程：
- en: '![Manually creating a function](img/7782_17_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: 手动创建函数
- en: Testing the function
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试函数
- en: To test the function we just created, enter the following query in a query box
    (refer to [Chapter 11):](ch11.html "Chapter 11. Entering SQL Statements")
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们刚刚创建的函数，请在查询框中输入以下查询（参见[第11章]：(ch11.html "第11章。输入SQL语句")）
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will produce the following result:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Exporting stored procedures and functions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出存储过程和函数
- en: 'When exporting a database, procedures and functions appear in an SQL export.
    This is because the **Add CREATE PROCEDURE / FUNCTION / EVENT** checkbox is selected
    by default in the **Object creation options** dialog of the **Export** page (it
    can be seen in the **Custom** export mode). Here is the part of the export file
    related to procedures and functions:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出数据库时，存储过程和函数会出现在SQL导出中。这是因为在**导出**页面的**对象创建选项**对话框中默认选择了**添加CREATE PROCEDURE
    / FUNCTION / EVENT**复选框（在**自定义**导出模式中可以看到）。以下是与存储过程和函数相关的导出文件部分：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Executing code with triggers
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行触发器代码
- en: '**Triggers** are code that we associate with a table to be executed when certain
    actions occur, for example, after a new `INSERT` statement in the `book` table.
    The action does not need to happen within phpMyAdmin.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**触发器**是我们与表关联的代码，当发生某些操作时执行，例如，在`book`表中的新`INSERT`语句之后。操作不需要在phpMyAdmin中发生。'
- en: Contrary to routines that are related to an entire database and are visible
    on the database's **Structure** page, triggers for each table are accessed from
    this specific table's **Structure** page.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与与整个数据库相关的例程不同，每个表的触发器可以从该特定表的**结构**页面访问。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Prior to MySQL 5.1.6, we needed the `SUPER` privilege to create and delete triggers.
    In version 5.1.6, a `TRIGGER` table-level privilege was added to the privilege
    system. Hence, a user no longer needs the powerful `SUPER` privilege for these
    tasks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.1.6之前，我们需要`SUPER`权限来创建和删除触发器。在5.1.6版本中，特权系统中添加了`TRIGGER`表级特权。因此，用户不再需要强大的`SUPER`权限来执行这些任务。
- en: In order to perform the following exercise, we will need a new `INT` column—`total_page_count`—in
    our `author` table.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行以下练习，我们将需要在我们的`author`表中添加一个新的`INT`列`total_page_count`。
- en: The idea here is that every time a book is created, its page count will be added
    to the total page count of the books from this author. Some people may advocate
    that it would be better not to keep a separate column for the total here, and
    instead compute the total every time we need it. In fact, a design decision must
    be made when dealing with this situation in the real world. Do we need to retrieve
    the total page count very quickly, for example, for web purposes? what is the
    response time to compute this value from a production table with thousands of
    rows? Anyway, since I need it as an example, the design decision is easy to make
    here.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是，每次创建一本书时，它的页数将被添加到该作者的书的总页数中。有些人可能主张最好不要为总数保留单独的列，而是在需要时每次计算总数。实际上，在处理这种情况时必须做出设计决策。我们是否需要非常快速地检索总页数，例如用于网页目的？从具有数千行的生产表中计算此值的响应时间是多少？无论如何，由于我需要它作为一个例子，这里的设计决策很容易做出。
- en: Let us not forget that following its addition to the table's structure, the
    `total_page_count` column should initially be seeded with the correct total. (However,
    this is not the purpose of our trigger.)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不要忘记，在将其添加到表的结构后，`total_page_count`列应该最初用正确的总数进行填充。（但是，这不是我们触发器的目的。）
- en: Manually creating a trigger
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建触发器
- en: 'The current phpMyAdmin version does not have an interface for trigger creation.
    Therefore, we enter the trigger definition in a query box taking special care
    to enter `//` in the delimiter box:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '当前的phpMyAdmin版本没有触发器创建界面。因此，我们在查询框中输入触发器定义时要特别注意在分隔符框中输入`//`： '
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Later, the **Structure** page for our `book` table reveals a new **Triggers**
    section that can be used the same way as routines, to edit or delete a trigger,
    as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们的`book`表的**结构**页面显示了一个新的**触发器**部分，可以像例程一样使用，用于编辑或删除触发器，如下面的屏幕截图所示：
- en: '![Manually creating a trigger](img/7782_17_08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: 手动创建触发器
- en: Testing the trigger
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试触发器
- en: Contrary to testing stored procedures or functions, there is neither a `CALL`
    sequence nor a function inside a `SELECT` statement to execute the trigger. Any
    time the defined operation (a book `INSERT)` happens, the code will execute (in
    our case, after the insertion). Therefore, we simply have to insert a new book
    to see that the `author.total_page_count` column is updated.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 与测试存储过程或函数相反，触发器中没有`CALL`序列，也没有在`SELECT`语句中执行触发器的函数。每当发生定义的操作（例如书籍`INSERT`）时，代码将执行（在我们的案例中是在插入后）。因此，我们只需插入一本新书，就可以看到`author.total_page_count`列被更新。
- en: Of course, a completely automatic management of this column would involve creating
    `AFTER UPDATE` and `AFTER DELETE` triggers on the `book` table.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，完全自动管理此列将涉及在`book`表上创建`AFTER UPDATE`和`AFTER DELETE`触发器。
- en: Using information_schema
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用information_schema
- en: In the SQL:2003 Standard, access to the data dictionary (or database metadata)
    is provided by a structure called `information_schema`. As this is part of the
    Standard, and already exists in other database systems, the decision to implement
    this feature into MySQL was a very good one.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL:2003标准中，通过称为`information_schema`的结构提供对数据字典（或数据库元数据）的访问。由于这是标准的一部分，并且已经存在于其他数据库系统中，决定将此功能实现到MySQL中是一个非常好的决定。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL has added some information that is not part of the standard, for example,
    `INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE`. Be aware of the fact that if you use
    this information in a software project, it might not be portable to other SQL
    implementations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL添加了一些标准之外的信息，例如`INFORMATION_SCHEMA.COLUMNS.COLUMN_TYPE`。请注意，如果您在软件项目中使用此信息，可能无法在其他SQL实现中移植。
- en: A phpMyAdmin user sees the `information_schema` as a normal database containing
    views. These views describe many aspects of the structure of the databases hosted
    on this server. The following screenshot shows a subset of what can be seen (and
    in fact, the only possible operation on this database is `SELECT):`
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin用户将`information_schema`视为包含视图的普通数据库。这些视图描述了托管在此服务器上的数据库结构的许多方面。以下屏幕截图显示了可以看到的部分内容（实际上，对于此数据库唯一可能的操作是`SELECT`）：
- en: '![Using information_schema](img/7782_17_09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![使用information_schema](img/7782_17_09.jpg)'
- en: Internally, phpMyAdmin can call the `information_schema`, instead of the corresponding
    `SHOW` statements to retrieve metadata. This behavior is controlled by the `$cfg['Servers'][$i]['DisableIS']`
    directive. Some `SELECT` operations involving a `WHERE` clause on `information_schema`
    are really slow (many minutes of wait time) when the server hosts hundreds of
    databases or tables, and this is yet to be fixed by the MySQL team; this is why
    this directive is set to `true` by default, thus avoiding the use of `information_schema`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，phpMyAdmin可以调用`information_schema`，而不是相应的`SHOW`语句来检索元数据。这种行为由`$cfg['Servers'][$i]['DisableIS']`指令控制。当服务器托管数百个数据库或表时，一些涉及`information_schema`上`WHERE`子句的`SELECT`操作非常慢（等待时间长达几分钟），而MySQL团队尚未解决这个问题；这就是为什么此指令默认设置为`true`，从而避免使用`information_schema`。
- en: The `$cfg['Servers'][$i]['hide_db']` parameter can be used to hide this "database"
    to users who might be confused by the sudden appearance of a database that they
    know nothing about. It will probably depend on their level of expertise in MySQL.
    On a multi-user installation of phpMyAdmin, we cannot please everyone about this
    parameter's value.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`$cfg[''Servers''][$i][''hide_db'']`参数可用于隐藏这个对于对MySQL水平不够熟悉的用户来说突然出现的数据库。这可能取决于他们在MySQL中的专业水平。在phpMyAdmin的多用户安装中，我们无法满足每个人对于此参数值的期望。'
- en: Partitioning
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分区
- en: User-defined partitioning (refer to [http://dev.mysql.com/doc/refman/5.1/en/partitioning.html](http://dev.mysql.com/doc/refman/5.1/en/partitioning.html))
    is offered in MySQL 5.1\. It allows us to "distribute portions of individual tables
    across a file system according to rules which you can set largely as needed".
    Using this feature in phpMyAdmin requires knowledge of its syntax as there are
    many partition types. Also, for each partition type, the number of partitions
    and the values associated with each partition are too random to be easily represented
    on a web interface.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.1提供了用户定义的分区（参考[http://dev.mysql.com/doc/refman/5.1/en/partitioning.html](http://dev.mysql.com/doc/refman/5.1/en/partitioning.html)）。它允许我们根据需要设置规则，将表的部分分布到文件系统中。在phpMyAdmin中使用此功能需要了解其语法，因为有许多分区类型。此外，对于每种分区类型，分区的数量和与每个分区关联的值过于随机，无法在Web界面上轻松表示。
- en: Creating a table with partitions
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建带有分区的表
- en: 'Let us try it by creating a table named `test` with one column **id**. On the
    table creation panel, if connected to a MySQL 5.1 server, phpMyAdmin shows a **PARTITION
    definition** dialog, as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过创建名为`test`的表并添加一个**id**列来测试。在连接到MySQL 5.1服务器时，如果在表创建面板上，phpMyAdmin会显示一个**分区定义**对话框，如下屏幕截图所示：
- en: '![Creating a table with partitions](img/7782_17_10.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![创建带有分区的表](img/7782_17_10.jpg)'
- en: 'Here, we enter a `PARTITION BY RANGE` clause, which will create partitions
    on the **id** column:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们输入一个`PARTITION BY RANGE`子句，它将在**id**列上创建分区：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Maintaining partitions
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维护分区
- en: 'For a table on which a partition has been defined, the **Operations** page
    displays a **Partition maintenance** dialog where we can:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已定义分区的表，**操作**页面显示了一个**分区维护**对话框，我们可以：
- en: Choose a partition and then request an action, such as **Rebuild**
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个分区，然后请求一个操作，比如**重建**
- en: Remove the partitioning
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除分区
- en: '![Maintaining partitions](img/7782_17_11.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![维护分区](img/7782_17_11.jpg)'
- en: Exporting a partition definition
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出分区定义
- en: 'Finally, exporting this `test` table in SQL mode produces statements with embedded
    comments that a MySQL 5.1 server would recognize and interpret in order to recreate
    the same partitions:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在SQL模式下导出此`test`表会生成带有嵌入式注释的语句，MySQL 5.1服务器将识别并解释这些语句以重新创建相同的分区：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Exploring the event scheduler
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索事件调度程序
- en: The **Event Scheduler** ([http://dev.mysql.com/doc/refman/5.1/en/events.html](http://dev.mysql.com/doc/refman/5.1/en/events.html)),
    another new feature of MySQL 5.1, permits the creation of tasks that will run
    automatically according to a schedule. The schedule is quite flexible and permits,
    for example, a statement to be run every ten seconds, starting from midnight of
    May 18, 2011\. These can be one-time events or recurring ones.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件调度程序**([http://dev.mysql.com/doc/refman/5.1/en/events.html](http://dev.mysql.com/doc/refman/5.1/en/events.html))，是MySQL
    5.1的另一个新功能，允许创建根据时间表自动运行的任务。时间表非常灵活，允许例如，从2011年5月18日午夜开始，每十秒运行一次语句。这些可以是一次性事件或定期事件。'
- en: Activating the scheduler
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活调度程序
- en: 'We should first verify whether the scheduler is active on our server. If not,
    we need to activate it. Otherwise, nothing will happen! We will start by entering
    the following statement in the query box:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先验证调度程序是否在我们的服务器上处于活动状态。如果没有，我们需要激活它。否则，什么也不会发生！我们将首先在查询框中输入以下语句：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we look in the results for a variable named `event_scheduler`. If this
    variable is set to `OFF`, we need to ask the system administrator (or someone
    with the `SUPER` privilege) to execute the following statement:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在结果中查找名为`event_scheduler`的变量。如果此变量设置为`OFF`，我们需要要求系统管理员（或具有`SUPER`特权的人）执行以下语句：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Granting EVENT permission
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授予EVENT权限
- en: Every user who wants to create or drop an event needs the `EVENT` privilege,
    either globally or on the database on which he or she plans to add the event.
    Please refer to [Chapter 19](ch19.html "Chapter 19. Administrating the MySQL Server")
    for details about granting such privileges.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每个想要创建或删除事件的用户都需要`EVENT`权限，可以是全局的，也可以是计划添加事件的数据库上的权限。有关授予此类权限的详细信息，请参阅[第19章](ch19.html
    "第19章。管理MySQL服务器")。
- en: Creating an event
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建事件
- en: 'The current phpMyAdmin version does not have an interface on which we could
    choose the various parts of the `CREATE EVENT` statement. Therefore, the only
    method left is to use the SQL query box to enter the statement and to understand
    its syntax! Here, we will use a totally fictitious example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的phpMyAdmin版本没有一个界面，我们可以在其中选择`CREATE EVENT`语句的各个部分。因此，唯一剩下的方法是使用SQL查询框来输入语句并理解其语法！在这里，我们将使用一个完全虚构的例子：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can now get some amusement by browsing the `author` table once in a while,
    and see the counter incrementing for author 1.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以偶尔浏览`author`表，看到作者1的计数器递增，从而获得一些乐趣。
- en: Manipulating events
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作事件
- en: 'Events are related to a single database, which is why you see an **Events**
    slider on the **Structure** page for the `marc_book` database. Activating it reveals
    the following panel:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 事件与单个数据库相关，这就是为什么在`marc_book`数据库的**Structure**页面上看到一个**Events**滑块。激活它会显示以下面板：
- en: '![Manipulating events](img/7782_17_12.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![操作事件](img/7782_17_12.jpg)'
- en: Indeed, this is a recurring event. We can use the first icon to edit the event
    (which will have the effect of deleting and recreating the event), and the second
    icon to remove it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这是一个经常发生的事件。我们可以使用第一个图标来编辑事件（这将导致删除和重新创建事件），使用第二个图标来删除事件。
- en: Exporting
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出
- en: It's possible to generate event-related statements at the end of an SQL database
    export file by selecting the **Add CREATE PROCEDURE / FUNCTION / EVENT** option.
    Please remember that some events may have an expiration time. Hence, they may
    have vanished between the time you create them and the time you attempt to export
    them, unless the `ON COMPLETION PRESERVE` clause was used when creating the event.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过选择**Add CREATE PROCEDURE / FUNCTION / EVENT**选项，在SQL数据库导出文件的末尾生成与事件相关的语句。请记住，一些事件可能有过期时间。因此，除非在创建事件时使用了`ON
    COMPLETION PRESERVE`子句，否则它们可能在您创建它们和尝试导出它们之间消失。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: MySQL 5.0's new features helped the product to comply with standards. Even though
    phpMyAdmin has limited support for these features (especially lacking a syntax-oriented
    editor), it has a basic set of features to work with views, routines, triggers,
    and `information_schema`. phpMyAdmin also supports MySQL 5.1 partitions and events.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.0的新功能帮助产品符合标准。尽管phpMyAdmin对这些功能的支持有限（尤其是缺乏面向语法的编辑器），但它具有一组基本的功能，可用于处理视图、例程、触发器和`information_schema`。phpMyAdmin还支持MySQL
    5.1的分区和事件。
- en: The next chapter covers the use of the tracking feature that permits the recording
    of changes made to a MySQL database via phpMyAdmin.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章介绍了使用跟踪功能，允许通过phpMyAdmin记录对MySQL数据库所做的更改。
