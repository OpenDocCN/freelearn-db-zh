["```\nCREATE TABLE if not exists emp_log (\n id int auto_increment primary key,\n emp_id int,\n date_created datetime\n);\n\n```", "```\n    BEGIN\n        INSERT INTO emp_log SET emp_id = NEW.id, date_created = NOW();\n    END\n    ```", "```\nSELECT\nemployee.first_name AS `first name`,\nemployee.last_name AS `last name`,\nemployee.title AS title,\nemp_log.date_created AS `date joined`,\ndepartment.`name` AS `department`\nFROM\nemployee\nLEFT JOIN department ON employee.department_id = department.id\nLEFT JOIN emp_log ON emp_log.emp_id = employee.id\n```", "```\nBEGIN\nSELECT Min(salary) INTO lowest_salary FROM employee;\n SELECT CONCAT_WS(\u2018\u2019 \u2018\u2019, first_name, last_name) INTO l_emp FROM em ployee WHERE salary = lowest_salary;\n SELECT Max(salary) INTO highest_salary FROM employee;\n SELECT CONCAT_WS(\u2018\u2019 \u2018\u2019, first_name, last_name) INTO h_emp FROM em ployee WHERE salary = highest_salary;\n SELECT Avg(salary) INTO average_salary FROM employee;\nEND\n```", "```\nCALL sp_salaries(@lowestsalary, @low_emp, @highestsalary, @high_emp, @averagesalary );\nSELECT @lowestsalary, @low_emp, @highestsalary, @high_emp, @averagesalary;\n\n```", "```\nBEGIN\nDECLARE fullname VARCHAR(50);\nSELECT CONCAT(first_name, \u2018\u2019 \u2018\u2019, last_name) INTO fullname\nFROM employee WHERE id = emp_id;\nRETURN fullname;\nEND\n```", "```\nmysql> SET GLOBAL EVENT_SCHEDULER=ON;\n\n```", "```\n    BEGIN\n    DROP TABLE IF EXISTS employee_backup;\n    CREATE TABLE employee_backup LIKE employee;\n    ALTER TABLE `employee_backup`\n    MODIFY COLUMN `id` int(11) NOT NULL FIRST;\n    INSERT employee_backup SELECT * FROM employee;\n    END\n    ```", "```\nSELECT\nCONCAT_WS(\u2018\u2019 \u2018\u2019,employee.first_name,employee.last_name) AS FullName,\nemployee.Title,\nCONCAT(\u2018\u2019$ \u2018\u2019,FORMAT(employee.salary,2) ) AS Salary,\nemployee.Perks,\ndepartment.`name` AS Dept,\nCONCAT_WS(\u2018\u2019 \u2018\u2019,manager.first_name,manager.last_name) AS ManagerName\nFROM employee\nLEFT JOIN department ON department.id = employee.department_id\nLEFT JOIN employee AS manager ON employee.manager_id = manager.id\nWHERE\n(employee.salary > 15000 OR\nemployee.perks > 1500) AND\nemployee.title <> \u2018\u2019CEO\u2019\u2019 \nORDER BY employee.salary DESC, employee.perks DESC\n```"]