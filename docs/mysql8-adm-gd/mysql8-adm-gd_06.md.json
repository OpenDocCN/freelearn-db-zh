["```go\n mysql> INSTALL PLUGIN MyExample SONAME 'MyExample.so';\n```", "```go\n mysql> UNINSTALL PLUGIN MyExample ;\n```", "```go\nCREATE TABLE table1 (i1 INT) ENGINE = INNODB;\nCREATE TABLE table3 (i3 INT) ENGINE = MEMORY;\nALTER TABLE table3 ENGINE = InnoDB;\n```", "```go\nSET default_storage_engine=MEMORY;\n```", "```go\n--myisam-recover-options=mode\n```", "```go\nmysql> SHOW TABLES FROM INFORMATION_SCHEMA LIKE 'INNODB%';\n```", "```go\nstruct st_mysql_show_var {   \n  const char *name;   \n  char *value;   \n  enum enum_mysql_show_type type; \n};\n```", "```go\nhandlerton example_hton= {\n \"EXAMPLE\", /* Name of the storage engine */\n SHOW_OPTION_YES, /* It should be displayed in options or not */\n \"Example storage engine\", /* Description of the storage engine */\n DB_TYPE_EXAMPLE_DB, /* Type of storage engine it should refer to */\n NULL, /* Initialize handlerton */\n 0, /* slot  available */\n 0, /* define savepoint size. */\n NULL, /* handle close_connection */\n NULL, /* handle savepoint */\n NULL, /* handle rollback to savepoint */\n NULL, /* handle release savepoint */\n NULL, /* handle commit */\n NULL, /* handle rollback */\n NULL, /* handle prepare */\n NULL, /* handle recover */\n NULL, /* handle commit_by_xid */\n NULL, /* handle rollback_by_xid */\n NULL, /* handle create_cursor_read_view */\n NULL, /* handle set_cursor_read_view */\n NULL, /* handle close_cursor_read_view */\n example_create_handler, /* Create a new handler instance */\n NULL, /* handle drop database */\n NULL, /* handle panic call */\n NULL, /* handle release temporary latches */\n NULL, /* Update relevant Statistics */\n NULL, /* Start Consistent Snapshot for reference */\n NULL, /* handle flush logs */\n NULL, /* handle show status */\n NULL, /* handle replication Report Sent to Binlog */\n HTON_CAN_RECREATE\n};\n```", "```go\nstatic handler* tina_create_handler(TABLE *table);\n```", "```go\nstatic handler *myisam_create_handler(TABLE *table)\n {\n return new ha_myisam(table);\n }\n```", "```go\nconst char **ha_tina::bas_ext() const\n{\n return ha_tina_exts;\n}\n```", "```go\nvirtual int create(const char *name, TABLE *form, HA_CREATE_INFO *info)=0;\n```", "```go\ntypedef struct st_ha_create_information\n{\n CHARSET_INFO *table_charset, *default_table_charset; /* charset in table */\n LEX_STRING connect_string; /* connection string */\n const char *comment,*password; /* storing comments and password values */\n const char *data_file_name, *index_file_name; /* data and index file names */\n const char *alias; /* value pointer for alias */\n ulonglong max_rows,min_rows;\n ulonglong auto_increment_value;\n ulong table_options;\n ulong avg_row_length;\n ulong raid_chunksize;\n ulong used_fields;\n SQL_LIST merge_list;\n enum db_type db_type; /* value for db_type */\n enum row_type row_type; /* value for row_type */\n uint null_bits; /* NULL bits specified at start of record */\n uint options; /* OR of HA_CREATE_ options specification */\n uint raid_type,raid_chunks; /* raid type and chunks info */\n uint merge_insert_method;\n uint extra_size; /* length of extra data segments */\n bool table_existed; /* 1 in create if table existed */\n bool frm_only; /* 1 if no ha_create_table() */\n bool varchar; /* 1 if table has a VARCHAR */\n} HA_CREATE_INFO;\n```", "```go\nint open(const char *name, int mode, int test_if_locked);\n```", "```go\n#define HA_OPEN_ABORT_IF_LOCKED 0 /* default */\n#define HA_OPEN_WAIT_IF_LOCKED 1 /* wait if table is locked */\n#define HA_OPEN_IGNORE_IF_LOCKED 2 /* ignore if locked */\n#define HA_OPEN_TMP_TABLE 4 /* Table is a temp table */\n#define HA_OPEN_DELAY_KEY_WRITE 8 /* Don't update index */\n#define HA_OPEN_ABORT_IF_CRASHED 16\n#define HA_OPEN_FOR_REPAIR 32 /* open even if crashed with repair */\n```", "```go\nha_tina::store_lock\nha_tina::external_lock\nha_tina::info\nha_tina::rnd_init\nha_tina::extra - ENUM HA_EXTRA_CACHE Cache record in HA_rrnd()\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::rnd_next\nha_tina::extra - ENUM HA_EXTRA_NO_CACHE End caching of records (def)\nha_tina::external_lock\nha_tina::extra - ENUM HA_EXTRA_RESET Reset database to after open\n```", "```go\nint ha_tina::close(void)\n {\n DBUG_ENTER(\"ha_tina::close\");\n DBUG_RETURN(free_share(share));\n }\n```"]