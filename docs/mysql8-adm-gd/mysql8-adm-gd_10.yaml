- en: MySQL 8 – Scalability and High Availability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8 – 可扩展性和高可用性
- en: 'In this chapter, we will cover the following important topics for MySQL 8 scalability
    and high availability:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖MySQL 8可扩展性和高可用性的以下重要主题：
- en: Overview of scalability and high availability in MySQL 8
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8中可扩展性和高可用性的概述
- en: Scaling MySQL 8
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展MySQL 8
- en: Challenges in scaling MySQL 8
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8的扩展性挑战
- en: Achieving high availability
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现高可用性
- en: Before we move on to the details, let's have an overview of scalability and
    high availability in MySQL 8
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续详细讨论之前，让我们先来了解一下MySQL 8中的可扩展性和高可用性
- en: Overview of scalability and high availability in MySQL 8
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8中可扩展性和高可用性的概述
- en: In any type of application, be it mobile, web portals, websites, social, e-commerce,
    enterprise or cloud applications, data is the core portion of the business. Data
    availability is considered an utmost concern for any business or organization.
    Data loss or any downtime of an application can result in a heavy loss in terms
    of money and also impact the credit of the company in the market.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何类型的应用程序中，无论是移动、Web门户、网站、社交、电子商务、企业还是云应用程序，数据都是业务的核心部分。数据可用性被认为是任何企业或组织的最重要关注点。数据丢失或应用程序的任何停机都可能导致严重的财务损失，也会影响公司在市场上的信誉。
- en: If we consider an example of an online shopping site which has a nicely covered
    market in a specific area, with customers and good business credit. If this business
    faced an issue with data loss or any application server or database server downtime,
    it would impact the whole business. Many customers would lose faith in the business
    and also the business would suffer a loss both in terms of finance and credit.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑一个在线购物网站的例子，它在特定区域有一个良好覆盖的市场，有客户和良好的商业信誉。如果这家企业面临数据丢失或任何应用程序服务器或数据库服务器的停机问题，将影响整个业务。许多客户会失去对企业的信任，企业也会在财务和信用方面遭受损失。
- en: There is no single formula that can provide a solution. Different businesses
    have their own application requirements, business needs, distinct processes, different
    infrastructure in different locations, and operational competencies. In these
    circumstances, technology plays a major role in achieving high availability.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一个单一的公式可以提供解决方案。不同的企业有他们自己的应用程序需求、业务需求、不同的流程、不同地点的不同基础设施和运营能力。在这些情况下，技术在实现高可用性方面起着重要作用。
- en: As per the requirements of scalability and high availability, MySQL can be used
    for various applications, and as per need it is capable of overcoming failures,
    including failures of MySQL, failures from the operating system, or any planned
    maintenance activity that may impact availability. Scalability in simple terms,
    that has the capability to distribute database load and application queries between
    MySQL servers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据可扩展性和高可用性的要求，MySQL可以用于各种应用程序，并且根据需要能够克服故障，包括MySQL的故障、操作系统的故障或可能影响可用性的任何计划维护活动。简单来说，可扩展性具有在MySQL服务器之间分配数据库负载和应用程序查询的能力。
- en: The attributes that matter when choosing the right solution for high availability
    depend on to what extent the system can be called highly available, as such requirements
    vary from system to system. For smaller applications, where the user load is not
    expected to be very high, setting up the replication or cluster environment can
    result in very high cost. In such cases, providing the correct configuration of
    the MySQL can also be enough to reduce application load.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的高可用性解决方案时，重要的属性取决于系统可以被称为高可用性的程度，因此这些要求因系统而异。对于较小的应用程序，用户负载预计不会很高，设置复制或集群环境可能会导致非常高的成本。在这种情况下，提供正确的MySQL配置也足以减少应用程序负载。
- en: The following sections briefly describe the primary solutions supported by MySQL
    8 for high availability.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分简要描述了MySQL 8支持的主要高可用性解决方案。
- en: MySQL replication
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL复制
- en: MySQL replication allows data from one server to be replicated onto the multiple
    MySQL servers. MySQL replication provides master-slave design, so that one of
    the servers from the group acts as a master where write operations are performed
    from the application and then the master server copies the data to the multiple
    slave servers. Replication is a well established solution for high availability
    and is used by the social giants such as Facebook, Twitter, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL复制允许将一个服务器上的数据复制到多个MySQL服务器上。MySQL复制提供主从设计，因此组中的一个服务器充当主服务器，应用程序执行写操作，然后主服务器将数据复制到多个从服务器。复制是高可用性的一个成熟解决方案，被Facebook、Twitter等社交巨头使用。
- en: MySQL cluster
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL集群
- en: This is another popular high availability solution for MySQL. Clustering enables
    data to be replicated to multiple MySQL servers with automated sharing. It is
    designed for better availability and throughput.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是MySQL的另一个流行的高可用性解决方案。集群使数据能够自动共享到多个MySQL服务器上进行复制。它旨在提供更好的可用性和吞吐量。
- en: Oracle MySQL cloud service
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle MySQL云服务
- en: Oracle MySQL cloud service provides an efficient means to help build a secure,
    cost-effective MySQL database as a service for applications used in modern world.
    It proves to be scalable and cost-efficient with less resource utilization for
    managing the service when compared to on-premises.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle MySQL云服务提供了一种有效的方式来构建一个安全、具有成本效益的MySQL数据库服务，用于现代应用程序。与本地部署相比，它被证明是可扩展和成本效益的，资源利用率较低。
- en: MySQL with the Solaris cluster
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有Solaris集群的MySQL
- en: The sun Solaris cluster provided by the MySQL data service provides a mechanism
    for orderly startup and shutdown, fault monitoring, and automatic failover of
    the MySQL service. The following MySQL components are protected by the sun cluster
    HA for the MySQL data service.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据服务提供的Sun Solaris集群提供了有序启动和关闭、故障监控和MySQL服务的自动故障转移机制。Sun集群HA保护的MySQL数据服务的以下MySQL组件。
- en: 'There are some further options available using third-party solutions. Each
    architecture that is used to achieve highly available database services is differentiated
    by the levels of uptime that each offers. These architectures can be grouped into
    three main categories:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第三方解决方案可以获得更多选项。用于实现高可用数据库服务的每种架构都因其提供的可用性水平而有所不同。这些架构可以分为三个主要类别：
- en: Data replication
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据复制
- en: Clustered and virtualized systems
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群化和虚拟化系统
- en: Geographically-replicated clusters
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理复制集群
- en: Based on the best answer to the question, you can select the right option for
    your application with optimal cost and a highly available solution. This discussion
    gives us a fair overview of MySQL 8's high availability.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据问题的最佳答案，您可以选择适合您的应用程序的正确选项，以实现最低成本和高可用性解决方案。这次讨论为我们提供了MySQL 8高可用性的公平概述。
- en: Scaling MySQL 8
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8的扩展
- en: Scalability is the ability to distribute the load of any application queries
    across various MySQL instances. For some cases, it is unpredictable that data
    cannot exceed up to some limit or the number of users will not go out of bounds.
    Scalable databases would be a preferable solution so that, at any point, we can
    meet unexpected demands of scale. MySQL is a rewarding database system for its
    scalability, which can scale horizontally and vertically; in terms of data, distribution
    of client queries across various MySQL instances is quite feasible. It is pretty
    easy to add horsepower to the MySQL cluster to handle the load.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可伸缩性是将任何应用程序查询的负载分布到各种MySQL实例的能力。对于某些情况，数据不能超过某个限制或用户数量不会超出范围是不可预测的。可扩展的数据库将是一个更可取的解决方案，以便在任何时候我们都能满足规模的意外需求。MySQL是一个有回报的数据库系统，因为它具有可扩展性，可以在水平和垂直方面进行扩展；在数据方面，将客户端查询分布到各种MySQL实例是相当可行的。向MySQL集群添加性能非常容易，以处理负载。
- en: 'The requirements for achieving **High Availability** (**HA**) and scalability
    may vary from system to system. Each system requires a different configuration
    in order to achieve these abilities. There are many questions that come to mind
    when we think about scaling in MySQL, and while we perform scaling operations
    in MySQL:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 实现高可用性（HA）和可伸缩性的要求可能因系统而异。每个系统都需要不同的配置才能实现这些能力。当我们考虑在MySQL中进行扩展时，会有许多问题，而在我们在MySQL中执行扩展操作时：
- en: Why is scaling required?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么需要扩展？
- en: What are the advantages of scaling in MySQL?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL中扩展的优势是什么？
- en: What points need to put across in our minds when we perform scaling in MySQL?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们在MySQL中进行扩展时，需要牢记哪些要点？
- en: How will scaling work?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何进行扩展工作？
- en: Is it secure for data - does it provide surety of data security?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据安全吗-它是否提供数据安全的保证？
- en: Plus many more...
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有很多...
- en: Let's take a real time example to understand why we need scaling in MySQL. We
    have an online e-commerce website that has covered a small market, with limited
    users and limited hits on the website, with a single database server. The business
    is growing up nicely; the performance of the business is continuously increasing
    and the user count is increasing, and with our single database server all requests
    and performance cannot be scaled at all time. This may possibly result in a server
    crash and the business might face loss in terms of profit and credit in the market.
    To avoid such a situation, scalability will perform a major part. If any request
    from a customer fails due to any reason, or if the node goes down, the other node
    will take care of it quickly and give the appropriate response to the customer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个实时例子来理解为什么我们需要在MySQL中进行扩展。我们有一个在线电子商务网站，它已经覆盖了一个小市场，用户和网站的点击量有限，只有一个数据库服务器。业务正在不断增长；业务的性能不断提高，用户数量也在增加，但我们的单个数据库服务器并不能始终满足所有请求和性能的扩展。这可能导致服务器崩溃，业务可能会在利润和市场信用方面遭受损失。为了避免这种情况，可伸缩性将发挥重要作用。如果由于任何原因客户的请求失败，或者节点宕机，其他节点将迅速处理并向客户提供适当的响应。
- en: Scaling is required for the continuous increase in performance of database response
    time and to improve the productivity of the product. It will help the end product
    in terms of data scalability, performance, and better results. Cluster and replication
    are both key features in MySQL that can be leveraged for scaling.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是为了持续提高数据库响应时间的性能和提高产品的生产力。它将有助于最终产品在数据可伸缩性、性能和更好结果方面。集群和复制都是MySQL中可以用于扩展的关键功能。
- en: Scaling using cluster
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用集群进行扩展
- en: 'Basic cluster architecture is divided into four different layers:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基本集群架构分为四个不同的层：
- en: Client node
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端节点
- en: Application node
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用节点
- en: Management node
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理节点
- en: Data node
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据节点
- en: 'These are shown in the following image:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些显示在以下图像中：
- en: '![](img/ef6c457f-cd0a-4f1e-99c4-762f718450e4.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef6c457f-cd0a-4f1e-99c4-762f718450e4.png)'
- en: Client node
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端节点
- en: The client node is an end user or application that sends a request for any query
    in terms of read data or write data from a different device, such as a computer,
    mobile, tablet, and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端节点是发送来自不同设备（如计算机、手机、平板电脑等）的读取数据或写入数据的查询请求的最终用户或应用程序。
- en: Application node
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用节点
- en: The application node is meant to provide the bridge between the logic of the
    application and the nodes containing the data in MySQL. Applications can access
    the data, which is stored in the MySQL cluster, by SQL, with one or many MySQL
    servers using the function of SQL. In the application we have multiple technologies
    from where we connect to the MySQL server. We connect MySQL server with standard
    the MySQL connectors, which gives us the ability to connect with a wide range
    of access technologies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 应用节点旨在提供应用程序逻辑和包含MySQL数据的节点之间的桥梁。应用程序可以通过SQL访问存储在MySQL集群中的数据，使用SQL的一个或多个MySQL服务器。在应用程序中，我们有多种技术可以连接到MySQL服务器。我们使用标准的MySQL连接器连接MySQL服务器，这使我们能够与各种访问技术连接。
- en: As another option, we have NDB API; a high performance interface that can be
    used to control real-time user experiences and provide better throughput. In MySQL
    we have NDB API, which adds a layer additionally to NoSQL interfaces that consist
    capability to access the cluster directly. Application nodes can fetch data from
    all the data nodes, so the only cause of failure can be the unavailability of
    application services, as the application can use all data nodes to perform data
    manipulation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一种选择，我们有NDB API；一个高性能接口，可用于控制实时用户体验并提供更好的吞吐量。在MySQL中，我们有NDB API，它在NoSQL接口之外添加了一层，具有直接访问集群的能力。应用节点可以从所有数据节点获取数据，因此故障的唯一原因可能是应用服务不可用，因为应用可以使用所有数据节点来执行数据操作。
- en: Management node
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理节点
- en: The management node performs the important role of publishing relevant cluster
    information across the nodes in its cluster, along with node management. Nodes
    for management work at startup when all nodes want to join the MySQL cluster and
    also when reconfiguration of the system is required. The management node can be
    stopped and restart all services without damaging or impacting an ongoing operation,
    execution, or processing of data and the application node.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 管理节点在其集群中发布相关的集群信息，以及节点管理。管理节点在所有节点希望加入MySQL集群以及需要重新配置系统时启动时起作用。管理节点可以停止并重新启动所有服务，而不会损害或影响正在进行的操作、执行或数据和应用节点的处理。
- en: Data node
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据节点
- en: The data nodes stores the data. Tables get shared across the data nodes, which
    also helps to handle load balancing, replication, and high availability failover.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 数据节点存储数据。表在数据节点之间共享，这也有助于处理负载平衡、复制和高可用性故障转移。
- en: 'Data nodes are the main nodes of a MySQL cluster solution. It provides the
    following functionality and benefits:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数据节点是MySQL集群解决方案的主要节点。它提供以下功能和好处：
- en: Data storage and management of disk-based and in-memory data
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 磁盘和内存数据的数据存储和管理
- en: In a shared-nothing scenario, data is stored in at least one replica without
    the use of shared-disk space. MySQL create one replica of the database which does
    a synchronous replication process. If any data node fails due to any specific
    reason, the replicated data will take care of it and provide the respective output.
    It does a synchronous copy of the node so it consists of the same data as the
    main node data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在共享无情景况下，数据存储在至少一个副本中，而无需使用共享磁盘空间。MySQL创建数据库的一个副本，进行同步复制过程。如果任何数据节点由于任何特定原因失败，复制的数据将处理并提供相应的输出。它对节点进行同步复制，因此它包含与主节点数据相同的数据。
- en: We can store the data either in memory or partially on disk based on the requirement.
    Data that frequently change are suggested to be stored in-memory. In-memory data
    is routinely checked with the local disk and coordinates to update the data to
    the rest of the data nodes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需求，我们可以将数据存储在内存中或部分存储在磁盘上。频繁更改的数据建议存储在内存中。内存中的数据会定期与本地磁盘进行检查，并协调将数据更新到其余数据节点。
- en: Automatic and user-defined partitioning of tables or sharding of tables
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表的自动和用户定义的分区或分片
- en: MySQL cluster provides low latency, high throughput, scalability, and high availability.
    This adopts horizontal scaling and auto sharding to serve heavy load read/write
    operations through the different NoSQL queries. An NDB cluster is a set of different
    nodes where each task is running on its own processor.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL集群提供低延迟、高吞吐量、可伸缩性和高可用性。它采用水平扩展和自动分片来通过不同的NoSQL查询提供重载读/写操作。NDB集群是一组不同的节点，每个任务在其自己的处理器上运行。
- en: Synchronous data replication between data nodes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据节点之间的同步数据复制
- en: When we have data replication for the data node it follows synchronous replication,
    so at any time all node data will be in-sync. If any node fails for any reason,
    the other nodes have the same data and so will be able to provide the data for
    a query. So, without any downtime for data response, MySQL provides a perfect
    solution.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为数据节点进行数据复制时，它遵循同步复制，因此任何时候所有节点数据都将同步。如果任何节点由于任何原因失败，其他节点具有相同的数据，因此将能够为查询提供数据。因此，MySQL提供了完美的无数据响应停机时间的解决方案。
- en: Data retrieval and transactions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据检索和事务
- en: MySQL supports each of the transactions that can be mapped, as it is committed
    on the master server and applied on the slave server. This method is not referring
    to `binlog` files or the relevant position in the `binlog` file. `GTID` replication
    is solely working based on transactions; it becomes very easy to identify whether
    the master and the slave servers are in sync or not.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持可以映射的每个事务，因为它在主服务器上提交并应用于从服务器上。这种方法不是指`binlog`文件或`binlog`文件中的相关位置。`GTID`复制仅基于事务工作；很容易确定主服务器和从服务器是否同步。
- en: Automatic fail over
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动故障转移
- en: If any data node fails for any reason, the other nodes take responsibility and
    gives the response to the request. Replication of the database is very helpful
    in critical conditions of downtime or a failure in any of the nodes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何数据节点由于任何原因失败，其他节点将负责并响应请求。数据库的复制在停机或任何节点发生故障的关键情况下非常有帮助。
- en: Automatic re-synchronization for self-healing after failure
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障后自动重新同步进行自我修复。
- en: If any node is failed it will start automatically and again perform the synchronization
    of data to the rest of the nodes, which are active nodes, and copy all recent
    data in the node. In that case it does self-healing of the failures.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何节点失败，它将自动启动并再次对其余节点执行数据同步，并在节点中复制所有最新数据。在这种情况下，它对故障进行自我修复。
- en: Scaling using memcached in MySQL 8
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MySQL 8中使用memcached进行扩展
- en: In MySQL 8, using memcached is one of the ways to achieve scalability. Memcached
    is a simple and highly scalable solution for storing data in key and value form
    in cache whenever memory is available. Memcached is commonly used for quick access
    of data. Data stored in memory doesn't have I/O operations performed for fetching
    the data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中，使用memcached是实现可伸缩性的一种方式。Memcached是一种简单且高度可伸缩的解决方案，可以在内存可用时以键值形式将数据存储在缓存中。Memcached通常用于快速访问数据。存储在内存中的数据不需要执行I/O操作来获取数据。
- en: As all the information is stored in memory, the access speed for data is much
    faster than compared to loading every time from disk and results in a better query
    execution time on the database server. This plugin also has the feature of serialization,
    which converts binary files, code blocks, or any other objects to strings that
    can be stored, and provides a simple means to retrieve such objects. While specifying
    a memory allocation it should not be larger than the available physical memory
    of the server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有信息都存储在内存中，因此数据的访问速度比每次从磁盘加载要快得多，并且可以在数据库服务器上获得更好的查询执行时间。该插件还具有序列化功能，可以将二进制文件、代码块或任何其他对象转换为可以存储的字符串，并提供了检索这些对象的简单方法。在指定内存分配时，不应大于服务器可用的物理内存。
- en: 'If you specify too large of a value then some of the memory allocated for memcached
    will use swap space and not physical memory. This may lead to delays when storing
    and retrieving values because data is swapped to disk instead of storing the data
    directly in memory:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定的值过大，那么为memcached分配的一些内存将使用交换空间而不是物理内存。这可能会导致存储和检索值时出现延迟，因为数据被交换到磁盘而不是直接存储在内存中。
- en: '![](img/1e6e6d77-6a4d-4480-ab5b-2e6faaf58d92.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e6e6d77-6a4d-4480-ab5b-2e6faaf58d92.png)'
- en: The preceding image depicts memcached architecture, which displays the flow
    of the data from memcached to a client or an end user, or a request of the data
    from an application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图片描述了memcached架构，显示了数据从memcached流向客户端或最终用户，或者从应用程序请求数据的流程。
- en: The data in memcached never gets stored in the database. It's always available
    in memory itself. If either of the memcached servers fail, data will be fetched
    from the database, so it will not impact end-users for data retrieval or have
    a major performance impact on the application. The only thing need to keep in
    mind while we use a memcached server is that data related to any important information,
    for instance a financial transaction, should not be placed in memcached. In that
    case if there is a failure in memcached, the data might not be retrieved. In a
    memcached server data integrity is not healthy as it stores in memory, so during
    failure it would be good to have data that is important not saved in memcached.
    When configuring a memcached server, memory size is the key factor. If there is
    improper configuration, then you can expect a bad situation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在memcached中的数据永远不会存储在数据库中。它始终在内存中可用。如果其中一个memcached服务器失败，数据将从数据库中获取，因此不会影响最终用户的数据检索，也不会对应用程序产生重大性能影响。在使用memcached服务器时唯一需要牢记的是，与任何重要信息相关的数据，例如财务交易，不应放置在memcached中。在这种情况下，如果memcached发生故障，可能无法检索数据。在memcached服务器中，数据完整性不健康，因为它存储在内存中，因此在发生故障时最好不要将重要数据保存在memcached中。在配置memcached服务器时，内存大小是关键因素。如果配置不当，就可能会出现糟糕的情况。
- en: This way we can use memcached to scale the MySQL server for an increased data
    response time, and to provide faster performance. It will reduce the load on MySQL
    server and multiple servers as a part of cache group and also provides an interface
    for multiple languages. It is suggested to be used ideally when there are heavy
    read operations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以使用memcached来扩展MySQL服务器，以提高数据响应时间，并提供更快的性能。这将减轻MySQL服务器和多个服务器的负载作为缓存组的一部分，并为多种语言提供接口。建议在有大量读取操作时使用。
- en: NoSQL APIs
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoSQL API
- en: MySQL cluster provides numerous ways to help access the data store. One of most
    generic way is leveraging SQL; however, in real-world use cases we can also depend
    on native APIs, which allow the fetching of the data from within the database
    without affecting performance or adding further complexity by developing an application
    to convert SQL.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL集群提供了许多方法来帮助访问数据存储。最通用的方法之一是利用SQL；然而，在实际用例中，我们也可以依赖于本机API，它允许从数据库内部获取数据，而不会影响性能或增加进一步的复杂性，因为需要开发应用程序来转换SQL。
- en: Scaling using replication
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复制进行扩展
- en: 'Replication is the copying of a MySQL database. MySQL provides replication
    with a different approach. MySQL has a feature of replication that provides scale-out
    solutions, data security, long distance data distribution and many more benefits.
    We have discussed this at length in [Chapter 8](03c98d39-8cb9-4171-beb1-0bd9dcaac81a.xhtml),
    *Replication in MySQL 8*. The following image explains the basic architecture
    of replication in MySQL:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 复制是MySQL数据库的复制。MySQL提供了不同的复制方法。MySQL具有复制功能，提供了扩展解决方案、数据安全、远程数据分发等许多好处。我们在[第8章](03c98d39-8cb9-4171-beb1-0bd9dcaac81a.xhtml)中详细讨论了这一点，*MySQL
    8中的复制*。以下图片解释了MySQL中复制的基本架构：
- en: '![](img/9be2c06c-0f31-46ed-b91a-d69bc37f763c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9be2c06c-0f31-46ed-b91a-d69bc37f763c.png)'
- en: Replication is one of the best features of MySQL. It simply creates a copy of
    the data to the new server or another physical machine, which will import the
    data from the master server. Whenever the data is required it will populate the
    accurate results. It follows the master and slave approach for the replication.
    The master database is the actual database of the application and the slave database
    is created by MySQL in the database server of another physical server, which contains
    replicated data from the master server. We can configure the slave database for
    the specific operation, such as when the query relates to reading the data from
    the database; we can execute this on the slave server. In this case the master
    data will have less load than earlier. Suppose we have a ratio of the 40% write
    data query and 60% read data query; in this case if we have a single server it
    will handle all operations related to the read and write operation. But, as defined
    in the preceding image we have replicated the database in two different servers
    and read operations are performed on the slave servers, so we can make use of
    one of the slave server to perform complex read queries. This makes it possible
    to generate reports for doing data analysis on MySQL 8, as performing complex
    read queries will not impact the overall application performance.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 复制是MySQL的最佳功能之一。它简单地将数据复制到新服务器或另一台物理机器上，该服务器将从主服务器导入数据。每当需要数据时，它将填充准确的结果。它遵循主从复制的方法。主数据库是应用程序的实际数据库，从数据库是由MySQL在另一台物理服务器的数据库服务器中创建的，其中包含来自主服务器的复制数据。我们可以为特定操作配置从数据库，例如当查询涉及从数据库读取数据时，我们可以在从服务器上执行此操作。在这种情况下，主数据的负载将比以前少。假设我们有40%的写入数据查询和60%的读取数据查询比例；在这种情况下，如果我们有一台单独的服务器，它将处理与读写操作相关的所有操作。但是，如前图所定义，我们已经将数据库复制到两个不同的服务器中，并且读操作是在从服务器上执行的，因此我们可以利用其中一个从服务器来执行复杂的读查询。这使得在MySQL
    8上进行数据分析报告成为可能，因为执行复杂的读查询不会影响整体应用程序性能。
- en: In standard MySQL replication the master server creates binary log files and
    maintains the index of the log files to maintain and keep track of log rotation.
    The binary log files serve the records updates and are sent to the slave server.
    When the slave server connects to the master database server it considers the
    last position it has read in the log files, after which the slave server then
    receives any updates that have taken place since that time. The slave subsequently
    blocks and waits for the master to notify it for further updates.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准的MySQL复制中，主服务器创建二进制日志文件并维护日志文件的索引以维护和跟踪日志轮换。二进制日志文件用于记录更新，并发送到从服务器。当从服务器连接到主数据库服务器时，它会考虑它在日志文件中读取的最后位置，之后从服务器将接收自那时以来发生的任何更新。从服务器随后会阻塞并等待主服务器通知其进行进一步更新。
- en: The question in mind is why do we need replication? Or, what is the purpose
    of the replication? If replication requires another database server, complexity,
    and additional configuration, it increases the maintenance and monitoring time.
    Still, we have many additional benefits for business and database admin.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 心中的问题是为什么我们需要复制？或者，复制的目的是什么？如果复制需要另一个数据库服务器、复杂性和额外的配置，它会增加维护和监控时间。尽管如此，对于企业和数据库管理员来说，我们仍然有许多额外的好处。
- en: Single server dependancy
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单服务器依赖
- en: In any case, if the master database server fails we can easily switch our database
    connection to the replicated slave server to provide stability in critical situations.
    This includes if there is network failure, server failure, hardware issues, and
    many more reasons for failure.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，如果主数据库服务器失败，我们可以轻松地将数据库连接切换到复制的从服务器，以在关键情况下提供稳定性。这包括网络故障、服务器故障、硬件问题等失败原因。
- en: Performance
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: Performance is the main part in the database. When we have a distributed database
    over multiple servers we can connect different applications to different database
    servers to increase performance. This feature reduces the response time of the
    query.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是数据库的主要部分。当我们在多个服务器上拥有分布式数据库时，我们可以将不同的应用程序连接到不同的数据库服务器以提高性能。此功能减少了查询的响应时间。
- en: Backup and recovery
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份和恢复
- en: Replication helps back up the master database. It is more efficient than storing
    the database on disk. Users can store the database in the master using the replicated
    database as a backup instead of digging up the backup files. When required to
    restore the data of the master server a user can easily get it from the slave
    server, with no need to work on the backup files and go about finding the last
    updates and other operations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 复制有助于备份主数据库。它比将数据库存储在磁盘上更有效。用户可以使用复制的数据库将数据库存储在主数据库中，作为备份，而不是挖掘备份文件。当需要恢复主服务器的数据时，用户可以轻松地从从服务器获取，而无需处理备份文件并寻找最后的更新和其他操作。
- en: Load distribution
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载分布
- en: By using the replication load of the database, query execution can be reduced;
    we can split read and write operations over the databases. If we execute write
    operations in the master database and read operations in the slave database that
    will improve the response time of the application. We can create load balanced
    environments in MySQL, which share the load of all requests to the database server.
    The load balancer then further sends requests to the database that can handle
    each transaction with much better throughput.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用数据库的复制负载，可以减少查询执行；我们可以将读写操作分割到不同的数据库中。如果我们在主数据库中执行写操作，并在从数据库中执行读操作，这将改善应用程序的响应时间。我们可以在MySQL中创建负载平衡的环境，以分享对数据库服务器的所有请求的负载。负载平衡器随后进一步将请求发送到可以处理每个事务的数据库，从而获得更好的吞吐量。
- en: Asynchronous data replication
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步数据复制
- en: Asynchronous data replication means that data is copied from one machine to
    another, with a resultant delay. This delay is based on networking bandwidth,
    resource availability, or a time interval set by the administrator in configuration.
    The correct configuration and time setting provides an accurate result in response.
    It's based on the network administrator's configuration. Synchronous data replication
    implies that data is committed to one or more machines at the same time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 异步数据复制意味着数据从一台机器复制到另一台机器，会有一定的延迟。这种延迟基于网络带宽、资源可用性或管理员在配置中设置的时间间隔。正确的配置和时间设置可以提供准确的响应结果。这是基于网络管理员的配置。同步数据复制意味着数据同时提交到一个或多个机器。
- en: Geographical data distribution
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理数据分布
- en: Group replication makes it possible to copy the master's data to the slave server
    that resides at a remote location and perform the read operations for a separate
    group of client without impacting the master's operations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 组复制使得可以将主服务器的数据复制到位于远程位置的从服务器，并为一个独立的客户组执行读操作，而不会影响主服务器的操作。
- en: GTID replication
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GTID复制
- en: '**Global transaction identifiers** (**GTID**) uses transaction based replication
    of data instead of binary log file based replication. Until and unless transactions
    that have been operated and committed on the master servers are present on all
    the slave servers, GTID will not consider replication in a consistent state.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**全局事务标识符**（**GTID**）使用基于事务的数据复制，而不是基于二进制日志文件的复制。除非在所有从服务器上存在在主服务器上操作和提交的事务，否则GTID不会考虑复制处于一致状态。'
- en: In MySQL 8 replication can be done either in asynchronous mode or in semi-synchronous
    mode. In asynchronous mode, write operations are performed on the master server
    immediately, while replication in slaves is done periodically as per the configuration.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中，复制可以在异步模式或半同步模式下进行。在异步模式下，写操作立即在主服务器上执行，而在从服务器上的复制是根据配置定期进行的。
- en: In the semi-synchronous mode of replication, if semi-synchronous configuration
    is enabled on the master and at least one slave server, a transaction on the master
    node waits before getting a transaction time out until the semi-synchronous enabled
    node confirms that required data or update has been received. And on time-out,
    the master node again looks for the semi-synchronous slave and performs the replication.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制的半同步模式中，如果在主节点和至少一个从节点上启用了半同步配置，则主节点上的事务在获得事务超时之前会等待，直到半同步启用的节点确认已接收到所需的数据或更新。超时后，主节点再次寻找半同步从节点并执行复制。
- en: MySQL 8 provides a new replication method, GTID, where a unique identifier is
    created and connected with each transaction saved or committed on the master server.
    The uniqueness of these identifiers is in all servers that are in the server where
    it's created, and also in the replicated servers. GTID have one to one mapping
    between all transactions. The concept of the log file referencing a position within
    files is not required when starting a new slave creation or failover to a new
    MySQL master. You can use either row-based or statement-based replication with
    GTIDs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8提供了一种新的复制方法，GTID，其中为在主服务器上保存或提交的每个事务创建并连接了一个唯一标识符。这些标识符的唯一性在创建它的服务器中的所有服务器以及复制的服务器中都是如此。GTID在所有事务之间有一对一的映射。在启动新的从服务器创建或故障转移到新的MySQL主服务器时，不需要使用日志文件引用文件中的位置的概念。您可以在GTID中使用基于行或基于语句的复制。
- en: 'Using a global transaction ID primarily provides two major benefits:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用全局事务ID主要提供了两个主要的好处：
- en: '**It''s easy to change a master server to connect with a slave server during
    failover**: GTID is unique out of all servers in the replication group. The slave
    server remembers the global transaction ID of the last event from the old master.
    This means it becomes easy to identify where to reinitialize replication on the
    new MySQL master, as the global transaction IDs are known throughout the entire
    replication hierarchy.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在故障转移期间很容易将主服务器更改为连接从服务器**：GTID在复制组中的所有服务器中是唯一的。从服务器记住了来自旧主服务器的最后一个事件的全局事务ID。这意味着很容易确定在新的MySQL主服务器上重新初始化复制的位置，因为全局事务ID在整个复制层次结构中都是已知的。'
- en: '**The status of the slave provides a crash-safe method**: The slave holds current
    position information in the `mysql.gtid_slave_pos` system table. If this table
    is using a transactional storage engine (such as `InnoDB`, which is the default),
    then further updates are done in the same transaction.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从服务器的状态提供了一种崩溃安全的方法**：从服务器在`mysql.gtid_slave_pos`系统表中保存当前位置信息。如果该表使用事务性存储引擎（例如默认的`InnoDB`），则进一步的更新将在同一事务中进行。'
- en: A GTIDs is a unique key created and associated with each transaction (insert
    and update operations) committed on the master server. The key is not only unique
    to the master server, but it's unique across all servers in replication.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GTID是在主服务器上提交的每个事务（插入和更新操作）上创建并关联的唯一键。该键不仅对主服务器是唯一的，而且在复制的所有服务器中也是唯一的。
- en: ZFS replication
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ZFS复制
- en: The ZFS file system has the ability to provision a snapshot of the server files,
    such as file system contents, transfer the snapshot to another machine, and extract
    the snapshot to recreate the file system on a different server. Users can create
    a snapshot at any time and can create as many snapshots as required. By continually
    creating, transferring, and restoring snapshots, it can provide synchronization
    between one or more machines in a fashion similar to DRBD.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ZFS文件系统具有提供服务器文件的快照、将快照传输到另一台机器并提取快照以在不同服务器上重新创建文件系统的能力。用户可以随时创建快照，并可以根据需要创建多个快照。通过不断创建、传输和恢复快照，可以在一个或多个机器之间提供类似于DRBD的同步。
- en: We have seen all the possible ways to scale a database in MySQL, using different
    techniques. As per business need and flexibility we can perform scaling with database
    backup. Scaling is not an easy task but its possible in MySQL 8, with the proper
    knowledge and understanding of the requirements of the business and a configuration
    provided by MySQL 8\. For database scaling, we must have proper understanding
    of the entire workflow of the database and communication approach.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了使用不同技术在MySQL中扩展数据库的所有可能方法。根据业务需求和灵活性，我们可以通过数据库备份来进行扩展。扩展并不是一项容易的任务，但在MySQL
    8中是可能的，只要具备对业务需求的正确理解和MySQL 8提供的配置。对于数据库扩展，我们必须对数据库的整个工作流程和通信方法有适当的理解。
- en: Challenges in scaling MySQL 8
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8扩展中的挑战
- en: We have seen how scaling works and the advantages and purpose of scaling in
    the previous topic. When we start working with scaling in MySQL 8, what type of
    challenges will we face, and what steps need to be kept in mind while we work
    towards scaling? We have to account for if we are doing scaling and the master
    server fails, limits are reached, read and write operations are not able to handle
    the requests of the application, or while re-platforming the database. Scaling
    is not an easy task; it needs to ensure it is able to handle increasing transactions
    without any difficulty. At the time of performing the scaling we need to keep
    in mind many points, such as the write and read operation limits in the master
    and slave servers. Database load balancing is one of the approaches that help
    reduce the traffic of the transaction, but again it needs perfection, and needs
    to understand the load balancing configuration properly. The following are the
    major challenges faced when we perform scaling.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了扩展的工作原理以及扩展的优势和目的。当我们开始在MySQL 8中进行扩展时，我们将面临哪些挑战，以及在我们朝着扩展的方向努力时需要记住哪些步骤？我们必须考虑如果我们正在进行扩展并且主服务器失败，达到了限制，读写操作无法处理应用程序的请求，或者在重新平台化数据库时。扩展并不是一项容易的任务；它需要确保能够处理增加的交易而不会出现任何困难。在进行扩展时，我们需要记住许多要点，例如主服务器和从服务器中的写入和读取操作限制。数据库负载平衡是帮助减少交易流量的方法之一，但它需要完美，需要正确理解负载平衡配置。以下是我们进行扩展时面临的主要挑战。
- en: Business type and flexibility
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务类型和灵活性
- en: This is the first point that needs to kept in mind while we perform the scaling.
    Business type or business behavior is the core part; if the business is an e-commerce,
    we already know e-commerce businesses have a number of functionalities and very
    critical data about clients, such as product details, monopoly of the business
    for offers and discounts. The main thing is customer details and payment information
    such as credit card details, debit card details, and customer feedback.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在进行扩展时需要记住的第一点。业务类型或业务行为是核心部分；如果业务是电子商务，我们已经知道电子商务业务具有许多功能和关于客户的非常关键的数据，例如产品细节，业务的优惠和折扣的垄断。最重要的是客户细节和付款信息，如信用卡细节，借记卡细节和客户反馈。
- en: In this case, while we are doing scaling in MySQL 8, all parameters need to
    kept in mind, such as database back up, security, roles/privileges of the database
    and backward compatibility of the scaling. While doing scaling by clustering all
    data nodes need to be on the same page. If the application is developed using
    multiple technologies and we perform the scaling for each of the stack, we can
    have different data nodes available; in this case the database sync is one of
    the most important things that need to be sure in configuration while scaling.
    Which type of data should reside in cached memory in memcached and in disk should
    also be clear before we design scaling.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当我们在MySQL 8中进行扩展时，需要记住所有参数，例如数据库备份、安全性、数据库的角色/权限和扩展的向后兼容性。在通过集群进行扩展时，所有数据节点都需要保持一致。如果应用程序使用多种技术开发，并且我们为每个堆栈进行扩展，我们可以有不同的数据节点可用；在这种情况下，在进行扩展时需要确保数据库同步是最重要的事情之一。在设计扩展之前，应明确哪些类型的数据应该驻留在memcached的缓存内，哪些类型的数据应该驻留在磁盘上。
- en: The behavior of the application accesses data from the shared data nodes. If
    we have an e-commerce site and we perform the sharding for the same and at a certain
    level the data are not available for the client who uses the data of the other
    shard server for any reason, at that time the cross-node transaction would be
    required. It's completely based on the business behavior, and depends on how flexible
    the business is when it comes to accepting changes regarding database scaling.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的行为从共享数据节点访问数据。如果我们有一个电子商务网站，并且我们对其进行分片，并且在某个特定级别上，客户端无法使用其他分片服务器的数据，那么在那时将需要跨节点事务。这完全取决于业务行为，并取决于业务在接受有关数据库扩展的变化时有多灵活。
- en: Understand server workload
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解服务器工作负载
- en: For the setup of flexibility, scale, and performance improvement many options
    and actions are available in MySQL 8\. Many people face issues while performing
    such activities because they do not have enough understanding or knowledge to
    handle various technology stacks and configuration option selections that can
    improve scalability, performance, security, and the flexibility of the application
    and deployment activity. These configuration options including clustering, replication,
    sharding, memcached, storage engine, and many more, which can be well designed
    to handle the whole workload of the application. The database workload and business
    behavior helps to decide the MySQL configuration.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了灵活性、规模和性能的提高，在MySQL 8中有许多选项和操作。许多人在执行此类活动时会遇到问题，因为他们没有足够的理解或知识来处理各种技术堆栈和配置选项选择，这些选项可以改善应用程序和部署活动的可扩展性、性能、安全性和灵活性。这些配置选项包括集群、复制、分片、内存缓存、存储引擎等，可以很好地设计来处理应用程序的整个工作负载。数据库工作负载和业务行为有助于决定MySQL的配置。
- en: Read-write operation limit
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读写操作限制
- en: What happen if the read and write limit is reached and the transaction increases
    on the master database server. MySQL has limitations to the capacity; for instance
    if a number of customers are visiting the site at the same time that a read-write
    operation is running and the server or node are not synced, then at that time
    it will create confusion or misunderstanding for the end user. Or, in an e-commerce
    site, if one customer is purchasing the product, which is last item left in stock,
    and at same time another customer searches for the same product and it's still
    available, in this case both operations are not in sync in terms of the read and
    write operation of the database.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主数据库服务器的读写限制达到并且事务在增加，会发生什么情况。MySQL有容量限制；例如，如果许多客户在进行读写操作的同时访问网站，而服务器或节点未同步，那么这将给最终用户带来困惑或误解。或者，在电子商务网站上，如果一个客户购买了最后一件库存中剩下的产品，并且同时另一个客户搜索相同的产品并且它仍然可用，那么在数据库的读写操作方面，这两个操作都不同步。
- en: In the end, the other customer might purchase the same product, which we don't
    have in the warehouse. This impacts inventory calculation, and customers have
    doubts about the process of the purchase cycle. In that case we would loose the
    faith of the customer in the business and the credit of the business would also
    be impacted.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，其他客户可能会购买我们仓库中没有的同一产品。这会影响库存计算，并且客户对购买周期的过程产生疑虑。在这种情况下，我们将失去客户对业务的信任，业务的信用也会受到影响。
- en: Another approach is to have database sharding. Sharding can be simply stated
    as partitioning the database in multiple servers. Sharding helps to reduce the
    load on a single database or the master database. If we have databases sharding
    geographically, and for different country or region we have different servers
    for the database, we can solve the issue of the limit of read and write operations
    on the MySQL server. But again, the technique which we use for the sharding also
    determines the performance of the database. We have already learned about this
    in detail in [Chapter 9](4c6949e6-97d3-43b6-80f1-9d4a299669a2.xhtml), *Partitioning
    in MySQL 8*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是进行数据库分片。分片可以简单地理解为将数据库分成多个服务器的分区。分片有助于减轻单个数据库或主数据库的负载。如果我们在地理上进行数据库分片，并且对于不同的国家或地区，我们有不同的数据库服务器，我们可以解决MySQL服务器上读取和写入操作的限制问题。但是，我们用于分片的技术也决定了数据库的性能。我们已经在《第9章》*MySQL
    8中的分区*中详细了解了这一点。
- en: Maintenance
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护
- en: While we have performed scaling in MySQL 8, we must know how to manage master
    and slave servers, and which configuration is required while performing scaling.
    What are the steps that need to be taken care of at the time when the server is
    in a critical stage? What steps needs to be performed at time of sharding, clustering,
    or replication of the database server?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中进行了扩展时，我们必须知道如何管理主服务器和从服务器，以及在执行扩展时需要哪些配置。在服务器处于关键阶段时需要注意哪些步骤？在分片、集群或数据库服务器复制时需要执行哪些步骤？
- en: Scaling is possible but its not an easy operation. If we want to perform scaling
    we should know that the database can handle more transactions without any issue.
    We should know the appropriate configuration to be done to overcome the default
    limits on the master server for the write and read operation. Once it's completed,
    we need to perform similarly steps to configure the slave database server, which
    should only have read operations available for the end user and should always
    be in sync with the master database.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展是可能的，但并不是一项容易的操作。如果我们想要进行扩展，我们应该知道数据库可以处理更多的事务而不会出现任何问题。我们应该知道适当的配置来克服主服务器上写入和读取操作的默认限制。完成后，我们需要执行类似的步骤来配置从数据库服务器，该服务器应该只为最终用户提供读取操作，并且应始终与主数据库同步。
- en: If we have multiple servers, then the maintenance of the server also becomes
    a costly overhead. All the server needs to be on same page, configuration should
    be in proper manner, and the cost of the server will also affect the business.
    If the number of data constantly increases at that time, server space also needs
    to be managed in an appropriate manner.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有多个服务器，那么服务器的维护也将成为一项昂贵的开销。所有服务器都需要保持一致，配置应该合理，服务器的成本也会影响业务。如果数据量不断增加，那么服务器空间也需要以适当的方式进行管理。
- en: Master server failure
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主服务器故障
- en: If the master server fails and data is not available to the customer at that
    time, the end user will get frustrated and the business will be hampered in terms
    of credit in market and in losing the customer also. The business will have to
    suffer from the loss.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主服务器失败并且在那时数据对客户不可用，最终用户会感到沮丧，业务将在市场信用和失去客户方面受到影响。业务将不得不承受损失。
- en: Synchronization
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步
- en: Whether we perform the scaling with clustering or replication, in both cases
    we need to secure synchronization. All slave servers should have the same database
    as the master server. If write operations are performed on the master server and
    read operations are performed on the slave server, at that time all data needs
    to be synced up. All results should be same, and if any server goes down at a
    time when data was not synced, it will create issues regarding the loss of data.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们是通过集群还是复制来执行扩展，都需要确保同步。所有从服务器应该有与主服务器相同的数据库。如果在主服务器上执行写操作并在从服务器上执行读操作，那么所有数据都需要同步。所有结果应该是相同的，如果在数据未同步的情况下某个服务器在某个时间段内宕机，将会导致数据丢失的问题。
- en: Database security
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库安全。
- en: How do we secure the database if we have different servers and sharding is performed?
    If we have different database servers at different locations and access to the
    database is not restricted to the user specific at that time then the issue of
    a data leak is a strong possibility. We have to completely understand access points
    of the data in terms of IP configuration of the database server, with appropriate
    roles and privileges for the database users who perform various activities. Which
    IPs have access and which IPs need to restrict the data transaction from the server?
    While we are performing the cross node transaction on the database, accurate data
    should be available; it should not give the permission to access restricted data
    from the server.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有不同的服务器并且进行了分片，我们如何保护数据库？如果在不同地点有不同的数据库服务器，并且在那个时候数据库的访问不是特定用户专用的，那么数据泄漏是一个很有可能的问题。我们必须完全了解数据库服务器的IP配置的数据访问点，以及对执行各种活动的数据库用户的适当角色和权限。哪些IP有访问权限，哪些IP需要限制从服务器传输数据？在进行数据库的跨节点事务时，应该有准确的数据；不应该允许从服务器访问受限数据的权限。
- en: Cross node transaction
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨节点事务
- en: Cross node transaction is required when we have multiple nodes after doing scaling
    and one node requires the other node data as a part of input. For instance, if
    we have different nodes at different locations and we have a single inventory
    for all the locations at that time, one user request for any product that is not
    available in that data node at that time will have to communicate with other data
    nodes for the information of the product, based on the user's request.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行扩展后，如果有多个节点并且一个节点需要其他节点的数据作为输入的一部分，则需要跨节点事务。例如，如果我们在不同地点有不同的节点，并且在那个时候所有地点都有单一的库存，那么当一个用户请求任何一个在那个时候不在数据节点上的产品时，就必须根据用户的请求与其他数据节点通信以获取产品的信息。
- en: Growing team for development
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发展团队以进行开发
- en: While the application may have a positive response and its continuous success
    increase the business team, the expansion of the database administrators will
    also be required. When we performing sharing and scaling or replication in MySQL
    8, we require appropriate team members with the proper knowledge and experience
    to handle continuous expansion and the management of database servers. It's not
    only limited to the setup of database servers; we also need to keep an eye on
    maintenance of the server and keep watching the server activity also.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序可能有积极的响应并且其持续的成功增加了业务团队时，数据库管理员的扩展也将是必要的。当我们在MySQL 8中进行分片、扩展或复制时，需要具有适当知识和经验的团队成员来处理持续扩展和数据库服务器的管理。这不仅仅局限于设置数据库服务器；我们还需要关注服务器的维护并且持续监视服务器活动。
- en: Manage change request
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理变更请求
- en: When we have a change in any database structure and we have already performed
    the scaling or replication than a few things need to be taken care of as part
    of a change request, or if we add a new feature or an enhancement of the functionality.
    This includes things such as updating sharing keys, modifying the data distribution
    with replication of the nodes, updating the queries to take replication latency
    into account to avoid stale data with on-going managing shards, data balancing,
    and ensuring that data is available with new updates.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库结构发生变化并且我们已经进行了扩展或复制时，需要在变更请求的一部分中注意一些事项，或者如果我们添加了新功能或增强了功能。这包括更新分片键、修改节点的数据分布、更新查询以考虑复制延迟以避免正在管理分片时的陈旧数据、数据平衡，并确保新更新的数据可用。
- en: Scale-up and scale-out
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展和扩展
- en: Scale-up describes the process of maximizing the capacity that a single MySQL
    node can handle. The process of scaling-up can involve optimally tuning your database
    software and choosing the right storage engine, as previously discussed in [Chapter
    6](16211f16-1fc2-419a-a040-46f7970fc4cc.xhtml), *MySQL 8 Storage Engines,* and
    selecting appropriate hardware. There are limits on how far you can scale-up a
    node and these are determined by some combination of data size, schema complexity,
    CPU cycles, system memory, and disk IO operations. While scale-out has been garnering
    much attention because of the need to handle increasingly massive data sets, it
    is very important to remember that the better we scale-up, the fewer scale-out
    nodes that we will require and so the less we need to spend on hardware.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展描述了最大化单个MySQL节点处理能力的过程。扩展的过程可能涉及优化调整数据库软件和选择正确的存储引擎，正如之前在[第6章](16211f16-1fc2-419a-a040-46f7970fc4cc.xhtml)中讨论的*MySQL
    8存储引擎*，并选择适当的硬件。单个节点的扩展有一定的限制，这些限制由数据大小、模式复杂性、CPU周期、系统内存和磁盘IO操作的某种组合确定。尽管由于需要处理日益庞大的数据集，扩展一直备受关注，但重要的是要记住，我们扩展得越好，我们就需要越少的扩展节点，因此我们在硬件上的开销就越少。
- en: Scale-out can be used to deliver solutions that cover several different use
    cases. Some of most common ones are to increase read capacity by using replication
    or to use database sharding to increase total database size and overall transaction
    throughput.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展可以用于提供涵盖几种不同用例的解决方案。其中一些最常见的用例是通过复制来增加读取容量，或者使用数据库分片来增加总数据库大小和整体事务吞吐量。
- en: All of these are the key challenges faced while scaling MySQL 8\. These challenges
    need to be considered while we are performing scaling of the database in MySQL
    8\. A single mistake can put a business into an situation which none of us would
    like to be in. Scaling is the the better way to improve the performance of the
    database.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展MySQL 8时面临的关键挑战。在进行MySQL 8数据库扩展时，需要考虑这些挑战。一个错误可能会让业务陷入我们都不想面对的境地。扩展是改善数据库性能的更好方式。
- en: Achieving high availability
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现高可用性
- en: High availability refers to systems that are durable and can perform operations
    without any hindrance on the data that is required for the response or any request
    from any mobile, web portals, websites, social, e-commerce, enterprise, and cloud
    applications. Data availability is considered an utmost concern for any business
    or organization. Any issues with downtime may have an impact on the business credit,
    and in some cases businesses have to suffer financial loss.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性指的是系统具有耐用性，并且可以在移动、网络门户、网站、社交、电子商务、企业和云应用程序的任何请求或响应所需的数据上执行操作而不受任何干扰。数据可用性被认为是任何企业或组织的最关注的问题。任何停机问题可能会影响业务信用，并且在某些情况下，企业可能会遭受财务损失。
- en: For instance, if we have an e-commerce application with a single database server,
    if that server goes down for reasons such as hardware failure, network issue,
    virus, or operating system issues, it impacts the data also. An e-commerce application
    may have a large number of customer hits at same time, and any server failures
    to serve the response to user requests will impact the user; they will search
    for other options for the purchase commodity.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个单个数据库服务器的电子商务应用程序，如果由于硬件故障、网络问题、病毒或操作系统问题等原因，该服务器宕机，也会影响数据。电子商务应用程序可能会在同一时间有大量的客户访问，任何服务器无法为用户请求提供响应的故障都会影响用户；他们会寻找其他购买商品的选择。
- en: MySQL 8 has capabilities to provide backend for the application to help achieve
    high availability and prepare a fully scalable system. An ability of the system
    to keep the connection persistent, in case a part of the infrastructure fails,
    and the ability of the system to recover from such failures is considered high
    availability. A failure of the system can be caused by either a maintenance activity
    on one part of the system, such as a hardware or software upgrade, or by the failure
    of the installed software.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8具有提供应用程序后端的能力，帮助实现高可用性和准备一个完全可扩展的系统。系统保持连接持久性的能力，以防止基础设施的一部分失败，以及系统从此类故障中恢复的能力被认为是高可用性。系统的故障可能是由系统的一部分进行维护活动，如硬件或软件升级，或者由安装的软件的故障引起的。
- en: Purpose of high availability
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可用性的目的
- en: The requirements for achieving HA and scalability may vary from system to system.
    Each system requires a different configuration in order to achieve these abilities.
    MySQL 8 also supports different approaches, such as the replication of data across
    multiple MySQL servers, or preparing multiple data centers based on geographical
    locations and serving the client requests from the data centers closest to the
    location of the client. Such solutions can be used to achieve the highest uptime
    of MySQL.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 实现高可用性和可扩展性的要求可能因系统而异。每个系统都需要不同的配置才能实现这些能力。MySQL 8还支持不同的方法，例如在多个MySQL服务器之间复制数据，或者根据地理位置准备多个数据中心，并从最接近客户位置的数据中心为客户请求提供服务。这样的解决方案可以用来实现MySQL的最高运行时间。
- en: Today, in the world of competitive marketing, an organization's key point is
    to have their system up and running. Any failure or downtime directly impacts
    business and revenue. Hence, high availability is a factor that cannot be overlooked.
    MySQL is quite reliable and has constant availability using cluster and replication
    configurations. Cluster servers instantly handle failures and manage the failover
    part to keep your system available almost all the time. If one server gets down,
    it will redirect the user's request to another node and perform the requested
    operation.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，在竞争激烈的市场中，组织的关键点是使其系统保持运行。任何故障或停机都会直接影响业务和收入。因此，高可用性是一个不容忽视的因素。MySQL非常可靠，并且使用集群和复制配置始终可用。集群服务器可以立即处理故障，并管理故障转移部分，以使系统几乎始终可用。如果一个服务器宕机，它将重定向用户的请求到另一个节点，并执行所请求的操作。
- en: Data availability
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可用性
- en: Data is always available in any situation. In any application, data is the core
    part, which is actually the wealth of the application owner. If we have a health
    care system and at the time of medical check up of any patient their data is not
    available, due to server downtime or any other reason, it might block further
    process of the doctor and in this case impacts the life of the patient.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 数据在任何情况下都是可用的。在任何应用程序中，数据都是核心部分，实际上是应用程序所有者的财富。如果我们有一个医疗保健系统，在任何患者的医疗检查时，由于服务器宕机或其他原因，他们的数据不可用，可能会阻碍医生的进一步处理，在这种情况下会影响患者的生命。
- en: Security of data
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据安全
- en: The first thing that comes to mind is securing data, because nowadays data has
    become precious and it can impact business continuity if legal obligations are
    not met; in fact, it can be so bad that it can close down your business in no
    time. MySQL is the most secure and reliable database management system, used by
    many well-known enterprises such as Facebook, Twitter, and Wikipedia. It really
    provides a good security layer that protects sensitive information from intruders.
    MySQL gives access control management so that granting and revoking required access
    on the user is easy. Roles can also be defined with a list of permissions that
    can be granted or revoked for the user. All user passwords are stored in an encrypted
    format using plugin-specific algorithms.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先想到的是保护数据，因为如今数据变得非常宝贵，如果不满足法律义务，可能会影响业务的连续性；事实上，情况可能会很糟糕，甚至可能会迅速关闭您的业务。MySQL是最安全可靠的数据库管理系统，被许多知名企业使用，如Facebook、Twitter和Wikipedia。它确实提供了一个良好的安全层，可以保护敏感信息免受入侵者的侵害。MySQL提供访问控制管理，因此在用户身上授予和撤销所需的访问权限很容易。还可以定义角色，并为用户授予或撤销权限列表。所有用户密码都以加密格式存储，使用特定的插件算法。
- en: Synchronization of data
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据同步
- en: While we have a single database server, if it goes down for any reason we would
    lose the whole database, and if we have database backup available up to the current
    day, we can restore the database till that day, but all current transactions would
    also be lost in this case. The last transaction data would not be available at
    that time.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只有一个数据库服务器时，如果由于任何原因它宕机，我们将丢失整个数据库，如果我们备份数据库直到当天，我们可以恢复数据库直到那一天，但在这种情况下，所有当前事务也将丢失。那时最后的交易数据将不可用。
- en: Backup of the data
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据备份
- en: Database backup till the last transaction should be in the plan when a business
    has any server base application where a single database server is performing all
    the tasks. When doing high availability, include all scenarios of the backup and
    restore operation in the architecture.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个企业有任何基于服务器的应用程序，其中单个数据库服务器执行所有任务时，应该在计划中备份数据库直到最后一个事务。在进行高可用性时，需要在架构中包括备份和恢复操作的所有场景。
- en: Competitive market
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 竞争激烈的市场
- en: In the market many competitors are available with the same nature of business.
    In this case, if a business is having issues with data availability to end users,
    customers might not continue with that business and instead move to another provider.
    Its an integral part of business continuity.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场上有许多竞争对手提供相同性质的业务。在这种情况下，如果一个企业在数据可用性方面出现问题，客户可能会选择另一个提供商而不是继续与该企业合作。这是业务连续性的一个重要部分。
- en: Performance
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: High availability is also important in terms of the performance of the data
    operation. If we have a single server and all operations are performed on that
    server only, it will reach its limit at some stage, where the server capacity
    is exhausted. So, in that case, if we have high availability architecture implemented
    it would provide a means to load the balance of a transaction and the performance
    of the data manipulation operation. Replication and clustering enables for better
    concurrency and manages the workload.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 高可用性在数据操作的性能方面也很重要。如果我们只有一个服务器，并且所有操作都在该服务器上执行，那么在某个阶段它将达到其极限，服务器容量将耗尽。因此，在这种情况下，如果我们实施了高可用性架构，它将提供一种平衡事务和数据操作性能的手段。复制和集群使并发性更好，并管理工作负载。
- en: Updates in the system
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统更新
- en: While any online site or application requires updates or any new production
    release is planned it directly impacts the end users. If an application has only
    limited users at that time, we can manage the update regarding all end-users via
    emails or messages within the application before the release. But in cases where
    there are a large number of user in a single application, at that time it will
    impact the business. It will stop all users at the same time, and due to this
    running transactions would be impacted.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何在线站点或应用程序需要更新或计划进行任何新的生产发布时，它直接影响最终用户。如果一个应用程序在那个时候只有有限的用户，我们可以通过电子邮件或应用程序内的消息管理所有最终用户的更新。但是，在一个应用程序中有大量用户的情况下，这将影响业务。它将同时停止所有用户，由于这个正在运行的事务会受到影响。
- en: Choosing the solution
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择解决方案
- en: Again, we have to think about selecting the right solution for the availability.
    Many things need to be kept in mind while we plan high availability in MySQL.
    The requirements for achieving HA and scalability may vary from system to system.
    Each system requires a different configuration in order to achieve these abilities.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们必须考虑选择可用性的正确解决方案。在我们计划在MySQL中实现高可用性时，需要牢记许多事情。实现HA和可伸缩性的要求可能因系统而异。每个系统都需要不同的配置才能实现这些能力。
- en: 'Such solutions can be used to achieve the highest uptime of MySQL with regard
    to the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的解决方案可以用来实现MySQL在以下方面的最高运行时间：
- en: The level of availability required
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需的可用性级别
- en: The type of application being deployed
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署的应用程序类型
- en: Accepted best practices within your own environment
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自己环境中的最佳实践
- en: In MySQL, replication and clustering are the best options for achieving high
    availability. All applications have their own architecture, and nature of their
    business needs to be considered when we are selecting any technique to achieve
    high availability of MySQL 8.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，复制和集群是实现高可用性的最佳选择。所有应用程序都有自己的架构，当我们选择任何技术来实现MySQL 8的高可用性时，需要考虑其业务性质。
- en: Advantages of high availability
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可用性的优势
- en: 'The following are the advantages that we have when we perform high availability
    in MySQL:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在MySQL中执行高可用性时，我们拥有以下优势：
- en: MySQL is quite reliable and has constant availability using cluster and replication
    configurations.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL非常可靠，并且使用集群和复制配置具有持续的可用性。
- en: Cluster servers instantly handle failures and manage the failover part to keep
    your system available almost all the time. If one server goes down, it will redirect
    the user's request to another node and perform the requested operation.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群服务器可以立即处理故障并管理故障转移部分，以使系统几乎始终可用。如果一个服务器宕机，它将重定向用户的请求到另一个节点并执行请求的操作。
- en: An ability of the system to keep the connection persistent, in case a part of
    infrastructure fails, and the ability of the system to recover from such failure
    is considered as high availability.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统保持连接持久的能力，即使基础设施的一部分失败，系统从此类故障中恢复的能力被视为高可用性。
- en: MySQL 8 also supports different approaches such as replication of data across
    multiple MySQL servers or preparing multiple data centers based on geographical
    locations and serving the client requests from the data centers closest to the
    location of the client.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8还支持不同的方法，例如在多个MySQL服务器之间复制数据，或者基于地理位置准备多个数据中心，并从最接近客户位置的数据中心提供客户请求。
- en: MySQL gives high speed transaction processing with optimal speed. It can cache
    the results, which boosts read performance.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL以最佳速度进行事务处理。它可以缓存结果，提高读取性能。
- en: Replication and clustering enables better concurrency and manages the workload.
    Group replication basically takes care of committing transactions once most of
    the members in group replication have acknowledged the transaction has been received
    concurrently. This helps create better throughput if the overall number of writes
    does not exceed the capacity of the members in the group replication.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制和集群使并发性更好，并管理工作负载。组复制基本上负责在大多数组复制成员已经同时确认事务已被接收时提交事务。如果写入的总数不超过组复制成员的容量，则可以创建更好的吞吐量。
- en: Clustering enables data to be replicated to multiple MySQL servers with automated
    sharing. It is designed for better availability and throughput.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群使数据能够复制到多个MySQL服务器并进行自动共享。它旨在提供更好的可用性和吞吐量。
- en: Memcached removes the SQL layer and directly accesses the InnoDB database tables.
    Hence, overhead operations like SQL parsing will no longer be executed, which
    really impacts the performance.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached去除了SQL层，直接访问InnoDB数据库表。因此，诸如SQL解析之类的开销操作将不再执行，这确实会影响性能。
- en: Memcached with MySQL also provides you with a way to make in-memory data persistent
    so that we can use it for various data types without losing it.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached与MySQL还为您提供了一种使内存中的数据持久化的方法，以便我们可以在不丢失数据的情况下使用各种数据类型。
- en: Memcached APIs are available in different programming languages such as Perl,
    Python, Java, PHP, C, and Ruby. With the help of a Memcached API, an application
    can interact with the Memcached interface to store and retrieve information.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Memcached API可用于不同的编程语言，如Perl、Python、Java、PHP、C和Ruby。借助Memcached API，应用程序可以与Memcached接口交互，存储和检索信息。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started with an overview of scalability and high availability
    in MySQL 8, which covered the various scalability needs, advantages, methods,
    and key points to be noted when we make scalable designs of MySQL 8\. We also
    discussed the shortcomings that we generally come across when we perform scalability
    and how to overcome challenges with appropriate solutions. We have learned about
    scaling in MySQL 8 and troubleshooting challenges in scaling MySQL 8\. We also
    learned about many diverse ways to achieve high availability in MySQL 8.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从MySQL 8的可伸缩性和高可用性概述开始，涵盖了各种可伸缩性需求、优势、方法以及在设计可伸缩性MySQL 8时需要注意的关键点。我们还讨论了在进行可伸缩性时通常遇到的缺点以及如何通过适当的解决方案克服挑战。我们学习了MySQL
    8的扩展和扩展MySQL 8的故障排除挑战。我们还学习了在MySQL 8中实现高可用性的许多不同方法。
- en: In the following chapter, we will learn how to take care of MySQL 8 security.
    We will learn about general factors that affect security, the security of core
    MySQL 8 files, access control, and securing the database system itself. We will
    also learn the details of security plugins and gain an in-depth understanding
    of database security in general for relational databases.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何确保MySQL 8的安全性。我们将了解影响安全性的一般因素，核心MySQL 8文件的安全性，访问控制以及保护数据库系统本身。我们还将学习安全插件的详细信息，并深入了解关系数据库的数据库安全性。
