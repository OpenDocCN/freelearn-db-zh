- en: Extending MySQL 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展MySQL 8
- en: 'In the previous chapter, we learned how to optimize MySQL 8\. We also learned
    what configurations need to be done to achieve optimization, and also how to leverage
    caching and buffering for optimization. We went through the use case study step
    by step for achieving optimization in the following components:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何优化MySQL 8。我们还了解了需要进行哪些配置才能实现优化，以及如何利用缓存和缓冲进行优化。我们逐步进行了用例研究，以实现以下组件的优化：
- en: Optimizing MySQL 8 server and client
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化MySQL 8服务器和客户端
- en: Optimizing data structures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化数据结构
- en: Optimizing queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化查询
- en: Optimizing tables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化表
- en: 'In this chapter, we will learn about extending MySQL 8\. We will check what
    MySQL 8 components are allowed to extend, and we will look at how to customize
    MySQL 8 for specific business needs. You will learn about the fundamental components
    prior to extending MySQL 8 and the features of the MySQL plugin API that will
    be used to extend MySQL 8\. The following is the list of topics covered in this
    chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何扩展MySQL 8。我们将检查允许扩展的MySQL 8组件，并了解如何根据特定业务需求自定义MySQL 8。在扩展MySQL 8之前，您将了解基本组件以及用于扩展MySQL
    8的MySQL插件API的功能。以下是本章涵盖的主题列表：
- en: An overview of extending MySQL 8
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展MySQL 8的概述
- en: Extending plugins and using services to call them
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展插件并使用服务来调用它们
- en: Adding new functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新功能
- en: Debugging and porting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和移植
- en: An overview of extending MySQL 8
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展MySQL 8的概述
- en: 'In this section, you will learn about one of the most exciting topics on how
    to extend MySQL 8 as per your needs. There are several components of MySQL 8 that
    you should understand well prior attempting to extend MySQL 8\. Here is a list
    of the components that are important for extending MySQL 8:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，您将学习如何根据自己的需求扩展MySQL 8中最令人兴奋的主题之一。在尝试扩展MySQL 8之前，您应该充分了解MySQL 8的几个组件。以下是扩展MySQL
    8重要的组件列表：
- en: MySQL 8 internals
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8内部
- en: MySQL 8 plugin API
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8插件API
- en: MySQL 8 services for components and plugins
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8组件和插件的服务
- en: Adding new functions to MySQL 8
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向MySQL 8添加新功能
- en: Debugging and porting MySQL 8
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和移植MySQL 8
- en: MySQL 8 internals
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8内部
- en: 'There are few things you should know before you start working on the MySQL
    code. To contribute or track MySQL development you should follow the instructions
    for the installation of source code distribution as per your system or operating
    system platform. The source code includes internal documentation, which is very
    important to understand how MySQL internally works from developer''s perspective.
    You can also subscribe to the internals mailing list from [https://lists.mysql.com/internals](https://lists.mysql.com/internals),
    which includes people who work on MySQL code, and you can also discuss topics
    related to MySQL development or posting patches:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始处理MySQL代码之前，您应该了解一些事项。要贡献或跟踪MySQL开发，您应该按照系统或操作系统平台的源代码分发安装说明。源代码包括内部文档，这对于从开发人员的角度了解MySQL的内部工作非常重要。您还可以订阅internals邮件列表，网址为[https://lists.mysql.com/internals](https://lists.mysql.com/internals)，其中包括从事MySQL代码工作的人员，您还可以讨论与MySQL开发相关的主题或发布补丁：
- en: '**MySQL 8 threads**: MySQL server creates threads such as connection manager
    threads, signal threads, read and write threads if using `InnoDB` storage engine,
    scheduler threads to handle connection, and replication and event processing.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL 8线程**：MySQL服务器创建线程，例如连接管理器线程、信号线程、读写线程（如果使用InnoDB存储引擎）、调度器线程来处理连接以及复制和事件处理。'
- en: '**MySQL 8 test suite**: MySQL 8 provides the test systems included with Unix
    source distribution to help users and developers performing regression testing
    with MySQL code. You can also write your own test cases using the test framework.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL 8测试套件**：MySQL 8提供了包含在Unix源代码分发中的测试系统，以帮助用户和开发人员对MySQL代码进行回归测试。您还可以使用测试框架编写自己的测试用例。'
- en: MySQL 8 plugin API
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8插件API
- en: MySQL 8 provides support for plugin API by which server components themselves
    can be created. The plugins can be loaded during server startup and can also be
    loaded and unloaded during runtime; there is no need to restart the server. The
    API is very generic in that it does not specify what plugins can do in terms of
    limitation but instead they are allowed to do more than build-in components. The
    API supports interfaces for components such as storage engines plugins, full-text
    parser plugins, server extensions and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8通过插件API提供对服务器组件本身的支持。插件可以在服务器启动期间加载，也可以在运行时加载和卸载；无需重新启动服务器。该API非常通用，不限制插件在限制方面可以做什么，而是允许它们做的比内置组件更多。该API支持用于组件的接口，例如存储引擎插件、全文解析器插件、服务器扩展等。
- en: The plugin interface makes use of the `plugin` table in the MySQL 8 database
    to store the information about installed plugins permanently by using the `INSTALL
    PLUGIN` statement. During the MySQL 8 installation process the `plugin` table
    is created. For single server invocation the plugins can also be installed using
    the `--plugin--load` option, but using this option does not record the installed
    plugin to the `plugin` table.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 插件接口利用MySQL 8数据库中的“plugin”表来存储有关已安装插件的信息，通过使用“INSTALL PLUGIN”语句来永久安装插件。在MySQL
    8安装过程中，将创建“plugin”表。对于单个服务器调用，也可以使用“--plugin--load”选项安装插件，但使用此选项不会将已安装的插件记录到“plugin”表中。
- en: MySQL 8 also provides support API for client plugins to be used for specific
    purposes such as enabling the server connection by client through different authentication
    methods.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8还为客户端插件提供支持API，用于特定目的，例如通过不同的身份验证方法启用客户端的服务器连接。
- en: MySQL 8 services for components and plugins
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8组件和插件的服务
- en: 'The MySQL 8 server plugins can access and initiate server plugin services;
    similarly, the server components can also access and request component services.
    The MySQL 8 plugin Services interface complements the API plugin by exposing server
    functionality, which can be called by plugins. The following are the plugin service
    characteristics:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8服务器插件可以访问和启动服务器插件服务；同样，服务器组件也可以访问和请求组件服务。MySQL 8插件服务接口通过公开服务器功能来补充API插件，插件可以调用这些功能。以下是插件服务的特点：
- en: The services enable plugins to access the server code using ordinary function
    calls and can also call user-defined functions
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些服务使插件能够使用普通函数调用访问服务器代码，并且还可以调用用户定义的函数。
- en: The services are portable and can work on multiple platforms
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些服务是可移植的，可以在多个平台上运行
- en: The services provide versioning support that protects against incompatibilities
    between plugins and services
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务提供版本支持，防止插件和服务之间的不兼容性
- en: The services also provide support for testing plugin services
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些服务还支持测试插件服务
- en: 'MySQL provides two services types for plugins and components, listed as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了两种插件和组件的服务类型，如下所示：
- en: '**The locking service**: The locking service interface is provided at two levels—that
    is, at C level and at SQL level. The interface works on lock namespace, lock name,
    and lock mode attributes.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**锁定服务**：提供两个级别的锁定服务接口，即C级别和SQL级别。接口在锁定命名空间、锁定名称和锁定模式属性上工作。'
- en: '**The keyring service**: The keyring service provides an interface for securely
    storing sensitive information for internal server components and plugins to retrieve
    later.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**密钥环服务**：密钥环服务提供了一个接口，用于安全存储内部服务器组件和插件以便以后检索的敏感信息。'
- en: Adding new functions to MySQL 8
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向MySQL 8添加新函数
- en: 'You can add your own functions to MySQL 8, and this can be done with any one
    of the three supported types of function. The new function can be called the same
    way we invoke the built-in functions such as `ABS()`, and that is true irrespective
    of which function type you have newly added. The following list is of the supported
    three types of new function in MySQL 8:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向MySQL 8添加自己的函数，可以使用三种支持的函数类型之一来完成。新函数可以像调用内置函数`ABS()`一样调用，而不管您新增了哪种函数类型都是如此。以下是MySQL
    8中支持的三种新函数类型的列表：
- en: Adding a function through the **user-defined function** (**UDF**) interface.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过**用户定义函数**（**UDF**）接口添加函数。
- en: Adding a function as native (built-in) MySQL function.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数添加为本机（内置）MySQL函数。
- en: Adding a function by creating a stored function.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建存储函数添加函数。
- en: Debugging and porting MySQL 8
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和移植MySQL 8
- en: Porting MySQL 8 to other operating systems is currently supported by many operating
    systems; the list of supported operating systems is provided at [http://www.mysql.com/support/supportedplatforms/database.html](http://www.mysql.com/support/supportedplatforms/database.html).
    In case you have added a new port and are running into problems with the new port,
    you might use debugging of MySQL 8.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将MySQL 8移植到其他操作系统目前受到许多操作系统的支持；支持的操作系统列表提供在[http://www.mysql.com/support/supportedplatforms/database.html](http://www.mysql.com/support/supportedplatforms/database.html)。如果您添加了新的端口并且在新的端口上遇到问题，您可以使用MySQL
    8的调试。
- en: There are different possible ways to start debugging based on where you are
    running into the problems—they could be in MySQL server or in MySQL client. Depending
    on the problem's location, you can start debugging in MySQL server or client respectively
    and also get help from the `DBUG` package to trace the program's activities.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您遇到问题的位置，可以以不同的方式开始调试——可能是在MySQL服务器中或在MySQL客户端中。根据问题的位置，您可以分别在MySQL服务器或客户端开始调试，并从`DBUG`包中获取帮助来跟踪程序的活动。
- en: Extending plugins and using services to call them
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展插件并使用服务调用它们
- en: 'In this section, you will gain an understanding of how the plugin API, its
    interface, and the MySQL services interact with one another and provide extensions
    in MySQL 8\. The plugins are also considered as components in the MySQL 8 architecture,
    and therefore you can use them to provide pluggable features. The plugin API and
    the plugin services interfaces have the following differences:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解插件API、其接口和MySQL服务如何相互交互，并在MySQL 8中提供扩展。插件在MySQL 8架构中也被视为组件，因此您可以使用它们提供可插拔的功能。插件API和插件服务接口有以下区别：
- en: The plugin API enables plugins that will be used by the server. The calling
    and invoking of plugins is initiated by the server, so the plugins can extend
    the server's functionality or can register themselves in order to receive server
    processing notifications.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件API使服务器能够使用插件。服务器启动和调用插件，因此插件可以扩展服务器的功能或注册自己以接收服务器处理通知。
- en: The plugin services interface allows plugins to call the server code. The calling
    and invoking of service functions is initiated by the plugins so that the same
    server functionality can be leveraged by many plugins without requiring individual
    implementation for the functionality.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件服务接口允许插件调用服务器代码。插件启动和调用服务函数，以便许多插件可以利用相同的服务器功能，而无需为功能单独实现。
- en: Writing plugins
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写插件
- en: To create a plugin library, providing the required descriptor information is
    a must, as it specifies which plugins the library file contains. Writing the interface
    function for each of the plugins specified is also necessary.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个插件库，必须提供所需的描述符信息，因为它指定了库文件包含哪些插件。还必须为指定的每个插件编写接口函数。
- en: Every server plugin must have a general descriptor providing information to
    the plugin APIs, and a type specific descriptor providing information about the
    interface for specified plugin types. The structure for specifying a general descriptor
    is the same for all the plugin types, and the type specific descriptor can vary
    based on the requirements of the plugin's behavior or function. The server plugin
    interface allows plugins to expose system variables and status.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务器插件必须具有通用描述符，提供信息给插件API，并具有特定类型的描述符，提供指定插件类型的接口信息。用于指定通用描述符的结构对所有插件类型都是相同的，而特定类型的描述符可以根据插件行为或功能的要求而变化。服务器插件接口允许插件公开系统变量和状态。
- en: Client-side plugins have a slightly different architecture than that of server
    side plugins. For example, each plugin must have descriptor information, but there
    is no separate division between general and type specific descriptors.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端插件的架构与服务器端插件略有不同。例如，每个插件必须具有描述符信息，但通用和特定类型的描述符之间没有单独的区分。
- en: Plugins can be written in C or C++ or any other language that can use C calling
    conventions. Plugins are loaded and unloaded dynamically, hence the operating
    system must dynamically support where you have dynamically compiled the calling
    application. Specifically, for server plugins this means that `mysqld` must be
    linked dynamically.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以用C或C++或任何其他可以使用C调用约定的语言编写。插件是动态加载和卸载的，因此操作系统必须动态支持您动态编译调用应用程序的地方。特别是对于服务器插件，这意味着`mysqld`必须动态链接。
- en: As we cannot be sure of what application will use the plugin, the dependencies
    on the symbols of the calling application should be avoided by the client plugin
    writers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无法确定哪个应用程序将使用插件，因此客户端插件编写者应避免对调用应用程序的符号的依赖。
- en: 'The following are the types of supported plugin creations that can implement
    several capabilities:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是支持的插件创建类型，可以实现多种功能：
- en: Authentication
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证
- en: Password validation and strength checking
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码验证和强度检查
- en: Protocol tracing
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议跟踪
- en: Query rewriting
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询重写
- en: Secure keyring storage and retrieval
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全钥匙存储和检索
- en: Storage engines
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储引擎
- en: Full-text parsers
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全文解析器
- en: Daemons
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 守护进程
- en: '`INFORMATION_SCHEMA` tables'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFORMATION_SCHEMA`表'
- en: Semisynchronous replication
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半同步复制
- en: Auditing
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计
- en: Component and plugin services
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件和插件服务
- en: You can identify the component services and functions provided by MySQL by looking
    into the `include/mysql/components` and respective `services` directories of the
    MySQL 8 source distribution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看MySQL 8源代码分发的`include/mysql/components`和相应的`services`目录来识别MySQL提供的组件服务和函数。
- en: 'Similarly, you can identify the plugin services and functions provided by MySQL
    by looking into the `include/mysql` directory of the MySQL 8 source distribution
    and the relevant files as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过查看MySQL 8源代码分发的`include/mysql`目录和相关文件来识别MySQL提供的插件服务和函数，如下所示：
- en: The `plugin.h` file includes the `services.h` file, which `services.h` file
    contains all the available service-specific header files within it
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugin.h`文件包括`services.h`文件，`services.h`文件包含其中所有可用的特定服务头文件'
- en: Service-specific header files will have names in the form of `service_xxx.h`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定服务头文件的名称将以`service_xxx.h`的形式命名
- en: 'The following is a list of available component services in MySQL 8:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL 8中可用的组件服务列表：
- en: '`component_sys_variable_register`, `component_sys_variable_unregister`: For
    registering and unregistering system variables'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`component_sys_variable_register`，`component_sys_variable_unregister`：用于注册和注销系统变量'
- en: '`log_builtins`, `log_builtins_string`: For log components services'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_builtins`，`log_builtins_string`：用于日志组件服务'
- en: '`mysql_service_udf_registration`, `mysql_service_udf_registration_aggregate`:
    For enabling registration and unregistration of scalar and aggregate user-defined
    functions in components and plugins'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql_service_udf_registration`，`mysql_service_udf_registration_aggregate`：用于在组件和插件中启用标量和聚合用户定义函数的注册和注销'
- en: '`mysql_string`: For string service APIs'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql_string`：用于字符串服务API'
- en: '`pfs_plugin_table`: For dynamic Performance Schema table manipulation'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pfs_plugin_table`：用于动态性能模式表操作'
- en: 'The following is list of available plugins services in MySQL 8:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL 8中可用的插件服务列表：
- en: '`get_sysvar_source`: For retrieving system variable settings'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_sysvar_source`：用于检索系统变量设置'
- en: '`locking_service`: For lock implementation with C language and SQL level interfaces,
    having the attributes namespace, name, and mode'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locking_service`：用于使用C语言和SQL级接口实现锁定，具有命名空间、名称和模式属性'
- en: '`my_plugin_log_service`: For writing errors messages to logs'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_plugin_log_service`：用于将错误消息写入日志'
- en: '`my_snprintf`: For string formatting to keep the output consistent across platforms'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_snprintf`：用于字符串格式化，以保持输出在各个平台上的一致性'
- en: '`status_variable_registration`: For registering the status variable'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status_variable_registration`：用于注册状态变量'
- en: '`my_thd_scheduler`: For thread scheduler selection'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_thd_scheduler`：用于线程调度器选择'
- en: '`mysql_keyring`: For keyring storage service'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql_keyring`：用于钥匙存储服务'
- en: '`mysql_password_policy`: For password strength and validation checking'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql_password_policy`：用于密码强度和验证检查'
- en: '`plugin_registry_service`: For accessing the component registry and related
    services'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plugin_registry_service`：用于访问组件注册表和相关服务'
- en: '`security_context`: For managing thread security contexts'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security_context`：用于管理线程安全上下文'
- en: '`thd_alloc`: For memory allocation'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thd_alloc`：用于内存分配'
- en: '`thd_wait`: For reporting to sleep or stall'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thd_wait`：用于报告休眠或停滞'
- en: 'Now, you have a clear understanding of plugin services and component services.
    MySQL 8 provides the following types of services to support plugins and components
    services:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您对插件服务和组件服务有了清楚的了解。MySQL 8提供以下类型的服务来支持插件和组件服务：
- en: The locking service
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 锁定服务
- en: The keyring service
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 钥匙存储服务
- en: The following sections give detailed information on both types of services.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分详细介绍了两种类型的服务。
- en: The locking service
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁定服务
- en: 'The locking service interface is provided at two levels: C level and at SQL
    level. The interface works on the lock namespace, lock name, and lock mode attributes.
    The C language interface is callable as a plugin service from user-defined functions
    or server plugins, and the SQL level interface is used as set of user-defined
    functions, being mapped to call the service routines.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定服务接口提供两个级别：C级别和SQL级别。该接口在锁命名空间、锁名称和锁模式属性上工作。C语言接口可作为插件服务从用户定义的函数或服务器插件调用，SQL级别接口用作一组用户定义的函数，映射到调用服务例程。
- en: 'The following are the characteristics of the locking interface:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是锁定接口的特征：
- en: Lock namespace, lock name, and lock mode are three three attributes of locks.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁命名空间、锁名称和锁模式是锁的三个属性。
- en: Locks are identified by forming a lock namespace and lock name combination.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '通过形成锁命名空间和锁名称的组合来识别锁。 '
- en: Lock mode can be either read or write. Read locks are shared whereas write locks
    are exclusive.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁模式可以是读或写。读锁是共享的，而写锁是排他的。
- en: Lock names and namespaces can have a maximum of 64 characters and must be non-NULL
    and non-empty strings.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁名称和命名空间最多可以有64个字符，并且必须是非NULL和非空字符串。
- en: Lock names and namespace are treated as binary strings so comparison will be
    case-sensitive.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁名称和命名空间被视为二进制字符串，因此比较将区分大小写。
- en: Functions are provided to acquire and release locks and do not require any special
    privileges to call the functions.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了获取和释放锁的函数，不需要特殊权限来调用这些函数。
- en: Detects deadlock during lock acquisition calls in different sessions; a caller
    is chosen and terminated for its lock acquisition request and caller sessions
    holding read locks are preferred over the sessions holding write locks.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同会话中的锁获取调用期间检测死锁；选择一个调用者并终止其锁获取请求，优先选择持有读锁的调用者会话，而不是持有写锁的会话。
- en: A typical session can request for multiple locks acquisition with a single lock
    acquisition call. It provides atomic behavior for the request and succeeds if
    all locks are acquired or fails if any of the lock acquisitions fail.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的会话可以通过单个锁获取调用请求多个锁获取。它为请求提供原子行为，并且如果所有锁都被获取则成功，如果任何锁获取失败则失败。
- en: Multiple locks for the same lock identifier can be acquired by the session where
    the lock instances can be write locks, read locks, or a mix of both read and write
    locks.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一锁标识符的多个锁可以由会话获取，其中锁实例可以是写锁、读锁或读写锁的混合。
- en: Acquired locks are released from the session by explicitly calling the release-lock
    function, or implicitly if the session gets terminated.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过显式调用释放锁函数或者如果会话终止则隐式释放会话中获取的锁。
- en: All locks in the given namespace when released are released together within
    the session.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在给定命名空间中释放的所有锁都在会话内一起释放。
- en: The keyring service
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密钥环服务
- en: 'The keyring service provides an interface for securely storing sensitive information
    for internal server components and plugins to retrieve later. In the keyring service,
    the record from the keystore itself consists of data—the key and unique identifier
    by which the key can be accessed. The identifier consists of the following two
    parts:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥环服务提供了一个接口，用于安全地存储内部服务器组件和插件以便以后检索的敏感信息。在密钥环服务中，来自密钥库本身的记录由数据组成——密钥和可以访问密钥的唯一标识符。标识符由以下两部分组成：
- en: '`key_id`: The name. `key_id` or key ID values beginning with `mysql_` are reserved
    by the MySQL server.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`key_id`：名称。以`mysql_`开头的`key_id`或密钥ID值由MySQL服务器保留。'
- en: '`user_id`: The `user_id` stands for an effective `user_id` per session. It
    can be `NULL` if there is no user context and the value does not necessarily need
    to be an actual `user` but depends upon the application.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`user_id`：`user_id`代表每个会话的有效`user_id`。如果没有用户上下文，则可以为`NULL`，并且该值不一定需要是实际的`user`，而是取决于应用程序。'
- en: 'The following are the common characteristics of the keyring service functions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是密钥环服务函数的常见特征：
- en: Each of the functions returns 1 for failure and 0 for success
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个函数返回1表示失败，返回0表示成功
- en: A unique combination is formed by the `user_id` and `key_id` arguments, indicating
    which key is to be used in the keyring
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_id`和`key_id`参数的唯一组合指示在密钥环中使用哪个密钥'
- en: Additional information about the key is provided with the `key_type` argument
    value as its intended use, its encryption method, or other such information
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`key_type`参数值提供有关密钥的附加信息，例如其预期用途、加密方法或其他信息
- en: User names, key IDs, types, and values are treated as binary strings in keyring
    service functions so the comparisons are case sensitive
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在密钥环服务函数中，用户名称、密钥ID、类型和值被视为二进制字符串，因此比较是区分大小写的
- en: 'The following is the list of keyring service functions that are available:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用的密钥环服务函数列表：
- en: '`my_key_generate()`: As the name suggests, it generates a new random key of
    given type and length and is stored in the keyring. The function consists of the
    arguments `key_id`, `user_id`, `key_type`, and `key_len`, as well as the following
    function syntax:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_key_generate()`: 正如其名称所示，它生成给定类型和长度的新随机密钥，并存储在密钥环中。该函数由参数`key_id`、`user_id`、`key_type`和`key_len`组成，以及以下函数语法：'
- en: '[PRE0]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`my_key_fetch()`: Deobfuscates the argument value and retrieves a key from
    the keyring and its type. The function consists of the arguments `key_id`, `user_id`,
    `key_type`, `key`, and `key_len`, as well as the following function syntax:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_key_fetch()`: 对参数值进行解密并从密钥环中检索密钥及其类型。该函数由参数`key_id`、`user_id`、`key_type`、`key`和`key_len`组成，以及以下函数语法：'
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`my_key_remove()`: Removes an associated key from the keyring. The function
    consists of the arguments `key_id` and `user_id`, as well as the following function
    syntax:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_key_remove()`: 从密钥环中删除关联的密钥。该函数由参数`key_id`和`user_id`组成，以及以下函数语法：'
- en: '[PRE2]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`my_key_store()`: Obfuscates the argument value and stores a key in the keyring.
    The function consists of the arguments `key_id`, `user_id`, `key_type`, `key`,
    and `key_len`, as well as the following function syntax:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_key_store()`: 对参数值进行混淆并将密钥存储在密钥环中。该函数包括参数`key_id`、`user_id`、`key_type`、`key`和`key_len`，以及以下函数语法：'
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding new functions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新函数
- en: New functions can be added with any of the three supported types in MySQL 8\.
    Each of the types have their own advantages and disadvantages. Where and which
    type of function should be added or implemented depends on the requirements of
    the function.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在MySQL 8中添加任何三种支持的类型的新函数。每种类型都有其自己的优点和缺点。应该根据函数的要求决定在何处以及应该添加或实现哪种类型的函数。
- en: 'The following is the list of the supported three types of new function in MySQL
    8, which we will look at in the following section:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL 8中支持的三种新函数类型的列表，我们将在下一节中进行讨论：
- en: Adding a function through the user-defined function interface.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用户定义函数接口添加函数。
- en: Adding a function as a native (built-in) MySQL function.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数添加为本机（内置）MySQL函数。
- en: Adding a function by creating a stored function.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建存储函数添加函数。
- en: Features of a user-defined function interface
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户定义函数接口的特点
- en: A user-defined function interface provides independent capabilities to a user
    purpose function.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的函数接口为用户目的函数提供独立的功能。
- en: 'The following features and capabilities are provided by the MySQL interface
    for user-defined functions:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL用户定义函数接口提供以下功能和能力：
- en: Functions can accept arguments of integer, string, or real values and can return
    values for the same types
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以接受整数、字符串或实数值的参数，并且可以返回相同类型的值
- en: Simple functions can be defined to operate on a single row at a time or it can
    be aggregate functions to operate on groups of rows
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以定义简单函数以一次操作一行，也可以是聚合函数以操作行组
- en: Functions are given information to enable them so that they can check the types,
    names, and numbers of arguments passed
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数被提供信息以使它们能够检查传递的参数的类型、名称和数量
- en: Before passing arguments to the given function, you can also ask MySQL to coerce
    arguments
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将参数传递给给定函数之前，还可以要求MySQL强制参数
- en: Indications can be made if the function results in any error or returns `NULL`
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果函数导致任何错误或返回`NULL`，可以进行指示
- en: Adding a new user-defined function
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的用户定义函数
- en: The UDF functions must be written in C or C++ and the underlying operating system
    must support dynamic loading behavior. There is a file, `sql/udf_example.cc`,
    that defines five UDF functions and it's included in the MySQL source distributions.
    Analyzing the file will let you know how calling conventions work for UDFs. User-defined
    function related symbols and data structures are defined in the `include/mysql_com.h`
    file and the file is included in the `mysql.h` header file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: UDF函数必须用C或C++编写，并且底层操作系统必须支持动态加载行为。有一个文件`sql/udf_example.cc`，定义了五个UDF函数，并包含在MySQL源分发中。分析该文件将让您了解UDF的调用约定如何工作。用户定义的函数相关符号和数据结构在`include/mysql_com.h`文件中定义，并且该文件包含在`mysql.h`头文件中。
- en: Typical code contained in the UDFs gets executed in the running server, so all
    constraints are applicable when writing UDF code—server code. Currently applicable
    constraints may get revised when a server is upgraded, and this can possibly result
    into the need to rewrite UDF code, so it is essential to be careful when writing
    code for the UDF.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: UDF中包含的典型代码在运行服务器中执行，因此在编写UDF代码时适用所有约束-服务器代码。当前适用的约束可能在服务器升级时得到修订，并且这可能导致需要重写UDF代码，因此在编写UDF代码时要小心。
- en: In order to use UDF, linking `mysqld` dynamically is a must. For any function
    to be used in SQL statements there must be underlying C or C++ functions. The
    convention for separating SQL and C/C++ code is followed where `xxx()` in uppercase
    indicates an SQL function call whereas `xxx()` with lowercase indicates a C/C++
    function call.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用UDF，必须动态链接`mysqld`。对于在SQL语句中使用的任何函数，必须有底层的C或C++函数。遵循将SQL和C/C++代码分开的约定，其中大写的`xxx()`表示SQL函数调用，而小写的`xxx()`表示C/C++函数调用。
- en: 'Encapsulate your C function as shown in following sentence when you are using
    C++: `extern "C"` `{ ... }` This way it is ensured that your C++ function names
    are readable in the completed user-defined function.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用C++时，将您的C函数封装如下所示：`extern "C"` `{ ... }`，以确保您的C++函数名称在完成的用户定义函数中可读。
- en: 'To write and implement the interface function name `XXX()`, the main function
    `xxx()` is a must and additionally requires one or more function to be implemented
    from the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写和实现接口函数名`XXX()`，必须有主函数`xxx()`，并且还需要从以下功能中实现一个或多个功能：
- en: '`xxx()`: The main function where the function result is being produced'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxx()`: 生成函数结果的主函数'
- en: '`xxx_init()`: The initialization function for the main function `xxx()`, it
    can be used for any of the following purposes:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxx_init()`: 主函数`xxx()`的初始化函数，可用于以下任何目的：'
- en: Checking number of arguments to be passed on to `XXX()`
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查要传递给`XXX()`的参数数量
- en: Verifying argument types with a declaration when calling the main function
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用主函数时，使用声明验证参数类型
- en: Allocating memory to the main function whenever required
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要时为主函数分配内存
- en: Result's maximum length verification
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果的最大长度验证
- en: Setting a decimal number limit for maximum in the result
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为结果设置最大的十进制数限制
- en: Specifying whether the result can be `NULL` or not
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定结果是否可以为`NULL`
- en: '`xxx_deinit()`: Represents deinitialization for the main function and deallocates
    memory if any is allocated by the initialization function for the main function'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxx_deinit()`: 代表主函数的去初始化，并在需要时释放主函数的初始化函数分配的内存'
- en: 'Aggregate UDFs are handled as in the following sequence in MySQL 8:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8中，聚合UDF按以下顺序处理：
- en: Call `xxx_init()` so that it allocates the required memory to store result information.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`xxx_init()`以便它分配所需的内存来存储结果信息。
- en: Sort the table/result as specified by the `GROUP BY` function.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照`GROUP BY`函数指定的表/结果进行排序。
- en: Call `xxx_clear()` so that it reset the current aggregate value for the first
    row in each new group.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`xxx_clear()`来重置每个新组中第一行的当前聚合值。
- en: Call `xxx_add()` that adds the argument to the current aggregate value.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`xxx_add()`来将参数添加到当前的聚合值。
- en: Call `xxx()` to get the result of aggregate data on group by changes or after
    processing the last row.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`xxx()`来获取按组更改或在处理最后一行后的聚合数据结果。
- en: Repeat steps 3-5 until all specified/resulted rows are processed.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤3-5，直到处理完所有指定/结果行。
- en: Call `xxx_deinit()` to free any allocated memory for the UDF.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`xxx_deinit()`来释放为UDF分配的任何内存。
- en: All the functions must be thread-safe, including the main function as well as
    other additional functions as required, along with the initialization and deinitialization
    functions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 所有函数必须是线程安全的，包括主要函数以及其他所需的附加函数，以及初始化和去初始化函数。
- en: 'Similar to the above sequence, the following are important aspects that need
    to be taken care of while adding new user-defined functions:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述顺序类似，以下是在添加新的用户定义函数时需要注意的重要方面：
- en: UDF argument processing
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UDF参数处理
- en: UDF return values and error handling
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UDF返回值和错误处理
- en: UDF compiling and installing
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UDF编译和安装
- en: UDF security precautions
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UDF安全预防措施
- en: Adding a new native function
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新的本机函数
- en: For adding a new native function, source distribution is required in order to
    compile using modified source that consists of the new native function. It is
    also required to repeat this when you migrate to another MySQL version.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用包含新本机函数的修改源代码进行编译，需要源分发文件。当迁移到另一个MySQL版本时，也需要重复这一过程。
- en: In a case where a new native function is to be referred in the statements and
    also replicated to slave servers, ensure that each of the slave servers has the
    new native function available, otherwise replication on the slave server will
    fail when the new native function invocation is attempted.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在语句中引用新的本机函数，并且还要在从服务器上复制，确保每个从服务器都有新的本机函数可用，否则当尝试调用新的本机函数时，从服务器上的复制将失败。
- en: 'The followings are the steps for adding a new native function in the source
    distribution files of the `sql` directory:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在`sql`目录的源分发文件中添加新本机函数的步骤：
- en: 'A subclass for the function needs to be added in `item_create.cc`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数的子类需要在`item_create.cc`中添加：
- en: In case of a fixed number of arguments, the subclass is to be created from `Create_func_arg0`,
    `Create_func_arg1`, `Create_func_arg2`, or `Create_func_arg3` depending upon the
    number of arguments required in your native function. You can refer to the `Create_func_abs`,
    `Create_func_uuid`, and `Create_func_pow` classes.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在参数数量固定的情况下，子类应该从`Create_func_arg0`、`Create_func_arg1`、`Create_func_arg2`或`Create_func_arg3`中创建，具体取决于您的本机函数需要的参数数量。您可以参考`Create_func_abs`、`Create_func_uuid`和`Create_func_pow`类。
- en: In case of a variable number of arguments, the subclass is to be created from
    `Create_native_func`. You can refer to the `Creat_func_concat` class.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在参数数量可变的情况下，子类应该从`Create_native_func`中创建。您可以参考`Creat_func_concat`类。
- en: 'The function name to be referred to in SQL statements needs to be registered
    in `item_create.cc` by adding the following line to the array: `static Native_func_registry
    func_array[]`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SQL语句中引用的函数名称需要在`item_create.cc`中注册，通过向数组添加以下行：`static Native_func_registry
    func_array[]`：
- en: If required, several names can be registered for the same function. You can
    refer to lines for `LOWER` and `LCASE` which are aliases stands for `Create_func_lcase`.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，可以为同一个函数注册多个名称。您可以参考`LOWER`和`LCASE`的行，它们是`Create_func_lcase`的别名。
- en: Declaring the class inherited from `Item_str_func` or `Item_num_func` is necessary,
    depending upon if your function return type is a string or a number in the `item_func.h` file.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的函数返回类型是字符串还是数字，在`item_func.h`文件中，需要声明从`Item_str_func`或`Item_num_func`继承的类。
- en: 'Adding one of the following declarations is necessary, depending upon if your
    function defines as a string or numeric function in the `item_func.cc` file:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的函数在`item_func.cc`文件中定义为字符串还是数字函数，需要添加以下声明之一：
- en: '[PRE4]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If your object is inherited from any of the standard items then you probably
    need to define only one of the preceding functions, as the parent object will
    take care other of the function. You can refer to the `Item_str_func` class that
    has defined the `val()` function that executes the `atof()` function on the returned
    value of the `::str()` function.
  id: totrans-180
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的对象是从任何标准项继承的，那么您可能只需要定义前面的函数之一，因为父对象将处理其他函数。您可以参考定义了`val()`函数的`Item_str_func`类，该函数在`::str()`函数的返回值上执行`atof()`函数。
- en: If the function is nondeterministic—that is, if the returned result varies at
    different invocations for fixed given arguments - then the following statement
    needs to be included in the item constructor, indicating that the function results
    should not be cached: `current_thd->lex->safe_to_cache_query=0;`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果函数是非确定性的 - 也就是说，如果对于固定给定的参数，返回的结果在不同的调用中会有所不同 - 那么需要在项目构造函数中包含以下语句，表示函数结果不应被缓存：`current_thd->lex->safe_to_cache_query=0;`。
- en: 'You probably also need to define the following object function for your native
    function:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能还需要为您的本机函数定义以下对象函数：
- en: '`void Item_func_newname::fix_length_and_dec()`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void Item_func_newname::fix_length_and_dec()`'
- en: The function should at least include the `max_length` calculation on the given
    arguments
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数至少应包括对给定参数的`max_length`计算。
- en: You should also set `maybenull = 0` if your main function cannot return any
    `NULL` values
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的主要函数不能返回任何`NULL`值，还应该设置`maybenull = 0`。
- en: You can refer to `Item_func_mod::fix_length_and_dec` for the same
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以参考`Item_func_mod::fix_length_and_dec`。
- en: Thread safety is a must for all functions. You should not be using any static
    or global variables in the functions without being protected by mutexes.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 所有函数都必须具有线程安全性。在没有受到互斥保护的情况下，您不应该在函数中使用任何静态或全局变量。
- en: Debugging and porting
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和移植
- en: Porting MySQL 8 to other operating systems is currently supported by many operating
    systems. The list of the latest supported operating systems is provided at [http://www.mysql.com/support/supportedplatforms/database.html](http://www.mysql.com/support/supportedplatforms/database.html).
    If you have added or attempted to add new ports (supported platforms) and are
    running into problems, you might use debugging of MySQL 8 to find and fix the
    problems.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 将MySQL 8移植到其他操作系统目前受到许多操作系统的支持。最新支持的操作系统列表提供在[http://www.mysql.com/support/supportedplatforms/database.html](http://www.mysql.com/support/supportedplatforms/database.html)。如果您已添加或尝试添加新的端口（受支持的平台）并遇到问题，您可以使用MySQL
    8的调试来查找并解决问题。
- en: First, you should get the test program `mysys/thr_lock` to work before debugging `mysqld`.
    This makes sure that your thread installation can have a remote chance to work!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在调试`mysqld`之前，您应该让测试程序`mysys/thr_lock`工作。这可以确保您的线程安装有远程工作的可能性！
- en: There are different possibilities for starting debugging, based on where you
    are running into the problems - it could be in MySQL server or in MySQL client.
    Depending on the problem's location you can start debugging in MySQL server or
    MySQL client respectively, and for tracing the program's activities you will get
    help from the `DEBUG` package.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您遇到问题的位置，可以在MySQL服务器或MySQL客户端中开始调试。根据问题的位置，您可以分别在MySQL服务器或MySQL客户端中开始调试，并且可以从`DEBUG`包中获得程序活动的跟踪帮助。
- en: The MySQL source code includes internal documentation written using `Doxygen`,
    which is very helpful in understanding the developer perspective on how MySQL
    works.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL源代码包括使用`Doxygen`编写的内部文档，这对于理解MySQL的开发者视角非常有帮助。
- en: 'In this section, you will see detailed information on the following topics:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将看到以下主题的详细信息：
- en: Debugging MySQL server
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试MySQL服务器
- en: Debugging MySQL client
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试MySQL客户端
- en: The `DBUG` package
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DBUG`包'
- en: Debugging MySQL server
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试MySQL服务器
- en: If you are using some of very new functionality in MySQL and facing some issues—let's
    say the server is crashing—you can try running `mysqld` with the `--skip-new` option.
    This option tells the MySQL server to disable all new and potentially unsafe functionality.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在MySQL中使用了一些非常新的功能并遇到了一些问题——比如服务器崩溃——您可以尝试使用`--skip-new`选项运行`mysqld`。此选项告诉MySQL服务器禁用所有新的可能不安全的功能。
- en: In cases where `mysqld` is not getting started, verify the `my.cnf` files, as
    they can interfere with the setup! You can check the arguments in `my.cnf` with
    the `mysqld --print-defaults` option and then start `mysqld` with the `--no-defaults`
    option to avoid using them.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mysqld`无法启动的情况下，请验证`my.cnf`文件，因为它们可能会干扰设置！您可以使用`mysqld --print-defaults`选项检查`my.cnf`中的参数，然后使用`--no-defaults`选项启动`mysqld`以避免使用它们。
- en: In cases where `mysqld` starts to eat up memory or CPU or hangs, you can check
    `mysqladmin processlist status` and find out if a query executed by someone is
    taking a long time. In cases where you are facing performance issues or problems
    and new clients are not able to connect, you can use `mysqladmin -i10` process
    list status.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mysqld`开始占用内存或CPU或挂起，您可以检查`mysqladmin processlist status`，并查找是否有某个查询执行时间过长。如果您遇到性能问题或问题，并且新客户端无法连接，您可以使用`mysqladmin
    -i10` process list status。
- en: You can also use the debug command `mysqladmin`, which dumps information about
    query usage, memory usage, and locks in use to the MySQL log file and can solve
    some problems for you. This command also works in case you have not compiled MySQL
    for debugging, providing some useful information.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用调试命令`mysqladmin`，它会将有关查询使用、内存使用和正在使用的锁的信息转储到MySQL日志文件中，并且可以为您解决一些问题。如果您没有为调试编译MySQL，此命令也可以提供一些有用的信息。
- en: In cases where you are facing any issue with the table getting slower, you should
    try to optimize the table using `myisamchk` or `OPTIMIZE_TABLE`. You should probably
    check the slow queries, if there are any, using `EXPLAIN` to find and fix the
    problem with queries.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到表变慢的问题，您应该尝试使用`myisamchk`或`OPTIMIZE_TABLE`来优化表。如果有任何慢查询，您应该使用`EXPLAIN`来查找并修复查询中的问题。
- en: 'The following are the important areas to consider when debugging in MySQL 8:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试MySQL 8时，以下是需要考虑的重要领域：
- en: '**Compiling MySQL for debugging**: In case of very specific problems you can
    always try to debug MySQL. To do that you must configure MySQL with the `-DWITH_DEBUG=1`
    option. The debugging configuration automatically enables lots of extra safety
    check functions that monitor the health of `mysqld`.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为调试编译MySQL**：在出现非常特定的问题时，您可以尝试调试MySQL。为此，您必须使用`-DWITH_DEBUG=1`选项配置MySQL。调试配置会自动启用大量额外的安全检查功能，以监视`mysqld`的健康状况。'
- en: '**Creating trace files**: You can attempt to find the problem by creating a
    trace file. To do that you must have `mysqld` compiled with debugging support.
    You can then use the `--debug` option, which will add trace logs in `/tmp/mysqld.trace`
    on Unix and `\mysqld.trace` on Windows.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建跟踪文件**：您可以尝试通过创建跟踪文件来找到问题。为此，您必须使用带有调试支持的`mysqld`编译。然后，您可以使用`--debug`选项，在Unix上将在`/tmp/mysqld.trace`中添加跟踪日志，在Windows上将在`\mysqld.trace`中添加跟踪日志。'
- en: '**Using WER with PDB to create a Windows crashdump**: Program database files
    are included in the ZIP archive debug binaries and test suite as a separate distribution
    of MySQL. These files provide information on debugging for a MySQL installation
    problem. They can be used with WinDbg or Visual Studio to debug `mysqld`.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用PDB和WER创建Windows崩溃转储**：程序数据库文件包含在ZIP存档调试二进制文件和测试套件中，作为MySQL的单独分发。这些文件提供了有关MySQL安装问题的调试信息。它们可以与WinDbg或Visual
    Studio一起使用来调试`mysqld`。'
- en: '**Debugging mysqld under gdb**: You can use this option when you are facing
    issues with threads or when the `mysqld` server hangs prior to `ready for connections`.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在gdb下调试mysqld**：当您遇到线程问题或`mysqld`服务器在`ready for connections`之前挂起时，可以使用此选项。'
- en: '**Using a stack trace**: You can also use this option when `mysqld` dies unexpectedly
    and find out the problem.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用堆栈跟踪**：当`mysqld`意外死机时，您也可以使用此选项找出问题。'
- en: '**Using server logs to find causes of errors in `mysqld`**: You can use this
    option by enabling the general query log - prior to that, you should check all
    your tables using the `myisamchk` utility and verify if there are any problems
    from the logs.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用服务器日志查找`mysqld`错误原因**：您可以通过启用常规查询日志来使用此选项 - 在此之前，您应该使用`myisamchk`实用程序检查所有表，并从日志中验证是否存在任何问题。'
- en: '**Making a test case if you experience table corruption**: This option is used
    when you are facing an issue with table corruption and is applicable only to `MyISAM`
    tables.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建一个测试用例，如果您遇到表损坏**：当您遇到表损坏问题时使用此选项，仅适用于`MyISAM`表。'
- en: Debugging MySQL client
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试MySQL客户端
- en: In cases where you are facing an issue in MySQL client you can also debug within
    MySQL client as well, but in order to do so you must have the integrated debug
    package. You need to configure MySQL with `-DWITH_DEBUG=1` to enable debugging
    in MySQL client.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在您在MySQL客户端遇到问题的情况下，您也可以在MySQL客户端内部进行调试，但是为了这样做，您必须具有集成的调试包。您需要配置MySQL以启用MySQL客户端中的调试，使用`-DWITH_DEBUG=1`。
- en: 'Prior to running MySQL client, you should set the environment variable `MYSQL_DEBUG` as
    follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行MySQL客户端之前，您应该设置环境变量`MYSQL_DEBUG`如下：
- en: '[PRE5]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This makes MySQL client generate a trace file in `/tmp/client.trace` for Unix
    or `\client.trace` for Windows.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使MySQL客户端在Unix的`/tmp/client.trace`或Windows的`\client.trace`中生成一个跟踪文件。
- en: 'In cases where you have problems with your own client code, you can attempt
    to connect to the server by running your query using the client that is known
    to work. For doing this you should run `mysqld` in debugging mode:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在您自己的客户端代码出现问题的情况下，您可以尝试使用已知可用的客户端运行您的查询来连接服务器。为此，您应该以调试模式运行`mysqld`：
- en: '[PRE6]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This trace will provide useful information if you want to mail a bug report
    for the problem.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要为问题发送错误报告，此跟踪将提供有用的信息。
- en: In cases where your client crashes at some `legal` looking code, you can check
    that your `mysql.h` header file includes file matches with your MySQL library
    file. This is one of the very common mistakes, using an older `mysql.h` file from
    an old MySQL installation with a new MySQL library, resulting in this issue.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，如果您的客户端在一些`合法`的代码处崩溃，您可以检查您的`mysql.h`头文件是否与您的MySQL库文件匹配。这是一个非常常见的错误，使用旧的`mysql.h`文件从旧的MySQL安装中与新的MySQL库一起，导致此问题。
- en: The DBUG package
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DBUG包
- en: Fred Fish originally created the `DBUG` package with MySQL server and most of
    the MySQL clients. If MySQL is configured for debugging, this package makes it
    possible to generate a trace file that has information about what the program
    is doing.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Fred Fish最初创建了MySQL服务器和大多数MySQL客户端的`DBUG`包。如果MySQL配置为调试模式，此包使得生成有关程序正在执行的信息的跟踪文件成为可能。
- en: There are debug options available to be specified in order to get specific information
    to the trace files using the `DBUG` package. It can be used in program invocation
    with the `-# [debug_options]` option or the `--debug[=debug_options]` option.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有调试选项可供指定，以便使用`DBUG`包将特定信息写入跟踪文件。它可以在程序调用中使用`-#[debug_options]`选项或`--debug[=debug_options]`选项。
- en: 'Most MySQL programs will use a default value if the `--debug` or `-#` option
    is specified without specifying a `debug_options` value. The server default value
    is `d:t:i:O,\mysqld.trace` on Windows and `d:t:i:o,/tmp/mysqld.trace` on Unix.
    The effect of this default is listed as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数MySQL程序将使用默认值，如果指定了`--debug`或`-#`选项，而没有指定`debug_options`值。服务器默认值是Windows上的`d:t:i:O,\mysqld.trace`和Unix上的`d:t:i:o,/tmp/mysqld.trace`。此默认值的效果如下所列：
- en: '`d`: Enables output for all debug macros'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：启用所有调试宏的输出'
- en: '`t`: Traces function calls and exits'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t`: 跟踪函数调用和退出'
- en: '`i`: Adds `PID` to output lines in trace file'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`：在跟踪文件中添加`PID`到输出行'
- en: '`o,/tmp/mysqld.trace`,` O,\mysqld.trace`: Sets the debug output file in Unix
    and Windows respectively'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`o,/tmp/mysqld.trace`，`O,\mysqld.trace`：在Unix和Windows中分别设置调试输出文件'
- en: In most of the cases, use the default `debug_options` value of `d:t:o,/tmp/myprogram_name.trace`
    for most of the client programs irrespective of platform works. For Windows, use
    `\myprogram_name.trace`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，对于大多数客户端程序，无论平台如何，都应使用默认的`debug_options`值`d:t:o,/tmp/myprogram_name.trace`。对于Windows，请使用`\myprogram_name.trace`。
- en: 'The following are some examples of debug control strings to be specified on
    the shell command line:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在shell命令行上指定的调试控制字符串的示例：
- en: '[PRE7]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to extend MySQL 8 through custom functions
    and APIs. You also got to know about writing functions and the associated characteristics
    of the plugin services and APIs. You can now create your own function or plugin,
    cater to specific business requirements, and also debug if a function does not
    work as per expectations, and test whether it does.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何通过自定义函数和API扩展MySQL 8。您还了解了编写函数以及插件服务和API的相关特性。您现在可以创建自己的函数或插件，满足特定的业务需求，并在函数不符合预期时进行调试和测试。
- en: In next chapter, you will learn about MySQL 8 best practices and benchmarking
    in MySQL 8\. You will learn about benchmarking and tools used for benchmarking.
    You will also learn best practices for some of very important features of MySQL
    8, such as memcached, replication, data partitioning, and indexing.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习MySQL 8的最佳实践和基准测试。您将了解基准测试和用于基准测试的工具。您还将学习MySQL 8一些非常重要功能的最佳实践，例如memcached、复制、数据分区和索引。
