- en: Troubleshooting MySQL 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8故障排除
- en: In the previous chapter, we learned an important aspect of the MySQL 8 database,
    benchmarking, and best practices. Benchmarking helps in comparing the current
    database performance against the expected performance matrices. We learned what
    benchmarking is and the tools that can be used to find the benchmark performance
    of a MySQL 8 server. In a later part of the chapter, we learned about the best
    practices to be followed for memcached, replication, partitioning, and indexing.
    Best practices help ensure the optimum configuration of the MySQL 8 database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了MySQL 8数据库、基准测试和最佳实践的一个重要方面。基准测试有助于比较当前数据库性能与预期性能矩阵。我们了解了什么是基准测试，以及可以用来查找MySQL
    8服务器基准性能的工具。在本章的后面部分，我们学习了关于memcached、复制、分区和索引的最佳实践。最佳实践有助于确保MySQL 8数据库的最佳配置。
- en: 'In this chapter, the focus will be on understanding the common errors that
    we may encounter while working with the MySQL 8 database. The errors may be server
    errors or client errors. We will look at a way to determine that the problem has
    occurred. We will also learn troubleshooting and resolution techniques for errors.
    In a later part of the chapter, we will look into real-world scenarios where these
    techniques are applicable. The following is the list of topics to be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，重点将放在理解在使用MySQL 8数据库时可能遇到的常见错误上。错误可能是服务器错误或客户端错误。我们将探讨一种确定问题发生的方法。我们还将学习错误的故障排除和解决技术。在本章的后面部分，我们将探讨这些技术适用的真实场景。以下是要涵盖的主题列表：
- en: MySQL 8 common problems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8常见问题
- en: MySQL 8 server errors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8服务器错误
- en: MySQL 8 client errors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8客户端错误
- en: MySQL 8 troubleshooting approach
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8故障排除方法
- en: Real-world scenario
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真实场景
- en: MySQL 8 common problems
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8常见问题
- en: When troubleshooting is an issue, the first thing to be done is to find out
    the program or piece of equipment that is causing it when we run into a problem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在故障排除时，首先要做的是找出导致问题的程序或设备。
- en: 'The following are symptoms that indicate a hardware or kernel problem:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是表明硬件或内核问题的症状：
- en: The keyboard is not functioning. It can be checked by pressing the *Caps Lock*
    key. If the light on the *Caps Lock* key does not light up, it is an issue with
    the keyboard. Similarly, the mouse not moving indicates an issue with the mouse.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘无法正常工作。可以通过按下*大写锁定*键来检查。如果*大写锁定*键上的灯不亮，那么键盘有问题。同样，鼠标不动表示鼠标有问题。
- en: '`ping` is an operating system command to check the accessibility of one machine
    from another machine. The machine from which the ping command is executed is called
    the **local machine**, whereas the machine pinged is called the **remote machine**.
    If the remote machine does not respond to the local machine''s pings, it indicates
    a hardware or network related issue.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ping`是一个操作系统命令，用于检查一台计算机从另一台计算机的可访问性。执行ping命令的计算机称为**本地计算机**，而被ping的计算机称为**远程计算机**。如果远程计算机不响应本地计算机的ping，表示存在硬件或网络相关的问题。'
- en: It may indicate an issue with the operating system kernel program if the programs
    other than MySQL are not working correctly.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果除了MySQL之外的程序无法正常工作，可能表明操作系统内核程序有问题。
- en: It may indicate an issue with the operating system or hardware if the system
    restarts unexpectedly. In a typical case, a user-level program should never be
    able to take the system down.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果系统意外重启，可能表明操作系统或硬件有问题。在典型情况下，用户级程序不应该能够使系统崩溃。
- en: 'To troubleshoot the issue, one or more of the following can be done:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要排除问题，可以执行以下一项或多项操作：
- en: Run a diagnostic tool to check hardware
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行诊断工具检查硬件
- en: Ensure the relevant library files are up to date
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保相关的库文件是最新的
- en: Check for the availability of updates, patches, or service packs for the operating
    system
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查操作系统的更新、补丁或服务包的可用性
- en: Check all connections
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查所有连接
- en: '`ECC memory` is an error correcting code memory. It can detect and correct
    most common internal data corruption issues. It is advisable to use ECC memory
    in order to detect the memory issues at an early stage.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`ECC内存`是纠错码内存。它可以检测和纠正大多数常见的内部数据损坏问题。建议使用ECC内存以便在早期检测内存问题。'
- en: 'The following instructions may help further identify the issue:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明可能有助于进一步确定问题：
- en: Examining the system log files may help to discover the reason for the problem.
    MySQL log files  must also be checked in case there appears to be an issue with
    MySQL.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查系统日志文件可能有助于发现问题的原因。如果MySQL出现问题，还必须检查MySQL日志文件。
- en: Operating system specific commands can be used to check issues with memory,
    file descriptors, disk space, or other critical resources.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用特定于操作系统的命令来检查内存、文件描述符、磁盘空间或其他关键资源的问题。
- en: A bug can be identified in the operating system kernel if a problematic runaway
    process does not die even though we have executed a command to kill it.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个有问题的运行进程即使我们执行了杀死它的命令仍不会死掉，那么操作系统内核中可能存在一个bug。
- en: If there appears not to be a problem with the hardware, attempts should be made
    to identify the program that may be causing the problem. Using operating system
    specific commands, such as Task manager on Windows, `ps` and `top` on Linux, or
    similar programs, we can identify programs that eat up CPU or block system processes.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果硬件似乎没有问题，应该尝试确定可能导致问题的程序。使用特定于操作系统的命令，如Windows上的任务管理器，Linux上的`ps`和`top`，或类似的程序，我们可以识别占用CPU或阻塞系统进程的程序。
- en: It is possible to recover the access to the machine even though the keyboard
    is locked up. This can be done by logging on to the system from another machine.
    Execute the `kbd_mode -a` command upon successful login.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使键盘被锁定，也可以恢复对计算机的访问。可以通过从另一台计算机登录系统来实现。成功登录后执行`kbd_mode -a`命令。
- en: 'MySQL users can report issues by using one of the multiple channels provided
    by MySQL. After having examined all the possible alternatives, if it can be decided
    that either the MySQL server or the MySQL client causes the problem, a user can
    either create a bug report for the mailing list or contact the MySQL support team.
    The bug reporter must provide detailed information about the bug, system information,
    and behavior and the expected behavior. The reporter must describe the reason
    based on why it seems to be a MySQL bug. It is useful to know the following information
    if the program fails:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL用户可以通过使用MySQL提供的多个渠道之一来报告问题。在检查了所有可能的替代方案之后，如果可以确定是MySQL服务器或MySQL客户端引起了问题，用户可以为邮件列表创建错误报告或联系MySQL支持团队。报告人必须提供有关错误、系统信息和行为以及预期行为的详细信息。报告人必须根据为什么似乎是MySQL错误的原因描述原因。如果程序失败，了解以下信息很有用：
- en: With the help of the `top` command, check if the program in question has taken
    up all the CPU time. In such cases, we should allow a program to run for a while
    because it is possible that the program may be executing intensive computational
    instructions.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`top`命令，检查所讨论的程序是否占用了所有的CPU时间。在这种情况下，我们应该允许程序运行一段时间，因为可能程序正在执行密集的计算指令。
- en: Observe the response from the MySQL server when a client program tries to connect
    to it. Has it stopped responding? Did the server provide any output?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察MySQL服务器对客户端程序尝试连接时的响应。它停止响应了吗？服务器提供了任何输出吗？
- en: If it is found that the MySQL server is causing problems in the `mysqld` program,
    try to connect using the `mysqladmin` program to check whether `mysqld` responds.
    The `mysqladmin -u root ping` or `mysqladmin -u root processlist` commands can
    be used.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发现MySQL服务器在`mysqld`程序中引起问题，请尝试使用`mysqladmin`程序连接以检查`mysqld`是否有响应。可以使用`mysqladmin
    -u root ping`或`mysqladmin -u root processlist`命令。
- en: Did the failed program make a segmentation fault?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败的程序是否发生了分段错误？
- en: Most common MySQL errors
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最常见的MySQL错误
- en: This section provides a list of the most common MySQL errors that users encounter
    very frequently.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了用户经常遇到的最常见的MySQL错误列表。
- en: Access denied
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问被拒绝
- en: MySQL provides a privilege system that authenticates the user who connects from
    a host, and associates the user with access privileges on a database. The privileges
    include `SELECT`, `INSERT`, `UPDATE`, and `DELETE` and are able to identify anonymous
    users and grant privileges for MySQL specific functions, such as `LOAD DATA INFILE`
    and administrative operations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了一个特权系统，用于验证从主机连接的用户，并将用户与数据库上的访问权限关联起来。权限包括`SELECT`、`INSERT`、`UPDATE`和`DELETE`，并能够识别匿名用户并授予MySQL特定功能的权限，例如`LOAD
    DATA INFILE`和管理操作。
- en: The access denied error may occur because of many causes. In many cases, the
    problem is caused because of MySQL accounts that the client programs use to connect
    with the MySQL server with permission from the server.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 访问被拒绝的错误可能是由许多原因引起的。在许多情况下，问题是由于客户端程序使用的MySQL帐户与MySQL服务器连接时获得了服务器的许可。
- en: Can't connect to [local] MySQL server
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无法连接到[local] MySQL服务器
- en: In this section, we will focus on the circumstances in which Can't connect to
    MySQL server error is encountered. But before we jump onto error-specific details,
    it is necessary to understand how the MySQL client connects to the MySQL server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点关注遇到无法连接到MySQL服务器错误的情况。但在我们跳到特定错误的细节之前，有必要了解MySQL客户端如何连接到MySQL服务器。
- en: 'On a Unix system, two different ways are available for the MySQL client to
    connect to the `mysqld` server process. The following are the details of these
    two methods:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统上，MySQL客户端连接到`mysqld`服务器进程有两种不同的方式。以下是这两种方法的详细信息：
- en: '**TCP/IP connection**: The `mysqld` server process listens for client connections
    on a specific port. The MySQL clients connects to the server using the specified
    TCP/IP port.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP/IP连接**：`mysqld`服务器进程在特定端口上监听客户端连接。MySQL客户端使用指定的TCP/IP端口连接服务器。'
- en: '**Unix socket file**: In this mode of connection, a Unix socket file is used
    to connect through a file in the filesystem (`/tmp/mysql.sock`).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unix套接字文件**：在这种连接模式下，Unix套接字文件用于通过文件系统（`/tmp/mysql.sock`）进行连接。'
- en: The socket file connection is faster compared to TCP/IP but it can be used when
    connecting to a server on the same machine. To use the Unix socket file, we do
    not specify a hostname or a special hostname localhost should be specified.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与TCP/IP相比，套接字文件连接速度更快，但只能在连接到同一台计算机上的服务器时使用。要使用Unix套接字文件，我们不指定主机名或应指定特殊主机名localhost。
- en: 'The following are the ways for the MySQL client to connect to the MySQL server
    on Windows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL客户端在Windows上连接到MySQL服务器的方式：
- en: '**TCP/IP connection**: As described previously for the Unix systems, the TCP/IP
    connection runs on a specified port number. The MySQL client connects to the port
    on which the MySQL server is listening.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP/IP连接**：与Unix系统之前描述的一样，TCP/IP连接在指定的端口号上运行。MySQL客户端连接到MySQL服务器正在监听的端口。'
- en: '**Named pipe connection**: The MySQL server can be started with the `--enable-named-pipe`
    option. If the client is running on the host on which the server is running, the
    client can connect with named pipes. **MySQL** is the default name of the named
    pipe. If no hostname is provided while connecting to the `mysqld` server process,
    MySQL first tries to connect to the default named pipe. If it is unable to connect
    to the named pipe, it tries to connect to the TCP/IP port. The use of named pipes
    can be forced on Windows by using `.` as the hostname.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名管道连接**：MySQL服务器可以使用`--enable-named-pipe`选项启动。如果客户端在运行服务器的主机上运行，则客户端可以使用命名管道连接。**MySQL**是命名管道的默认名称。如果在连接到`mysqld`服务器进程时未提供主机名，则MySQL首先尝试连接到默认命名管道。如果无法连接到命名管道，则尝试连接到TCP/IP端口。在Windows上可以通过使用`.`作为主机名来强制使用命名管道。'
- en: MySQL errors are identified by predefined unique error codes. The same error
    can have different error codes associated with it. The Can't connect to MySQL
    server error with the error code `2002` indicates one of three problems. It can
    be that the MySQL server is not running on the system, or the Unix socket filename
    provided is incorrect, or the TCP/IP port number provided to connect to the server
    is incorrect. The TCP/IP port may be blocked by the firewall or the port blocking
    service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL错误由预定义的唯一错误代码标识。相同的错误可能与不同的错误代码相关联。具有错误代码`2002`的无法连接到MySQL服务器错误表示三个问题之一。可能是MySQL服务器没有在系统上运行，或者提供的Unix套接字文件名不正确，或者提供的用于连接到服务器的TCP/IP端口号不正确。TCP/IP端口可能被防火墙或端口阻止服务阻止。
- en: The error code `2003` also associates with can't connect to MySQL server. It
    indicates refusal of the network connection by the server. It should be checked
    if the MySQL server has network connections enabled, the MySQL server is running,
    and the specified network port is configured on the server.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 错误代码`2003`也与无法连接到MySQL服务器相关联。它表示服务器拒绝了网络连接。应该检查MySQL服务器是否启用了网络连接，MySQL服务器是否正在运行，并且服务器上是否配置了指定的网络端口。
- en: 'The following command can be used to ensure that the `mysqld` server process
    is running:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于确保`mysqld`服务器进程正在运行：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the `mysqld` server process is not running, we should start the server.
    If the server is already running, the following commands should be used:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mysqld`服务器进程没有运行，我们应该启动服务器。如果服务器已经运行，应使用以下命令：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding commands, `hostname` is the hostname of the machine on which
    the MySQL server is running. `host_ip` is the IP address of the server machine.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`hostname`是运行MySQL服务器的计算机的主机名。`host_ip`是服务器机器的IP地址。
- en: Lost connection to MySQL server
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与MySQL服务器的连接丢失
- en: The lost connection to MySQL server error can occur because of one of the three
    likely causes explained in this section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与MySQL服务器的连接丢失错误可能是由本节中解释的三种可能原因之一引起的。
- en: One of the potential reasons for the error is that the network connectivity
    is troublesome. Network conditions should be checked if this is a frequent error.
    If the **during query** message is part of the error message, it is certain that
    the error has occurred because of network connection issues.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的一个潜在原因是网络连接出现问题。如果这是一个频繁出现的错误，应该检查网络条件。如果错误消息中包含**during query**，那么可以肯定是由于网络连接问题导致了错误。
- en: The `connection_timeout` system variable defines the number of seconds that
    the `mysqld` server waits for a connection packet before connection timeout response.
    Infrequently, this error may occur when a client is trying for the initial connection
    to the server and the `connection_timeout` value is set to a few seconds. In this
    case, the problem can be resolved by increasing the `connection_timeout` value
    based on the the distance and connection speed. `SHOW GLOBAL STATUS LIKE` and `Aborted_connects` can
    be used to determine if we are experiencing this more frequently. It can be certainly
    said that increasing the `connection_timeout` value is the solution if the error
    message contains **reading authorization packet**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`connection_timeout`系统变量定义了`mysqld`服务器在连接超时响应之前等待连接数据包的秒数。很少情况下，当客户端尝试与服务器进行初始连接并且`connection_timeout`值设置为几秒时，可能会发生此错误。在这种情况下，可以通过根据距离和连接速度增加`connection_timeout`值来解决问题。`SHOW
    GLOBAL STATUS LIKE`和`Aborted_connects`可用于确定我们是否更频繁地遇到此问题。可以肯定地说，如果错误消息包含**reading
    authorization packet**，增加`connection_timeout`值就是解决方案。'
- en: It is possible that the problem may be faced because of larger **Binary Large
    OBject** (**BLOB**) values than `max_allowed_packet`. This can cause a lost connection
    to the MySQL server error with clients. If the `ER_NET_PACKET_TOO_LARGE` error
    is observed, it confirms that the `max_allowed_packet` value should be increased.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会因为**Binary Large OBject**（**BLOB**）值大于`max_allowed_packet`而出现问题。这可能会导致客户端与MySQL服务器的连接丢失错误。如果观察到`ER_NET_PACKET_TOO_LARGE`错误，则确认应增加`max_allowed_packet`值。
- en: Password fails when entered incorrectly
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码输入错误时失败
- en: 'MySQL clients ask for a password when the client program is invoked with the `--password`
    or `-p` option without the password value. The following is the command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端程序在没有密码值的情况下使用`--password`或`-p`选项调用时，MySQL客户端会要求密码。以下是命令：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On a few systems, it may happen that the password works fine when specified
    in an option file or on the command line. But it does not work when entered interactively
    on the Command Prompt at the `Enter password:` prompt. It occurs because the system-provided
    library to read the passwords limits the password values to a small number of
    characters (usually eight). It is an issue with the system library and not with
    MySQL. As a workaround to this, change the MySQL password to a value that is eight
    or fewer characters or store the password in the option file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些系统上，当在选项文件或命令行中指定密码时，密码可以正常工作。但是，在`Enter password:`提示符处交互输入时，密码无法正常工作。这是因为系统提供的用于读取密码的库将密码值限制为少量字符（通常为八个）。这是系统库的问题，而不是MySQL的问题。作为解决方法，将MySQL密码更改为八个或更少字符的值，或将密码存储在选项文件中。
- en: Host host_name is blocked
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机host_name被阻止
- en: 'If the `mysqld` server receives too many connection requests from the host
    that is interrupted in the middle, the following error occurs:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mysqld`服务器从中断的主机接收了太多连接请求，将出现以下错误：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `max_connect_errors` system variable determines the number of successive
    interrupted connection requests that are allowed. Once there are `max_connect_errors`
    failed requests without a successful connection, `mysqld` assumes that something
    is wrong and blocks the host from further connections until the `FLUSH HOSTS`
    statement or `mysqladmin flush-hosts` command is issued.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`max_connect_errors`系统变量确定允许的连续中断连接请求的次数。一旦有`max_connect_errors`次失败的请求而没有成功的连接，`mysqld`就会认为出现了问题，并阻止主机进一步连接，直到发出`FLUSH
    HOSTS`语句或`mysqladmin flush-hosts`命令。'
- en: '`mysqld` blocks a host after 100 connection errors as a default. It can be
    adjusted by setting the `max_connect_errors` value on the server startup, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`mysqld`在100个连接错误后会阻止主机。可以通过在服务器启动时设置`max_connect_errors`值来进行调整，如下所示：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This value can also be set up at runtime, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此值也可以在运行时设置，如下所示：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It should be checked first that there is nothing wrong with TCP/IP connections
    from the host if the `host_name` is blocked error is received for a particular
    host. Increasing the value of the `max_connect_errors` variable does not help
    if the network has problems.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果针对特定主机收到`host_name`被阻止的错误，首先应检查主机的TCP/IP连接是否存在问题。如果网络存在问题，则增加`max_connect_errors`变量的值是无济于事的。
- en: Too many connections
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接过多
- en: This error indicates that all available connection are in use for other client
    connections. The `max_connections` is the system variable that controls the number
    of connections to the server. The default value for the maximum number of connections
    is 151\. We can set a larger value than 151 for the `max_connections` system variable
    to support more connections than 151.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误表示所有可用连接都用于其他客户端连接。`max_connections`是控制与服务器连接数的系统变量。最大连接数的默认值为151。我们可以为`max_connections`系统变量设置大于151的值，以支持超过151个连接。
- en: The `mysqld` server process actually allows one more than `max_connections`
    (`max_connections + 1`) value clients to connect. The additional one connection
    is kept reserved for accounts with `CONNECTION_ADMIN` or the `SUPER` privilege.
    The privilege can be granted to the administrators with access to the `PROCESS`
    privilege. With this access, the administrator can connect to the server using
    the reserved connection. They can execute the `SHOW PROCESSLIST` command to diagnose
    the problems even though the maximum number of client connections is exhausted.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysqld`服务器进程实际上允许比`max_connections`（`max_connections + 1`）值多一个连接。额外的一个连接被保留给具有`CONNECTION_ADMIN`或`SUPER`特权的帐户。管理员可以通过具有`PROCESS`特权的访问来授予该特权。有了这个访问权限，管理员可以使用保留的连接连接到服务器。他们可以执行`SHOW
    PROCESSLIST`命令来诊断问题，即使最大客户端连接数已用完。'
- en: Out of memory
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存不足
- en: 'If the `mysql` does not have enough memory to store the entire request of the
    query issued by the MySQL client program, the server throws the following error:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mysql`没有足够的内存来存储MySQL客户端程序发出的查询的整个请求，服务器会抛出以下错误：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In order to fix the problem, we must first check if the query is correct. Do
    we expect the query to return so many rows? If not, we should correct the query
    and execute it again. If the query is correct and needs no correction, we can
    connect `mysql` with the `--quick` option. Using the `--quick` option results
    in the `mysql_use_result()` C API function for fetching the result set. The function
    adds more load on the server and less load on the client.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决问题，我们必须首先检查查询是否正确。我们是否期望查询返回这么多行？如果不是，我们应该纠正查询并再次执行。如果查询是正确的且不需要更正，我们可以使用`--quick`选项连接`mysql`。使用`--quick`选项会导致`mysql_use_result()`
    C API函数用于获取结果集。该函数会增加服务器的负载，减少客户端的负载。
- en: Packet too large
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包太大
- en: 'The communication packet is one of the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通信数据包是以下内容之一：
- en: A single SQL statement that the MySQL client sends to the MySQL server
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL客户端发送到MySQL服务器的单个SQL语句
- en: A single row that is sent to the MySQL client from the MySQL server
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL服务器发送到MySQL客户端的单行
- en: A binary log event that is sent from a replication master server to the replication
    slave
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从复制主服务器发送到复制从服务器的二进制日志事件
- en: A 1 GB packet size is the largest possible packet size that can be transmitted
    to or from the MySQL 8 server or client. The MySQL server or client issues an
    `ER_NET_PACKET_TOO_LARGE` error and closes the connection if it receives a packet
    bigger than `max_allowed_packet` bytes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 1 GB数据包大小是可以传输到MySQL 8服务器或客户端的最大可能数据包大小。如果接收到大于`max_allowed_packet`字节的数据包，MySQL服务器或客户端会发出`ER_NET_PACKET_TOO_LARGE`错误并关闭连接。
- en: 'The default `max_allowed_packet` size is 16 MB for the MySQL client program.
    The following command can be used to set a larger value:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL客户端程序的默认`max_allowed_packet`大小为16 MB。可以使用以下命令来设置更大的值：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The default value for the MySQL server is 64 MB. It should be noted that there
    is no harm in setting a larger value for this system variable, as the additional
    memory is allocated as needed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器的默认值为64 MB。值得注意的是，为此系统变量设置更大的值是没有害处的，因为额外的内存会根据需要分配。
- en: The table is full
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表已满
- en: 'The table-full error occurs in one of the following conditions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 表已满错误发生在以下条件之一：
- en: The disk is full
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘已满
- en: The table has reached the maximum size
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表已达到最大大小
- en: The actual maximum table size in the MySQL database can be determined by the
    constraints imposed by the operating system on the file sizes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据库中的实际最大表大小可以通过操作系统对文件大小的限制确定。
- en: Can't create/write to file
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无法创建/写入文件
- en: 'This indicates that MySQL is unable to create a temporary file in the temporary
    directory for the result set if we get the following error while executing a query:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行查询时出现以下错误，则表示MySQL无法在结果集的临时目录中创建临时文件：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The possible workaround for the error is to start the `mysqld` server with
    the `--tmpdir` option. The following is the command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的可能解决方法是使用`--tmpdir`选项启动`mysqld`服务器。以下是命令：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As an alternative, it can be specified in the `[mysqld]` section of the MySQL
    configuration file, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代，可以在MySQL配置文件的`[mysqld]`部分中指定如下：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Commands out of sync
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令不同步
- en: If the client functions are called in the wrong order, the commands out of sync
    error is received. It means that the command cannot be executed in the client
    code. As an example, if we execute `mysql_use_result()` and try to execute another
    query before executing `mysql_free_result()`, this error may occur. It may also
    happen if we execute two queries that return a result set without calling the `mysql_use_result()`
    or `mysql_store_result()` functions in between.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端函数的调用顺序错误，则会收到命令不同步的错误。这意味着命令无法在客户端代码中执行。例如，如果我们执行`mysql_use_result()`并在执行`mysql_free_result()`之前尝试执行另一个查询，则可能会出现此错误。如果我们在调用`mysql_use_result()`或`mysql_store_result()`函数之间执行两个返回结果集的查询，也可能会发生这种情况。
- en: Ignoring user
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忽略用户
- en: 'The following error is received when an account in the user table is found
    with an invalid password upon the `mysqld` server startup or when the server reloads
    the grant tables:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mysqld`服务器启动时或服务器重新加载授权表时，如果在用户表中找到具有无效密码的帐户，则会收到以下错误：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The account is ignored by the MySQL permission system as a result. To fix the
    problem, we should assign a new valid password for the account.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MySQL权限系统忽略了该帐户，因此会出现问题。为了解决问题，我们应该为该帐户分配一个新的有效密码。
- en: Table tbl_name doesn't exist
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表tbl_name不存在
- en: 'The following error indicates that a specified table does not exist in the
    default database:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下错误表示默认数据库中不存在指定的表：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In some cases, the user may be referring to the table incorrectly. It is possible
    because the MySQL server uses directories and files for storing database tables.
    Depending upon the operating system file management, the database and table names
    can be case sensitive.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，用户可能会错误地引用表。这是可能的，因为MySQL服务器使用目录和文件来存储数据库表。根据操作系统文件管理的不同，数据库和表名可能区分大小写。
- en: For non case-sensitive filesystems, such as Windows, the references to a specified
    table used within a query must use the same letter case.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不区分大小写的文件系统，例如Windows，在查询中使用的指定表的引用必须使用相同的字母大小写。
- en: MySQL 8 server errors
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8服务器错误
- en: This section focuses on MySQL 8 server errors. The section describes the errors
    related to MySQL server administration, table definitions, and known issues in
    the MySQL 8 server.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍MySQL 8服务器错误。该部分描述了与MySQL服务器管理、表定义和MySQL 8服务器中已知问题相关的错误。
- en: Issues with file permissions
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件权限问题
- en: 'If the `UMASK` or `UMASK_DIR` environment variables are set incorrectly upon
    server startup, we may have problems with file permissions. The MySQL server may
    issue following error message upon table creation:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在服务器启动时设置了`UMASK`或`UMASK_DIR`环境变量，则可能会出现文件权限问题。在表创建时，MySQL服务器可能会发出以下错误消息：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The default values for `UMASK` and `UMASK_DIR` system variables are 0640 and
    0750, respectively. If the value of these environment variables starts with zero,
    it indicates to the MySQL server that the values are in octal. For example, the
    default values 0640 and 0750 in octal are equivalent to 415 and 488, respectively,
    in decimal.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`UMASK`和`UMASK_DIR`系统变量的默认值分别为0640和0750。如果这些环境变量的值以零开头，则表示MySQL服务器的值是八进制的。例如，八进制中的默认值0640和0750分别等于十进制的415和488。'
- en: 'In order to change the default `UMASK` value, we should start `mysqld_safe`,
    as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更改默认的`UMASK`值，我们应该启动`mysqld_safe`，如下所示：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The MySQL server creates database directories with a default access permission
    value of `0750`. We can set the `UMASK_DIR` variable to modify this behavior.
    If this value is set, new directories are created with access permission values
    as a combination of the `UMASK` and `UMASK_DIR` values.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器创建数据库目录时的默认访问权限值为`0750`。我们可以设置`UMASK_DIR`变量来修改这种行为。如果设置了此值，新目录将以`UMASK`和`UMASK_DIR`值的组合作为访问权限值创建。
- en: 'The following is an example of providing group access to all new directories:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是提供所有新目录组访问权限的示例：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Resetting the root password
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置根密码
- en: The MySQL server does not need a password for connecting as a root user if the
    root password is never set in MySQL. If the password was assigned earlier has
    been forgotten, it can be reset.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在MySQL中从未设置根密码，则MySQL服务器连接为根用户时不需要密码。如果之前分配的密码被遗忘，可以进行重置。
- en: 'The following are the instructions to reset the `root @ localhost` account
    password on the Windows system:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Windows系统上重置`root @ localhost`帐户密码的说明：
- en: Log in to the system using system administrator credentials.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用系统管理员凭据登录系统。
- en: If the MySQL server is already running, stop the server. If the MySQL server
    is running as a Windows service, go to **Services** by following Start menu |
    Control panel | Administrative tools | Services. In the services, find the MySQL
    service and stop it. If the MySQL server is not running as a Windows service,
    kill the MySQL server process by using Windows Task Manager.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果MySQL服务器已经在运行，请停止服务器。如果MySQL服务器作为Windows服务运行，请按照开始菜单|控制面板|管理工具|服务找到**服务**。在服务中，找到MySQL服务并停止它。如果MySQL服务器没有作为Windows服务运行，请使用Windows任务管理器杀死MySQL服务器进程。
- en: 'Once the MySQL server is stopped, create a text file that has a single line
    of the password assignment statement, as follows:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦MySQL服务器停止，创建一个包含密码分配语句的单行文本文件，如下所示：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the file. For example, the file is saved as `C:\mysql-root-reset.txt`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。例如，将文件保存为`C:\mysql-root-reset.txt`。
- en: Open the Windows Command Prompt by following Start menu | Run | cmd.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照开始菜单|运行|cmd打开Windows命令提示符。
- en: 'In the Command Prompt, start the MySQL server with the `--init-file` option,
    as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，使用`--init-file`选项启动MySQL服务器，如下所示：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once the MySQL server is restarted, delete the`C:\mysql-root-reset.txt`file.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦MySQL服务器重新启动，删除`C:\mysql-root-reset.txt`文件。
- en: 'The following are the instructions to reset the root user password on Unix-like
    systems:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在类Unix系统上重置根用户密码的说明：
- en: Log on to the system with the same user the the MySQL server runs by. Usually,
    it is `mysql` user.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与MySQL服务器运行的相同用户登录系统。通常是`mysql`用户。
- en: 'If the MySQL server is already running, stop the server. To accomplish this,
    find the `.pid` file containing the process ID of the MySQL server. Depending
    on the Unix distribution, the actual location and name of the file may differ.
    The usual locations are `/var/lib/mysql/`, `/var/run/mysqld/`, and `/usr/local/mysql/data/`.
    Usually, the filename begins with either `mysqld` or the hostname of the system
    and has an extension of `.pid`. The MySQL server can be stopped by sending a normal
    kill command to the `mysqld` server process. The following command can be used
    with actual path name of the `.pid` file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果MySQL服务器已经运行，请停止服务器。为此，找到包含MySQL服务器进程ID的`.pid`文件。根据Unix发行版的不同，文件的实际位置和名称可能不同。通常的位置是`/var/lib/mysql/`，`/var/run/mysqld/`和`/usr/local/mysql/data/`。通常，文件名以`mysqld`或系统主机名开头，并具有`.pid`扩展名。可以通过向`mysqld`服务器进程发送正常的kill命令来停止MySQL服务器。可以使用以下命令和`.pid`文件的实际路径名：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the MySQL server is stopped, create a text file that has a single line
    of the password assignment statement, as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦MySQL服务器停止，创建一个包含密码赋值语句的文本文件，如下所示：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save the file. It is assumed that the file is stored at `/home/me/mysql-reset-root`.
    As the file contains the password for the root user, it should be ensured that
    other users are not able to read it. If we are not logged in with the appropriate
    user, we should make sure that the user has permission to read the file.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。假设文件存储在`/home/me/mysql-reset-root`。由于文件包含root用户的密码，应确保其他用户无法读取它。如果我们没有使用适当的用户登录，我们应该确保用户有权限读取该文件。
- en: 'Start the MySQL server with the `--init-file` option, as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`--init-file`选项启动MySQL服务器，如下所示：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Once the server is started, delete the file at `/home/me/mysql-reset-root`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦服务器启动，删除`/home/me/mysql-reset-root`中的文件。
- en: 'The following are the generic instructions to reset the root user password:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是重置root用户密码的通用说明：
- en: If the MySQL server is running, stop the server. Once it is stopped, restart
    the MySQL server with the `--skip-grant-tables` privilege. Along with `--skip-grant-tables`,
    the `--skip-networking` option is automatically enabled so as to prevent remote
    connections.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果MySQL服务器正在运行，请停止服务器。一旦停止，使用`--skip-grant-tables`特权重新启动MySQL服务器。除了`--skip-grant-tables`，`--skip-networking`选项会自动启用，以防止远程连接。
- en: 'Connect to the MySQL server using the `mysql` client program. As the server
    is started with `--skip-grant-tables`, no password is necessary:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mysql`客户端程序连接到MySQL服务器。由于服务器是使用`--skip-grant-tables`启动的，因此不需要密码：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the MySQL client itself, ask the server to reload the grant tables. This
    will enable account management statements:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MySQL客户端本身中，要求服务器重新加载授予表。这将启用帐户管理语句：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Change the `root @ localhost` account password by using following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更改`root @ localhost`帐户密码：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Restart the server and log in with the root user and newly set password.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器并使用root用户和新设置的密码登录。
- en: MySQL crashes prevention
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL崩溃预防
- en: 'As a standard release practice, every MySQL version is verified on different
    platforms before its release. It is assumed that MySQL may have a few hard to
    find bugs. As we encounter an issue with MySQL, it is helpful if we try to find
    out the cause for the system crash. The first thing to identify is if the `mysqld`
    server process crashes or the issue is with the MySQL client program. It can be
    checked how long the MySQL server was up for by executing the `mysqladmin version`
    command. The following is an example output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 作为标准发布实践，每个MySQL版本在发布之前都会在不同的平台上进行验证。假设MySQL可能有一些难以发现的错误。当我们遇到MySQL的问题时，如果我们尝试找出系统崩溃的原因，这将是有帮助的。首先要确定的是`mysqld`服务器进程是否崩溃，或者问题出现在MySQL客户端程序上。可以通过执行`mysqladmin
    version`命令来检查MySQL服务器运行了多长时间。以下是一个示例输出：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `resolve_stack_dump` is a utility program that resolves a numeric stack
    dump to symbols. To analyze the root cause of where the `mysqld` server process
    died, we find in the stack trace error logs. It can be resolved with the `resolve_stack_dump`
    program. It must be noted that it is possible that variable values found in the
    error logs may not be accurate.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolve_stack_dump`是一个实用程序，用于将数字堆栈转储解析为符号。为了分析`mysqld`服务器进程死机的根本原因，我们在堆栈跟踪错误日志中找到。可以使用`resolve_stack_dump`程序解决这个问题。必须注意的是，错误日志中找到的变量值可能不准确。'
- en: Corrupted data or index files can cause the MySQL server to crash. These files
    are updated on the disk using the `write()` system called upon the execution of
    each SQL statement and before the client is notified about the result. It means
    that the contents in the data files are safe even in the event of a `mysqld` crash.
    The writing of the unflushed data on the disk is taken care of by the operating
    system. The `--flush` option can be used with `mysqld` to force MySQL to flush
    everything to disk after every SQL statement execution.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 损坏的数据或索引文件可能会导致MySQL服务器崩溃。这些文件在执行每个SQL语句之前和客户端被通知结果之前使用`write()`系统在磁盘上进行更新。这意味着即使在`mysqld`崩溃的情况下，数据文件中的内容也是安全的。未刷新的数据在磁盘上的写入由操作系统负责。`--flush`选项可以与`mysqld`一起使用，以强制MySQL在每个SQL语句执行后将所有内容刷新到磁盘上。
- en: 'One of the following can be the reason for MySQL corrupted tables:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MySQL损坏表的原因之一：
- en: If the data file or index file crashes then it contains corrupted data.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据文件或索引文件崩溃，则其中包含损坏的数据。
- en: A bug in the MySQL server process caused the server to die in the middle of
    an update.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL服务器进程中的一个错误导致服务器在更新过程中崩溃。
- en: An external program manipulated the data and index files at the same time as
    `mysqld` without table locking.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部程序在没有表锁定的情况下与`mysqld`同时操纵数据和索引文件。
- en: In the middle of an update, the MySQL server process was killed.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更新过程中，MySQL服务器进程被终止。
- en: Many `mysqld` servers are running on the system. The servers use the same data
    directory. The system does not have good filesystem locks or the external locking
    is disabled.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多`mysqld`服务器正在系统上运行。这些服务器使用相同的数据目录。系统没有良好的文件系统锁定，或者外部锁定被禁用。
- en: It is possible that a bug is found in the data storage code. We can try to change
    the storage engine by using `ALTER TABLE` on the repaired copy of the table.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会发现数据存储代码中存在错误。我们可以尝试通过在已修复的表的副本上使用`ALTER TABLE`来更改存储引擎。
- en: Handling MySQL full disk
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理MySQL磁盘满
- en: This section focuses on the response from MySQL to disk-full errors and quota-exceeded
    errors. It is more relevant to writes in `MyISAM` tables. It can be applied to
    writes in binary log files and an index file. It excludes the references to rows
    and records that should be considered an event.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍MySQL对磁盘满错误和超出配额错误的响应。它更相关于`MyISAM`表中的写入。它可以应用于二进制日志文件和索引文件的写入。它排除了应被视为事件的行和记录的引用。
- en: 'MySQL performs the following when a disk-full condition occurs:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当磁盘满时，MySQL执行以下操作：
- en: MySQL ensures that there is enough space available to write the current row.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL确保有足够的空间可用来写入当前行。
- en: The MySQL server writes an entry in the log file every 10 minutes. It warns
    about the disk-full condition.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL服务器每10分钟在日志文件中写入一条条目。它会警告磁盘满的情况。
- en: 'The following actions should be taken to remedy the problem:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 应采取以下措施来解决问题：
- en: The disk space should be freed to make sure enough space is available to insert
    all records.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该释放磁盘空间，以确保有足够的空间来插入所有记录。
- en: We can execute the `mysqladmin kill` command to abort the thread. The next time
    it checks the disk, the thread is aborted.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以执行`mysqladmin kill`命令来中止线程。下次检查磁盘时，线程将被中止。
- en: It may happen that a few threads are waiting for the table that caused the disk-full
    situation. Out of several locked threads, killing the thread that is waiting on
    the disk-full condition will enable other threads to continue.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会有一些线程在等待导致磁盘满的表。在多个被锁定的线程中，杀死等待磁盘满条件的线程将使其他线程继续运行。
- en: The `REPAIR TABLE` or `OPTIMIZE TABLE` statements are exceptions to the preceding
    condition. Other exceptions include indexes created in a batch after the `LOAD
    DATA INFILE` or `ALTER TABLE` statements. These SQL statements can create temporary
    files with large volumes. This may create big problems for the rest of the system.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPAIR TABLE`或`OPTIMIZE TABLE`语句是前述条件的例外。其他例外包括在`LOAD DATA INFILE`或`ALTER
    TABLE`语句之后批量创建的索引。这些SQL语句可能会创建大量的临时文件。这可能会给系统的其余部分带来大问题。'
- en: MySQL temporary files storage
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL临时文件存储
- en: The value of the `TMPDIR` environment variable is used by MySQL on the Unix
    as the path name of the directory to store temporary files. MySQL uses a system
    default, such as`/tmp`, `/var/tmp`, or `/usr/tmp` if the `TMPDIR` is not set.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`TMPDIR`环境变量的值在Unix上被MySQL用作存储临时文件的目录路径名。如果未设置`TMPDIR`，MySQL会使用系统默认值，如`/tmp`、`/var/tmp`或`/usr/tmp`。'
- en: The values of the `TMPDIR`, `TEMP`, and `TMP` environment variables are checked
    by MySQL on Windows. If MySQL finds one set, it uses that value and does not check
    for remaining values. If none of these three variables are set, MySQL uses the
    system default, which is `C:\windows\temp\`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL在Windows上会检查`TMPDIR`、`TEMP`和`TMP`环境变量的值。如果MySQL找到已设置的变量，它将使用该值，并不会检查剩余的值。如果这三个变量都未设置，MySQL将使用系统默认值，即`C:\windows\temp\`。
- en: If the temporary file directory in the filesystem is too small, we can use the
    `mysqld --tmpdir` option to specify a directory on the filesystem with enough
    space. For the replication, on slave machines, we can use `--slave-load-tmpdir`
    and specify the directory for holding temporary files during the replication of
    `LOAD DATA INFILE` statements. It is possible to set a list of several paths used
    in a round-robin fashion with the `--tmpdir` option. On the Unix system, the paths
    can be separated by the colon character(:), whereas on Windows, the semicolon
    character(;) can be used to separate the paths.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件系统中的临时文件目录太小，我们可以使用`mysqld --tmpdir`选项来指定具有足够空间的文件系统上的目录。对于复制，在从服务器上，我们可以使用`--slave-load-tmpdir`并指定在复制`LOAD
    DATA INFILE`语句期间保存临时文件的目录。可以使用`--tmpdir`选项以轮询方式设置多个路径的列表。在Unix系统上，路径可以用冒号字符(:)分隔，而在Windows上，可以用分号字符(;)分隔路径。
- en: To effectively distribute the load, multiple temporary directory paths should
    belong to different physical disks and not the different partitions of the same
    disk.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地分配负载，多个临时目录路径应该属于不同的物理磁盘，而不是同一磁盘的不同分区。
- en: For the MySQL server working as a replication slave, we must take care of setting
    the `--slave-load-tmpdir` option so as not to point to a directory in the memory-based
    filesystem or to a directory that is cleared upon server or server host restarts.
    To replicate the temporary tables or `LOAD DATA INFILE` operations, the replication
    slave requires its temporary files on the machine restart. The replication fails
    if the files in the temporary file directory are lost.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于作为复制从服务器工作的MySQL服务器，我们必须注意设置`--slave-load-tmpdir`选项，以免指向基于内存的文件系统中的目录，或者指向在服务器或服务器主机重新启动时清除的目录。为了复制临时表或`LOAD
    DATA INFILE`操作，复制从服务器需要在机器重新启动时其临时文件。如果临时文件目录中的文件丢失，复制将失败。
- en: MySQL takes care of removing the temporary files when the `mysqld` server process
    is terminated. On Unix-like platforms, it can be done by unlinking a file after
    opening it. One of the major disadvantage of this is that the name does not appear
    in directory listings. It also happens that we cannot see a big file that occupies
    the filesystem.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当`mysqld`服务器进程终止时，MySQL会负责删除临时文件。在类Unix平台上，可以在打开文件后取消链接文件。这样做的一个主要缺点是该文件名不会出现在目录列表中。还有可能我们看不到占用文件系统的大文件。
- en: '`ibtmp1` is the name of the table space file that the`InnoDB` storage engine
    uses to store temporary tables. The file is located in the data directory of MySQL.
    If we want to specify a different filename and location, the `innodb_temp_data_file_path`
    option can be used on the server startup.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`ibtmp1`是`InnoDB`存储引擎用来存储临时表的表空间文件的名称。该文件位于MySQL的数据目录中。如果我们想要指定不同的文件名和位置，可以在服务器启动时使用`innodb_temp_data_file_path`选项。'
- en: If the `ALGORITHM=COPY` technique is used by the `ALTER TABLE` operation on
    the `InnoDB` table, the storage engine creates a temporary copy of the original
    table in the same directory. The temporary table filenames start with the `#sql-`
    prefix. They only appear briefly while the `ALTER TABLE` operation is being performed.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`ALTER TABLE`操作在`InnoDB`表上使用`ALGORITHM=COPY`技术，存储引擎会在相同目录中创建原始表的临时副本。临时表的文件名以`#sql-`前缀开头。它们只在执行`ALTER
    TABLE`操作时短暂出现。
- en: If the `InnoDB` table is rebuilt by the `ALTER TABLE` SQL statement using the
    `ALGORITHM=INPLACE` method, the `InnoDB` storage engine creates an intermediate
    copy of the original table in the same directory as that of the original table.
    The intermediate table filenames start with the `#sql-ib` prefix. They only appear
    briefly while the `ALTER TABLE` operation is being performed.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`ALGORITHM=INPLACE`方法通过`ALTER TABLE` SQL语句重建`InnoDB`表，则`InnoDB`存储引擎会在与原始表相同的目录中创建原始表的中间副本。中间表的文件名以`#sql-ib`前缀开头。它们只在执行`ALTER
    TABLE`操作时短暂出现。
- en: The `innodb_tmpdir` option cannot be applied to intermediate table files. These
    intermediate files are always created and stored in the same directory as that
    of the original table.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`innodb_tmpdir`选项不能应用于中间表文件。这些中间文件始终在与原始表相同的目录中创建和存储。'
- en: The `ALTER TABLE` SQL statements that rebuild the `InnoDB` table with the `ALGORITHM=INPLACE`
    method create temporary sort files in the default MySQL temporary directory. The
    default temporary directory is denoted by `$TMPDIR` on Unix, `%TEMP%` on Windows,
    or the directory mentioned by the `--tmpdir` option. `tmpdir` may need to be reconfigured
    if the temporary directory is not large enough to store such files. As an alternative,
    we can define another temporary directory for online `InnoDB` `ALTER TABLE` statements
    using the `innodb_tmpdir` option. The `innodb_tmpdir` option can be configured
    at runtime, using the `SET GLOBAL` or `SET SESSION` statements.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ALGORITHM=INPLACE`方法重建`InnoDB`表的`ALTER TABLE` SQL语句会在默认的MySQL临时目录中创建临时排序文件。默认临时目录由Unix上的`$TMPDIR`，Windows上的`%TEMP%`或`--tmpdir`选项指定的目录表示。如果临时目录不足以存储这样的文件，可能需要重新配置`tmpdir`。作为替代方案，可以使用`innodb_tmpdir`选项为在线`InnoDB`
    `ALTER TABLE`语句定义另一个临时目录。`innodb_tmpdir`选项可以在运行时使用`SET GLOBAL`或`SET SESSION`语句进行配置。
- en: Replicating an `innodb_tmpdir` configuration should be considered in replication
    environments if all the servers have the same operating system environment. In
    other cases, an `innodb_tmpdir` setting replication can result in a failed replication
    while executing online `ALTER TABLE` operations. It is recommended to configure
    `innodb_tmpdir` for each server separately if the operating environments are different.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制环境中，如果所有服务器具有相同的操作系统环境，则应考虑复制`innodb_tmpdir`配置。在其他情况下，`innodb_tmpdir`设置复制可能会导致在线`ALTER
    TABLE`操作执行失败。如果操作环境不同，建议为每台服务器单独配置`innodb_tmpdir`。
- en: MySQL Unix socket file
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL Unix套接字文件
- en: The MySQL server uses `/tmp/mysql.sock` as a default location for Unix socket
    files for communication with local clients. It may be different based on the distribution
    formats, such as `/var/lib/mysql` for RPMs.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器使用`/tmp/mysql.sock`作为与本地客户端通信的Unix套接字文件的默认位置。根据不同的发行格式，如RPMs的`/var/lib/mysql`，可能会有所不同。
- en: On several Unix versions, it is possible to delete files stored in the `/tmp`
    directory and similar other directories used to store temporary files. It may
    cause problems if the socket file is stored in such a directory on the filesystem.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在几个Unix版本上，可以删除存储在`/tmp`目录和其他类似目录中的文件。如果套接字文件存储在文件系统上的这种目录中，可能会导致问题。
- en: 'It is possible to protect the `/tmp` directory so as to ensure that the files
    can only be deleted by the owners or the root superuser. This is possible on almost
    every version of Unix. This can be done by setting the sticky bit on the `/tmp`
    directory while logged in as a root user. The following is the command to do the
    same:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 可以保护`/tmp`目录，以确保文件只能由所有者或root超级用户删除。这在几乎每个版本的Unix上都是可能的。可以在以root用户登录时设置`/tmp`目录的粘滞位。以下是执行相同操作的命令：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using the `ls -ld /tmp` command, it can also be checked if the sticky bit is
    set. The bit is set if the last permission character is `t`. A sticky bit is used
    to define the file permissions in Unix systems.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ls -ld /tmp`命令，还可以检查粘滞位是否已设置。如果最后一个权限字符是`t`，则设置了该位。粘滞位用于定义Unix系统中的文件权限。
- en: 'An alternative approach is also possible in which we should change the place
    of the Unix socket file. If we change the location of the Unix socket file, we
    must ensure that the client programs also know the new location of the file. The
    following are the ways to do it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种替代方法，即更改Unix套接字文件的位置。如果更改Unix套接字文件的位置，必须确保客户端程序也知道文件的新位置。以下是实现这一点的方法：
- en: 'The path can be set in the global or local option file, as follows:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在全局或本地选项文件中设置路径，如下所示：
- en: '[PRE26]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can also specify a `--socket` option to `mysqld_safe` on the command line
    and also when we run client programs.
  id: totrans-196
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以在命令行上为`mysqld_safe`指定`--socket`选项，并在运行客户端程序时也可以这样做。
- en: The `MYSQL_UNIX_PORT` environment variable can be set to the path of the Unix
    socket file.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_UNIX_PORT`环境变量可以设置为Unix套接字文件的路径。'
- en: The MySQL can also be recompiled from source so as to use a different Unix socket
    file location as a default.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL也可以重新从源代码编译，以便将不同的Unix套接字文件位置作为默认值使用。
- en: 'Using the following command, it can be ensured that the new socket location
    works:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令，可以确保新的套接字位置有效：
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Time zone problems
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时区问题
- en: The MySQL server must be told the user's current time zone if we have problem
    with `SELECT NOW()` returning a value in UTC instead of the user's current time
    zone. It is also applicable if `UNIX_TIMESTAMP()` returns a wrong value. It should
    be done for the environment running the server; for example, `mysqld_safe` or
    `mysql.server`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器必须告知用户当前的时区，如果我们在使用`SELECT NOW()`时返回的是UTC时间而不是用户当前的时区。如果`UNIX_TIMESTAMP()`返回错误的数值也适用。这应该针对运行服务器的环境进行设置，例如`mysqld_safe`或`mysql.server`。
- en: We can also set the server time zone by using the `--timezone=timezone_name`
    option with `mysqld_safe`. It can also be set by assigning the value to the `TZ`
    environment variable before the `mysqld` is started.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`--timezone=timezone_name`选项与`mysqld_safe`一起设置服务器时区。也可以在启动`mysqld`之前将值分配给`TZ`环境变量来设置时区。
- en: The allowed list of values for `--timezone` or `TZ` depends on the system.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`--timezone`或`TZ`的允许值列表取决于系统。'
- en: MySQL 8 client errors
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8客户端错误
- en: This section focuses on errors that occur on the MySQL 8 client. The job of
    a MySQL client is to connect to the MySQL server so as to execute the SQL queries
    and get the results from the MySQL 8 database. This section lists errors related
    to execution of the queries.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍MySQL 8客户端出现的错误。MySQL客户端的工作是连接到MySQL服务器，以执行SQL查询并从MySQL 8数据库获取结果。本节列出了与查询执行相关的错误。
- en: Case sensitivity in string searches
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串搜索中的区分大小写
- en: The string searches use the logical sequence of comparison operands for non-binary
    strings, such as`CHAR`, `VARCHAR`, and `TEXT`. The comparisons  of binary strings,
    such as `BINARY`, `VARBINARY`, and `BLOB` use the numeric values of the bytes
    in the operands. It essentially means that the comparison will be case sensitive
    for the alphabetic characters.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串搜索使用非二进制字符串的比较操作数的逻辑顺序，例如`CHAR`，`VARCHAR`和`TEXT`。二进制字符串的比较，如`BINARY`，`VARBINARY`和`BLOB`使用操作数中字节的数值。这基本上意味着对于字母字符，比较将区分大小写。
- en: The comparison of a non-binary string with a binary string will be treated as
    a comparison between binary strings.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将非二进制字符串与二进制字符串进行比较将被视为二进制字符串之间的比较。
- en: The comparison operations such as`>=`, `>`, `=`, `<`, `<=`, `sorting` and `grouping`
    depend on the sort value of each character. The characters with a similar sort
    value are considered the same character. Consider an example of e and é. These
    characters have the same sort value in the provided logical sequence. These are
    considered equal.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作，如`>=`, `>`, `=`, `<`, `<=`, `sorting`和`grouping`取决于每个字符的排序值。具有相似排序值的字符被视为相同字符。以e和é为例。这些字符在提供的逻辑顺序中具有相同的排序值。这些被视为相等。
- en: '`utf8mb4` and `utf8mb4_0900_ai_ci` are the default character set and collation,
    respectively. As a default, the non-binary string comparisons are case insensitive.
    This means that we will get all the column values starting with A or a if we search
    with `col_name LIKE ''a%''`. To make it case sensitive, we have to ensure that
    one of the operands has a binary or case sensitive collation. For example, if
    a column is compared to a string and both have the `utf8mb4` character set, the `COLLATE`
    operator can be used to cause either operand to have the `utf8mb4_0900_as_cs`
    or `utf8mb4_bin` collation. The following is an example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf8mb4`和`utf8mb4_0900_ai_ci`分别是默认的字符集和排序规则。默认情况下，非二进制字符串比较是不区分大小写的。这意味着如果我们使用`col_name
    LIKE ''a%''`搜索，我们将得到所有以A或a开头的列值。要使其区分大小写，我们必须确保其中一个操作数具有二进制或区分大小写的排序规则。例如，如果将列与字符串进行比较，并且两者都具有`utf8mb4`字符集，则可以使用`COLLATE`运算符来使其中一个操作数具有`utf8mb4_0900_as_cs`或`utf8mb4_bin`排序规则。以下是一个示例：'
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In order to change the non-binary case-sensitive strings comparison to be case
    insensitive, we should use `COLLATE` to name a case-insensitive collation. The
    following is an example of how `COLLATE` changes the comparison to be case sensitive:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将非二进制区分大小写字符串比较更改为不区分大小写，我们应该使用`COLLATE`来命名一个不区分大小写的排序规则。以下是`COLLATE`如何将比较更改为区分大小写的示例：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Problems with DATE columns
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DATE列的问题
- en: 'In MySQL, the default format of a `DATE` value is `YYYY-MM-DD`. Standard SQL
    does not permit any other format. This is the format that should be used in the
    `UPDATE` expressions and in the `WHERE` clause in a `SELECT` statement. The following
    is an example of the date format:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，`DATE`值的默认格式是`YYYY-MM-DD`。标准SQL不允许任何其他格式。这是在`UPDATE`表达式和`SELECT`语句的`WHERE`子句中应该使用的格式。以下是日期格式的示例：
- en: '[PRE30]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When a constant string is compared to `DATE`, `TIME`, `DATETIME`, or `TIMESTAMP`
    using `<`, `<=`, `=`, `>=`, `>`, or `BETWEEN` operators, MySQL converts the string
    into an internal long integer value. MySQL does this so as to achieve a faster
    comparison. However, the following exceptions are applicable to this conversion:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当将常量字符串与`DATE`，`TIME`，`DATETIME`或`TIMESTAMP`使用`<`, `<=`, `=`, `>=`, `>`,或`BETWEEN`运算符进行比较时，MySQL将字符串转换为内部长整数值。MySQL这样做是为了实现更快的比较。然而，以下例外情况适用于此转换：
- en: Comparing two columns
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较两列
- en: Comparing a `DATE`, `TIME`, `DATETIME`, or `TIMESTAMP` column to an expression
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`DATE`，`TIME`，`DATETIME`或`TIMESTAMP`列与表达式进行比较
- en: Use of a comparison method other than those just listed, such as `IN` or `STRCMP()`
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用除列出的方法之外的比较方法，如`IN`或`STRCMP()`
- en: The comparison is done by converting the objects into string values and performing
    a string comparison in case of these exceptions.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些例外情况下，通过将对象转换为字符串值并执行字符串比较来进行比较。
- en: Problems with NULL values
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NULL值的问题
- en: 'A `NULL` value is often a point of confusion for new programmers. The `NULL`
    value is by mistake interpreted as an empty string `''''` in the case of strings.
    This is not correct. The following is an example of completely different statements:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`NULL`值经常让新程序员感到困惑。`NULL`值在字符串的情况下被错误地解释为空字符串`''''`。这是不正确的。以下是完全不同的语句的示例：'
- en: '[PRE31]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding example, both statements insert the value in the same column
    (phone column). The first statement inserts a `NULL` value, whereas the second
    statement inserts an empty string. The first value can be considered as the phone
    number is not known, whereas the second value indicates the person is known to
    have no phone, and thus no phone number.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，两个语句都将值插入到同一列（phone列）中。第一个语句插入一个`NULL`值，而第二个语句插入一个空字符串。第一个值可以被认为是电话号码未知，而第二个值表示该人已知没有电话，因此没有电话号码。
- en: 'When a `NULL` value is compared to any other value, it always evaluates to
    be false. The expression containing the `NULL` value always results in a `NULL`
    value. The following example returns a `NULL` value:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 当`NULL`值与任何其他值进行比较时，它总是评估为假。包含`NULL`值的表达式总是返回`NULL`值。以下示例返回一个`NULL`值：
- en: '[PRE32]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If the purpose of an SQL statement is to search for `NULL` column values, we
    cannot use `expression = NULL`. The following is an example that returns no rows,
    as `expression = NULL` is always false:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQL语句的目的是搜索`NULL`列值，我们不能使用`expression = NULL`。以下是一个示例，返回零行，因为`expression =
    NULL`始终为假：
- en: '[PRE33]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To make a `NULL` value comparison, `IS NULL` should be used. The following
    example demonstrates the use of `IS NULL`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行`NULL`值比较，应该使用`IS NULL`。以下示例演示了`IS NULL`的使用：
- en: '[PRE34]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: MySQL 8 troubleshooting approach
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 8故障排除方法
- en: 'In this section of the chapter, we will focus on the MySQL 8 troubleshooting
    approach. Why do we need to troubleshoot MySQL 8? The reasons for troubleshooting
    are as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将专注于MySQL 8的故障排除方法。我们为什么需要排除MySQL 8的故障？排除故障的原因如下：
- en: Faster execution of SQL queries
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地执行SQL查询
- en: Performance enhancement
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能增强
- en: Efficient use of resources
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源的有效利用
- en: 'The primary set of resources include CPU, disk IO, memory, and network. There
    are two approaches to measure MySQL performance:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的资源集包括CPU、磁盘IO、内存和网络。有两种方法来衡量MySQL的性能：
- en: In a query focused approach, it is important to measure how fast the queries
    get executed
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询集中的方法中，重要的是要衡量查询的执行速度。
- en: In resource focused approach, it is important that the queries use fewer resources.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在资源集中的方法中，查询使用更少的资源是很重要的。
- en: Let us take a deeper look at ways to troubleshoot MySQL problems.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解如何排除MySQL问题。
- en: Analyzing queries
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析查询
- en: '`EXPLAIN` is the SQL statement that provides information for the way MySQL
    executes the SQL statements. The `EXPLAIN` statement works with `INSERT`, `UPDATE`,
    `REPLACE`, `DELETE`, and `SELECT` statements. The output of the `EXPLAIN` statement
    is a row of information for each table mentioned or used in the `SELECT` statement.
    The output lists the tables in the order of MySQL''s reading these tables while
    executing the statement. All joins are resolved using the nested-loop join method.
    In the nested-loop join method, MySQL reads a row from the first table in the
    list and then finds the matching row in the second table in the list, then the
    third table, and so on. Once all the tables in the list are processed, MySQL processes
    the results of the selected columns and backtracks them through the list of tables
    until it finds a table with more matching rows. It reads the next row from this
    table. This way the process continues.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXPLAIN`是提供MySQL执行SQL语句信息的SQL语句。`EXPLAIN`语句与`INSERT`、`UPDATE`、`REPLACE`、`DELETE`和`SELECT`语句一起使用。`EXPLAIN`语句的输出是对`SELECT`语句中提到或使用的每个表的信息行。输出按照MySQL在执行语句时读取这些表的顺序列出。所有连接都使用嵌套循环连接方法解析。在嵌套循环连接方法中，MySQL从列表中的第一个表中读取一行，然后在列表中的第二个表中找到匹配的行，然后是第三个表，依此类推。一旦处理完列表中的所有表，MySQL处理所选列的结果，并通过表的列表回溯，直到找到具有更多匹配行的表。它从这个表中读取下一行。这样的过程继续进行。'
- en: 'The following are the columns from the `EXPLAIN` output:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自`EXPLAIN`输出的列：
- en: '`id`**:** This denotes the sequential number of `SELECT` within a query. It
    is also known as the `SELECT` identifier. It is possible that the value can be
    `NULL` when the row belongs to union result of other rows. The output shows `<unionM,
    N>` in the table column. It means that the row refers to union of ID values `M`
    and `N`.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`**：这表示查询中的`SELECT`的顺序号。它也被称为`SELECT`标识符。当行属于其他行的联合结果时，该值可能为`NULL`。输出在表列中显示`<unionM,
    N>`。这意味着该行是ID值`M`和`N`的联合。'
- en: '`select_type`: This output column indicates the type of `SELECT` statement.
    The possible list of values include `SIMPLE`, `PRIMARY`, `UNION`, `DEPENDENT UNION`,
    `UNION RESULT`, `SUBQUERY`, `DEPENDENT SUBQUERY`, `DERIVED`, `MATERIALIZED`, `UNCACHEABLE
    SUBQUERY`, and `UNCACHEABLE UNION`.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select_type`：此输出列指示`SELECT`语句的类型。可能的值列表包括`SIMPLE`、`PRIMARY`、`UNION`、`DEPENDENT
    UNION`、`UNION RESULT`、`SUBQUERY`、`DEPENDENT SUBQUERY`、`DERIVED`、`MATERIALIZED`、`UNCACHEABLE
    SUBQUERY`和`UNCACHEABLE UNION`。'
- en: '`table`: This column indicates the name of the table referred in the output.
    It can have values such as `<unionM, N>`, `<derivedN>`, and `<subqueryN>`.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`：此列指示输出中提到的表的名称。它可以具有诸如`<unionM, N>`、`<derivedN>`和`<subqueryN>`之类的值。'
- en: '`partitions`: This identifies the partitions from which the query matches the
    records. For non-partitioned tables, the value is `NULL`.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partitions`：这标识查询匹配记录的分区。对于非分区表，该值为`NULL`。'
- en: '`type`: This indicates the type of `JOIN`.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`类型`：这表示`JOIN`的类型。'
- en: '`possible_keys`: This output column indicates possible indexes that MySQL may
    choose to fetch the rows in the table. If there are no matching indexes, the return
    value would be `NULL`.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`possible_keys`：此输出列指示MySQL可能选择用于获取表中行的索引。如果没有匹配的索引，返回值将为`NULL`。'
- en: '`key`: This output column indicates the key index that MySQL actually uses
    to fetch the rows from a table.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`：此输出列指示MySQL实际用于从表中获取行的关键索引。'
- en: '`ref`: The `ref` output column indicates the columns or constants used to compare
    with the index mentioned in the key output column to select table rows.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`：`ref`输出列指示用于与键输出列中提到的索引进行比较以选择表行的列或常量。'
- en: '`rows`: The rows output column indicates the number of rows to be examined
    in order to successfully execute the query.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rows`：行输出列指示为成功执行查询需要检查的行数。'
- en: 'The following are the types of joins in `EXPLAIN`:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EXPLAIN`中有以下类型的连接：
- en: '`system`: This means that the table has only one row. It is a special case
    of `const` join type.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system`：这意味着表只有一行。这是`const`连接类型的特殊情况。'
- en: '`const`:  This means that the table has at least one matching row. The row
    is read at the beginning of the query. As only one matching row is found, the
    rest of the optimizer regards the values from the column in this row as constants.
    As const tables are read only once, it is very fast. The const is used when all
    parts of a `PRIMARY KEY` or `UNIQUE` index are compared to constant values. The
    following is an example where `tbl_name` is used as a const table:'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const`：这意味着表至少有一行匹配。这一行在查询开始时被读取。由于只找到一行匹配，优化器的其余部分将这一行中的列值视为常量。由于const表只被读取一次，所以非常快。当`PRIMARY
    KEY`或`UNIQUE`索引的所有部分与常量值进行比较时，使用const。以下是一个使用`tbl_name`作为const表的示例：'
- en: '[PRE35]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`ref`: For each combination of rows from the earlier tables, all rows with
    matching index values are read from the `ref` table. If the join uses only the
    leftmost prefix of the key, the `ref` is used.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`：对于前面表的每个行组合，从`ref`表中读取所有具有匹配索引值的行。如果连接只使用了键的最左前缀，则使用`ref`。'
- en: Real-world scenario
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界的场景
- en: MySQL query optimization is referred to as improving the time of query execution.
    For example, when a query is not performing well means that the query is taking
    a longer time than expected for execution. The time of the query execution is
    important but there are other matrices as well that are used to measure performance.
    This section explains what should be measured and how it should be done as precisely
    as possible.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL查询优化是指提高查询执行时间。例如，当一个查询性能不佳时，意味着查询执行时间比预期的时间长。查询执行时间很重要，但还有其他指标用于衡量性能。本节解释了应该测量什么以及如何尽可能精确地进行测量。
- en: 'The following question arises: why should we optimize the query? Does it really
    require optimization if it only takes a hundredth of a second? Yes, it does require
    optimization unless the query is executed rarely. We should optimize the queries
    that are most expensive.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题出现了：为什么我们应该优化查询？如果只需要百分之一秒，真的需要优化吗？是的，除非查询很少执行，否则确实需要优化。我们应该优化最昂贵的查询。
- en: 'Let''s discuss a real-time example. In one of the applications, we had a report
    that was generated based on a complex query and was taking too much time. The
    execution time was in minutes. To optimize such a complex query, we considered
    the following approach:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一个实时的例子。在某个应用程序中，我们有一个基于复杂查询生成的报告，花费了太多时间。执行时间是以分钟计算的。为了优化这样一个复杂的查询，我们考虑了以下方法：
- en: '**Analyze the query plan using** `EXPLAIN`: MySQL provides two ways to analyze
    the performance of a query. One is the `EXPLAIN` method, which we have already
    learned about  in the preceding section of this chapter. Another tool is `SHOW
    STATUS`. Usually, we should prefer to use `EXPLAIN` to understand the query plan
    of a `SELECT` query. In the case of the report query, we convert a few of the
    non- `SELECT` queries to `SELECT` queries. This helps us in understanding the
    query execution plan for non- `SELECT` queries as well. For example, rewriting
    an `UPDATE` query to `SELECT` can be done by using the `WHERE` clause in the `UPDATE`
    query, which is passed on to the `SELECT` query.  We could also find few missing
    indexes on the tables.'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用`EXPLAIN`分析查询计划**：MySQL提供了两种分析查询性能的方法。一种是`EXPLAIN`方法，我们已经在本章的前一部分学习过。另一个工具是`SHOW
    STATUS`。通常，我们应该优先使用`EXPLAIN`来理解`SELECT`查询的查询计划。在报告查询的情况下，我们将一些非`SELECT`查询转换为`SELECT`查询。这有助于我们理解非`SELECT`查询的查询执行计划。例如，通过在`UPDATE`查询中使用`WHERE`子句，我们可以将其转换为`SELECT`查询。我们还可以找到表上缺少的索引。'
- en: '`SHOW STATUS`: The `SHOW STATUS` statement outputs the internal counters for
    MySQL. The counters are incremented by MySQL upon every query execution. With
    the help of these counters, we could understand the types of operations performed
    by the server in aggregate. It also helps in indicating the work done by each
    individual query.'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SHOW STATUS`：`SHOW STATUS`语句输出MySQL的内部计数器。这些计数器在每次查询执行时由MySQL递增。借助这些计数器，我们可以了解服务器的聚合操作类型。它还有助于指示每个单独查询所做的工作。'
- en: 'The following are the measurements performed for MySQL server variables:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对MySQL服务器变量执行的测量：
- en: '`Select_`: This counter is incremented whenever a `SELECT` query is executed. This
    counter can also be used to identify if a table scan is performed.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Select_`：每次执行`SELECT`查询时，此计数器会递增。此计数器还可用于确定是否执行了表扫描。'
- en: '`Key_read`: This variable provides additional information on the usage of the
    key index.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Key_read`：此变量提供了关于键索引使用情况的额外信息。'
- en: '`Last_query_cost`: This value indicates how expensive the last executed query
    was.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Last_query_cost`：这个值表示上次执行的查询有多昂贵。'
- en: 'The following are the steps to perform query optimization:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是执行查询优化的步骤：
- en: Query the execution a few times to ensure it returns the same result.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多次执行查询以确保返回相同的结果。
- en: Execute `SHOW STATUS`. The output should be saved.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`SHOW STATUS`。保存输出。
- en: Execute the query.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查询。
- en: Execute `SHOW STATUS` to observe the differences from the previous execution.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`SHOW STATUS`以观察与上一次执行的差异。
- en: Execute `EXPLAIN` if required.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，执行`EXPLAIN`。
- en: 'The following parameters should be analyzed for query performance optimization:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 应该分析以下参数以优化查询性能：
- en: Table index
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表索引
- en: Sorting
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序
- en: Overall performance
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体性能
- en: Row level operations
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行级操作
- en: Disk I/O operations
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘I/O操作
- en: Summary
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this last chapter of the book, we learned an important aspect of any database:
    troubleshooting errors that we may encounter using the MySQL server or client.
    We started the discussion by understanding what troubleshooting is. We discussed
    different ways for initial diagnostics of the error. We understood common MySQL
    errors and what the error messages mean. We also learned about the ways to fix
    these errors. We also learned about the MySQL server and client errors and fixes
    for these errors. In the later part of the chapter, we learned about the MySQL
    troubleshooting approach and looked at a real-world scenario. Pretty important
    stuff for the last chapter, huh? That''s it for the book.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的最后一章中，我们学习了数据库的一个重要方面：解决我们在使用MySQL服务器或客户端时可能遇到的错误。我们从理解故障排除开始讨论。我们讨论了初步诊断错误的不同方法。我们了解了常见的MySQL错误以及错误消息的含义。我们还学习了如何修复这些错误。我们还了解了MySQL服务器和客户端的错误以及这些错误的修复方法。在本章的后半部分，我们学习了MySQL故障排除方法，并看了一个真实的案例。对于最后一章来说，这是相当重要的内容，是吧？这本书就到这里了。
