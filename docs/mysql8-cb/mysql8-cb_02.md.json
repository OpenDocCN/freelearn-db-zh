["```go\nshell> mysql -h localhost -P 3306 -u <username> -p<password>\n```", "```go\nshell> mysql --host=localhost --port=3306 --user=root --password=<password>\n```", "```go\nshell> mysql --host localhost --port 3306 --user root --password=<password>\n```", "```go\nshell> mysql --host=localhost --port=3306 --user=root --password  \nEnter Password:\n```", "```go\nshell> whoami\n```", "```go\nmysql> ^DBye\nshell> \n```", "```go\nmysql> exit;\nBye\nshell>\n```", "```go\nmysql> SELECT 1;\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n1 row in set (0.00 sec)\n```", "```go\nmysql> SELECT ^C\nmysql> SELECT \\c\n```", "```go\nWarning: Using a password on the command line interface can be insecure.\n```", "```go\ncustomer id=1, first_name=Mike, last_name=Christensen country=USA\ncustomer id=2, first_name=Andy, last_name=Hollands, country=Australia\ncustomer id=3, first_name=Ravi, last_name=Vedantam, country=India\ncustomer id=4, first_name= Rajiv, last_name=Perera, country=Sri Lanka\n```", "```go\nshell> mysql -u root -p\nEnter Password:\nmysql> CREATE DATABASE company;\nmysql> CREATE DATABASE `my.contacts`;\n```", "```go) is used to quote identifiers, such as database and table names. You need to use it when the database name contains special characters, such as dot (`.`).\n\nYou can switch between databases:\n\n```", "```go\n\nInstead of switching, you can directly connect to the database you want by specifying it in the command line:\n\n```", "```go\n\nTo find which database you are connected to, use the following:\n\n```", "```go\n\nTo find all the databases you have access to, use:\n\n```", "```go\n\nThe database is created as a directory inside\u00a0`data directory`. The default `data\u00a0directory` is `/var/lib/mysql` for repository-based installation and `/usr/local/mysql/data/` for installation through binaries. To know your current `data directory`, you can execute:\n\n```", "```go\n\nCheck the files inside\u00a0`data\u00a0directory` :\n\n```", "```go\n\n# See also\n\nYou might be wondering about other files and directories, such as\u00a0`information_schema`\u00a0and\u00a0`performance_schema`, which you have not created.\u00a0`information_schema` will be discussed in the\u00a0*Getting information about databases and tables*\u00a0section and\u00a0`performance_schema` will be discussed in [Chapter 13](part0432.html#CRVJ00-faa69fe6f4c04957afca3568dcd9cd83), *Performance Tuning*, in the\u00a0*Using performance_schema*\u00a0section.\n\n# Creating tables\n\nWhile defining columns in a table, you should mention the name of the column, datatype (integer, floating point, string, and so on), and default value (if any). MySQL supports various datatypes. Refer to the MySQL documentation for more details ([https://dev.mysql.com/doc/refman/8.0/en/data-types.html](https://dev.mysql.com/doc/refman/8.0/en/data-types.html))). Here is an overview of all datatypes. The\u00a0\u00a0`JSON` datatype is a new extension, which will be discussed in [Chapter 3](part0432.html#CRVJ00-faa69fe6f4c04957afca3568dcd9cd83), *Using MySQL (Advanced)*:\n\n1.  Numeric: `TINYINT`, `SMALLINT`, `MEDIUMINT`, `INT`, `BIGINT`, and\u00a0`BIT`.\n2.  Floating numbers: `DECIMAL`, `FLOAT`, and\u00a0`DOUBLE`.\n3.  Strings: `CHAR`, `VARCHAR`, `BINARY`, `VARBINARY`, `BLOB`, `TEXT`, `ENUM`, and `SET`.\n4.  Spatial datatypes are also supported. Refer to [https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html](https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html) for more details.\n5.  The `JSON` datatype - discussed in detail in the next chapter.\n\nYou can create many tables inside a database.\n\n# How to do it...\n\nThe table contains the column definition:\n\n```", "```go\n\nThe options are explained as follows:\n\n*   **Dot notation**: Tables can be referenced using *database name dot table name* (`database.table`). If you are connected to the database, you can simply use `customers` instead of `company.customers`.\n*   `IF NOT EXISTS`: If a table with the same name exists and you specify this clause, MySQL simply throws a warning that the table already exists. Otherwise, MySQL will throw an error.\n*   `id`: It is declared as an integer since it contains only integers. Along with that, there are two key words:\u00a0`AUTO_INCREMENT` and `PRIMARY KEY`.\n*   `AUTO_INCREMENT`: A linearly incremental sequence is automatically generated, so you do not need to worry about assigning `id` to each row.\n*   `PRIMARY KEY`: Each row is identified by a\u00a0`UNIQUE` column that is `NOT NULL`. Only one of these columns should be defined in a table. If a table contains an\u00a0`AUTO_INCREMENT` column, it is taken as `PRIMARY KEY`.\n*   `first_name`, `last_name`, and `country`: They contain strings, so they are defined as `varchar`.\n*   **Engine**: Along with the column definition, you should mention the storage engine. Some types of storage engines include\u00a0`InnoDB`, `MyISAM`, `FEDERATED`, `BLACKHOLE`, `CSV`, and\u00a0`MEMORY`. Out of all the engines, `InnoDB` is the only transactional engine and it is the default engine. To learn more about transactions, refer to Chapter 5, *Transactions*.\n\nTo list all the storage engines, execute the following:\n\n```", "```go\n\nYou can create many tables in a database.\n\nCreate one more table to track the payments:\n\n```", "```go\n\nTo list all the tables, use:\n\n```", "```go\n\nTo see the structure of the table, execute the following:\n\n```", "```go\n\nOr use this:\n\n```", "```go\n\nMySQL creates `.ibd` files inside the `data\u00a0directory` :\n\n```", "```go\n\n# Cloning table structure\n\nYou can clone the structure of one table into a new table:\n\n```", "```go\n\nYou can verify the structure of the new table:\n\n```", "```go\n\n# See also\n\nRefer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/create-table.html](https://dev.mysql.com/doc/refman/8.0/en/create-table.html) for many other options in `Create Table`. Partitioning a table and compressing a table will be discussed in [Chapter 10](part0337.html#A1CDI0-faa69fe6f4c04957afca3568dcd9cd83), *Table Maintenance*\u00a0and [Chapter 11](part0388.html#BI0Q80-faa69fe6f4c04957afca3568dcd9cd83), *Managing Tablespace*, respectively.\n\n# Inserting, updating, and deleting rows\n\nThe\u00a0`INSERT`, `UPDATE`, `DELETE`, and\u00a0`SELECT`\u00a0operations are called **Data Manipulation Language** (**DML**) statements. `INSERT`, `UPDATE`, and\u00a0`DELETE` are also called write operations, or simply **write(s)**. `SELECT` is a read operation and is simply called\u00a0**read(s)**.\n\n# How to do it...\n\nLet's look at each of them in detail. I am sure you will enjoy learning this. I would suggest that you try a few things on your own as well, later. By the end of this recipe, we will also have gotten to grips with truncating tables.\n\n# Inserting\n\nThe `INSERT` statement is used to create new records in a table:\n\n```", "```go\n\nOr you can explicitly mention the `id` column, if you want to insert the specific `id`:\n\n```", "```go\n\n`IGNORE`: If the row already exists and the `IGNORE` clause is given, the new data is ignored and the `INSERT` statement still succeeds in producing a warning and a number of duplicates. Otherwise, if the `IGNORE` clause is not given, the `INSERT` statement produces an error. The uniqueness of a row is identified by the primary key:\n\n```", "```go\n\n# Updating\n\nThe `UPDATE` statement is used to modify the existing records in a table:\n\n```", "```go\n\n`WHERE`: This is the clause used for filtering. Whatever condition(s) are issued after the `WHERE` clause are evaluated and the filtered rows are updated.\n\nThe `WHERE` clause is **mandatory**. Failing to give it will `UPDATE` the whole table.\nIt is recommended to do data modification in a transaction, so that you can easily rollback the changes if you find anything wrong. You can refer to\u00a0[Chapter 5](part0207.html#65D4E0-faa69fe6f4c04957afca3568dcd9cd83), *Transactions* to learn more about transactions.\n\n# Deleting\n\nDeleting a record can be done as follows:\n\n```", "```go\n\nThe `WHERE` clause is **mandatory**. Failing to give it will `DELETE` all the rows of the table.\nIt is recommended to do data modification in a transaction, so that you can easily rollback the changes if you find anything wrong.\n\n# REPLACE, INSERT, ON DUPLICATE KEY UPDATE\n\nThere are many cases where you need to handle the duplicates. The uniqueness of a row is identified by the primary key. If a row already exists, `REPLACE` simply deletes the row and inserts the new row. If a row is not there, `REPLACE` behaves as `INSERT`.\n\n`ON DUPLICATE KEY UPDATE` is used when you want to take action if the row already exists. If you specify the `ON DUPLICATE KEY UPDATE` option and the `INSERT` statement causes a duplicate value in the `PRIMARY KEY`, MySQL performs an update to the old row based on the new values.\n\nSuppose you want to update the previous amount whenever you get payment from the same customer and concurrently insert a new record if the customer is paying for the first time. To do this, you will define an amount column and update it whenever a new payment comes in:\n\n```", "```go\n\nYou can see that two rows are affected, one duplicate row is deleted and a new row is inserted:\n\n```", "```go\n\n```", "```go\n\nWhen `Mike Christensen` pays $300 next time, this will update the row and add this payment to the previous payment:\n\n```", "```go\n\n`VALUES` (payment): refers to the value given in the `INSERT` statement. Payment refers to the column of the table.\n\n# Truncating tables\n\nDeleting the whole table takes lot of time, as MySQL performs operations row by row. The quickest way to delete all of the rows of a table (preserving the table structure) is to use the\u00a0`TRUNCATE TABLE` statement.\n\nTruncate is a DDL operation in MySQL, meaning once the data is truncated, it cannot be rolled back:\n\n```", "```go\n\n# Loading sample data\n\nYou have created the schema (databases and tables) and some data (through `INSERT`, `UPDATE`, and `DELETE`). To explain the further chapters, more data is needed. MySQL has provided a sample `employee` database and a lot of data to play around with. In this chapter, we will discuss how to get that data and store it in our database.\n\n# How to do it...\n\n1.  Download the zipped file:\n\n```", "```go\n\n2.  Unzip the file:\n\n```", "```go\n\n3.  Load the data:\n\n```", "```go\n\n4.  Verify the data:\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\n# Selecting data\n\nYou have inserted and updated data in the tables. Now it is time to learn how to retrieve information from the database. In this section, we will discuss how to retrieve data from the sample `employee` database that we have created.\n\nThere are many things that you can do with\u00a0`SELECT`. The most common use cases will be discussed in this section. For more details on syntax and other use cases, refer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/select.html](https://dev.mysql.com/doc/refman/8.0/en/select.html).\n\n# How to do it...\n\nSelect all data from the\u00a0`departments` table of the\u00a0`employee` database. You can use an asterisk (`*`) to select all columns from a table. It is not recommended to use it, you should always select only the data you need:\n\n```", "```go\n\n# Selecting columns\n\nSuppose you need `emp_no` and `dept_no` from `dept_manager`:\n\n```", "```go\n\n# Count\n\nFind the count of employees from the\u00a0`employees` table:\n\n```", "```go\n\n# Filter based on condition\n\nFind `emp_no` of employees with `first_name` as `Georgi` and `last_name` as `Facello`:\n\n```", "```go\n\nAll the filtering conditions are given through the\u00a0`WHERE` clause. Except integers and floating points, everything else should be put inside quotes.\n\n# Operators\n\nMySQL supports many operators for filtering results. Refer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html](https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html) for a list of all the operators. We will discuss a few operators here. `LIKE` and `RLIKE` are explained in detail in the next examples:\n\n*   **Equality**: Refer to the preceding example where you have filtered using `=`.\n*   `IN`: Check whether a value is within a set of values.\n    For example, find the count of all employees whose last name is either `Christ`,\u00a0`Lamba`, or `Baba`:\n\n```", "```go\n\n*   `BETWEEN...AND`: Check whether a value is within a range of values.\n    For example, find the number of employees who were hired in December 1986:\n\n```", "```go\n\n*   `NOT`: You can simply negate the results by preceding with the `NOT` operator.\n    For example, find the number of employees who were `NOT` hired in December 1986:\n\n```", "```go\n\n# Simple pattern matching\n\nYou can use the\u00a0`LIKE` operator. Use underscore (`_`) for matching exactly one character. Use `%` for matching any number of characters.\n\n*   Find the count of all employees whose first name starts with `Christ`:\n\n```", "```go\n\n*   Find the count of all employees whose first name starts with `Christ` and ends with `ed`:\n\n```", "```go\n\n*   Find the count of all employees whose first name contains `sri`:\n\n```", "```go\n\n*   Find the count of all employees whose first name ends with `er`:\n\n```", "```go\n\n*   Find the count of all employees whose first name starts with any two characters followed by `ka` and then followed by any number of characters:\n\n```", "```go\n\n# Regular expressions\n\nYou can use regular expressions in the `WHERE` clause by using the\u00a0`RLIKE` or `REGEXP` operators. There are many ways to use `REGEXP`, refer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/regexp.html](https://dev.mysql.com/doc/refman/8.0/en/regexp.html) for more examples:\n\n| **Expression** | **Description** |\n| `*` | Zero or more repetitions |\n| `+` | One or more repetitions |\n| `?` | Optional character |\n| `.` | Any character |\n| `\\.` | Period |\n| `^` | Starts with |\n| `$` | Ends with |\n| `[abc]` | Only *a*, *b*, or *c* |\n| `[^abc]` | Neither\u00a0*a*, *b*, nor *c* |\n| `[a-z]` | Characters a to *z* |\n| `[0-9]` | Numbers 0 to 9 |\n| `^...$` | Starts and ends |\n| `\\d` | Any digit |\n| `\\D` | Any non-digit character |\n| `\\s` | Any whitespace |\n| `\\S` | Any non-whitespace character |\n| `\\w` | Any alphanumeric character |\n| `\\W` | Any non-alphanumeric character |\n| `{m}` | *m* repetitions |\n| `{m,n}` | *m* to *n* repetitions |\n\n*   Find the count of all employees whose first name starts with\u00a0`Christ`:\n\n```", "```go\n\n*   Find the count of all employees whose last name ends with `ba`:\n\n```", "```go\n\n*   Find the count of all employees whose last name does not contain vowels (a, e, i, o, or u):\n\n```", "```go\n\n# Limiting results\n\nSelect the names of any 10 employees whose `hire_date` is before 1986\\. You can get this by using the\u00a0`LIMIT` clause at the end of the statement:\n\n```", "```go\n\n# Using the table alias\n\nBy default, whatever column you have given in the `SELECT` clause will appear in the results. In the previous examples, you have found out the count, but it is displayed as `COUNT(*)`. You can change it by using the\u00a0`AS` alias:\n\n```", "```go\n\n# Sorting results\n\nYou can order the result based on the column or aliased column. You can be specify `DESC` for descending order or `ASC` for ascending. By default, ordering will be ascending. You can combine the\u00a0\u00a0`LIMIT` clause with `ORDER BY` to limit the results.\n\n# How to do it...\n\nFind the employee IDs of the first five top-paid employees.\n\n```", "```go\n\nInstead of specifying the column name, you can also mention the position of the column in the `SELECT` statement. For example, you are selecting the salary at the second position in the `SELECT` statement. So, you can specify `ORDER BY 2`:\n\n```", "```go\n\n# Grouping results (aggregate functions)\n\nYou can group the results using the\u00a0`GROUP BY` clause on a column and then use\u00a0`AGGREGATE` functions, such as\u00a0`COUNT`, `MAX`, `MIN`, and\u00a0`AVERAGE`. You can also use the function on a column in a group by clause. See the `SUM` example where you will use the\u00a0`YEAR()` function.\n\n# How to do it...\n\nEach of the previously-mentioned aggregate functions will be introduced to you here in detail.\n\n# COUNT\n\n1.  Find the count of male and female employees:\n\n```", "```go\n\n2.  You want to find the 10 most common first names of the employees. You can use `GROUP BY first_name` to group all the first names, then `COUNT(first_name)` to find the count inside the group, and finally the\u00a0`ORDER BY` count to sort the results.\u00a0`LIMIT`\u00a0these results to the top 10:\n\n```", "```go\n\n# SUM\n\nFind the sum of the salaries given to employees in each year and sort the results by salary. The `YEAR()` function returns the `YEAR` of the given date:\n\n```", "```go\n\n```", "```go\n\n# AVERAGE\n\nFind the 10 employees with the highest average salaries:\n\n```", "```go\n\n# DISTINCT\n\nYou can use the\u00a0`DISTINCT` clause to filter the distinct entries in a table:\n\n```", "```go\n\n# Filtering using HAVING\n\nYou can filter results of the\u00a0`GROUP BY` clause by adding the\u00a0`HAVING` clause.\n\nFor example, find the employees with an average salary of more than 140,000:\n\n```", "```go\n\n# See also\n\nThere are many other aggregate functions, refer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html](https://dev.mysql.com/doc/refman/8.0/en/group-by-functions.html) for more information.\n\n# Creating users\n\nSo far, you have used only the root user to connect to MySQL and execute statements. The root user should never be used while accessing MySQL, except for administrative tasks from `localhost`. You should create users, restrict the access, restrict the resource usage, and so on. For creating new users, you should have the\u00a0`CREATE USER` privilege that will be discussed in the next section. During the initial set up, you can use the root user to create other users.\n\n# How to do it...\n\nConnect to mysql using the root user and execute `CREATE USER` command to create new users.\n\n```", "```go\n\nYou might get the following error if the password is not strong.\n\n```", "```go\n\nThe preceding statement will create users with:\n\n*   `* Username`: `company_read_only`.\n*   `* access only from`:\u00a0 `localhost`.\n*   You can restrict the access to the IP range. For example: `10.148.%.%`. By giving `%`, the user can access from any host.\n*   `* password`: `company_pass`.\n*   `* using mysql_native_password` (default) authentication.\n*   You can also specify any pluggable authentication, such as\u00a0`sha256_password`,\u00a0`LDAP`, or Kerberos.\n*   The `* maximum number of queries` the user can execute in an hour is 500.\n*   The `* maximum number of updates` the user can execute in an hour is 100.\n\nWhen a client connects to the MySQL server, it undergoes two stages:\n\n1.  Access control\u2014connection verification\n2.  Access control\u2014request verification\n\nDuring the connection verification, the server identifies the connection by the username and the hostname from which it is connected. The server invokes the authentication plugin for the user and verifies the password. It also checks whether the user is locked or not.\n\nDuring the request verification stage, the server checks whether the user has sufficient privileges for each operation.\n\nIn the preceding statement, you have to give the password in clear text, which can be recorded in the command history file,\u00a0`$HOME/.mysql_history`. To avoid that, you can compute the hash on your local server and directly specify the hashed string. The syntax for it is the same, except `mysql_native_password BY\u00a0'company_pass'` changes to `mysql_native_password AS 'hashed_string'`:\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\nYou can directly create users by granting privileges. Refer to the next section on how to grant privileges. However, MySQL will deprecate this feature in the next release.\n\n# See also\n\nRefer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/create-user.html](https://dev.mysql.com/doc/refman/8.0/en/create-user.html) for more options on creating users. More secure options, such as SSL, using other authentication methods will be discussed in [Chapter 14](part0498.html#EQTO40-faa69fe6f4c04957afca3568dcd9cd83), *Security*.\n\n# Granting and revoking access to users\n\nYou can restrict the user to access specific databases or tables and also only specific operations, such as\u00a0`SELECT`, `INSERT`, and\u00a0`UPDATE`. For granting privileges to other users, you should have the\u00a0`GRANT` privilege.\u00a0\n\n# How to do it...\n\nDuring the initial setup, you can use the root user to grant privileges. You can also create an administrative account to manage the users.\n\n# Granting privileges\n\n*   Grant the\u00a0`READ ONLY(SELECT)` privileges to the\u00a0`company_read_only` user:\n\n```", "```go\n\nThe asterisk (`*`) represents all tables inside the database.\n\n*   Grant the\u00a0`INSERT` privilege to the new\u00a0`company_insert_only`\u00a0user:\n\n```", "```go\n\n```", "```go\n\n*   Grant the\u00a0`WRITE` privileges to the new\u00a0`company_write`\u00a0user:\n\n```", "```go\n\n*   Restrict to a specific table. Restrict the\u00a0`employees_read_only`\u00a0user to `SELECT` only from the\u00a0`employees` table:\n\n```", "```go\n\n*   You can further restrict to specific columns. Restrict the\u00a0`employees_ro`\u00a0user to the\u00a0`first_name` and `last_name`\u00a0columns of the\u00a0`employees` table:\n\n```", "```go\n\n*   Extending grants. You can extend the grants by executing the new grant. Extend the privilege to the\u00a0`employees_col_ro` user to access the salary of the\u00a0`salaries` table:\n\n```", "```go\n\n*   Creating the\u00a0`SUPER` user. You need an administrative account to manage the server. `ALL` signifies all privileges expect the\u00a0`GRANT` privilege:\n\n```", "```go\n\n```", "```go\n\n*   Granting the\u00a0`GRANT` privilege. The user should have the\u00a0`GRANT OPTION` privilege to grant privileges to other users. You can extend the `GRANT` privilege to the\u00a0`dbadmin`\u00a0super user:\n\n```", "```go\n\nRefer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/grant.html](https://dev.mysql.com/doc/refman/8.0/en/grant.html) for more privilege types.\n\n# Checking grants\n\nYou can check all the user's grants. Check grants for the\u00a0`employee_col_ro` user:\n\n```", "```go\n\nCheck grants for the\u00a0`dbadmin` user. You can see all the grants that are available to the\u00a0`dbadmin` user:\n\n```", "```go\n\n# Revoking grants\n\nRevoking grants has the same syntax as creating grants. You grant a privilege `TO`\u00a0the user and revoke a privilege `FROM`\u00a0the user.\n\n*   Revoke the\u00a0`DELETE` access from the\u00a0`'company_write'@'%'` user:\n\n```", "```go\n\n*   Revoke the access to the salary column from the\u00a0`employee_ro` user:\n\n```", "```go\n\n# Modifying the mysql.user table\n\nAll the user information, along with privileges, is stored in the\u00a0`mysql.user` table. If you have the privilege to access the\u00a0`mysql.user` table, you can directly modify the `mysql.user` table to create users and grant privileges.\n\nIf you modify the grant tables indirectly, using account-management statements such as `GRANT`, `REVOKE`, `SET PASSWORD`, or `RENAME USER`, the server notices these changes and loads the grant tables into memory again immediately.\n\nIf you modify the grant tables directly, using statements such as `INSERT`, `UPDATE`, or `DELETE`, your changes have no effect on privilege checking until you either restart the server or tell it to reload the tables. If you change the grant tables directly but forget to reload them, your changes have no effect until you restart the server.\n\nThe reloading of the\u00a0`GRANT` tables can be done by issuing a `FLUSH PRIVILEGES` statement.\n\nQuery the\u00a0`mysql.user` table to find out all the entries for the\u00a0`dbadmin` user:\n\n```", "```go\n\nYou can see that the\u00a0`dbadmin` user can access the database from any host (%). You can restrict them to `localhost` just by updating the\u00a0`mysql.user` table and reloading the grant tables:\n\n```", "```go\n\n```", "```go\n\n# Setting password expiry for users\n\nYou can expire the passwords of users for a specific interval; after this, they need to change their password.\n\nWhen an application developer asks for database access, you can create the account with a default password and then set it to expire. You can share the password with the developers, then they have to change the password to continue using MySQL.\n\nAll the accounts are created with a password expiry equal to the\u00a0`default_password_lifetime` variable, which is disabled by default:\n\n*   Create a user with an expired password. When the developer logs in for the first time and tries to execute any statement, `ERROR 1820 (HY000):` is thrown. The password must be reset using the\u00a0`ALTER USER` statement before executing this statement:\n\n```", "```go\n\n```", "```go\n\nThe developer has to change their password using the following command:\n\n```", "```go\n\n*   Manually expire the existing user:\n\n```", "```go\n\n*   Require the password to be changed every 180 days:\n\n```", "```go\n\n# Locking users\n\nIf you find any issues with the account, you can lock it. MySQL supports locking while using `CREATE USER` or `ALTER USER`.\n\nLock the account by adding the\u00a0`ACCOUNT LOCK` clause to the `ALTER USER` statement:\n\n```", "```go\n\nThe developer will get an error saying that the account is locked:\n\n```", "```go\n\nYou can unlock the account after confirming:\n\n```", "```go\n\n# Creating roles for users\n\nA MySQL role is a named collection of privileges. Like user accounts, roles can have privileges granted to and revoked from them. A user account can be granted roles, which grants to the account the role privileges. Earlier, you created separate users for reads, writes, and administration. For write privilege, you have granted `INSERT`, `DELETE`, and `UPDATE`\u00a0to the user. Instead, you can grant those privileges to a role and then assign the user to that role. By this way, you can avoid granting privileges individually to possibly many user accounts.\u00a0\n\n*   Creating roles:\n\n```", "```go\n\n*   Assigning privileges to the roles using the\u00a0`GRANT` statement:\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\n*   Creating users. If you do not specify any host, `%` will be taken:\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\n*   Assigning the roles to the users using the\u00a0`GRANT` statement. You can assign multiple roles to a user.\n    For example, you can assign both read and write access to the\u00a0`emp_read_write` user:\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\n```", "```go\n\nAs a security measure, avoid using `%` and restrict the access to the IP where the application is deployed.\n\n# Selecting data into a file and table\n\nYou can save the output into a file using the\u00a0`SELECT INTO OUTFILE` statement.\n\nYou can specify the column and line delimiters, and later you can import the data into other data platforms.\n\n# How to do it...\n\nYou can save the output destination as a file or a table.\n\n# Saving as a file\n\n*   To save the output into a file, you need the\u00a0`FILE` privilege. `FILE` is a global privilege, which means you cannot restrict it for a particular database. However, you can restrict what the user selects:\n\n```", "```go\n\n*   On Ubuntu, by default, MySQL will not allow you to write to file. You should set `secure_file_priv` in the config file and restart MySQL. You will learn more on config in Chapter 4, *Configuring MySQL*. On CentOS, Red Hat,\u00a0`secure_file_priv` is set to `/var/lib/mysql-files`, which means all the files will be saved in that directory.\n*   For now, enable like this. Open the config file and add `secure_file_priv = /var/lib/mysql`:\n\n```", "```go\n\n*   Restart the MySQL server:\n\n```", "```go\n\nThe following statement will save the output into a CSV format:\n\n```", "```go\n\nYou can check the output of the file, which will be created in the path specified by `{secure_file_priv}/{database_name}`, it is `/var/lib/mysql/employees/` in this case. The statement will fail if the file already exists, so you need to give a unique name every time you execute or move the file to a different location:\n\n```", "```go\n\n# Saving as a table\n\nYou can save the results of a `SELECT` statement into a table. Even if the table does not exist, you can use `CREATE` and `SELECT` to create the table and load the data. If the table already exists, you can use `INSERT` and `SELECT` to load the data.\n\nYou can save the titles into a new `titles_only` table:\n\n```", "```go\n\nIf the table already exists, you can use the\u00a0`INSERT INTO SELECT` statement:\n\n```", "```go\n\nTo avoid duplicates, you can use\u00a0`INSERT IGNORE`. However, in this case, there is no `PRIMARY KEY` on the\u00a0`titles_only` table. So the\u00a0`IGNORE` clause does not make any difference.\n\n# Loading data into a table\n\nThe way you can dump a table data into a file, you can do vice-versa, that is, load the data from the file into a table. This is widely used for loading bulk data and is a super fast way to load data into tables. You can specify the column delimiters to load the data into respective columns. You should have the\u00a0`FILE` privilege and the\u00a0`INSERT` privilege on the table.\n\n# How to do it...\n\nEarlier, you have saved\u00a0`first_name` and `last_name` to a file. You can use the same file to load the data into another table. Before loading, you should create the table. If the table already exists, you can directly load. The columns of the table should match the fields of the file.\n\nCreate a table to hold the data:\n\n```", "```go\n\nMake sure that the file is present:\n\n```", "```go\n\nLoad the data using the\u00a0`LOAD DATA INFILE` statement:\n\n```", "```go\n\nThe file can be given as a full path name to specify its exact location. If given as a relative path name, the name is interpreted relative to the directory in which the client program was started.\n\n*   If the file contains any headers you want to ignore, specify `IGNORE n LINES`:\n\n```", "```go\n\n*   You can specify `REPLACE` or `IGNORE` to deal with duplicates:\n\n```", "```go\n\n*   MySQL assumes that the file you want to load is available on the server. If you are connected to the server from a remote client machine, you can specify `LOCAL` to load the file located on the client. The local file will be copied from the client to the server. The file is saved in the standard temporary location of the server. In Linux machines, it is `/tmp`:\n\n```", "```go\n\n# Joining tables\n\nSo far you have looked at inserting and retrieving data from a single table. In this section, we will discuss how to combine two or more tables to retrieve the results.\u00a0\n\nA perfect example is that you want to find the employee name and department number of a employee with `emp_no: 110022`:\n\n*   The department number and name are stored in the\u00a0`departments` table\n*   The employee number and other details, such as\u00a0`first_name`\u00a0and\u00a0`last_name`, are stored in the\u00a0`employees` table\n*   The mapping of employee and department is stored in the\u00a0`dept_manager` table\n\nIf you do not want to use `JOIN`, you can do this:\n\n1.  Find the employee name with `emp_no` as `110022` from the\u00a0`employee` table:\n\n```", "```go\n\n2.  Find the department number from the `departments` table:\n\n```", "```go\n\n3.  Find the department name from the `departments` table:\n\n```", "```go\n\n# How to do it...\n\nTo avoid look ups on three different tables using three statements, you can use `JOIN` to club them. The important thing to note here is to join two tables, you should have one, or more, common column to join. You can join employees and `dept_manager` based on `emp_no`, they both have the\u00a0`emp_no` column. Though the names don't need to match, you should figure out the column on which you can join. Similarly,\u00a0`dept_mgr` and `departments` have `dept_no` as a common column.\n\nLike a column alias, you can give table an alias and refer columns of that table using an alias. For example, you can give employees an alias using `FROM employees AS emp`\u00a0and refer columns of the\u00a0`employees` table using dot notation, such as\u00a0`emp.emp_no`:\n\n```", "```go\n\nLet's look at another example\u2014you want to find out the average salary for each department. For this you can use the\u00a0`AVG` function and group by `dept_no`. To find out the department name, you can join the results with the\u00a0`departments` table on `dept_no`:\n\n```", "```go\n\n# Identifying Duplicates using SELF JOIN\n\nYou want to find the duplicate rows in a table for specific columns. For example, you want to find out which employees have the same `first_name`, same `last_name`, same `gender`, and same `hire_date`. In that case, you can join the `employees` table with itself while specifying the columns where you want to find duplicates in the `JOIN` clause. You need to use different aliases for each table.\n\nYou need to add an index on the columns you want to join. The indexes will be discussed in [Chapter 13](part0432.html#CRVJ00-faa69fe6f4c04957afca3568dcd9cd83), *Performance Tuning*. For now, you can execute this command to add an index:\n\n```", "```go\n\n```", "```go\n\nYou have to mention `emp1.emp_no != emp2.emp_no` because the employees will have different `emp_no`. Otherwise, the same employee will appear.\n\n# Using SUB queries\n\nA subquery is a `SELECT` statement within another statement. Suppose you want to find the name of the employees who started as a `Senior Engineer` on `1986-06-26`.\nYou can get the `emp_no` from the `titles` table, and name from the `employees` table. You can also use `JOIN` to find out the results.\n\nTo get the `emp_no` from titles:\n\n```", "```go\n\nTo find the name:\n\n```", "```go\n\nOther clauses such as\u00a0`EXISTS`\u00a0and\u00a0`EQUAL` are also supported in MySQL. Refer to the reference manual,\u00a0[https://dev.mysql.com/doc/refman/8.0/en/subqueries.html](https://dev.mysql.com/doc/refman/8.0/en/subqueries.html), for more details:\n\n```", "```go\n\nFind the employee making the maximum salary:\n\n```", "```go\n\n`SELECT MAX(salary) FROM salaries` is the subquery that gives the maximum salary, to find the employee number corresponding to that salary, you can use that subquery in the `WHERE` clause.\n\n# Finding mismatched rows between tables\n\nSuppose you want to find rows in a table that are not in other tables. You can achieve this in two ways. Using the\u00a0`NOT IN` clause or using `OUTER JOIN`.\n\nTo find the matched rows, you can use normal `JOIN`, if you want to find mismatched rows, you can use `OUTER JOIN`. Normal `JOIN` means *A intersection B*. `OUTER JOIN` gives matching records of both *A* and *B* and also gives unmatched records of *A* with `NULL`. If you want the output of `A-B`, you can use the\u00a0`WHERE <JOIN COLUMN IN B> IS NULL`\u00a0clause.\n\nTo understand the usage of `OUTER JOIN`, create two `employee` tables and insert some values:\n\n```", "```go\n\nYou already know how to find the employees who exist in both lists:\n\n```", "```go\n\nOr you can use `JOIN`:\n\n```", "```go\n\nTo find out the employees who exist in `employees_list1` but not in `employees_list2`:\n\n```", "```go\n\nOr you can use `OUTER JOIN`:\n\n```", "```go\n\nThe outer join creates `NULL` columns of the second table in the join list for each unmatched row. If you use `RIGHT JOIN`, the first table will get `NULL` values for the unmatched rows.\n\nYou can also use `OUTER JOIN` to find matched rows. Instead of `WHERE l2.emp_no IS NULL`, give `WHERE emp_no IS NOT NULL`:\n\n```", "```go\n\n# Stored procedures\n\nSuppose you need to execute a series of statements in MySQL, instead of sending all SQL statements every time, you can encapsulate all the statements in a single program and call it whenever required. A stored procedure is a set of SQL statements for which no return value is needed.\n\nApart from SQL statements, you can make use of variables to store results and do programmatical stuff inside a stored procedure. For example, you can write `IF`, `CASE` clauses, logical operations, and\u00a0`WHILE` loops.\n\n*   Stored functions and procedures are also referred to as stored routines.\n*   For creating a stored procedure, you should have the\u00a0`CREATE ROUTINE` privilege.\n*   Stored functions will have a return value.\n*   Stored procedures do not have a return value.\n*   All the code is written inside the\u00a0`BEGIN and END` block.\n*   Stored functions can be called directly in a `SELECT` statement.\n*   Stored procedures can be called using the\u00a0`CALL` statement.\n*   Since the statements inside stored routines should end with a delimiter (`;`), you have to change the delimiter for MySQL so that MySQL won't interpret the SQL statements inside a stored routine with normal statements. After the creation of the procedure, you can change the delimiter back to the default value.\n\n# How to do it...\n\nFor example, you want to add a new employee. You should update three tables, namely `employees`, `salaries`, and `titles`. Instead of executing three statements, you can develop a stored procedure and call it to create a new `employee`.\n\nYou have to pass the employee's\u00a0`first_name`, `last_name`, `gender`, and\u00a0`birth_date`, as well as the department the employee joins. You can pass those using input variables and you should get the employee number as output. The stored procedure does not return a value, but it can update a variable and you can use it.\n\nHere is a simple example of a stored procedure to create a new employee and update the\u00a0`salary` and `department` tables:\n\n```", "```go\n\nTo create a stored procedure, you can:\n\n*   Paste it in the command-line client\n*   Save it in the file and import it in MySQL using `mysql -u <user> -p employees < stored_procedure.sql`\n*   Source the\u00a0`mysql> SOURCE stored_procedure.sql` file\n\nTo use the stored procedure, grant the execute privilege to the\u00a0`emp_read_only` user:\n\n```", "```go\n\nInvoke the stored procedure using the\u00a0`CALL stored_procedure(OUT variable, IN values)` statement and name of the routine.\n\nConnect to MySQL using the\u00a0`emp_read_only` account:\n\n```", "```go\n\nPass the variable where you want to store the\u00a0`@new_emp_no`\u00a0output and also pass the required input values:\n\n```", "```go\n\nSelect the value of `emp_no`, which is stored in the `@new_emp_no` variable:\n\n```", "```go\n\nCheck that the rows are created in the\u00a0`employees`, `salaries`, and `titles` tables:\n\n```", "```go\n\nYou can see that, even though `emp_read_only` has no write access on the tables, it is able to write by calling the stored procedure. If the `SQL SECURITY` of the stored procedure is created as `INVOKER`, `emp_read_only` cannot modify the data. Note that if you are connecting using `localhost`, create the privileges for the\u00a0`localhost` user.\n\nTo list all the stored procedures in a database, execute `SHOW PROCEDURE STATUS\\G`. To check the definition of an existing stored routine, you can execute `SHOW CREATE PROCEDURE <procedure_name>\\G`.\n\n# There's more...\n\nStored procedures are also used to enhance the security. The user needs the\u00a0`EXECUTE`\u00a0privilege on the stored procedure to execute it.\nBy the definition of a stored routine:\n\n*   The `DEFINER`\u00a0clause specifies the creator of the stored routine. If nothing is specified, the current user is taken.\n*   The `SQL SECURITY`\u00a0clause specifies the execution context of the stored routine. It can be either\u00a0`DEFINER`\u00a0or\u00a0`INVOKER`.\n\n`DEFINER`: A user even with only the\u00a0`EXECUTE`\u00a0permission for routine can call and get the output of the stored routine, regardless of whether that user has permission on the underlying tables or not. It is enough if\u00a0`DEFINER`\u00a0has privileges.\n\n`INVOKER`: The security context is switched to the user who invokes the stored routine. In this case, the invoker should have access to the underlying tables.\n\n# See also\n\nRefer to the documentation for more examples and syntax, at\u00a0[https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html](https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html).\n\n# Functions\n\nJust like stored procedures, you can create stored functions. The main difference is functions should have a return value and they can be called in\u00a0`SELECT`. Usually, stored functions are created to simplify complex calculations.\n\n# How to do it...\n\nHere is an example of how to write a function and how to call it. Suppose a banker wants to give a credit card based on income level, instead of exposing the actual salary, you can expose this function to find out the income level:\n\n```", "```go\n\nTo create the function:\n\n```", "```go\n\n```", "```go\n\nTo list all the stored functions in a database, execute `SHOW FUNCTION STATUS\\G`. To check the definition of the existing stored function, you can execute `SHOW CREATE FUNCTION <function_name>\\G`.\n\nIt is very important to give the\u00a0`DETERMINISTIC`\u00a0keyword in the function creation. A routine is considered `DETERMINISTIC` if it always produces the same result for the same input parameters, and `NOT DETERMINISTIC` otherwise. If neither `DETERMINISTIC` nor `NOT DETERMINISTIC` is given in the routine definition, the default is `NOT DETERMINISTIC`. To declare that a function is deterministic, you must specify `DETERMINISTIC` explicitly.\nDeclaring a `NON DETERMINISTIC` routine as `DETERMINISTIC` might lead to unexpected results, by causing the optimizer to make incorrect execution plan choices. Declaring a `DETERMINISTIC` routine as `NON DETERMINISTIC` might diminish performance, by causing available optimizations not to be used.\n\n# Inbuilt functions\n\nMySQL provides numerous inbuilt functions. You have already used the\u00a0`CURDATE()` function to get the current date.\n\nYou can use the functions in the\u00a0`WHERE` clause:\n\n```", "```go\n\n*   For example, the following function gives the date from exactly one week ago:\n\n```", "```go\n\n*   Add two strings:\n\n```", "```go\n\n# See also\n\nRefer to the MySQL reference manual for a complete list of functions, at\u00a0[https://dev.mysql.com/doc/refman/8.0/en/func-op-summary-ref.html](https://dev.mysql.com/doc/refman/8.0/en/func-op-summary-ref.html).\n\n# Triggers\n\nA trigger is used to activate something before or after the trigger event. For example, you can have a trigger activate before each row that is inserted into a table or after each row that is updated.\n\nTriggers are highly useful while altering a table without downtime (Refer to\u00a0[Chapter 10](part0337.html#A1CDI0-faa69fe6f4c04957afca3568dcd9cd83), *Table Maintenance*, in the\u00a0*Alter table using online schema change tool* section) and also for auditing purposes. Suppose you want to find out the previous value of a row, you can write a trigger that saves those rows in another table before updating. The other table serves as an audit table that has the previous records.\n\nThe trigger action time can be `BEFORE` or `AFTER`, which indicates whether the trigger activates before or after each row to be modified.\n\nTrigger events can be `INSERT`, `DELETE`, or `UPDATE`:\n\n*   `INSERT`: Whenever a new row gets inserted through `INSERT`,\u00a0`REPLACE`, or `LOAD DATA`, the trigger gets activated\n*   `UPDATE`: Through the\u00a0`UPDATE` statement\n*   `DELETE`: Through the\u00a0`DELETE` or `REPLACE` statements\n\nFrom MySQL 5.7, a table can have multiple triggers at the same time. For example, a table can have two `BEFORE INSERT` triggers. You have to specify which trigger should go first using `FOLLOWS` or `PRECEDES`.\n\n# How to do it...\n\nFor example, you want to round off the salary before inserting it into the\u00a0`salaries` table. `NEW` refers to the new value that is being inserted:\n\n```", "```go\n\nCreate the trigger by sourcing the file:\n\n```", "```go\n\nTest the trigger by inserting a floating number into the salary:\n\n```", "```go\n\nYou can see that the salary is rounded off:\n\n```", "```go\n\nSimilarly, you can create a\u00a0`BEFORE UPDATE` trigger to round off the salary. Another example: you want to log which user has inserted into the\u00a0`salaries` table. Create an `audit` table:\n\n```", "```go\n\nNote that the following trigger precedes the\u00a0`salary_round` trigger, which is specified by `PRECEDES salary_round`:\n\n```", "```go\n\nInsert it into `salaries`:\n\n```", "```go\n\nFind out who inserted the salary by querying the\u00a0`salary_audit` table:\n\n```", "```go\n\nIn case the\u00a0`salary_audit` table is dropped or is not available, all the inserts on the `salaries` table will be blocked. If you do not want to do auditing, you should drop the trigger first and then the table.\nTriggers can make overhead on the write speed based on the complexity of it.\nTo check all the triggers, execute\u00a0`SHOW TRIGGERS\\G`.\nTo check the definition of an existing trigger, execute\u00a0`SHOW CREATE TRIGGER <trigger_name>`.\n\n# See also\n\nRefer to the MySQL reference manual, at\u00a0[https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html), for more details.\n\n# Views\n\nView is a virtual table based on the result-set of an SQL statement. It will also have rows and columns just like a real table, but few restrictions, which will be discussed later. Views hide the SQL complexity and, more importantly, provide additional security.\n\n# How to do it...\n\nSuppose you want to give access only to the\u00a0`emp_no` and `salary` columns of the\u00a0`salaries` table, and `from_date` is after `2002-01-01`. For this, you can create a view with the SQL that gives the required result.\n\n```", "```go\n\nNow the\u00a0`salary_view` view is created and you can query it just like any other table:\n\n```", "```go\n\nYou can see that the view has access to particular rows (that is, `from_date > '2002-01-01'`) and not all of the rows. You can use the view to restrict user access to particular rows.\n\nTo list all views, execute:\n\n```", "```go\n\nTo check the definition of the view, execute:\n\n```", "```go\n\nYou might have noticed the\u00a0`current_dept_emp` and `dept_emp_latest_date`\u00a0views, which are there as part of the `employee` database. You can explore the definition and find out their purpose.\n\nSimple views that do not have sub-queries, `JOINS`, `GROUP BY` clauses, union, and so on, can be updated. `salary_view` is a simple view that can be updated or inserted if the underlying tables have a default value:\n\n```", "```go\n\n```", "```go\n\nIf the table has a default value, you could have inserted a row even if it does not match the filter criteria in the view. To avoid that, and to insert rows that satisfy the view condition, you have to provide `WITH CHECK OPTION` in the definition.\n\nThe `VIEW` algorithms:\n\n*   `MERGE`: MySQL combines the input query and the view definition into a single query and then executes the combined query. The `MERGE` algorithm is allowed only on simple views.\n*   `TEMPTABLE`: MySQL stores the results in the temporary table and then it executes the input query against this temporary table.\n*   `UNDEFINED`\u00a0(default): MySQL automatically chooses the\u00a0`MERGE` or `TEMPTABLE` algorithm. MySQL prefers the `MERGE` algorithm to the\u00a0`TEMPTABLE` algorithm because the `MERGE` algorithm is much more efficient.\n\n# Events\n\nJust like a cron on a Linux server, MySQL has `EVENTS` to handle the scheduled tasks. MySQL uses a special thread called the event schedule thread to execute all scheduled events. By default, the event scheduler thread is not enabled (version < 8.0.3), to enable it, execute:\u00a0\n\n```", "```go\n\n# How to do it...\n\nSuppose you no longer need to keep salary audit records that are more than a month old, you can schedule an event that runs daily and deletes the records from the\u00a0`salary_audit` table that are a month old.\n\n```", "```go\n\nOnce the event is created, it will automatically do the job of purging the salary audit records.\n\n*   To check the events, execute:\n\n```", "```go\n\n*   To check the definition on the event, execute:\n\n```", "```go\n\n*   To disable/enable the event, execute the following:\n\n```", "```go\n\n# Access control\n\nAll stored programs (procedures, functions, triggers, and events) and views have a `DEFINER`. If the `DEFINER` is not specified, the user who creates the object will be chosen as `DEFINER`.\n\nStored routines (procedures and functions) and views\u00a0 have an\u00a0`SQL SECURITY` characteristic with a value of `DEFINER` or `INVOKER` to specify whether the object executes in the definer or invoker context. Triggers and events have no `SQL SECURITY` characteristic and always execute in the definer context. The server invokes these objects automatically as necessary, so there is no invoking user.\n\n# See also\n\nThere are lots of ways to schedule events, refer to\u00a0[https://dev.mysql.com/doc/refman/8.0/en/event-scheduler.html](https://dev.mysql.com/doc/refman/8.0/en/event-scheduler.html) for more details.\n\n# Getting information about databases and tables\n\nYou might have already noticed an\u00a0`information_schema`\u00a0database in the list of databases. `information_schema` is a collection of views that consist of metadata about all the database objects. You can connect to\u00a0`information_schema` and explore all the tables. The most widely-used tables are explained in this chapter. You either query the `information_schema` tables or use the\u00a0`SHOW` command, which essentially does the same.\n\n`INFORMATION_SCHEMA` queries are implemented as views over the\u00a0`data dictionary`\u00a0tables. There are two types of metadata in the\u00a0`INFORMATION_SCHEMA` tables:\n\n*   **Static table metadata**: `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_TYPE`, and\u00a0`ENGINE`. These statistics will be read directly from the `data\u00a0dictionary`.\n*   **Dynamic table metadata**: `AUTO_INCREMENT`, `AVG_ROW_LENGTH`, and\u00a0`DATA_FREE`. Dynamic metadata frequently changes (for example, the `AUTO_INCREMENT` value will advance after each `INSERT`). In many cases, the dynamic metadata will also incur some cost to accurately calculate on demand, and accuracy may not be beneficial for the typical query. Consider the case of the `DATA_FREE` statistic that shows the number of free bytes in a table\u2014a cached value is usually sufficient.\n\nIn MySQL 8.0, the dynamic table metadata will default to being cached. This is configurable via the\u00a0`information_schema_stats`\u00a0setting (default cached), and can be changed to `SET @@GLOBAL.information_schema_stats='LATEST'` in order to always retrieve the dynamic information directly from the storage engine (at the cost of slightly higher query execution).\n\nAs an alternative, the user can also execute `ANALYZE TABLE` on the table, to update the cached dynamic statistics.\n\nMost of the tables have the\u00a0`TABLE_SCHEMA` column, which refers to the database name, and the\u00a0`TABLE_NAME` column, which refers to the table name.\n\nRefer to\u00a0[https://mysqlserverteam.com/mysql-8-0-improvements-to-information_schema/](https://mysqlserverteam.com/mysql-8-0-improvements-to-information_schema/) for more details.\n\n# How to do it...\n\nCheck the list of all the tables:\n\n```", "```go\n\n# TABLES\n\nThe `TABLES` table contains all the information about the table, such as which database belongs to `TABLE_SCHEMA`, the number of rows (`TABLE_ROWS`), `ENGINE`, `DATA_LENGTH`, `INDEX_LENGTH`, and\u00a0`DATA_FREE`:\n\n```", "```go\n\nFor example, you want to know\u00a0`DATA_LENGTH`, `INDEX_LENGTH`, and\u00a0`DATE_FREE` inside the `employees` database:\n\n```", "```go\n\n# COLUMNS\n\nThis table lists all the columns and its definition for each table:\n\n```", "```go\n\n# FILES\n\nYou have already seen that MySQL stores the `InnoDB` data in the\u00a0`.ibd` files inside a directory (with the same name as the database name) in the\u00a0`data\u00a0directory` . To get more information about the files, you can query the `FILES` table:\n\n```", "```go\n\nYou should be keen at\u00a0`DATA_FREE`, which represents the unallocated segments plus the data that is free inside the segments due to fragmentation. When you rebuild the table, you can free up bytes shown in `DATA_FREE`.\n\n# INNODB_SYS_TABLESPACES\n\nThe size of the file is also available in the\u00a0`INNODB_TABLESPACES` table:\n\n```", "```go\n\nYou can verify the same in the filesystem:\n\n```", "```go\n\n# INNODB_TABLESTATS\n\nThe size of the index and approximate number of rows is available in the\u00a0`INNODB_TABLESTATS` table:\n\n```", "```go\n\n# PROCESSLIST\n\nOne of the most used views is the process list. It lists all the queries running on the server:\n\n```"]