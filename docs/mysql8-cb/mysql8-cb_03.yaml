- en: Using MySQL (Advanced)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MySQL（高级）
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Using JSON
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSON
- en: Common table expressions (CTE)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共表达式（CTE）
- en: Generated columns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的列
- en: Window functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口函数
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, you will learn about the newly introduced features of MySQL.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解MySQL的新引入功能。
- en: Using JSON
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON
- en: As you have seen in the previous chapter, to store data in MySQL, you have to
    define the database and table structure (schema), which is a major limitation.
    To cope with that, from MySQL 5.7, MySQL supports the **JavaScript Object Notation** (**JSON**)
    datatype. Earlier there was no separate datatype and it was stored as a string.
    The new JSON datatype provides automatic validation of JSON documents and optimized
    storage format.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上一章中所看到的，要在MySQL中存储数据，您必须定义数据库和表结构（模式），这是一个重大的限制。为了应对这一点，从MySQL 5.7开始，MySQL支持**JavaScript对象表示**（**JSON**）数据类型。以前没有单独的数据类型，它被存储为字符串。新的JSON数据类型提供了JSON文档的自动验证和优化的存储格式。
- en: 'JSON documents are stored in binary format, which enables the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文档以二进制格式存储，这使得以下操作成为可能：
- en: Quick-read access to document elements
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速读取文档元素
- en: No need for the value to be parsed from a text representation when the server
    reads the JSON again
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当服务器再次读取JSON时，不需要从文本表示中解析值
- en: Looking up subobjects or nested values directly by key or array index without
    reading all values before or after them in the document
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接通过键或数组索引查找子对象或嵌套值，而无需读取文档中它们之前或之后的所有值
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Suppose you want to store more details about your employees; you can save them
    using JSON:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要存储有关员工的更多详细信息；您可以使用JSON保存它们：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Insert JSON
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入JSON
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Retrieve JSON
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索JSON
- en: 'You can retrieve the fields of the JSON column using the `->` and `->>` operators:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`->`和`->>`运算符检索JSON列的字段：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To retrieve data without quotes, use the `->>` operator:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索没有引号的数据，请使用`->>`运算符：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: JSON functions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON函数
- en: MySQL provides many functions to deal with JSON data. Let's look into the most
    used ones.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了许多处理JSON数据的函数。让我们看看最常用的函数。
- en: Pretty view
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漂亮的视图
- en: 'To display JSON values in pretty format, use the `JSON_PRETTY()` function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要以漂亮的格式显示JSON值，请使用`JSON_PRETTY()`函数：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Without pretty:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不漂亮的：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Searching
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索
- en: 'You can reference a JSON column using the `col->>path` operator in the `WHERE` clause:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`WHERE`子句中使用`col->>path`运算符引用JSON列：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also use the `JSON_CONTAINS` function to search for data. It returns
    `1` if the data is found and `0` otherwise:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`JSON_CONTAINS`函数搜索数据。如果找到数据，则返回`1`，否则返回`0`：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'How to search for a key? Suppose you want to check whether `address.line1`
    exists or not:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如何搜索键？假设您想要检查`address.line1`是否存在：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, `one` indicates at least one key should exists. Suppose you want to check
    whether `address.line1` or `address.line2` exists:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`one`表示至少应该存在一个键。假设您想要检查`address.line1`或`address.line2`是否存在：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to check whether both `address.line1` and `address.line5` exist,
    you can use `and` instead of `one`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要检查`address.line1`和`address.line5`是否都存在，可以使用`and`而不是`one`：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Modifying
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改
- en: 'You can modify the data using three different functions: `JSON_SET()`, `JSON_INSERT()`,
    `JSON_REPLACE()`. Before MySQL 8, we needed a full update of the entire column,
    which is not the optimal way:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用三种不同的函数修改数据：`JSON_SET()`，`JSON_INSERT()`，`JSON_REPLACE()`。在MySQL 8之前，我们需要对整个列进行完全更新，这不是最佳方式：
- en: '`JSON_SET`: Replaces existing values and adds non-existing values.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_SET`: 替换现有值并添加不存在的值。'
- en: 'Suppose you want to replace the pin code of the employee and also add details
    of a nickname:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要替换员工的邮政编码并添加昵称的详细信息：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`JSON_INSERT()`: Inserts values without replacing existing values'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_INSERT()`: 插入值而不替换现有值'
- en: 'Suppose you want to add a new column without updating the existing values;
    you can use `JSON_INSERT()`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要添加一个新列而不更新现有值；您可以使用`JSON_INSERT()`：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this case, `pin` won't be updated; only a new `address.line4` field will
    be added.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`pin`不会被更新；只会添加一个新的`address.line4`字段。
- en: '`JSON_REPLACE()`: Replaces *only* existing values'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_REPLACE()`: 仅替换现有值'
- en: 'Suppose you want to just replace the fields without adding new fields:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您只想替换字段而不添加新字段：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this case, `line5` won't be added. Only `pin` will be updated.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`line5`不会被添加。只有`pin`会被更新。
- en: Removing
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除
- en: '`JSON_REMOVE` removes data from a JSON document.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSON_REMOVE`从JSON文档中删除数据。'
- en: 'Suppose you no longer need `line5` in the address:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您不再需要地址中的`line5`：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Other functions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他函数
- en: 'Some of the other functions are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些函数如下：
- en: '`JSON_KEYS()`: Gets all the keys in a JSON document:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_KEYS()`: 获取JSON文档中的所有键：'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '` JSON_LENGTH()`: Gives the number of elements in a JSON document:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_LENGTH()`: 给出JSON文档中元素的数量：'
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: You can check out the complete list of functions at [https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html](https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html](https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html)查看完整的函数列表。
- en: Common table expressions (CTE)
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共表达式（CTE）
- en: MySQL 8 supports common table expressions, both non-recursive and recursive.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8支持公共表达式，包括非递归和递归。
- en: Common table expressions enable the use of named temporary result sets, implemented
    by permitting a `WITH` clause preceding `SELECT` statements and certain other
    statements.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 公共表达式使得可以使用命名的临时结果集，通过允许在`SELECT`语句和某些其他语句之前使用`WITH`子句。
- en: '**Why do you need CTEs?** It is not possible to refer to a derived table twice
    in the same query. So the derived tables are evaluated twice or as many times
    as referred, which indicates a serious performance problem. Using CTE, the subquery
    is evaluated only once.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么需要CTE？**在同一查询中不可能引用派生表两次。因此，派生表会被评估两次或多次，这表明存在严重的性能问题。使用CTE，子查询只评估一次。'
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Recursive and non-recursive CTE will be looked into in the following sections.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 递归和非递归CTE将在以下部分中进行讨论。
- en: Non-recursive CTE
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非递归CTE
- en: '**A Common table expression** (**CTE**) is just like a derived table, but its
    declaration is put before the query block instead of in `FROM` clause.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共表达式**（**CTE**）就像派生表一样，但其声明放在查询块之前，而不是在`FROM`子句中。'
- en: '**Derived Table**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**派生表**'
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**CTE**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**CTE**'
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A CTE may precede `SELECT`/`UPDATE`/`DELETE`, including subqueries `WITH` derived
    `AS` (subquery), for example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: CTE可以在`SELECT`/`UPDATE`/`DELETE`之前，包括子查询`WITH`派生`AS`（子查询），例如：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Suppose you want to find out the percentage increase in the salary of each
    year with respect to the previous year. Without CTE, you need to write two subqueries,
    and they are essentially the same. MySQL is not smart enough to detect that and
    the subqueries are executed twice:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要找出每年薪水相对于上一年的百分比增长。没有CTE，您需要编写两个子查询，它们本质上是相同的。MySQL不足够聪明，无法检测到这一点，并且子查询会执行两次：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'With non-recursive CTE, the derived query is executed only once and reused:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非递归CTE，派生查询仅执行一次并被重用：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You may notice that with CTE, the results are the same and query time improves
    by 50%; the readability is good and can be referenced multiple times.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，使用CTE，结果相同，查询时间提高了50％；可读性很好，并且可以多次引用。
- en: 'Derived queries cannot refer to other derived queries:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 派生查询不能引用其他派生查询：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'CTEs can refer to other CTEs:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: CTEs可以引用其他CTEs：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Recursive CTE
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归CTE
- en: A recursive CTE is a CTE with a subquery that refers to its own name. The `WITH`
    clause must begin with `WITH RECURSIVE`. The recursive CTE subquery has two parts,
    seed query and recursive query, separated by `UNION [ALL]` or `UNION DISTINCT`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 递归CTE是一个带有引用自身名称的子查询的CTE。`WITH`子句必须以`WITH RECURSIVE`开头。递归CTE子查询有两部分，种子查询和递归查询，由`UNION
    [ALL]`或`UNION DISTINCT`分隔。
- en: 'Seed `SELECT` is executed once to create the initial data subset; recursive
    `SELECT` is repeatedly executed to return subsets of data until the complete result
    set is obtained. Recursion stops when an iteration does not generate any new rows.
    This is useful to dig into hierarchies (parent/child or part/subpart):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 种子`SELECT`执行一次以创建初始数据子集；递归`SELECT`被重复执行以返回数据子集，直到获得完整的结果集。当迭代不再生成任何新行时，递归停止。这对于深入研究层次结构（父/子或部分/子部分）非常有用：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Suppose you want to print all numbers from `1` to `5`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想打印从`1`到`5`的所有数字：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: At each iteration, `SELECT` produces a row with a new value one more than the
    value of `n` from the previous row set. The first iteration operates on the initial
    row set (1) and produces *1+1=2*; the second iteration operates on the first iteration's
    row set (2) and produces *2+1=3*; and so on and so forth. This continues until
    the recursion ends, when `n` is no longer less than `5`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，`SELECT`生成一个新值的行，该值比上一行集合中的`n`值多1。第一次迭代在初始行集（1）上操作，并产生*1+1=2*；第二次迭代在第一次迭代的行集（2）上操作，并产生*2+1=3*；依此类推。这将持续到递归结束，当`n`不再小于`5`时。
- en: Suppose you want to do hierarchical data traversal to produce an organizational
    chart with the management chain for each employee (that is, the path from CEO
    to employee). Use a recursive CTE!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要对分层数据进行遍历，以生成每个员工的管理链的组织结构图（即从CEO到员工的路径）。使用递归CTE！
- en: 'Create a test table with `manager_id`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个带有`manager_id`的测试表：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Insert sample data:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 插入示例数据：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Execute the recursive CTE:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 执行递归CTE：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It produces the following results:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 它产生以下结果：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`WITH RECURSIVE employee_paths (id, name, path) AS` is the name of the CTE
    and the columns are (`id`, `name`, `path`).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`WITH RECURSIVE employee_paths（id，name，path）AS`是CTE的名称，列为（`id`，`name`，`path`）。'
- en: '`SELECT id, name, CAST(id AS CHAR(200)) FROM employees_mgr WHERE manager_id
    IS NULL` is the seed query where the CEO is selected (CEO does not have a manager).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT id，name，CAST(id AS CHAR（200））FROM employees_mgr WHERE manager_id IS
    NULL`是选择CEO的种子查询（CEO没有经理）。'
- en: '`SELECT e.id, e.name, CONCAT(ep.path, '','', e.id) FROM employee_paths AS ep
    JOIN employees_mgr AS e ON ep.id = e.manager_id` is the recursive query.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT e.id，e.name，CONCAT(ep.path，''，''，e.id) FROM employee_paths AS ep JOIN
    employees_mgr AS e ON ep.id = e.manager_id`是递归查询。'
- en: Each row produced by the recursive query finds all employees who report directly
    to an employee produced by a previous row. For every such employee, the row includes
    the employee ID, name, and employee management chain. The chain is the manager's
    chain with the employee ID added at the end.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 递归查询生成的每一行都会找到直接向以前行生成的员工汇报的所有员工。对于这样的员工，该行包括员工ID，名称和员工管理链。该链是经理的链，员工ID添加到末尾。
- en: Generated columns
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成列
- en: 'The generated columns are also known as virtual or computed columns. The values
    of a generated column are computed from an expression included in the column definition.
    There are two types of generated columns:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列也称为虚拟列或计算列。生成列的值是从列定义中包含的表达式计算出来的。有两种类型的生成列：
- en: '**Virtual**: The column will be calculated on the fly when a record is read
    from a table'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟**：当从表中读取记录时，该列将在读取时动态计算'
- en: '**Stored**: The column will be calculated when a new record is written in the
    table and will be stored in the table as a regular column'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：当在表中写入新记录时，将计算该列并将其存储在表中作为常规列'
- en: Virtual generated columns are more useful than stored generated columns because
    a virtual column does not take any storage space. You can simulate the behavior
    of stored generated columns using triggers.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟生成列比存储生成列更有用，因为虚拟列不占用任何存储空间。您可以使用触发器模拟存储生成列的行为。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Suppose your application is using `full_name` as `concat(''first_name'', ''
    '', ''last_name'')` while retrieving the data from the `employees` table; instead
    of using the expression, you can use a virtual column, which calculates `full_name`
    on the fly. You can add another column followed by the expression:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的应用程序在从`employees`表中检索数据时使用`full_name`作为`concat('first_name'，' '，'last_name')`，而不是使用表达式，您可以使用虚拟列，该列在读取时计算`full_name`。您可以在表达式后面添加另一列：
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Note that you should modify the insert statement according to the virtual column.
    You have an option to use the full insert like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您应该根据虚拟列修改插入语句。您可以选择使用完整的插入，如下所示：
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you want to include `full_name` in the `INSERT` statement, you can specify
    it as `DEFAULT` only. All other values throw an `ERROR 3105 (HY000):` error. The
    value specified for the generated column, `full_name`, in the `employees` table is
    not allowed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在`INSERT`语句中包含`full_name`，可以将其指定为`DEFAULT`。所有其他值都会抛出`ERROR 3105 (HY000):`错误。在`employees`表中指定生成列`full_name`的值是不允许的：
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can directly select `full_name` from the `employees` table:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从`employees`表中选择`full_name`：
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you have already created the table and wish to add new generated column,
    execute the ALTER TABLE statement which will be covered in detail in *Chapter
    10 -* *Table Maintenance*
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经创建了表并希望添加新的生成列，请执行ALTER TABLE语句，这将在*第10章* *表维护*中详细介绍
- en: 'Example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/create-table-generated-columns.html](https://dev.mysql.com/doc/refman/8.0/en/create-table-generated-columns.html)
    to know more about generated columns. You will understand the other uses of virtual
    columns in [Chapter 13](part0432.html#CRVJ00-faa69fe6f4c04957afca3568dcd9cd83), *Performance
    Tuning*, in the *Adding indexes* and *Index for JSON using generated columns*
    sections.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[https://dev.mysql.com/doc/refman/8.0/en/create-table-generated-columns.html](https://dev.mysql.com/doc/refman/8.0/en/create-table-generated-columns.html)了解更多关于生成列的信息。您将在[第13章](part0432.html#CRVJ00-faa69fe6f4c04957afca3568dcd9cd83)
    *性能调优*中了解虚拟列的其他用途，在*添加索引*和*使用生成列为JSON添加索引*部分。
- en: Window functions
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口函数
- en: By using window functions, for each row from a query, you can perform a calculation
    using rows related to that row. This is accomplished by using the `OVER` and `WINDOW`
    clauses.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用窗口函数，您可以对与该行相关的行执行计算。这是通过使用`OVER`和`WINDOW`子句来实现的。
- en: 'Here is the list of calculations that you can do:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可以进行的计算列表：
- en: '`CUME_DIST()`: Cumulative distribution value'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CUME_DIST()`: 累积分布值'
- en: '`DENSE_RANK()`: Rank of the current row within its partition, without gaps'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DENSE_RANK()`: 在其分区内当前行的排名，没有间隙'
- en: '`FIRST_VALUE()`: The value of the argument from the first row of the window
    frame'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIRST_VALUE()`: 窗口帧的第一行的参数值'
- en: '`LAG()`: The argument value from the row lagging the current row within partition'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LAG()`: 分区内当前行的前一行的参数值'
- en: '`LAST_VALUE()`: Value of argument from the first row of window frame'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LAST_VALUE()`: 窗口帧的第一行的参数值'
- en: '`LEAD()`: Value of argument from row leading current row within partition'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LEAD()`: 分区内当前行的后一行的参数值'
- en: '`NTH_VALUE()`: Argument value from *n*-th row of window frame'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NTH_VALUE()`: 窗口帧的第*n*行的参数值'
- en: '`NTILE()`: Bucket number of the current row within its partition'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NTILE()`: 在其分区内当前行的桶编号'
- en: '`PERCENT_RANK()`: Percentage rank value'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PERCENT_RANK()`: 百分比排名值'
- en: '`RANK()`: Rank of the current row within its partition, with gaps'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RANK()`: 在其分区内当前行的排名，有间隙'
- en: '`ROW_NUMBER()`: Number of the current row within its partition'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROW_NUMBER()`: 在其分区内当前行的编号'
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Window functions can be used in various ways. Let's get to grips with each one
    of them in the following sections. For these examples to work, you need to add
    hire_date_year virtual column
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数可以以各种方式使用。让我们在以下部分了解每一个。为了使这些示例起作用，您需要添加hire_date_year虚拟列
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Row number
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行号
- en: 'You can get the row number for each row to rank the results:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为每一行获取行号以对结果进行排名：
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Partition results
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分区结果
- en: 'You can partition the results in the `OVER` clause. Suppose you want to find
    out the salary rank for each year; it can be done as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`OVER`子句中对结果进行分区。假设您想要找出每年的薪水排名；可以按如下方式完成：
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: You can notice that the rank changed for the years `1986` and `1987` but the
    ranking for `1985` continued.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到，`1986`年和`1987`年的排名发生了变化，但`1985`年的排名保持不变。
- en: Named windows
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名窗口
- en: 'You can name a window and use it as many times as you need rather than redefining
    it every time:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以命名一个窗口，并且可以根据需要多次使用它，而不是每次重新定义它：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: First, last, and nth values
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个、最后一个和第n个值
- en: You can select the first, last, and *n*th values in the window results. If the
    row does not exist, a `NULL` value is returned.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在窗口结果中选择第一个、最后一个和第n个值。如果行不存在，则返回`NULL`值。
- en: 'Suppose you want to find the first, last, and third values from the window:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要从窗口中找到第一个、最后一个和第三个值：
- en: '[PRE40]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: To know more about the other use cases of window functions, refer to [https://mysqlserverteam.com/mysql-8-0-2-introducing-window-functions](https://mysqlserverteam.com/mysql-8-0-2-introducing-window-functions)
    and [https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number](https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解窗口函数的其他用例，请参考[https://mysqlserverteam.com/mysql-8-0-2-introducing-window-functions](https://mysqlserverteam.com/mysql-8-0-2-introducing-window-functions)和[https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number](https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number)。
