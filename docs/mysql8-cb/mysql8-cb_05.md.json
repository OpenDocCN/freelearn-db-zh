["```go\nmysql> SELECT balance INTO @a.bal FROM account WHERE account_number='A';\n```", "```go\nmysql> UPDATE account SET balance=@a.bal-100 WHERE account_number='A';\nmysql> SELECT balance INTO @b.bal FROM account WHERE account_number='B';\n```", "```go\nmysql> UPDATE account SET balance=@b.bal+100 WHERE account_number='B';\n```", "```go\nmysql> CREATE DATABASE bank;\nmysql> USE bank;\nmysql> CREATE TABLE account(account_number varchar(10) PRIMARY KEY, balance int);\nmysql> INSERT INTO account VALUES('A',600),('B',400);\n```", "```go\nmysql> START TRANSACTION;\nor \nmysql> BEGIN;\n```", "```go\nmysql> SELECT balance INTO @a.bal FROM account WHERE account_number='A';\n\nProgrammatically check if @a.bal is greater than or equal to 100 \nmysql> UPDATE account SET balance=@a.bal-100 WHERE account_number='A';\nmysql> SELECT balance INTO @b.bal FROM account WHERE account_number='B';\n\nProgrammatically check if @b.bal IS NOT NULL \nmysql> UPDATE account SET balance=@b.bal+100 WHERE account_number='B';\n```", "```go\nmysql> COMMIT;\n```", "```go\nmysql> BEGIN;\n\nmysql> SELECT balance INTO @a.bal FROM account WHERE account_number='A';\n\nmysql> UPDATE account SET balance=@a.bal-100 WHERE account_number='A';\n\nmysql> SELECT balance INTO @b.bal FROM account WHERE account_number='C';\nQuery OK, 0 rows affected, 1 warning (0.07 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------------------+\n| Level   | Code | Message                                             |\n+---------+------+-----------------------------------------------------+\n| Warning | 1329 | No data - zero rows fetched, selected, or processed |\n+---------+------+-----------------------------------------------------+\n1 row in set (0.02 sec)\n\nmysql> SELECT @b.bal;\n+--------+\n| @b.bal |\n+--------+\n| NULL   |\n+--------+\n1 row in set (0.00 sec)\n\nmysql> ROLLBACK;\nQuery OK, 0 rows affected (0.01 sec)\n```", "```go\nmysql> SET autocommit=0;\n```", "```go\nmysql> BEGIN;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT balance INTO @a.bal FROM account WHERE account_number='A';\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> UPDATE account SET balance=@a.bal-100 WHERE account_number='A';\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1 Changed: 1 Warnings: 0\n\nmysql> UPDATE account SET balance=balance+100 WHERE account_number='B';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1 Changed: 1 Warnings: 0\n\nmysql> SAVEPOINT transfer_to_b;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT balance INTO @a.bal FROM account WHERE account_number='A';\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> UPDATE account SET balance=balance+100 WHERE account_number='C';\nQuery OK, 0 rows affected (0.00 sec)\nRows matched: 0 Changed: 0 Warnings: 0\n\n### Since there are no rows updated, meaning there is no account with 'C', you can rollback the transaction to SAVEPOINT where transfer to B is successful. Then 'A' will get back 100 which was deducted to transfer to C. If you wish not to use the save point, you should do these in two transactions.\n\nmysql> ROLLBACK TO transfer_to_b;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> COMMIT;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT balance FROM account WHERE account_number='A';\n+---------+\n| balance |\n+---------+\n| 400     |\n+---------+\n1 row in set (0.00 sec)\n\nmysql> SELECT balance FROM account WHERE account_number='B';\n+---------+\n| balance |\n+---------+\n| 600     |\n+---------+\n1 row in set (0.00 sec)\n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nUPDATE account\n SET balance=balance+500\n WHERE account_number='A';\n```", "```go\nSELECT balance INTO @a.bal\n FROM account\n WHERE account_number='A';\n # A sees 900 here\n```", "```go\nROLLBACK;\n # Assume due to some reason the\n transaction got rolled back\n```", "```go\n# A transfers 900 to B since\n A has 900 in previous SELECT\n UPDATE account\n SET balance=balance-900\n WHERE account_number='A';\n```", "```go\n# B receives the amount UPDATE account\n SET balance=balance+900\n WHERE account_number='B';\n```", "```go\n# Transaction 2 completes successfully\nCOMMIT;\n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nUPDATE account SET balance=balance+500\nWHERE account_number='A';\n```", "```go\nSELECT balance INTO @a.bal\nFROM account\nWHERE account_number='A';\n# A sees 400 here because transaction 1 has not committed the data yet \n```", "```go\nCOMMIT;\n```", "```go\nSELECT balance INTO @a.bal\nFROM account\nWHERE account_number='A';\n# A sees 900 here because transaction 1 has committed the data. \n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nSELECT balance INTO @a.bal\nFROM account\nWHERE account_number='A';\n# A sees 400 here\n```", "```go\nUPDATE account\nSET balance=balance+500\nWHERE account_number='A';\n```", "```go\nSELECT balance INTO @a.bal\nFROM account\nWHERE account_number='A';\n# A sees still 400 even though transaction 1 is committed\n```", "```go\nCOMMIT;\n```", "```go\nCOMMIT;\n```", "```go\nSELECT balance INTO @a.bal\nFROM account\nWHERE account_number='A';\n# A sees 900 here because this is a fresh transaction\n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nSELECT * FROM account;\n# 2 rows are returned\n```", "```go\nINSERT INTO account VALUES('C',1000);\n# New account is created\n```", "```go\nCOMMIT;\n```", "```go\nSELECT * FROM account WHERE account_number='C';\n# no rows are returned because of MVCC\n```", "```go\nDELETE FROM account WHERE account_number='C';\n# Surprisingly account C gets deleted\n```", "```go\nSELECT * FROM account;\n# 3 rows are returned because transaction 1 is not yet committed\n```", "```go\nCOMMIT;\n```", "```go\nSELECT * FROM account;\n# 2 rows are returned because transaction 1 is committed\n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nSELECT * FROM account;\n# 2 rows are returned\n```", "```go\nINSERT INTO account VALUES('D',1000);\n```", "```go\nCOMMIT;\n```", "```go\nSELECT * FROM account;\n# 3 rows are returned because of MVCC\n```", "```go\nUPDATE account SET balance=1000 WHERE account_number='D';\n# Surprisingly account D gets updated\n```", "```go\nSELECT * FROM account;\n# Surprisingly 4 rows are returned\n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nSELECT * FROM account WHERE account_number='A';\n```", "```go\nUPDATE account SET balance=1000 WHERE account_number='A';\n # This will wait until the lock held by transaction 1\n on row A is released\n```", "```go\nCOMMIT;\n```", "```go\n# UPDATE will be successful now\n```", "```go\nBEGIN;\n```", "```go\nBEGIN;\n```", "```go\nSELECT * FROM account WHERE account_number='A';\n# Selects values of A\n```", "```go\nINSERT INTO account VALUES('D',2000);\n# Inserts D\n```", "```go\nSELECT * FROM account WHERE account_number='D';\n # This will wait until the transaction 2 completes\n```", "```go\nCOMMIT;\n```", "```go\n# Now the preceding select statement returns values of D\n```", "```go\nmysql> LOCK TABLES table_name [READ | WRITE]\n```", "```go\nmysql> UNLOCK TABLES;\n```", "```go\nmysql> FLUSH TABLES WITH READ LOCK;\n```", "```go\nmysql> BEGIN;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT * FROM employees LIMIT 10;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |\n|  10006 | 1953-04-20 | Anneke     | Preusig   | F      | 1989-06-02 |\n|  10007 | 1957-05-23 | Tzvetan    | Zielinski | F      | 1989-02-10 |\n|  10008 | 1958-02-19 | Saniya     | Kalloufi  | M      | 1994-09-15 |\n|  10009 | 1952-04-19 | Sumant     | Peac      | F      | 1985-02-18 |\n|  10010 | 1963-06-01 | Duangkaew  | Piveteau  | F      | 1989-08-24 |\n+--------+------------+------------+-----------+--------+------------+\n10 rows in set (0.00 sec)\n```", "```go\nmysql> LOCK TABLE employees WRITE;\n```", "```go\nmysql> SELECT * FROM employees LIMIT 10;\n```", "```go\nmysql> SHOW PROCESSLIST;\n+----+------+-----------+-----------+---------+------+---------------------------------+----------------------------------+\n| Id | User | Host      | db        | Command | Time | State                           | Info                             |\n+----+------+-----------+-----------+---------+------+---------------------------------+----------------------------------+\n| 20 | root | localhost | employees | Sleep   |   48 |                                 | NULL                             |\n| 21 | root | localhost | employees | Query   |   34 | Waiting for table metadata lock | LOCK TABLE employees WRITE       |\n| 22 | root | localhost | employees | Query   |   14 | Waiting for table metadata lock | SELECT * FROM employees LIMIT 10 |\n| 23 | root | localhost | employees | Query   |    0 | starting                        | SHOW PROCESSLIST                 |\n+----+------+-----------+-----------+---------+------+---------------------------------+----------------------------------+\n4 rows in set (0.00 sec)\n```", "```go\nmysql> BEGIN;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT * FROM employees LIMIT 10;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |\n|  10006 | 1953-04-20 | Anneke     | Preusig   | F      | 1989-06-02 |\n|  10007 | 1957-05-23 | Tzvetan    | Zielinski | F      | 1989-02-10 |\n|  10008 | 1958-02-19 | Saniya     | Kalloufi  | M      | 1994-09-15 |\n|  10009 | 1952-04-19 | Sumant     | Peac      | F      | 1985-02-18 |\n|  10010 | 1963-06-01 | Duangkaew  | Piveteau  | F      | 1989-08-24 |\n+--------+------------+------------+-----------+--------+------------+\n10 rows in set (0.00 sec)\n```", "```go\nmysql> FLUSH TABLES WITH READ LOCK;\n```", "```go\nmysql> SELECT * FROM employees LIMIT 10;\n```", "```go\nmysql> SHOW PROCESSLIST;\n+----+------+-----------+-----------+---------+------+-------------------------+--------------------------------------------------+\n| Id | User | Host      | db        | Command | Time | State                   | Info                                             |\n+----+------+-----------+-----------+---------+------+-------------------------+--------------------------------------------------+\n| 20 | root | localhost | employees | Query   |    7 | Creating sort index     | SELECT * FROM employees ORDER BY first_name DESC |\n| 21 | root | localhost | employees | Query   |    5 | Waiting for table flush | FLUSH TABLES WITH READ LOCK                      |\n| 22 | root | localhost | employees | Query   |    3 | Waiting for table flush | SELECT * FROM employees LIMIT 10                 |\n| 23 | root | localhost | employees | Query   |    0 | starting                | SHOW PROCESSLIST                                 |\n+----+------+-----------+-----------+---------+------+-------------------------+--------------------------------------------------+\n4 rows in set (0.00 sec)\n```"]