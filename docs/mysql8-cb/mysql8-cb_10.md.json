["```go\nshell> wget https://repo.percona.com/apt/percona-release_0.1-4.$(lsb_release -sc)_all.deb\n```", "```go\nshell> sudo dpkg -i percona-release_0.1-4.$(lsb_release -sc)_all.deb\n```", "```go\nshell> sudo apt-get update\n```", "```go\nshell> apt-cache search percona\n```", "```go\npercona-xtrabackup-dbg - Debug symbols for Percona XtraBackup\npercona-xtrabackup-test - Test suite for Percona XtraBackup\npercona-xtradb-cluster-client - Percona XtraDB Cluster database client\npercona-xtradb-cluster-server - Percona XtraDB Cluster database server\npercona-xtradb-cluster-testsuite - Percona XtraDB Cluster database regression test suite\npercona-xtradb-cluster-testsuite-5.5 - Percona Server database test suite\n...\n```", "```go\nshell> sudo apt-get install percona-toolkit\n```", "```go\nshell> wget https://www.percona.com/downloads/percona-toolkit/3.0.4/binary/debian/xenial/x86_64/percona-toolkit_3.0.4-1.xenial_amd64.deb\n```", "```go\nshell> sudo dpkg -i percona-toolkit_3.0.4-1.yakkety_amd64.deb;\nshell> sudo apt-get install -f\n```", "```go\nshell> sudo yum install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm\n```", "```go\nInstalled:\n  percona-release.noarch 0:0.1-4\n\nComplete!\n```", "```go\nshell> sudo yum list | grep percona\n```", "```go\npercona-release.noarch                     0.1-4                       @/percona-release-0.1-4.noarch\nPercona-Server-55-debuginfo.x86_64         5.5.54-rel38.7.el7          percona-release-x86_64\nPercona-Server-56-debuginfo.x86_64         5.6.35-rel81.0.el7          percona-release-x86_64\nPercona-Server-57-debuginfo.x86_64         5.7.17-13.1.el7             percona-release-x86_64\n...\n```", "```go\nshell> sudo yum install percona-toolkit\n```", "```go\nshell> sudo yum install https://www.percona.com/downloads/percona-toolkit/3.0.4/binary/redhat/7/x86_64/percona-toolkit-3.0.4-1.el7.x86_64.rpm\n```", "```go\nQuery OK, 0 rows affected (0.07 sec)\n```", "```go\nQuery OK, 1671168 rows affected (1 min 35.54 sec)\n```", "```go\nmysql> ALTER TABLE employees ADD COLUMN address varchar(100);\nQuery OK, 0 rows affected (5.10 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees MODIFY COLUMN address VARCHAR(255);\nQuery OK, 0 rows affected (0.01 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees MODIFY COLUMN address tinytext;\nQuery OK, 300025 rows affected (4.36 sec)\nRecords: 300025  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees ADD COLUMN full_name VARCHAR(40) AS (CONCAT('first_name', ' ', 'last_name'));\nQuery OK, 0 rows affected (0.09 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees MODIFY COLUMN full_name VARCHAR(40) AS (CONCAT(first_name, '-', last_name)) VIRTUAL;\nQuery OK, 300026 rows affected (4.37 sec)\nRecords: 300026  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> CREATE DATABASE prod;\nmysql> CREATE TABLE prod.audit_log (id int NOT NULL, msg varchar(64));\nmysql> CREATE DATABASE archive;\n```", "```go\nmysql> USE prod;\nDatabase changed\n\nmysql> RENAME TABLE audit_log TO audit_log_archive_2018;\nQuery OK, 0 rows affected (0.07 sec)\n```", "```go\nmysql> USE prod\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nmysql> SHOW TABLES;\n+------------------------+\n| Tables_in_prod         |\n+------------------------+\n| audit_log_archive_2018 |\n+------------------------+\n1 row in set (0.00 sec)\n\nmysql> RENAME TABLE audit_log_archive_2018 TO archive.audit_log;\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SHOW TABLES;\nEmpty set (0.00 sec)\n\nmysql> USE archive\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> SHOW TABLES;\n+-------------------+\n| Tables_in_archive |\n+-------------------+\n| audit_log         |\n+-------------------+\n1 row in set (0.00 sec)\n```", "```go\nshell> pt-online-schema-change D=employees,t=employees,h=localhost -u root --ask-pass --alter=\"MODIFY COLUMN address VARCHAR(100)\" --alter-foreign-keys-method=auto --execute\nEnter MySQL password: \nNo slaves found.  See --recursion-method if host server1 has slaves.\nNot checking slave lag because no slaves were found and --check-slave-lag was not specified.\nOperation, tries, wait:\n  analyze_table, 10, 1\n  copy_rows, 10, 0.25\n  create_triggers, 10, 1\n  drop_triggers, 10, 1\n  swap_tables, 10, 1\n  update_foreign_keys, 10, 1\nChild tables:\n  `employees`.`dept_emp` (approx. 331143 rows)\n  `employees`.`titles` (approx. 442605 rows)\n  `employees`.`salaries` (approx. 2838426 rows)\n  `employees`.`dept_manager` (approx. 24 rows)\nWill automatically choose the method to update foreign keys.\nAltering `employees`.`employees`...\nCreating new table...\nCreated new table employees._employees_new OK.\nAltering new table...\nAltered `employees`.`_employees_new` OK.\n2017-09-24T09:56:49 Creating triggers...\n2017-09-24T09:56:49 Created triggers OK.\n2017-09-24T09:56:49 Copying approximately 299478 rows...\n2017-09-24T09:56:56 Copied rows OK.\n2017-09-24T09:56:56 Max rows for the rebuild_constraints method: 88074\nDetermining the method to update foreign keys...\n2017-09-24T09:56:56   `employees`.`dept_emp`: too many rows: 331143; must use drop_swap\n2017-09-24T09:56:56 Drop-swapping tables...\n2017-09-24T09:56:56 Analyzing new table...\n2017-09-24T09:56:56 Dropped and swapped tables OK.\nNot dropping old table because --no-drop-old-table was specified.\n2017-09-24T09:56:56 Dropping triggers...\n2017-09-24T09:56:56 Dropped triggers OK.\nSuccessfully altered `employees`.`employees`.\n```", "```go\nshell> pt-online-schema-change D=employees,t=salaries,h=localhost -u user --ask-pass --alter=\"MODIFY COLUMN salary int\" --alter-foreign-keys-method=auto --execute --no-drop-old-table --preserve-triggers \nNo slaves found.  See --recursion-method if host server1 has slaves.\nNot checking slave lag because no slaves were found and --check-slave-lag was not specified.\n\nOperation, tries, wait:\n  analyze_table, 10, 1\n  copy_rows, 10, 0.25\n  create_triggers, 10, 1\n  drop_triggers, 10, 1\n  swap_tables, 10, 1\n  update_foreign_keys, 10, 1\nNo foreign keys reference `employees`.`salaries`; ignoring --alter-foreign-keys-method.\nAltering `employees`.`salaries`...\nCreating new table...\nCreated new table employees._salaries_new OK.\nAltering new table...\nAltered `employees`.`_salaries_new` OK.\n2017-09-24T11:11:58 Creating triggers...\n2017-09-24T11:11:58 Created triggers OK.\n2017-09-24T11:11:58 Copying approximately 2838045 rows...\n2017-09-24T11:12:20 Copied rows OK.\n2017-09-24T11:12:20 Adding original triggers to new table.\n2017-09-24T11:12:21 Analyzing new table...\n2017-09-24T11:12:21 Swapping tables...\n2017-09-24T11:12:21 Swapped original and new tables OK.\nNot dropping old table because --no-drop-old-table was specified.\n2017-09-24T11:12:21 Dropping triggers...\n2017-09-24T11:12:21 Dropped triggers OK.\nSuccessfully altered `employees`.`salaries`\n```", "```go\nshell> pt-online-schema-change D=employees,t=employees,h=localhost -u user --ask-pass --alter=\"MODIFY COLUMN address VARCHAR(100)\" --alter-foreign-keys-method=auto --execute --preserve-triggers --max-lag=10\nEnter MySQL password: \nFound 1 slaves:\nserver2 -> xx.xxx.xxx.xx:socket\nWill check slave lag on:\nserver2 -> xx.xxx.xxx.xx:socket\nOperation, tries, wait:\n  analyze_table, 10, 1\n  copy_rows, 10, 0.25\n  create_triggers, 10, 1\n  drop_triggers, 10, 1\n  swap_tables, 10, 1\n  update_foreign_keys, 10, 1\nChild tables:\n  `employees`.`dept_emp` (approx. 331143 rows)\n  `employees`.`titles` (approx. 442605 rows)\n  `employees`.`salaries` (approx. 2838426 rows)\n  `employees`.`dept_manager` (approx. 24 rows)\nWill automatically choose the method to update foreign keys.\nAltering `employees`.`employees`...\nCreating new table...\nCreated new table employees._employees_new OK.\nWaiting forever for new table `employees`.`_employees_new` to replicate to ubuntu...\nAltering new table...\nAltered `employees`.`_employees_new` OK.\n2017-09-24T12:00:58 Creating triggers...\n2017-09-24T12:00:58 Created triggers OK.\n2017-09-24T12:00:58 Copying approximately 299342 rows...\n2017-09-24T12:01:05 Copied rows OK.\n2017-09-24T12:01:05 Max rows for the rebuild_constraints method: 86446\nDetermining the method to update foreign keys...\n2017-09-24T12:01:05   `employees`.`dept_emp`: too many rows: 331143; must use drop_swap\n2017-09-24T12:01:05 Skipping triggers creation since --no-swap-tables was specified along with --drop-new-table\n2017-09-24T12:01:05 Drop-swapping tables...\n2017-09-24T12:01:05 Analyzing new table...\n2017-09-24T12:01:05 Dropped and swapped tables OK.\nNot dropping old table because --no-drop-old-table was specified.\n2017-09-24T12:01:05 Dropping triggers...\n2017-09-24T12:01:05 Dropped triggers OK.\nSuccessfully altered `employees`.`employees`.\n```", "```go\nThe new table `employees`.`_employees_new` does not have a PRIMARY KEY or a unique index which is required for the DELETE trigger.\n```", "```go\nDELETE FROM <TABLE> WHERE last_accessed<DATE_ADD(NOW(), INTERVAL -1 MONTH)\n```", "```go\nWHILE count<=0:\n    DELETE FROM <TABLE> WHERE last_accessed<DATE_ADD(NOW(), INTERVAL -1 MONTH) LIMIT 10000;\n    count=SELECT COUNT(*) FROM <TABLE> WHERE last_accessed<DATE_ADD(NOW(), INTERVAL -1 MONTH);\n```", "```go\nWHILE count<=0:\n    SELECT id FROM <TABLE> WHERE last_accessed < DATE_ADD(NOW(), INTERVAL -1 MONTH) LIMIT 10000;\n    DELETE FROM <TABLE> WHERE id IN ('ids from above statement');\n    count=SELECT COUNT(*) FROM <TABLE> WHERE     last_accessed<DATE_ADD(NOW(), INTERVAL -1 MONTH);\n```", "```go\nshell> pt-archiver --source h=localhost,D=employees,t=employees -u <user> -p<pass> --where=\"hire_date<DATE_ADD(NOW(), INTERVAL -30 YEAR)\" --no-check-charset --limit 10000 --commit-each\n```", "```go\nshell> pt-archiver --source h=localhost,D=employees,t=employees --dest h=localhost,D=employees_archive -u <user> -p<pass> --where=\"1=1\" --no-check-charset --limit 10000 --commit-each\n```", "```go\nshell> pt-archiver --source h=localhost,D=employees,t=employees --dest h=localhost,D=employees_archive -u <user> -p<pass> --where=\"1=1\" --no-check-charset --limit 10000 --commit-each --no-delete\n```", "```go\nmysql> CREATE TABLE employees_clone LIKE employees;\nmysql> INSERT INTO employees_clone SELECT * FROM employees;\n```", "```go\nmysql> INSERT INTO employees_clone SELECT * FROM employees;\nERROR 3105 (HY000): The value specified for generated column 'hire_date_year' in table 'employees_clone' is not allowed.\n\nmysql> INSERT INTO employees_clone(emp_no, birth_date, first_name, last_name, gender, hire_date) SELECT emp_no, birth_date, first_name, last_name, gender, hire_date FROM employees;\nQuery OK, 300024 rows affected (3.21 sec)\nRecords: 300024  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE (emp_no)\n(PARTITION p0 VALUES LESS THAN (100000) ENGINE = InnoDB,\n PARTITION p1 VALUES LESS THAN (200000) ENGINE = InnoDB,\n PARTITION p2 VALUES LESS THAN (300000) ENGINE = InnoDB,\n PARTITION p3 VALUES LESS THAN (400000) ENGINE = InnoDB,\n PARTITION p4 VALUES LESS THAN (500000) ENGINE = InnoDB);\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE (emp_no)\n(PARTITION p0 VALUES LESS THAN (100000) ENGINE = InnoDB,\n PARTITION p1 VALUES LESS THAN (200000) ENGINE = InnoDB,\n PARTITION p2 VALUES LESS THAN (300000) ENGINE = InnoDB,\n PARTITION p3 VALUES LESS THAN (400000) ENGINE = InnoDB,\n PARTITION p4 VALUES LESS THAN (500000) ENGINE = InnoDB,\n PARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB\n);\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE (YEAR(hire_date))\n(PARTITION p1980 VALUES LESS THAN (1980) ENGINE = InnoDB,\n PARTITION p1990 VALUES LESS THAN (1990) ENGINE = InnoDB,\n PARTITION p2000 VALUES LESS THAN (2000) ENGINE = InnoDB,\n PARTITION p2010 VALUES LESS THAN (2010) ENGINE = InnoDB,\n PARTITION p2020 VALUES LESS THAN (2020) ENGINE = InnoDB,\n PARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB\n);\n```", "```go\nmysql> CREATE TABLE `event_history` (\n  `event_id` int(11) NOT NULL,\n  `event_name` varchar(10) NOT NULL,\n  `created_at` datetime NOT NULL,\n  `last_updated` timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `event_type` varchar(10) NOT NULL,\n  `msg` tinytext NOT NULL,\n  PRIMARY KEY (`event_id`,`created_at`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE (to_days(created_at))\n(PARTITION p20170930 VALUES LESS THAN (736967) ENGINE = InnoDB,\nPARTITION p20171001 VALUES LESS THAN (736968) ENGINE = InnoDB,\nPARTITION p20171002 VALUES LESS THAN (736969) ENGINE = InnoDB,\nPARTITION p20171003 VALUES LESS THAN (736970) ENGINE = InnoDB,\nPARTITION p20171004 VALUES LESS THAN (736971) ENGINE = InnoDB,\nPARTITION p20171005 VALUES LESS THAN (736972) ENGINE = InnoDB,\nPARTITION p20171006 VALUES LESS THAN (736973) ENGINE = InnoDB,\nPARTITION p20171007 VALUES LESS THAN (736974) ENGINE = InnoDB,\nPARTITION p20171008 VALUES LESS THAN (736975) ENGINE = InnoDB,\nPARTITION p20171009 VALUES LESS THAN (736976) ENGINE = InnoDB,\nPARTITION p20171010 VALUES LESS THAN (736977) ENGINE = InnoDB,\nPARTITION p20171011 VALUES LESS THAN (736978) ENGINE = InnoDB,\nPARTITION p20171012 VALUES LESS THAN (736979) ENGINE = InnoDB,\nPARTITION p20171013 VALUES LESS THAN (736980) ENGINE = InnoDB,\nPARTITION p20171014 VALUES LESS THAN (736981) ENGINE = InnoDB,\nPARTITION p20171015 VALUES LESS THAN (736982) ENGINE = InnoDB,\nPARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB\n);\n```", "```go\nmysql> ALTER TABLE employees DROP PRIMARY KEY, ADD PRIMARY KEY(emp_no,hire_date);\nQuery OK, 0 rows affected (0.11 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees PARTITION BY RANGE (YEAR(hire_date))\n        (PARTITION p1980 VALUES LESS THAN (1980) ENGINE = InnoDB,\n        PARTITION p1990 VALUES LESS THAN (1990) ENGINE = InnoDB,\n        PARTITION p2000 VALUES LESS THAN (2000) ENGINE = InnoDB,\n        PARTITION p2010 VALUES LESS THAN (2010) ENGINE = InnoDB,\n        PARTITION p2020 VALUES LESS THAN (2020) ENGINE = InnoDB,\n        PARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB\n       );\nQuery OK, 300025 rows affected (4.71 sec)\nRecords: 300025  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees REMOVE PARTITIONING;\nQuery OK, 0 rows affected (0.09 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees \n    PARTITION BY RANGE COLUMNS (hire_date) \n    (PARTITION p0 VALUES LESS THAN ('1970-01-01'),\n     PARTITION p1 VALUES LESS THAN ('1980-01-01'),\n     PARTITION p2 VALUES LESS THAN ('1990-01-01'),\n     PARTITION p3 VALUES LESS THAN ('2000-01-01'),\n     PARTITION p4 VALUES LESS THAN ('2010-01-01'),\n     PARTITION p5 VALUES LESS THAN (MAXVALUE)\n    );\nQuery OK, 300025 rows affected (4.71 sec)\nRecords: 300025  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees \nPARTITION BY RANGE COLUMNS (last_name) \n    (PARTITION p0 VALUES LESS THAN ('b'),\n     PARTITION p1 VALUES LESS THAN ('f'),\n     PARTITION p2 VALUES LESS THAN ('l'),\n     PARTITION p3 VALUES LESS THAN ('q'),\n     PARTITION p4 VALUES LESS THAN ('u'),\n     PARTITION p5 VALUES LESS THAN ('z')\n  );\nQuery OK, 300025 rows affected (4.71 sec)\nRecords: 300025  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> CREATE TABLE range_columns_example (\n    a INT,\n    b INT,\n    c INT,\n    d INT,\n    e INT,\n    PRIMARY KEY(a, b, c)\n)\nPARTITION BY RANGE COLUMNS(a,b,c) (\n    PARTITION p0 VALUES LESS THAN (0,25,50),\n    PARTITION p1 VALUES LESS THAN (10,50,100),\n    PARTITION p2 VALUES LESS THAN (10,100,200),\n    PARTITION p3 VALUES LESS THAN (MAXVALUE,MAXVALUE,MAXVALUE)\n );\n```", "```go\nmysql> SELECT (10,20,100) < (0,25,50) p0, (10,20,100) < (10,50,100) p1, (10,20,100) < (10,100,200) p2;\n+----+----+----+\n| p0 | p1 | p2 |\n+----+----+----+\n|  0 |  1 |  1 |\n+----+----+----+\n1 row in set (0.00 sec)\n```", "```go\nmysql> CREATE TABLE customer (\ncustomer_id INT,\nzipcode INT,\ncity varchar(100),\nPRIMARY KEY (customer_id, zipcode)\n)\nPARTITION BY LIST(zipcode) (\n   PARTITION pnorth VALUES IN (560030, 560007, 560051, 560084),\n   PARTITION peast VALUES IN (560040, 560008, 560061, 560085),\n   PARTITION pwest VALUES IN (560050, 560009, 560062, 560086),\n   PARTITION pcentral VALUES IN (560060, 560010, 560063, 560087)\n);\n```", "```go\nmysql> CREATE TABLE customer (\ncustomer_id INT,\nzipcode INT,\ncity varchar(100),\nPRIMARY KEY (customer_id, city)\n)\nPARTITION BY LIST COLUMNS(city) (\n   PARTITION pnorth VALUES IN ('city1','city2','city3'),\n   PARTITION peast VALUES IN ('city4','city5','city6'),\n   PARTITION pwest VALUES IN ('city7','city8','city9'),\n   PARTITION pcentral VALUES IN ('city10','city11','city12')\n);\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY HASH(YEAR(hire_date))\nPARTITIONS 8;\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY LINEAR HASH(YEAR(hire_date))\nPARTITIONS 8;\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY KEY()\nPARTITIONS 8;\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE( YEAR(hire_date) )\n  SUBPARTITION BY HASH(emp_no)\n    SUBPARTITIONS 4 (\n        PARTITION p0 VALUES LESS THAN (1990),\n        PARTITION p1 VALUES LESS THAN (2000),\n        PARTITION p2 VALUES LESS THAN (2010),\n        PARTITION p3 VALUES LESS THAN (2020),\n        PARTITION p4 VALUES LESS THAN MAXVALUE\n    );\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE (YEAR(hire_date))\n(PARTITION p1980 VALUES LESS THAN (1980) ENGINE = InnoDB,\n PARTITION p1990 VALUES LESS THAN (1990) ENGINE = InnoDB,\n PARTITION p2000 VALUES LESS THAN (2000) ENGINE = InnoDB,\n PARTITION p2010 VALUES LESS THAN (2010) ENGINE = InnoDB,\n PARTITION p2020 VALUES LESS THAN (2020) ENGINE = InnoDB,\n PARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB\n);\n```", "```go\nmysql> SELECT last_name,birth_date FROM employees WHERE hire_date='1999-02-01' AND first_name='Mariangiola';\n```", "```go\nmysql> EXPLAIN SELECT last_name,birth_date FROM employees WHERE hire_date='1999-02-01' AND first_name='Mariangiola'\\G\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: employees\n partitions: p2000\n         type: ref\npossible_keys: name\n          key: name\n      key_len: 58\n          ref: const\n         rows: 120\n     filtered: 10.00\n        Extra: Using index condition\n\n```", "```go\nmysql> EXPLAIN SELECT last_name,birth_date FROM employees WHERE hire_date>='1999-02-01' AND first_name='Mariangiola'\\G\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: employees\n partitions: p2000,p2010,p2020,pmax\n         type: ref\npossible_keys: name\n          key: name\n      key_len: 58\n          ref: const\n         rows: 121\n     filtered: 33.33\n        Extra: Using index condition\n1 row in set, 1 warning (0.00 sec)\n```", "```go\nmysql> SELECT emp_no,hire_date FROM employees PARTITION (p1990) LIMIT 10;\n+--------+------------+\n| emp_no | hire_date  |\n+--------+------------+\n| 413688 | 1989-12-10 |\n| 242368 | 1989-08-06 |\n| 283280 | 1985-11-22 |\n| 405098 | 1985-11-16 |\n|  30404 | 1985-07-17 |\n| 419259 | 1988-03-21 |\n| 466254 | 1986-11-28 |\n| 428971 | 1986-12-13 |\n|  94467 | 1987-01-28 |\n| 259555 | 1987-07-30 |\n+--------+------------+\n10 rows in set (0.00 sec)\n```", "```go\nmysql> DELETE FROM employees PARTITION (p1980, p1990) WHERE first_name LIKE 'j%';\nQuery OK, 7001 rows affected (0.12 sec)\n```", "```go\nmysql> CREATE TABLE `event_history` (\n  `event_id` int(11) NOT NULL,\n  `event_name` date NOT NULL,\n  `created_at` datetime NOT NULL,\n  `last_updated` timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `event_type` varchar(10) NOT NULL,\n  `msg` tinytext NOT NULL,\n  PRIMARY KEY (`event_id`,`created_at`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY RANGE (to_days(created_at))\n(PARTITION p20170930 VALUES LESS THAN (736967) ENGINE = InnoDB,\nPARTITION p20171001 VALUES LESS THAN (736968) ENGINE = InnoDB,\nPARTITION p20171002 VALUES LESS THAN (736969) ENGINE = InnoDB,\nPARTITION p20171003 VALUES LESS THAN (736970) ENGINE = InnoDB,\nPARTITION p20171004 VALUES LESS THAN (736971) ENGINE = InnoDB,\nPARTITION p20171005 VALUES LESS THAN (736972) ENGINE = InnoDB,\nPARTITION p20171006 VALUES LESS THAN (736973) ENGINE = InnoDB,\nPARTITION p20171007 VALUES LESS THAN (736974) ENGINE = InnoDB,\nPARTITION p20171008 VALUES LESS THAN (736975) ENGINE = InnoDB,\nPARTITION p20171009 VALUES LESS THAN (736976) ENGINE = InnoDB,\nPARTITION p20171010 VALUES LESS THAN (736977) ENGINE = InnoDB,\nPARTITION p20171011 VALUES LESS THAN (736978) ENGINE = InnoDB,\nPARTITION p20171012 VALUES LESS THAN (736979) ENGINE = InnoDB,\nPARTITION p20171013 VALUES LESS THAN (736980) ENGINE = InnoDB,\nPARTITION p20171014 VALUES LESS THAN (736981) ENGINE = InnoDB,\nPARTITION p20171015 VALUES LESS THAN (736982) ENGINE = InnoDB\n);\n```", "```go\nmysql> ALTER TABLE event_history ADD PARTITION (\nPARTITION p20171016 VALUES LESS THAN (736983) ENGINE = InnoDB,\nPARTITION p20171017 VALUES LESS THAN (736984) ENGINE = InnoDB\n);\n```", "```go\nmysql> ALTER TABLE event_history REORGANIZE PARTITION pmax INTO (PARTITION p20171016 VALUES LESS THAN (736983) ENGINE = InnoDB,\nPARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB);\n```", "```go\nmysql> ALTER TABLE event_history REORGANIZE PARTITION p20171001,p20171002,p20171003,p20171004,p20171005,p20171006,p20171007 \nINTO (PARTITION p2017_oct_week1 VALUES LESS THAN (736974));\n```", "```go\nmysql> ALTER TABLE event_history DROP PARTITION p20170930;\nQuery OK, 0 rows affected (0.02 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE event_history TRUNCATE PARTITION p20171001;\nQuery OK, 0 rows affected (0.08 sec)\n```", "```go\nmysql> CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\nPARTITION BY HASH(YEAR(hire_date))\nPARTITIONS 8;\n```", "```go\nmysql> ALTER TABLE employees COALESCE PARTITION 2;\nQuery OK, 0 rows affected (0.31 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE employees ADD PARTITION PARTITIONS 10;\nQuery OK, 0 rows affected (5.11 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n```", "```go\nmysql> ALTER TABLE event_history REPAIR PARTITION p20171009, p20171010;\n```", "```go\nmysql> SHOW CREATE TABLE employees \\G\n*************************** 1\\. row ***************************\n       Table: employees\nCreate Table: CREATE TABLE `employees` (\n  `emp_no` int(11) NOT NULL,\n  `birth_date` date NOT NULL,\n  `first_name` varchar(14) NOT NULL,\n  `last_name` varchar(16) NOT NULL,\n  `gender` enum('M','F') NOT NULL,\n  `hire_date` date NOT NULL,\n  `address` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`emp_no`,`hire_date`),\n  KEY `name` (`first_name`,`last_name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4\n/*!50100 PARTITION BY RANGE (YEAR(hire_date))\n(PARTITION p1980 VALUES LESS THAN (1980) ENGINE = InnoDB,\n PARTITION p1990 VALUES LESS THAN (1990) ENGINE = InnoDB,\n PARTITION p2000 VALUES LESS THAN (2000) ENGINE = InnoDB,\n PARTITION p2010 VALUES LESS THAN (2010) ENGINE = InnoDB,\n PARTITION p2020 VALUES LESS THAN (2020) ENGINE = InnoDB,\n PARTITION pmax VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */\n```", "```go\nmysql> SHOW TABLE STATUS LIKE 'employees'\\G\n*************************** 1\\. row ***************************\n           Name: employees\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: NULL\n Avg_row_length: NULL\n    Data_length: NULL\nMax_data_length: NULL\n   Index_length: NULL\n      Data_free: NULL\n Auto_increment: NULL\n    Create_time: 2017-10-01 05:01:53\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8mb4_0900_ai_ci\n       Checksum: NULL\n Create_options: partitioned\n        Comment: \n1 row in set (0.00 sec)\n```", "```go\nmysql> EXPLAIN SELECT * FROM employees\\G\n*************************** 1\\. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: employees\n partitions: p1980,p1990,p2000,p2010,p2020,pmax\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 292695\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n```", "```go\nmysql> SHOW CREATE TABLE INFORMATION_SCHEMA.PARTITIONS\\G\n*************************** 1\\. row ***************************\n       Table: PARTITIONS\nCreate Table: CREATE TEMPORARY TABLE `PARTITIONS` (\n  `TABLE_CATALOG` varchar(512) NOT NULL DEFAULT '',\n  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',\n  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',\n  `PARTITION_NAME` varchar(64) DEFAULT NULL,\n  `SUBPARTITION_NAME` varchar(64) DEFAULT NULL,\n  `PARTITION_ORDINAL_POSITION` bigint(21) unsigned DEFAULT NULL,\n  `SUBPARTITION_ORDINAL_POSITION` bigint(21) unsigned DEFAULT NULL,\n  `PARTITION_METHOD` varchar(18) DEFAULT NULL,\n  `SUBPARTITION_METHOD` varchar(12) DEFAULT NULL,\n  `PARTITION_EXPRESSION` longtext,\n  `SUBPARTITION_EXPRESSION` longtext,\n  `PARTITION_DESCRIPTION` longtext,\n  `TABLE_ROWS` bigint(21) unsigned NOT NULL DEFAULT '0',\n  `AVG_ROW_LENGTH` bigint(21) unsigned NOT NULL DEFAULT '0',\n  `DATA_LENGTH` bigint(21) unsigned NOT NULL DEFAULT '0',\n  `MAX_DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,\n  `INDEX_LENGTH` bigint(21) unsigned NOT NULL DEFAULT '0',\n  `DATA_FREE` bigint(21) unsigned NOT NULL DEFAULT '0',\n  `CREATE_TIME` datetime DEFAULT NULL,\n  `UPDATE_TIME` datetime DEFAULT NULL,\n  `CHECK_TIME` datetime DEFAULT NULL,\n  `CHECKSUM` bigint(21) unsigned DEFAULT NULL,\n  `PARTITION_COMMENT` varchar(80) NOT NULL DEFAULT '',\n  `NODEGROUP` varchar(12) NOT NULL DEFAULT '',\n  `TABLESPACE_NAME` varchar(64) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n1 row in set (0.00 sec)\n```", "```go\nmysql> SELECT PARTITION_NAME FROM INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_SCHEMA='employees' AND TABLE_NAME='employees';\n+----------------+\n| PARTITION_NAME |\n+----------------+\n| p1980          |\n| p1990          |\n| p2000          |\n| p2010          |\n| p2020          |\n| pmax           |\n+----------------+\n6 rows in set (0.00 sec)\n```", "```go\nmysql> SELECT * FROM INFORMATION_SCHEMA.PARTITIONS WHERE TABLE_SCHEMA='employees' AND TABLE_NAME='employees' AND PARTITION_NAME='p1990'\\G\n*************************** 1\\. row ***************************\n                TABLE_CATALOG: def\n                 TABLE_SCHEMA: employees\n                   TABLE_NAME: employees\n               PARTITION_NAME: p1990\n            SUBPARTITION_NAME: NULL\n   PARTITION_ORDINAL_POSITION: 2\nSUBPARTITION_ORDINAL_POSITION: NULL\n             PARTITION_METHOD: RANGE\n          SUBPARTITION_METHOD: NULL\n         PARTITION_EXPRESSION: YEAR(hire_date)\n      SUBPARTITION_EXPRESSION: NULL\n        PARTITION_DESCRIPTION: 1990\n                   TABLE_ROWS: 157588\n               AVG_ROW_LENGTH: 56\n                  DATA_LENGTH: 8929280\n              MAX_DATA_LENGTH: NULL\n                 INDEX_LENGTH: 8929280\n                    DATA_FREE: 0\n                  CREATE_TIME: NULL\n                  UPDATE_TIME: NULL\n                   CHECK_TIME: NULL\n                     CHECKSUM: NULL\n            PARTITION_COMMENT: \n                    NODEGROUP: default\n              TABLESPACE_NAME: NULL\n1 row in set (0.00 sec)\n```", "```go\nmysql> CREATE TABLE `customer_data` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `msg` text,\n  `timestamp` bigint(20) NOT NULL DEFAULT '0',\n  `expires` bigint(20) NOT NULL DEFAULT '0',\n  `soft_delete` tinyint(3) unsigned NOT NULL DEFAULT '1',\n  PRIMARY KEY (`id`,`expires`,`soft_delete`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n/*!50500 PARTITION BY RANGE COLUMNS(soft_delete,expires)\n(PARTITION no_retention VALUES LESS THAN (0,MAXVALUE) ENGINE = InnoDB,\n PARTITION long_retention VALUES LESS THAN (1,MAXVALUE) ENGINE = InnoDB,\n PARTITION pd20171017 VALUES LESS THAN (2,1508198400000) ENGINE = InnoDB,\n PARTITION pd20171018 VALUES LESS THAN (2,1508284800000) ENGINE = InnoDB,\n PARTITION pd20171019 VALUES LESS THAN (2,1508371200000) ENGINE = InnoDB,\n PARTITION pd20171020 VALUES LESS THAN (2,1508457600000) ENGINE = InnoDB,\n PARTITION pd20171021 VALUES LESS THAN (2,1508544000000) ENGINE = InnoDB,\n PARTITION pd20171022 VALUES LESS THAN (2,1508630400000) ENGINE = InnoDB,\n PARTITION pd20171023 VALUES LESS THAN (2,1508716800000) ENGINE = InnoDB,\n PARTITION pd20171024 VALUES LESS THAN (3,1508803200000) ENGINE = InnoDB,\n PARTITION pd20171025 VALUES LESS THAN (3,1508869800000) ENGINE = InnoDB,\n PARTITION pd20171026 VALUES LESS THAN (3,1508956200000) ENGINE = InnoDB) */;\n```", "```go\nmysql> DROP TRIGGER IF EXISTS customer_data_insert;\nDELIMITER $$\nCREATE TRIGGER customer_data_insert\nBEFORE INSERT\n   ON customer_data FOR EACH ROW\nBEGIN\n    SET NEW.soft_delete = (IF((NEW.expires = 0),0,IF((ROUND((((((NEW.expires - NEW.timestamp) / 1000) / 60) / 60) / 24),0) <= 7),2,1)));\nEND;\n$$\nDELIMITER ;\n```", "```go\nmysql> DROP TRIGGER IF EXISTS customer_data_update;\nDELIMITER $$\nCREATE TRIGGER customer_data_update\nBEFORE UPDATE\n   ON customer_data FOR EACH ROW\nBEGIN\n    SET NEW.soft_delete = (IF((NEW.expires = 0),0,IF((ROUND((((((NEW.expires - NEW.timestamp) / 1000) / 60) / 60) / 24),0) <= 7),2,1)));\nEND;\n$$\nDELIMITER ;\n```", "```go\nmysql> INSERT INTO customer_data(id, msg, timestamp, expires) VALUES(1,'test',1508265000000,1508351400000);\nQuery OK, 1 row affected (0.05 sec)\n\n```", "```go\nmysql> SELECT * FROM customer_data PARTITION (pd20171019);\n+----+------+---------------+---------------+-------------+\n| id | msg  | timestamp     | expires       | soft_delete |\n+----+------+---------------+---------------+-------------+\n|  1 | test | 1508265000000 | 1508351400000 |           2 |\n+----+------+---------------+---------------+-------------+\n1 row in set (0.00 sec)\n```", "```go\nmysql> INSERT INTO customer_data(id, msg, timestamp, expires)  VALUES(2,'non_expiry_row',1508265000000,0);\nQuery OK, 1 row affected (0.07 sec)\n```", "```go\nmysql> SELECT * FROM customer_data PARTITION (no_retention);\n+----+----------------+---------------+---------+-------------+\n| id | msg            | timestamp     | expires | soft_delete |\n+----+----------------+---------------+---------+-------------+\n|  2 | non_expiry_row | 1508265000000 |       0 |           0 |\n+----+----------------+---------------+---------+-------------+\n1 row in set (0.00 sec)\n```", "```go\nmysql> UPDATE customer_data SET expires=1508394600000 WHERE id=2;\nQuery OK, 1 row affected (0.06 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n```", "```go\nmysql> SELECT * FROM customer_data PARTITION (no_retention);\nEmpty set (0.00 sec)\n```", "```go\nmysql> SELECT * FROM customer_data PARTITION (pd20171020);\n+----+----------------+---------------+---------------+-------------+\n| id | msg            | timestamp     | expires       | soft_delete |\n+----+----------------+---------------+---------------+-------------+\n|  2 | non_expiry_row | 1508265000000 | 1508394600000 |           2 |\n+----+----------------+---------------+---------------+-------------+\n1 row in set (0.00 sec)\n```", "```go\nmysql> INSERT INTO customer_data(id, msg, timestamp, expires)  VALUES(3,'long_expiry',1507852800000,1608025600000);\n\nmysql> SELECT * FROM customer_data PARTITION (long_retention);\n+----+-------------+---------------+---------------+-------------+\n| id | msg         | timestamp     | expires       | soft_delete |\n+----+-------------+---------------+---------------+-------------+\n|  3 | long_expiry | 1507852800000 | 1608025600000 |           1 |\n+----+-------------+---------------+---------------+-------------+\n1 row in set (0.00 sec)\n\n```", "```go\nmysql> DROP TRIGGER IF EXISTS customer_data_insert;\nDELIMITER $$\nCREATE TRIGGER customer_data_insert\nBEFORE INSERT\n   ON customer_data FOR EACH ROW\nBEGIN\n    SET NEW.soft_delete = (IF((NEW.expires = 0),0,IF((ROUND((((((NEW.expires - NEW.timestamp) / 1000) / 60) / 60) / 24),0) <= 7),3,IF((ROUND((((((NEW.expires - NEW.timestamp) / 1000) / 60) / 60) / 24),0) <= 42),2,1))));\nEND;\n$$\nDELIMITER ; \n```", "```go\nmysql> DROP TRIGGER IF EXISTS customer_data_update;\nDELIMITER $$\nCREATE TRIGGER customer_data_update\nBEFORE INSERT\n   ON customer_data FOR EACH ROW\nBEGIN\n    SET NEW.soft_delete = (IF((NEW.expires = 0),0,IF((ROUND((((((NEW.expires - NEW.timestamp) / 1000) / 60) / 60) / 24),0) <= 7),3,IF((ROUND((((((NEW.expires - NEW.timestamp) / 1000) / 60) / 60) / 24),0) <= 42),2,1))));\nEND;\n$$\nDELIMITER ;\n\nmysql> CREATE TABLE `customer_data` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `msg` text,\n  `timestamp` bigint(20) NOT NULL DEFAULT '0',\n  `expires` bigint(20) NOT NULL DEFAULT '0',\n  `soft_delete` tinyint(3) unsigned NOT NULL DEFAULT '1',\n  PRIMARY KEY (`id`,`expires`,`soft_delete`)\n) ENGINE=InnoDB AUTO_INCREMENT=609585360 DEFAULT CHARSET=utf8\n/*!50500 PARTITION BY RANGE  COLUMNS(`soft_delete`,`expires`)\n(\n PARTITION no_retention VALUES LESS THAN (0,MAXVALUE) ENGINE = InnoDB,\n PARTITION long_retention VALUES LESS THAN (1,MAXVALUE) ENGINE = InnoDB, \n PARTITION pw20171022 VALUES LESS THAN (2,1508630400000) ENGINE = InnoDB,\n PARTITION pw20171029 VALUES LESS THAN (2,1509235200000) ENGINE = InnoDB,\n PARTITION pw20171105 VALUES LESS THAN (2,1509840000000) ENGINE = InnoDB,\n PARTITION pw20171112 VALUES LESS THAN (2,1510444800000) ENGINE = InnoDB,\n PARTITION pw20171119 VALUES LESS THAN (2,1511049600000) ENGINE = InnoDB,\n PARTITION pw20171126 VALUES LESS THAN (2,1511654400000) ENGINE = InnoDB,\n PARTITION pw20171203 VALUES LESS THAN (2,1512259200000) ENGINE = InnoDB,\n -- buffer partition which will be 67 days away and will be always empty so that we can split\n PARTITION pw20171210 VALUES LESS THAN (2,1512864000000) ENGINE = InnoDB, \n PARTITION pd20171016 VALUES LESS THAN (3,1508112000000) ENGINE = InnoDB,\n PARTITION pd20171017 VALUES LESS THAN (3,1508198400000) ENGINE = InnoDB,\n PARTITION pd20171018 VALUES LESS THAN (3,1508284800000) ENGINE = InnoDB,\n PARTITION pd20171019 VALUES LESS THAN (3,1508371200000) ENGINE = InnoDB,\n PARTITION pd20171020 VALUES LESS THAN (3,1508457600000) ENGINE = InnoDB,\n PARTITION pd20171021 VALUES LESS THAN (3,1508544000000) ENGINE = InnoDB,\n PARTITION pd20171022 VALUES LESS THAN (3,1508630400000) ENGINE = InnoDB,\n PARTITION pd20171023 VALUES LESS THAN (3,1508716800000) ENGINE = InnoDB,\n PARTITION pd20171024 VALUES LESS THAN (3,1508803200000) ENGINE = InnoDB\n ) */;\n```"]