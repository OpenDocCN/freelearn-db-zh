- en: Managing Tablespace
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理表空间
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Changing the number or size of InnoDB REDO log files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改InnoDB REDO日志文件的数量或大小
- en: Resizing the InnoDB system tablespace
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整InnoDB系统表空间的大小
- en: Creating file-per-table tablespaces outside the data directory
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据目录之外创建文件表空间
- en: Copying file-per-table tablespaces to another instance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件表空间复制到另一个实例"
- en: Managing UNDO tablespace
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理UNDO表空间
- en: Managing general tablespace
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理通用表空间
- en: Compressing InnoDB tables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩InnoDB表
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Before you begin this chapter, you should understand the basics of `InnoDB`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，您应该了解InnoDB的基础知识。
- en: As per the MySQL documentation,
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据MySQL文档，
- en: '**System Tablespace (Shared tablespace)** <q class="calibre48">"The InnoDB
    system tablespace contains the InnoDB data dictionary (metadata for InnoDB-related
    objects) and is the storage area for the doublewrite buffer, the change buffer,
    and undo logs. The system tablespace also contains table and index data for any
    user-created tables that are created in the system tablespace. The system tablespace
    is considered a shared tablespace since it is shared by multiple tables.</q>'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统表空间（共享表空间）** <q class="calibre48">"InnoDB系统表空间包含InnoDB数据字典（与InnoDB相关对象的元数据）并且是双写缓冲区、更改缓冲区和撤消日志的存储区域。系统表空间还包含在系统表空间中创建的任何用户创建的表的表和索引数据。系统表空间被认为是共享表空间，因为它被多个表共享。</q>'
- en: <q class="calibre48">The system tablespace is represented by one or more data
    files. By default, one system data file, named ibdata1, is created in the MySQL
    data directory. The size and number of system data files is controlled by the
    innodb_data_file_path startup option."</q>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <q class="calibre48">系统表空间由一个或多个数据文件表示。默认情况下，在MySQL数据目录中创建一个名为ibdata1的系统数据文件。系统数据文件的大小和数量由innodb_data_file_path启动选项控制。</q>
- en: '**File-per-table tablespace**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件表空间**'
- en: A file-per-table tablespace is a single-table tablespace that is created in
    its own data file rather than in the system tablespace. Tables are created in
    file-per-table tablespaces when the `innodb_file_per_table` option is enabled.
    Otherwise, `InnoDB` tables are created in the system tablespace. Each file-per-table
    tablespace is represented by a single `.ibd` data file, which is created in the
    database directory by default.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 文件表空间是在其自己的数据文件中创建的单表表空间，而不是在系统表空间中创建。当启用innodb_file_per_table选项时，表将在文件表空间中创建。否则，InnoDB表将在系统表空间中创建。每个文件表空间由一个.ibd数据文件表示，默认情况下在数据库目录中创建。
- en: File-per-table tablespaces support `DYNAMIC` and `COMPRESSED` row formats, which
    support features such as off-page storage for variable length data and table compression.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文件表空间支持DYNAMIC和COMPRESSED行格式，支持变长数据的离页存储和表压缩等功能。
- en: To know the advantages and disadvantages of file-per-table tablespaces, refer
    to [https://dev.mysql.com/doc/refman/8.0/en/innodb-multiple-tablespaces.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-multiple-tablespaces.html)
    and [https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解文件表空间的优缺点，请参考[https://dev.mysql.com/doc/refman/8.0/en/innodb-multiple-tablespaces.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-multiple-tablespaces.html)和[https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_file_per_table)。
- en: '**General tablespace**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用表空间**'
- en: A general tablespace is a shared `InnoDB` tablespace created using `CREATE TABLESPACE`
    syntax. General tablespaces can be created outside of the MySQL `data directory`
    , are capable of holding multiple tables, and support tables of all row formats.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通用表空间是使用CREATE TABLESPACE语法创建的共享InnoDB表空间。通用表空间可以在MySQL数据目录之外创建，能够容纳多个表，并支持所有行格式的表。
- en: '**UNDO tablespace**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**UNDO表空间**'
- en: An undo log is a collection of undo log records associated with a single transaction.
    An undo log record contains information about how to undo the latest change by
    a transaction to a clustered index record. If another transaction needs to see
    the original data (as part of a consistent read operation), the unmodified data
    is retrieved from the undo log records. Undo logs exist within undo log segments,
    which are contained within rollback segments. Rollback segments reside in the
    system tablespace, temporary tablespace, and undo tablespaces.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 撤消日志是与单个事务相关联的撤消日志记录的集合。撤消日志记录包含有关如何撤消事务对聚集索引记录的最新更改的信息。如果另一个事务需要查看原始数据（作为一致性读取操作的一部分），则从撤消日志记录中检索未修改的数据。撤消日志存在于撤消日志段中，这些段包含在回滚段中。回滚段驻留在系统表空间、临时表空间和UNDO表空间中。
- en: An `UNDO` tablespace comprises one or more files that contain undo logs. The
    number of undo tablespaces used by `InnoDB` is defined by the `innodb_undo_tablespaces`
    configuration option.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: UNDO表空间包括一个或多个包含撤消日志的文件。InnoDB使用的UNDO表空间数量由innodb_undo_tablespaces配置选项定义。
- en: These logs are used to roll back transactions and also for multi-version concurrency
    control.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志用于回滚事务，也用于多版本并发控制。
- en: '**Data dictionary**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据字典**'
- en: The `data dictionary` is metadata that keeps track of database objects such
    as tables, indexes, and table columns. For the MySQL `data dictionary`, introduced
    in MySQL 8.0, metadata is physically located in `InnoDB` file-per-table tablespace
    files in the MySQL database directory. For the `InnoDB data dictionary`, metadata
    is physically located in the `InnoDB` system tablespace.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据字典是元数据，用于跟踪数据库对象，如表、索引和表列。对于MySQL 8.0中引入的MySQL数据字典，元数据实际上位于MySQL数据库目录中的InnoDB文件表空间文件中。对于InnoDB数据字典，元数据实际上位于InnoDB系统表空间中。
- en: '**MySQL data dictionary**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL数据字典**'
- en: MySQL server incorporates a transactional `data dictionary` that stores information
    about database objects. In previous MySQL releases, dictionary data was stored
    in metadata files, nontransactional tables, and storage engine-specific `data
    dictionaries`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器包含一个事务性的`数据字典`，用于存储有关数据库对象的信息。在以前的MySQL版本中，字典数据存储在元数据文件、非事务表和特定于存储引擎的`数据字典`中。
- en: In previous MySQL releases, dictionary data was partially stored in metadata
    files. Issues with file-based metadata storage included expensive file scans,
    susceptibility to filesystem-related bugs, complex code for handling of replication
    and crash recovery failure states, and a lack of extensibility that made it difficult
    to add metadata for new features and relational objects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的MySQL版本中，字典数据部分存储在元数据文件中。基于文件的元数据存储的问题包括昂贵的文件扫描、易受文件系统相关错误的影响、用于处理复制和崩溃恢复失败状态的复杂代码，以及缺乏可扩展性，使得难以为新功能和关系对象添加元数据。
- en: 'Benefits of the MySQL `data dictionary`  include:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL `数据字典`的好处包括：
- en: Simplicity of a centralized `data dictionary`  schema that uniformly stores
    dictionary data
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一存储字典数据的集中`数据字典`模式的简单性
- en: Removal of file-based metadata storage
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除基于文件的元数据存储
- en: Transactional, crash-safe storage of dictionary data
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典数据的事务性、崩溃安全存储
- en: Uniform and centralized caching for dictionary objects
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典对象的统一和集中缓存
- en: A simpler and improved implementation for some `INFORMATION_SCHEMA` tables
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些`INFORMATION_SCHEMA`表的更简单和改进的实现
- en: Atomic DDL
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子DDL
- en: 'The metadata files listed as follows are removed from MySQL. Unless otherwise
    noted, data previously stored in metadata files is now stored in `data dictionary`
    tables:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出的元数据文件已从MySQL中删除。除非另有说明，以前存储在元数据文件中的数据现在存储在`数据字典`表中：
- en: '`.frm` files: Table metadata files for table definition.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.frm`文件：表定义的表元数据文件。'
- en: '`.par` files: Partition definition files. `InnoDB` stopped using the `.definition` partition files
    in MySQL 5.7 with the introduction of native partitioning support for `InnoDB`
    tables.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.par`文件：分区定义文件。`InnoDB`在MySQL 5.7中停止使用`.definition`分区文件，引入了`InnoDB`表的本机分区支持。'
- en: '`.trn` files: Trigger namespace files.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.trn`文件：触发器命名空间文件。'
- en: '`.trg` files: Trigger parameter files.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.trg`文件：触发器参数文件。'
- en: '`.isl` files: The `InnoDB` symbolic link files containing the location of file-per-table
    tablespace files created outside of the MySQL `data directory` .'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.isl`文件：包含在MySQL `data directory`之外创建的基于文件的表空间文件的`InnoDB`符号链接文件。'
- en: '`db.opt` files: Database configuration files. These files, one per database
    directory, contain database default character set attributes.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.opt`文件：数据库配置文件。这些文件，每个数据库目录一个，包含数据库默认字符集属性。'
- en: 'The limitations of MySQL `data dictionary` are as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL `数据字典`的限制如下：
- en: Manual creation of database directories under the `data directory`  (for example,
    with `mkdir`) is unsupported. Manually created database directories are not recognized
    by the MySQL server.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`data directory`下手动创建数据库目录（例如，使用`mkdir`）是不受支持的。手动创建的数据库目录不被MySQL服务器识别。
- en: Moving data stored in MyISAM tables by copying and moving MyISAM data files
    is unsupported. Tables moved using this method are not discovered by the server.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过复制和移动MyISAM数据文件来移动存储在MyISAM表中的数据是不受支持的。使用此方法移动的表不会被服务器发现。
- en: Simple backup and restore of individual MyISAM tables using copied data files
    is unsupported.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持使用复制的数据文件对个别MyISAM表进行简单备份和还原。
- en: DDL operations take longer due to writing to storage, undo logs, and redo logs
    instead of `.frm` files.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于写入存储、撤销日志和重做日志，DDL操作需要更长的时间，而不是`.frm`文件。
- en: '**Transactional storage of dictionary data**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**字典数据的事务性存储**'
- en: The `data dictionary` schema stores dictionary data in transactional (`InnoDB`)
    tables. `data dictionary` tables are located in the `mysql` database together
    with `non-data dictionary` system tables.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`数据字典`模式将字典数据存储在事务性（`InnoDB`）表中。`数据字典`表位于`mysql`数据库中，与`非数据字典`系统表一起。'
- en: '`data dictionary` tables are created in a single `InnoDB` tablespace named
    `mysql.ibd` in the MySQL `data directory` . The `mysql.ibd` tablespace file must
    reside in the MySQL `data directory` and its name cannot be modified or used by
    another tablespace. Previously, these tables were created in individual tablespace
    files in the MySQL database directory.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`数据字典`表在名为`mysql.ibd`的单个`InnoDB`表空间中创建在MySQL `data directory`中。`mysql.ibd`表空间文件必须驻留在MySQL
    `data directory`中，其名称不能被修改或被其他表空间使用。以前，这些表是在MySQL数据库目录中的单独表空间文件中创建的。'
- en: Changing the number or size of InnoDB redo log files
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改InnoDB重做日志文件的数量或大小
- en: The `ib_logfile0` file and `ib_logfile1` are the default `InnoDB` redo log files
    created inside the `data directory`, with 48 MB each. If you wish to change the
    size of the redo log files, you can simply change it in the configuration file
    and restart MySQL. In previous versions, you had to do a slow shutdown of MySQL
    server, remove the redo log files, change the config file, and then start MySQL
    server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ib_logfile0`文件和`ib_logfile1`是默认的`InnoDB`重做日志文件，每个文件大小为48 MB，创建在`data directory`内。如果您希望更改重做日志文件的大小，只需在配置文件中更改并重新启动MySQL。在以前的版本中，您必须对MySQL服务器进行缓慢的关闭，删除重做日志文件，更改配置文件，然后启动MySQL服务器。'
- en: As of MySQL 8, `InnoDB` detects that the `innodb_log_file_size` differs from
    the redo log file size. It writes a log checkpoint, closes and removes the old
    log files, creates new log files at the requested size, and opens the new log
    files.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8开始，`InnoDB`检测到`innodb_log_file_size`与重做日志文件大小不同。它写入一个日志检查点，关闭并删除旧的日志文件，以请求的大小创建新的日志文件，并打开新的日志文件。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Check the sizes of the current files:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查当前文件的大小：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Stop the MySQL server and make sure that it shuts down without errors:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止MySQL服务器，并确保它在没有错误的情况下关闭：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Edit the configuration file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑配置文件：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start the MySQL server:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MySQL服务器：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can verify what MySQL did in the log file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以验证MySQL在日志文件中的操作：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also see the new log files created:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以查看新创建的日志文件：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Resizing the InnoDB system tablespace
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整InnoDB系统表空间的大小
- en: The `ibdata1` file in the `data directory`  is the default system tablespace.
    You can configure `ibdata1` using the `innodb_data_file_path` and `innodb_data_home_dir`
    configuration options. The `innodb_data_file_path` configuration option is used
    to configure the `InnoDB` system tablespace data files. The value of `innodb_data_file_path`
    should be a list of one or more data file specifications. If you name two or more
    data files, separate them by semicolon (`;`) characters.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`数据目录`中的`ibdata1`文件是默认的系统表空间。您可以使用`innodb_data_file_path`和`innodb_data_home_dir`配置选项来配置`ibdata1`。`innodb_data_file_path`配置选项用于配置`InnoDB`系统表空间数据文件。`innodb_data_file_path`的值应该是一个或多个数据文件规范的列表。如果命名了两个或更多数据文件，请使用分号(`;`)字符将它们分开。'
- en: 'If you want a tablespace containing a fixed-size 50 MB data file named `ibdata1`
    and a 50 MB auto-extending file named `ibdata2` in the `data directory`, it can
    be configured like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在`数据目录`中包含一个固定大小的50MB数据文件名为`ibdata1`和一个50MB自动扩展文件名为`ibdata2`的表空间，可以进行如下配置：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the `ibdata` files become so big, especially when `innodb_file_per_table`
    is not enabled and the disk becomes full, you might want to add another data file
    on another disk.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`ibdata`文件变得如此庞大，特别是当未启用`innodb_file_per_table`且磁盘变满时，您可能希望在另一个磁盘上添加另一个数据文件。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Resizing the `InnoDB` system tablespace is one topic that you would love to
    know more and more about. Let's get into its details.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 调整`InnoDB`系统表空间的大小是一个您会越来越想了解更多的主题。让我们深入了解其细节。
- en: Increasing the InnoDB system tablespace
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加InnoDB系统表空间
- en: 'Assuming that `innodb_data_file_path` is `ibdata1:50M:autoextend`, the size
    has reached 76 MB, and your disk is just 100 MB, you can add another disk and
    configure to add another tablespace onto the new disk:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`innodb_data_file_path`是`ibdata1:50M:autoextend`，大小已达到76MB，您的磁盘只有100MB，您可以添加另一个磁盘并配置在新磁盘上添加另一个表空间：
- en: 'Stop MySQL server:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止MySQL服务器：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check the size of the existing `ibdata1` file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查现有`ibdata1`文件的大小：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Mount the new disk. Assuming it is mounted on `/var/lib/mysql_extend`, change
    the ownership to `mysql`; make sure that the file is not already created. If you
    are using AppArmour or SELinux, make sure you set the alias or context correctly:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载新磁盘。假设它挂载在`/var/lib/mysql_extend`上，更改所有权为`mysql`；确保文件尚未创建。如果您使用AppArmour或SELinux，请确保正确设置别名或上下文：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the `my.cnf` and add the following:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`my.cnf`并添加以下内容：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Since the existing size of `ibdata1` is 76 MB, you have to choose a maxvalue
    of at least 76 MB. The next `ibdata` file will be created on the new disk mounted
    on `/var/lib/mysql_extend/`. The `innodb_data_home_dir` option should be specified;
    otherwise, `mysqld` looks at a different path and fails with an error:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`ibdata1`的现有大小为76MB，您必须选择至少76MB的maxvalue。下一个`ibdata`文件将在挂载在`/var/lib/mysql_extend/`上的新磁盘上创建。应该指定`innodb_data_home_dir`选项；否则，`mysqld`会查看不同的路径并因错误而失败：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Start MySQL server:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MySQL服务器：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Verify the new file. Since you have mentioned it as 50 MB, the initial size
    of the file would be 50 MB:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证新文件。由于您已将其指定为50MB，因此文件的初始大小将为50MB：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Shrinking the InnoDB system tablespace
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩小InnoDB系统表空间
- en: If you are not using `innodb_file_per_table`, then all of the table data is
    stored in system tablespace. If you drop a table, the space is not reclaimed.
    You can shrink the system tablespace and reclaim the disk space. This requires
    a major downtime, so it is recommended to perform the task on a slave by taking
    it out of rotation and then promoting it to master.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用`innodb_file_per_table`，则所有表数据都存储在系统表空间中。如果删除表，则不会回收空间。您可以缩小系统表空间并回收磁盘空间。这需要较长的停机时间，因此建议在从服务器上执行该任务，并将其从轮换中取出，然后将其提升为主服务器。
- en: 'You can check the free space by querying the `INFORMATION_SCHEMA` tables:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查询`INFORMATION_SCHEMA`表来检查可用空间：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Stop the writes to the database. If it is a master, `mysql> SET @@GLOBAL.READ_ONLY=1;`;
    if it is a slave, stop the replication and save the binary log coordinates:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止对数据库的写入。如果是主服务器，则`mysql> SET @@GLOBAL.READ_ONLY=1;`；如果是从服务器，请停止复制并保存二进制日志坐标：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Take a full backup using `mysqldump` or `mydumper`, excluding the `sys` database:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mysqldump`或`mydumper`进行完整备份，不包括`sys`数据库：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Stop MySQL server:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止MySQL服务器：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Remove all the `*.ibd`, `*.ib_log`, and `ibdata` files. If you are using only
    `InnoDB` tables, you can wipe off the `data directory` and all the locations where
    system table spaces are stored (`innodb_data_file_path`):'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有`*.ibd`、`*.ib_log`和`ibdata`文件。如果只使用`InnoDB`表，可以清除`数据目录`和存储系统表空间的所有位置(`innodb_data_file_path`)：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Initialize `data directory`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化`数据目录`：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Get the temporary password:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取临时密码：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start MySQL and change the password:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MySQL并更改密码：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Restore the backup. Use the temporary password to connect to MySQL:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恢复备份。使用临时密码连接到MySQL：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If it is a master, enable writes by
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是主服务器，请启用写入
- en: '`mysql> SET @@GLOBAL.READ_ONLY=0;`. If it is a slave, restore the replication
    by executing the `CHANGE MASTER TO COMMAND` and `START SLAVE;`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql> SET @@GLOBAL.READ_ONLY=0;`。如果是从服务器，请通过执行`CHANGE MASTER TO COMMAND`和`START
    SLAVE;`来恢复复制。'
- en: Creating file-per-table tablespaces outside the data directory
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据目录之外创建基于文件的表空间
- en: In the previous section, you understood how to create a system tablespace in
    another disk. In this section, you will learn how to create an individual tablespace
    in another disk.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您了解了如何在另一个磁盘上创建系统表空间。在本节中，您将学习如何在另一个磁盘上创建单独的表空间。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You can mount a new disk with particular performance or capacity characteristics,
    such as a fast SSD or a high-capacity HDD, onto a directory and configure `InnoDB`
    to use that. Within the destination directory, MySQL creates a subdirectory corresponding
    to the database name, and within that, a `.ibd` file for the new table. Remember,
    you cannot use the `DATA DIRECTORY` clause with the `ALTER TABLE` statement:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以挂载具有特定性能或容量特性的新磁盘，例如快速SSD或高容量HDD，到目录并配置`InnoDB`以使用该磁盘。在目标目录中，MySQL创建一个与数据库名称对应的子目录，并在其中为新表创建一个`.ibd`文件。请记住，您不能在`ALTER
    TABLE`语句中使用`DATA DIRECTORY`子句：
- en: 'Mount the new disk and change the permissions. If you are using AppArmour or
    SELinux, make sure you set the alias or context correctly:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载新磁盘并更改权限。如果您使用AppArmour或SELinux，请确保正确设置别名或上下文：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a table:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建表：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Check the `.ibd` file created in the new device:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查在新设备上创建的`.ibd`文件：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copying file-per-table tablespaces to another instance
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件表空间复制到另一个实例
- en: 'Copying the tablespace file (the `.ibd` file) is the fastest way of moving
    data around, rather than exporting and importing through `mysqldump` or `mydumper`.
    The data is available immediately rather than having to be reinserted and the
    indexes rebuilt. There are many reasons why you might copy an `InnoDB` file-per-table
    tablespace to a different instance:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 复制表空间文件（`.ibd`文件）是移动数据的最快方式，而不是通过`mysqldump`或`mydumper`导出和导入。数据立即可用，而不必重新插入和重建索引。有许多原因可能会复制`InnoDB`文件表空间到不同的实例：
- en: To run reports without putting extra load on a production server
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产服务器上运行报告而不会给服务器增加额外负载
- en: To set up identical data for a table on a new slave server
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新的从服务器设置相同的表数据
- en: To restore a backed-up version of a table or partition after a problem or mistake
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在出现问题或错误后恢复表或分区的备份版本
- en: To have busy tables on an SSD device, or large tables on a high-capacity HDD
    device
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SSD设备上有繁忙的表，或在高容量HDD设备上有大表
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The outline is: you create the table on the destination with the same table
    definition and execute the `DISCARD TABLESPACE` command on the destination. Execute
    `FLUSH TABLES FOR EXPORT` on the source, which ensures that changes to the named
    table have been flushed to disk, and so a binary table copy can be made while
    the instance is running. After that statement, the table is locked and does not
    accept any writes; however, reads can happen. You can copy the `.ibd` file of
    that table to the destination, execute `UNLOCK` tables on source, and finally
    execute the `IMPORT TABLESPACE` command, which accepts the copied `.ibd` file.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 概述是：在目的地创建与源上相同表定义的表，并在目的地上执行`DISCARD TABLESPACE`命令。在源上执行`FLUSH TABLES FOR EXPORT`，这确保了对命名表的更改已刷新到磁盘，因此可以在实例运行时进行二进制表复制。在该语句之后，表被锁定，不接受任何写入；但是，可以进行读取。您可以将该表的`.ibd`文件复制到目的地，在源上执行`UNLOCK`表，最后执行`IMPORT
    TABLESPACE`命令，该命令接受复制的`.ibd`文件。
- en: For example, you want to copy the `events_history` table in a test database
    from one server (source) to another server (destination).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您希望将测试数据库中的`events_history`表从一个服务器（源）复制到另一个服务器（目的地）。
- en: 'Create `event_history` if not created already and insert a few rows for the
    demo:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未创建，请创建`event_history`并插入一些行以进行演示：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Copy full table
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制完整表
- en: '**On destination**: Create the table with the same definition as on the source:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：创建与源上相同定义的表：'
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**On destination**: Discard the tablespace:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：丢弃表空间：'
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**On source**: Execute `FLUSH TABLES FOR EXPORT`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在源上**：执行`FLUSH TABLES FOR EXPORT`：'
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**On source**: Copy all the table-related files (`.ibd`, `.cfg`) from the `data
    directory` directory of the source to the `data directory`  of the destination:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在源上**：从源的`数据目录`目录中复制所有与表相关的文件（`.ibd`，`.cfg`）到目的地的`数据目录`：'
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**On source**: Unlock the table for writes:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在源上**：解锁表以进行写入：'
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**On destination**: Make sure that the ownership of the files is set to `mysql`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：确保文件的所有权设置为`mysql`：'
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**On destination**: Import the tablespace. You can ignore the warnings as long
    as the table definitions are the same. If you have copied the `.cfg` files as
    well, the warnings won''t occur:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：导入表空间。只要表定义相同，就可以忽略警告。如果您也复制了`.cfg`文件，则不会出现警告：'
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**On destination**: Verify the data:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：验证数据：'
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If you are doing it on a production system, to minimize downtime, you can copy
    to the files locally, which is very fast. Immediately execute `UNLOCK TABLES`
    and then copy the files to the destination. If you cannot afford downtime, you
    can use Percona XtraBackup, back up the single table, and apply the redo logs,
    which generate the `.ibd` files. You can copy them to the destination and import.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在生产系统上进行操作，为了最小化停机时间，您可以将文件复制到本地，这非常快。立即执行`UNLOCK TABLES`，然后将文件复制到目的地。如果您无法承受停机时间，可以使用Percona
    XtraBackup，备份单个表，并应用重做日志，生成`.ibd`文件。您可以将它们复制到目的地并导入。
- en: Copying individual partitions of a table
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制表的单个分区
- en: 'You added a new partition of the `events_history` table on the source and you
    wish to copy only the new partitions to the destination. For the sake of your
    understanding, create new partitions on the `events_history` table and insert
    a few rows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您在源上添加了`events_history`表的新分区，并且希望仅将新分区复制到目的地。为了您的理解，请在`events_history`表上创建新分区并插入一些行：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Suppose you want to copy the newly created partition to the destination.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望将新创建的分区复制到目的地。
- en: '**On destination**: Create the partitions:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：创建分区：'
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**On destination:** Discard only the partitions you want to import:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：仅丢弃要导入的分区：'
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**On source:** Execute `FLUSH TABLE FOR EXPORT`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在源上**：执行`FLUSH TABLE FOR EXPORT`：'
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**On source:** Copy the `.ibd` files of the partitions to the destination:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在源上**：将分区的`.ibd`文件复制到目的地：'
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**On destination:** Make sure that the `.ibd` files of the required partitions
    are copied and have the owner as `mysql`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地**：确保所需分区的`.ibd`文件已复制并且所有者为`mysql`：'
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**On destination:** Execute `IMPORT PARTITION TABLESPACE`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地上：**执行`IMPORT PARTITION TABLESPACE`：'
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You can ignore the warnings as long as the table definitions are the same.
    If you have copied the `.cfg` files also, the warning won''t occur:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 只要表定义相同，您可以忽略警告。如果您也复制了`.cfg`文件，则不会出现警告：
- en: '[PRE44]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**On destination:** Verify the data:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在目的地上：**验证数据：'
- en: '[PRE45]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: See also
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/tablespace-copying.html](https://dev.mysql.com/doc/refman/8.0/en/tablespace-copying.html)
    to find out more about the limitations of this procedure.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[https://dev.mysql.com/doc/refman/8.0/en/tablespace-copying.html](https://dev.mysql.com/doc/refman/8.0/en/tablespace-copying.html)以了解有关此过程的限制的更多信息。
- en: Managing UNDO tablespace
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理UNDO表空间
- en: You can manage the size of an `UNDO` tablespace through the dynamic variable
    `innodb_max_undo_log_size`, which is 1 GB by default, and the number of `UNDO`
    tablespaces through `innodb_undo_tablespaces`, which is 2 GB by default and dynamic
    from MySQL 8.0.2.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过动态变量`innodb_max_undo_log_size`（默认为1GB）和`innodb_undo_tablespaces`（默认为2GB，从MySQL
    8.0.2开始为动态）来管理`UNDO`表空间的大小。
- en: By default, `innodb_undo_log_truncate` is enabled. Tablespaces that exceed the
    threshold value defined by `innodb_max_undo_log_size` are marked for truncation.
    Only undo tablespaces can be truncated. Truncating undo logs that reside in the
    system tablespace is not supported. For truncation to occur, there must be at
    least two undo tablespaces.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`innodb_undo_log_truncate`已启用。超过`innodb_max_undo_log_size`定义的阈值的表空间将被标记为截断。只有撤消表空间可以被截断。不支持截断驻留在系统表空间中的撤消日志。要进行截断，必须至少有两个撤消表空间。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Verify the size of the `UNDO` logs:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 验证`UNDO`日志的大小：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Suppose you want to reduce the files that are more than 15 MB. Remember, only
    one undo tablespace can be truncated. Selection of an undo tablespace for truncation
    is performed in a circular fashion to avoid truncating the same undo tablespace
    every time. After all the rollback segments in the undo tablespace are freed,
    the truncate operation runs and the undo tablespace is truncated to its initial
    size. The initial size of an undo tablespace file is 10 MB:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要减少大于15MB的文件。请记住，只能截断一个撤消表空间。选择要截断的撤消表空间是循环进行的，以避免每次都截断相同的撤消表空间。在撤消表空间中的所有回滚段被释放后，截断操作将运行，并且撤消表空间将被截断为其初始大小。撤消表空间文件的初始大小为10MB：
- en: 'Make sure that the `innodb_undo_log_truncate` is enabled:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`innodb_undo_log_truncate`已启用：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Set `innodb_max_undo_log_size` to 15 MB:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`innodb_max_undo_log_size`设置为15MB：
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'An undo tablespace cannot be truncated until its rollback segments are freed.
    Normally, the purge system frees rollback segments once every 128 times that purge
    is invoked. To expedite the truncation of undo tablespaces, use the `innodb_purge_rseg_truncate_frequency`
    option to temporarily increase the frequency with which the purge system frees
    rollback segments:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直到其回滚段被释放，撤消表空间才能被截断。通常，清除系统每128次调用一次。为了加快撤消表空间的截断，使用`innodb_purge_rseg_truncate_frequency`选项临时增加清除系统释放回滚段的频率：
- en: '[PRE49]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Usually on a busy system, at least one purge operation might have initiated
    and the truncation would have started. If you are practicing on your machine,
    you can initiate the purge by creating a big transaction:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常在繁忙的系统上，至少会启动一个清除操作，并且截断将已经开始。如果您在自己的机器上练习，可以通过创建一个大事务来启动清除：
- en: '[PRE50]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'While the delete is in progress, you can watch the growth of the `UNDO` log
    files:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在删除正在进行时，您可以观察`UNDO`日志文件的增长：
- en: '[PRE51]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You may notice that `undo_001` is truncated to 10 MB while `undo_002` is growing,
    accommodating the deleted rows of the `DELETE` statement.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到`undo_001`被截断为10MB，而`undo_002`正在增长，以容纳`DELETE`语句的已删除行。
- en: 'After some time, you can notice that `unod_002` is also truncated to 10 MB:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一段时间后，您可能会注意到`unod_002`也被截断为10MB：
- en: '[PRE52]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Once you''ve achieved the reduction of the `UNDO` tablespace, set the `innodb_purge_rseg_truncate_frequency`
    to a default of `128`:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您已经减少了`UNDO`表空间，将`innodb_purge_rseg_truncate_frequency`设置为默认值`128`：
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Managing general tablespace
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理通用表空间
- en: 'Until MySQL 8, there were two types of tablespaces: system tablespace and individual
    tablespace. There are advantages and disadvantages of both types. To overcome
    the disadvantages, general tablespaces are introduced in MySQL 8\. Similar to
    system tablespaces, general tablespaces are shared tablespaces that can store
    data for multiple tables. But you have fine control over a general tablespace.
    Multiple tables in fewer general tablespaces consume less memory for tablespace
    metadata than the same number of tables in separate file-per-table tablespaces.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 直到MySQL 8之前，有两种类型的表空间：系统表空间和单独的表空间。这两种类型都有优点和缺点。为了克服缺点，MySQL 8引入了通用表空间。与系统表空间类似，通用表空间是可以存储多个表数据的共享表空间。但是，您可以对通用表空间进行精细控制。较少的通用表空间中的多个表消耗的表空间元数据比在单独的文件表表空间中的相同数量的表少。
- en: 'The limitations are as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 限制如下：
- en: Similarly to the system tablespace, truncating or dropping tables stored in
    a general tablespace creates free space internally in the general tablespace `.ibd`
    data file, which can only be used for new `InnoDB` data. Space is not released
    back to the operating system as it is for file-per-table tablespaces.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与系统表空间类似，截断或删除存储在通用表空间中的表会在通用表空间的`.ibd`数据文件中创建内部的可用空间，该空间只能用于新的`InnoDB`数据。与文件表表空间一样，空间不会释放回操作系统。
- en: Transportable tablespaces are not supported for tables that belong to a general
    tablespace.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用表空间不支持属于通用表空间的表的可传输表空间。
- en: In this section, you will learn how to create a general tablespace and add and
    remove the tables from it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何创建通用表空间以及向其中添加和删除表。
- en: '**Practical usage:**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**实际用法：**'
- en: Initially, `InnoDB` maintains a `.frm` file, which contains table structure.
    MySQL needs to open and close the `.frm` file, which degrades performance. With
    MySQL 8, the `.frm` files are removed and all of the metadata is handled using
    a transactional `data dictionary`. This enables the use of the general tablespace.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，`InnoDB`维护一个包含表结构的`.frm`文件。MySQL需要打开和关闭`.frm`文件，这会降低性能。使用MySQL 8，`.frm`文件被删除，所有的元数据都使用事务性`数据字典`处理。这使得可以使用通用表空间。
- en: Suppose you are using MySQL 5.7 or earlier for SaaS or multi-tenant, where you
    have a separate schema for each customer and each customer has hundreds of tables.
    If your customers grow, you will notice the performance issues. But with the removal
    of `.frm` files from MySQL 8, the performance is greatly improved. Moreover, you
    can create a separate tablespace for each schema (customer).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在为每个客户单独创建模式，并且每个客户都有数百个表的SaaS或多租户中使用MySQL 5.7或更早版本。如果您的客户增长，您将注意到性能问题。但是，随着MySQL
    8中`.frm`文件的删除，性能得到了极大改善。此外，您可以为每个模式（客户）创建单独的表空间。
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's get started with creating it, first.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建它。
- en: Create a general tablespace
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建通用表空间
- en: You can create a general tablespace either in the MySQL `data directory` or
    outside it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在MySQL的`数据目录`内或外创建通用表空间。
- en: 'To create one in a MySQL `data directory`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要在MySQL的`数据目录`中创建一个：
- en: '[PRE54]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'To create the tablespace outside it, mount the new disk on `/var/lib/mysql_general_ts`
    and change the ownership to `mysql`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要在外部创建表空间，请将新磁盘挂载到`/var/lib/mysql_general_ts`并将所有权更改为`mysql`：
- en: '[PRE55]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Adding tables to a general tablespace
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向通用表空间添加表
- en: 'You can add a table to a tablespace while creating it, or you can run the `ALTER`
    command to move a table from one tablespace to another:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，您可以将表添加到表空间中，或者可以运行`ALTER`命令将表从一个表空间移动到另一个表空间：
- en: '[PRE56]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Suppose you want to move the `employees` table to `TABLESPACE ts2`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将`employees`表移动到`TABLESPACE ts2`：
- en: '[PRE57]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You can notice the increase in the `ts2.ibd` file:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以注意到`ts2.ibd`文件的增加：
- en: '[PRE58]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Moving non-partitioned tables between tablespaces
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表空间之间移动非分区表
- en: 'You can move tables as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式移动表：
- en: This is how to move tables from one general tablespace to another.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是如何将表从一个通用表空间移动到另一个通用表空间。
- en: 'Suppose you want to move the `employees` table from `ts2` to `ts1`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将`employees`表从`ts2`移动到`ts1`：
- en: '[PRE59]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This is how to move tables to file-per-table.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是如何将表移动到每个文件一个表。
- en: 'Suppose you want to move the `employees` table from `ts1` to file per table:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将`employees`表从`ts1`移动到每个文件一个表：
- en: '[PRE60]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This is how to move tables to the system tablespace.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是如何将表移动到系统表空间。
- en: 'Suppose you want to move the `employees` table from file per table to the system
    tablespace:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将`employees`表从每个文件一个表移动到系统表空间：
- en: '[PRE61]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Managing partitioned tables in a general tablespace
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在通用表空间中管理分区表
- en: 'You can create a table with partitions in multiple tablespaces:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在多个表空间中创建具有分区的表：
- en: '[PRE62]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: You can add a new partition in another tablespace, or if you do not mention
    anything, it will be created in table's default tablespace. An `ALTER TABLE tbl_name
    TABLESPACE tablespace_name` operation on a partitioned table only modifies the
    table's default tablespace. It does not move the table partitions. However, after
    changing the default tablespace, an operation that rebuilds the table (such as
    an `ALTER TABLE` operation that uses `ALGORITHM=COPY`) moves the partitions to
    the default tablespace if another tablespace is not defined explicitly using the
    `TABLESPACE` clause.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在另一个表空间中添加新的分区，或者如果您没有提及任何内容，它将在表的默认表空间中创建。对分区表执行的`ALTER TABLE tbl_name TABLESPACE
    tablespace_name`操作只会修改表的默认表空间。它不会移动表分区。但是，在更改默认表空间之后，重建表的操作（例如使用`ALGORITHM=COPY`的`ALTER
    TABLE`操作）将分区移动到默认表空间，如果没有使用`TABLESPACE`子句显式定义另一个表空间。
- en: 'If you wish to move the partitions across a tablespace, you need to do `REORGANIZE` on
    the partition. For example, you want to move partition `p3` to `ts2`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在表空间之间移动分区，则需要对分区进行`REORGANIZE`。例如，您想将分区`p3`移动到`ts2`：
- en: '[PRE63]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Dropping general tablespace
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除通用表空间
- en: 'You can use the `DROP TABLESPACE` command to drop the tablespace. However,
    all the tables inside that tablespace should be either dropped or moved:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`DROP TABLESPACE`命令删除表空间。但是，该表空间内的所有表应该被删除或移动：
- en: '[PRE64]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'You have to move the partitions `p2` and `p3` of table `table_gen_part_ts1`
    in the `ts2` tablespace to other tablespace before dropping:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除之前，您必须将`table_gen_part_ts1`表的`ts2`表空间中的分区`p2`和`p3`移动到其他表空间：
- en: '[PRE65]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now you can drop the tablespace:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以删除表空间：
- en: '[PRE66]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Compressing InnoDB tables
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InnoDB表的压缩
- en: You can create tables where the data is stored in compressed form. Compression
    can help to improve both raw performance and scalability. Compression means less
    data is transferred between disk and memory, and it takes up less space on disk
    and in memory.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建数据以压缩形式存储的表。压缩可以帮助提高原始性能和可伸缩性。压缩意味着在磁盘和内存之间传输的数据更少，并且在磁盘和内存中占用的空间更少。
- en: 'As per the MySQL documentation:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 根据MySQL文档：
- en: <q class="calibre48">"Because processors and cache memories have increased in
    speed more than disk storage devices, many workloads are disk-bound. Data compression
    enables smaller database size, reduced I/O, and improved throughput, at the small
    cost of increased CPU utilization. Compression is especially valuable for read-intensive
    applications, on systems with enough RAM to keep frequently used data in memory.
    The benefits are amplified for tables with secondary indexes, because index data
    is compressed also."</q>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <q class="calibre48">“因为处理器和缓存内存的速度增加比磁盘存储设备更快，许多工作负载受限于磁盘。数据压缩使数据库大小更小，减少I/O，提高吞吐量，代价是增加CPU利用率。压缩对于读密集型应用特别有价值，在具有足够RAM以将经常使用的数据保留在内存中的系统上。对于具有辅助索引的表，好处尤为明显，因为索引数据也被压缩。”</q>
- en: To enable compression, you need to create or alter the table with the `ROW_FORMAT=COMPRESSED
    KEY_BLOCK_SIZE` option. You can vary the `KEY_BLOCK_SIZE` parameter, which uses
    a smaller page size on disk than the configured `innodb_page_size` value. Compression
    won't work if the table is in system tablespace.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用压缩，需要使用`ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE`选项创建或更改表。您可以变化`KEY_BLOCK_SIZE`参数，该参数在磁盘上使用比配置的`innodb_page_size`值更小的页面大小。如果表在系统表空间中，则压缩将无法工作。
- en: To create a compressed table in a general tablespace, `FILE_BLOCK_SIZE` must
    be defined for the general tablespace, which is specified when the tablespace
    is created. The `FILE_BLOCK_SIZE` value must be a valid compressed page size in
    relation to the `innodb_page_size` value, and the page size of the compressed
    table, defined by the `CREATE TABLE` or `ALTER TABLE KEY_BLOCK_SIZE` clause, must
    be equal to `FILE_BLOCK_SIZE/1024`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要在通用表空间中创建压缩表，必须为创建表空间时指定的通用表空间定义`FILE_BLOCK_SIZE`。`FILE_BLOCK_SIZE`值必须是与`innodb_page_size`值相关的有效压缩页面大小，并且由`CREATE
    TABLE`或`ALTER TABLE KEY_BLOCK_SIZE`子句定义的压缩表的页面大小必须等于`FILE_BLOCK_SIZE/1024`。
- en: In the buffer pool, the compressed data is held in small pages, with a page
    size based on the `KEY_BLOCK_SIZE` value. For extracting or updating column values,
    MySQL also creates an uncompressed page in the buffer pool with uncompressed data.
    Within the buffer pool, any updates to the uncompressed page are also rewritten
    back to the equivalent compressed page. You might need to size your buffer pool
    to accommodate the additional data of both compressed and uncompressed pages,
    although uncompressed pages are evicted from the buffer pool when space is needed
    and then uncompressed again on the next access.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在缓冲池中，压缩数据以小页面的形式保存，页面大小基于`KEY_BLOCK_SIZE`值。对于提取或更新列值，MySQL还在缓冲池中创建一个包含未压缩数据的未压缩页面。在缓冲池中，对未压缩页面的任何更新也会被重写回等效的压缩页面。您可能需要调整缓冲池的大小，以容纳压缩和未压缩页面的额外数据，尽管在需要空间时未压缩页面会从缓冲池中驱逐，然后在下一次访问时再次解压缩。
- en: '**When to use compression?**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**何时使用压缩？**'
- en: In general, compression works best on tables that include a reasonable number
    of character string columns and where data is read far more often than it is written.
    Because there are no guaranteed ways to predict whether or not compression benefits
    a particular situation, always test with a specific workload and dataset running
    on a representative configuration.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，压缩最适用于包含合理数量的字符串列的表，以及数据被读取的频率远远高于写入的情况。因为没有保证的方法来预测压缩是否对特定情况有益，所以始终要使用特定的工作负载和数据集在代表性配置上进行测试。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: You need to choose the parameter `KEY_BLOCK_SIZE`. `innodb_page_size` is 16,000;
    ideally, half of that is 8,000, which is a good start. To tune compression, refer
    to [https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要选择参数`KEY_BLOCK_SIZE`。`innodb_page_size`为16,000；理想情况下，一半为8,000，这是一个很好的起点。要调整压缩，请参阅[https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html)。
- en: Enabling Compression for file_per_table Tables
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为`file_per_table`表启用压缩
- en: 'Make sure that `file_per_table` is enabled:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保启用了`file_per_table`：
- en: '[PRE67]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Specify the `ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8` in the create statement:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建语句中指定`ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8`：
- en: '[PRE68]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'If the table already exists, you can execute `ALTER`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表已经存在，可以执行`ALTER`：
- en: '[PRE69]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If you try to compress a table that is in the system tablespace, you will get
    an error:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试压缩位于系统表空间中的表，将会出现错误：
- en: '[PRE70]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Disabling Compression for file_per_table Tables
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为`file_per_table`表禁用压缩
- en: To disable compression, execute the `ALTER` table and specify `ROW_FORMAT=DYNAMIC`
    or `ROW_FORMAT=COMPACT`, followed by `KEY_BLOCK_SIZE=0`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用压缩，执行`ALTER`表并指定`ROW_FORMAT=DYNAMIC`或`ROW_FORMAT=COMPACT`，然后是`KEY_BLOCK_SIZE=0`。
- en: 'For example, if you do not want compression on the `event_history` table:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果不希望在`event_history`表上使用压缩：
- en: '[PRE71]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Enabling Compression for General Tablespace
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为通用表空间启用压缩
- en: First, you need to create a compressed tablespace by mentioning `FILE_BLOCK_SIZE`;
    you cannot alter the tablespace's `FILE_BLOCK_SIZE`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要通过提及`FILE_BLOCK_SIZE`来创建一个压缩表空间；您不能更改表空间的`FILE_BLOCK_SIZE`。
- en: If you wish to create a compressed table, you need to create the table in the
    general tablespace, where the compression is enabled; moreover `KEY_BLOCK_SIZE`
    must be equal to `FILE_BLOCK_SIZE/1024`. If you do not mention `KEY_BLOCK_SIZE`,
    the value will be automatically taken from `FILE_BLOCK_SIZE`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要创建压缩表，需要在启用压缩的通用表空间中创建表；此外，`KEY_BLOCK_SIZE`必须等于`FILE_BLOCK_SIZE/1024`。如果不提及`KEY_BLOCK_SIZE`，则该值将自动从`FILE_BLOCK_SIZE`中获取。
- en: 'You can create multiple compressed general tablespaces with different `FILE_BLOCK_SIZE` values
    and just add the tables to the desired tablespace:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建多个具有不同`FILE_BLOCK_SIZE`值的压缩通用表空间，并将表添加到所需的表空间中：
- en: 'Create a general compressed tablespace. You can create one with `FILE_BLOCK_SIZE` 
    of 8k and other with `FILE_BLOCK_SIZE` of 4k, and move all the tables with `KEY_BLOCK_SIZE`
    of 8 to 8k and 4 to 4k:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个通用的压缩表空间。您可以创建一个`FILE_BLOCK_SIZE`为8k的表空间，另一个为4k的表空间，并将所有`KEY_BLOCK_SIZE`为8的表移动到8k，将4移动到4k：
- en: '[PRE72]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Create compressed tables in those tablespaces by mentioning the `ROW_FORMAT=COMPRESSED`:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提及`ROW_FORMAT=COMPRESSED`在这些表空间中创建压缩表：
- en: '[PRE73]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'If you do not mention `ROW_FORMAT=COMPRESSED,` you will get an error:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不提及`ROW_FORMAT=COMPRESSED`，将会出现错误：
- en: '[PRE74]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Optionally, you can mention the `KEY_BLOCK_SIZE=FILE_BLOCK_SIZE/1024`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以提及`KEY_BLOCK_SIZE=FILE_BLOCK_SIZE/1024`：
- en: '[PRE75]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'If you mention anything other than `FILE_BLOCK_SIZE/1024`, you will get an
    error:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提及的内容不是`FILE_BLOCK_SIZE/1024`，将会出现错误：
- en: '[PRE76]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'You can move the tables from the `file_per_table` tablespace to the compressed
    general tablespace only if the `KEY_BLOCK_SIZE` matches. Otherwise, you will get
    an error:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有`KEY_BLOCK_SIZE`匹配时，才能将表从`file_per_table`表空间移动到压缩通用表空间。否则，将会出现错误：
- en: '[PRE77]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
